#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleDamageIndicatorComponent

#include "Basic.hpp"

#include "BP_CircleDamageIndicatorComponent_classes.hpp"
#include "BP_CircleDamageIndicatorComponent_parameters.hpp"


namespace SDK
{

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.ExecuteUbergraph_BP_CircleDamageIndicatorComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::ExecuteUbergraph_BP_CircleDamageIndicatorComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "ExecuteUbergraph_BP_CircleDamageIndicatorComponent");

	Params::BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "ReceiveTick");

	Params::BP_CircleDamageIndicatorComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.DmgTaken
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          FromLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::DmgTaken(const struct FVector& FromLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "DmgTaken");

	Params::BP_CircleDamageIndicatorComponent_C_DmgTaken Parms{};

	Parms.FromLocation = std::move(FromLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.RemoveIndicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_DamageIndicator_C*            Indicator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::RemoveIndicator(class UUI_DamageIndicator_C* Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "RemoveIndicator");

	Params::BP_CircleDamageIndicatorComponent_C_RemoveIndicator Parms{};

	Parms.Indicator = Indicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.CalculateAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          FromLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUI_DamageIndicator_C*            Indicator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::CalculateAngle(const struct FVector& FromLocation, class UUI_DamageIndicator_C* Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "CalculateAngle");

	Params::BP_CircleDamageIndicatorComponent_C_CalculateAngle Parms{};

	Parms.FromLocation = std::move(FromLocation);
	Parms.Indicator = Indicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.NearDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_DamageIndicator_C*            Indicator                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::NearDamage(class UUI_DamageIndicator_C** Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "NearDamage");

	Params::BP_CircleDamageIndicatorComponent_C_NearDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Indicator != nullptr)
		*Indicator = Parms.Indicator;
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.CustomSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_DamageIndicator_C*            IndicatorIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PointDamage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUI_DamageIndicator_C*            Indicator                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleDamageIndicatorComponent_C::CustomSettings(class UUI_DamageIndicator_C* IndicatorIn, bool PointDamage, class UUI_DamageIndicator_C** Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "CustomSettings");

	Params::BP_CircleDamageIndicatorComponent_C_CustomSettings Parms{};

	Parms.IndicatorIn = IndicatorIn;
	Parms.PointDamage = PointDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (Indicator != nullptr)
		*Indicator = Parms.Indicator;
}


// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.RemoveAllIndicators
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CircleDamageIndicatorComponent_C::RemoveAllIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleDamageIndicatorComponent_C", "RemoveAllIndicators");

	UObject::ProcessEvent(Func, nullptr);
}

}

