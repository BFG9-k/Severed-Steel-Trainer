#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TargetBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TargetBP.BP_TargetBP_C
// 0x0088 (0x02A8 - 0x0220)
class ABP_TargetBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   Health;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DisPile;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Disk;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Claw_2;                                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Claw_1;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ARM;                                               // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DiskPin;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TargetClaw_MoveClaw_2F61310349F4E83D998F9BA905B13C91; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TargetClaw__Direction_2F61310349F4E83D998F9BA905B13C91; // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TargetClaw;                                        // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetArm_MoveArm_38145AF94FD0E98892BDDB84BA5EA5C7; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TargetArm__Direction_38145AF94FD0E98892BDDB84BA5EA5C7; // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TargetArm;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiskHealth;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiskDamage;                                        // 0x0294(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay;                                             // 0x0298(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CollisionTypeOfDisk;                               // 0x029C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StarterDiskHealth;                                 // 0x02A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TargetBP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDamage();
	void TargetSpawn();
	void TargetKilled();
	void TargetArm__UpdateFunc();
	void TargetArm__FinishedFunc();
	void TargetClaw__UpdateFunc();
	void TargetClaw__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TargetBP_C">();
	}
	static class ABP_TargetBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TargetBP_C>();
	}
};
static_assert(alignof(ABP_TargetBP_C) == 0x000008, "Wrong alignment on ABP_TargetBP_C");
static_assert(sizeof(ABP_TargetBP_C) == 0x0002A8, "Wrong size on ABP_TargetBP_C");
static_assert(offsetof(ABP_TargetBP_C, UberGraphFrame) == 0x000220, "Member 'ABP_TargetBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Health) == 0x000228, "Member 'ABP_TargetBP_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, DisPile) == 0x000230, "Member 'ABP_TargetBP_C::DisPile' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Disk) == 0x000238, "Member 'ABP_TargetBP_C::Disk' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Claw_2) == 0x000240, "Member 'ABP_TargetBP_C::Claw_2' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Claw_1) == 0x000248, "Member 'ABP_TargetBP_C::Claw_1' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, ARM) == 0x000250, "Member 'ABP_TargetBP_C::ARM' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, DiskPin) == 0x000258, "Member 'ABP_TargetBP_C::DiskPin' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Root) == 0x000260, "Member 'ABP_TargetBP_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Base) == 0x000268, "Member 'ABP_TargetBP_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetClaw_MoveClaw_2F61310349F4E83D998F9BA905B13C91) == 0x000270, "Member 'ABP_TargetBP_C::TargetClaw_MoveClaw_2F61310349F4E83D998F9BA905B13C91' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetClaw__Direction_2F61310349F4E83D998F9BA905B13C91) == 0x000274, "Member 'ABP_TargetBP_C::TargetClaw__Direction_2F61310349F4E83D998F9BA905B13C91' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetClaw) == 0x000278, "Member 'ABP_TargetBP_C::TargetClaw' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetArm_MoveArm_38145AF94FD0E98892BDDB84BA5EA5C7) == 0x000280, "Member 'ABP_TargetBP_C::TargetArm_MoveArm_38145AF94FD0E98892BDDB84BA5EA5C7' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetArm__Direction_38145AF94FD0E98892BDDB84BA5EA5C7) == 0x000284, "Member 'ABP_TargetBP_C::TargetArm__Direction_38145AF94FD0E98892BDDB84BA5EA5C7' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, TargetArm) == 0x000288, "Member 'ABP_TargetBP_C::TargetArm' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, DiskHealth) == 0x000290, "Member 'ABP_TargetBP_C::DiskHealth' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, DiskDamage) == 0x000294, "Member 'ABP_TargetBP_C::DiskDamage' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, Delay) == 0x000298, "Member 'ABP_TargetBP_C::Delay' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, CollisionTypeOfDisk) == 0x00029C, "Member 'ABP_TargetBP_C::CollisionTypeOfDisk' has a wrong offset!");
static_assert(offsetof(ABP_TargetBP_C, StarterDiskHealth) == 0x0002A0, "Member 'ABP_TargetBP_C::StarterDiskHealth' has a wrong offset!");

}

