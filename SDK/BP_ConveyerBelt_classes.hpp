#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConveyerBelt

#include "Basic.hpp"

#include "BP_PropVoxelWorld_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ConveyerBelt.BP_ConveyerBelt_C
// 0x0068 (0x0B18 - 0x0AB0)
class ABP_ConveyerBelt_C final : public ABP_PropVoxelWorld_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ConveyerBelt_C;                  // 0x0AB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             Dims;                                              // 0x0AC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD4[0x4];                                      // 0x0AD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AALSBaseCharacter*>              MyCharacters;                                      // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Speed;                                             // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AEC[0x4];                                      // 0x0AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Convmat;                                           // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartOn;                                          // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          bIsOn;                                             // 0x0AF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AFA[0x2];                                      // 0x0AFA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTime;                                          // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsForTrain;                                       // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B01[0x3];                                      // 0x0B01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrainSpeed;                                        // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            MySimulatedActors;                                 // 0x0B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_ConveyerBelt(int32 EntryPoint);
	void LevelReady();
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void PostDataLoaded();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetDims(const struct FIntVector& InDims);
	void Rebuild(bool RebuildWorld);
	void ReRender();
	void TurnOn(bool bOn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ConveyerBelt_C">();
	}
	static class ABP_ConveyerBelt_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ConveyerBelt_C>();
	}
};
static_assert(alignof(ABP_ConveyerBelt_C) == 0x000008, "Wrong alignment on ABP_ConveyerBelt_C");
static_assert(sizeof(ABP_ConveyerBelt_C) == 0x000B18, "Wrong size on ABP_ConveyerBelt_C");
static_assert(offsetof(ABP_ConveyerBelt_C, UberGraphFrame_BP_ConveyerBelt_C) == 0x000AB0, "Member 'ABP_ConveyerBelt_C::UberGraphFrame_BP_ConveyerBelt_C' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, NavModifier) == 0x000AB8, "Member 'ABP_ConveyerBelt_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, Box) == 0x000AC0, "Member 'ABP_ConveyerBelt_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, Dims) == 0x000AC8, "Member 'ABP_ConveyerBelt_C::Dims' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, MyCharacters) == 0x000AD8, "Member 'ABP_ConveyerBelt_C::MyCharacters' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, Speed) == 0x000AE8, "Member 'ABP_ConveyerBelt_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, Convmat) == 0x000AF0, "Member 'ABP_ConveyerBelt_C::Convmat' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, bStartOn) == 0x000AF8, "Member 'ABP_ConveyerBelt_C::bStartOn' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, bIsOn) == 0x000AF9, "Member 'ABP_ConveyerBelt_C::bIsOn' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, LastTime) == 0x000AFC, "Member 'ABP_ConveyerBelt_C::LastTime' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, bIsForTrain) == 0x000B00, "Member 'ABP_ConveyerBelt_C::bIsForTrain' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, TrainSpeed) == 0x000B04, "Member 'ABP_ConveyerBelt_C::TrainSpeed' has a wrong offset!");
static_assert(offsetof(ABP_ConveyerBelt_C, MySimulatedActors) == 0x000B08, "Member 'ABP_ConveyerBelt_C::MySimulatedActors' has a wrong offset!");

}

