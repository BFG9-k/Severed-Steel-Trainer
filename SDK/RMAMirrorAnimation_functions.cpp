#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RMAMirrorAnimation

#include "Basic.hpp"

#include "RMAMirrorAnimation_classes.hpp"
#include "RMAMirrorAnimation_parameters.hpp"


namespace SDK
{

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GenerateBoneConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URMAMirrorAnimationMirrorTable::GenerateBoneConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "GenerateBoneConfig");

	Params::RMAMirrorAnimationMirrorTable_GenerateBoneConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GetAnimSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UAnimSequence*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAnimSequence*> URMAMirrorAnimationMirrorTable::GetAnimSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "GetAnimSelection");

	Params::RMAMirrorAnimationMirrorTable_GetAnimSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GetFileVersion
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URMAMirrorAnimationMirrorTable::GetFileVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "GetFileVersion");

	Params::RMAMirrorAnimationMirrorTable_GetFileVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URMAMirrorAnimationMirrorTable::MirrorAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "MirrorAnimations");

	Params::RMAMirrorAnimationMirrorTable_MirrorAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorLocation
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RefLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            RefRotation                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRMAMirrorAnimationSingleBoneConfigBoneConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URMAMirrorAnimationMirrorTable::MirrorLocation(const struct FVector& Location, const struct FVector& RefLocation, const struct FQuat& RefRotation, const struct FRMAMirrorAnimationSingleBoneConfig& BoneConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "MirrorLocation");

	Params::RMAMirrorAnimationMirrorTable_MirrorLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.RefLocation = std::move(RefLocation);
	Parms.RefRotation = std::move(RefRotation);
	Parms.BoneConfig = std::move(BoneConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorLocationToOtherPose
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SourceRefLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            SourceRefRotation                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          TargetRefLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            TargetRefRotation                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRMAMirrorAnimationDoubleBoneConfigBoneConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URMAMirrorAnimationMirrorTable::MirrorLocationToOtherPose(const struct FVector& SourceLocation, const struct FVector& SourceRefLocation, const struct FQuat& SourceRefRotation, const struct FVector& TargetRefLocation, const struct FQuat& TargetRefRotation, const struct FRMAMirrorAnimationDoubleBoneConfig& BoneConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "MirrorLocationToOtherPose");

	Params::RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.SourceRefLocation = std::move(SourceRefLocation);
	Parms.SourceRefRotation = std::move(SourceRefRotation);
	Parms.TargetRefLocation = std::move(TargetRefLocation);
	Parms.TargetRefRotation = std::move(TargetRefRotation);
	Parms.BoneConfig = std::move(BoneConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorRotation
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FQuat                            Rotation                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            RefRotation                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRMAMirrorAnimationSingleBoneConfigBoneConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FQuat URMAMirrorAnimationMirrorTable::MirrorRotation(const struct FQuat& Rotation, const struct FQuat& RefRotation, const struct FRMAMirrorAnimationSingleBoneConfig& BoneConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "MirrorRotation");

	Params::RMAMirrorAnimationMirrorTable_MirrorRotation Parms{};

	Parms.Rotation = std::move(Rotation);
	Parms.RefRotation = std::move(RefRotation);
	Parms.BoneConfig = std::move(BoneConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorRotationToOtherPose
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FQuat                            SourceRotation                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            SourceRefRotation                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            TargetRefRotation                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRMAMirrorAnimationDoubleBoneConfigBoneConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FQuat URMAMirrorAnimationMirrorTable::MirrorRotationToOtherPose(const struct FQuat& SourceRotation, const struct FQuat& SourceRefRotation, const struct FQuat& TargetRefRotation, const struct FRMAMirrorAnimationDoubleBoneConfig& BoneConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RMAMirrorAnimationMirrorTable", "MirrorRotationToOtherPose");

	Params::RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose Parms{};

	Parms.SourceRotation = std::move(SourceRotation);
	Parms.SourceRefRotation = std::move(SourceRefRotation);
	Parms.TargetRefRotation = std::move(TargetRefRotation);
	Parms.BoneConfig = std::move(BoneConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetPathNameForLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          LoadedAsset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URMAMirrorAnimationFunctionLibrary::GetPathNameForLoadedAsset(class UObject* LoadedAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "GetPathNameForLoadedAsset");

	Params::RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset Parms{};

	Parms.LoadedAsset = LoadedAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetUserPreference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URMAMirrorAnimationFunctionLibrary::GetUserPreference(const class FString& Key, bool* Successful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "GetUserPreference");

	Params::RMAMirrorAnimationFunctionLibrary_GetUserPreference Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URMAMirrorAnimationFunctionLibrary::GetVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "GetVersion");

	Params::RMAMirrorAnimationFunctionLibrary_GetVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SaveLoadedAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          AssetToSave                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URMAMirrorAnimationFunctionLibrary::SaveLoadedAsset(class UObject* AssetToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "SaveLoadedAsset");

	Params::RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset Parms{};

	Parms.AssetToSave = AssetToSave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SetUserPreference
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewValue                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URMAMirrorAnimationFunctionLibrary::SetUserPreference(const class FString& Key, const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "SetUserPreference");

	Params::RMAMirrorAnimationFunctionLibrary_SetUserPreference Parms{};

	Parms.Key = std::move(Key);
	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SyncBrowserToObjects
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   AssetPaths                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URMAMirrorAnimationFunctionLibrary::SyncBrowserToObjects(const TArray<class FString>& AssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RMAMirrorAnimationFunctionLibrary", "SyncBrowserToObjects");

	Params::RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects Parms{};

	Parms.AssetPaths = std::move(AssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

