#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Turret_BaseBP

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "ThankYouVeryCool_classes.hpp"
#include "ChooseHead_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HeadStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Turret_BaseBP.BP_Turret_BaseBP_C
// 0x01F0 (0x0430 - 0x0240)
class ABP_Turret_BaseBP_C final : public ATurret
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        CenterGazeArroe;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TargetIndicatorComponent_C*         BP_TargetIndicatorComponent;                       // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        TurretDirection;                                   // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TrackSound;                                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        IdleSound;                                         // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mount;                                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TurretIdleRotation_Idle_7210E3DD446822833EEB8191BF201E61; // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TurretIdleRotation__Direction_7210E3DD446822833EEB8191BF201E61; // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TurretIdleRotation;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeactivateTheTurret;                               // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x02A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotSpeed;                                          // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ilde_Rot_Arc;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLookAngle;                                      // 0x02B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLookAngle;                                      // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretBarrelLength;                                // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartLookAngleHead;                                // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HeadActor;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Head_Laser_C*                       HeadLaser;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Head_Missile_C*                     HeadMissile;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Head_Flamer_C*                      HeadFlamer;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Head_Gun_C*                         Head_Gun;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHeadStruct                            HeadSetting;                                       // 0x02F8(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HeadTransform;                                     // 0x0360(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EChooseHead                                   ChooseGunHead;                                     // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FireRate;                                          // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectTypeQuery                              ObjectCollisionToTrace;                            // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectCollisionToBlock;                            // 0x03A0(0x0010)(Edit, BlueprintVisible)
	struct FLinearColor                           LaserColor;                                        // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretVisionWidth;                                 // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretVisionLength;                                // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AdjustLaserAngle;                                  // 0x03C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideLaserOnHitTarget;                              // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideTrackingLaser;                                 // 0x03D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D6[0x2];                                      // 0x03D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotCheck_B;                                        // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotCheck_A;                                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EaseInSound;                                       // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EaseOutSound;                                      // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MountRotAngle;                                     // 0x03EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               DebugLines;                                        // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdle;                                           // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IdleFromLookDirections;                            // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FB[0x1];                                      // 0x03FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseHealth;                                        // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadHealth;                                        // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadDestroyed;                                     // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Repairable;                                     // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      RepairPawn;                                        // 0x0408(0x0010)(Edit, BlueprintVisible)
	float                                         RepairRadius;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsRepair;                                       // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MayRepair;                                         // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RepairHead;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Turret_BaseBP(int32 EntryPoint);
	void SetInEditor(bool bInEditor);
	void SetupTurret();
	void OnLevelReady();
	void ReceiveDestroyed();
	void RepairDone();
	void ResetRepairButton();
	void ResetRepairHead();
	void EnableInputs();
	void Repair();
	void TurretReceiveDamage();
	void ReceiveTick(float DeltaSeconds);
	void AttachHeadToMount();
	void ActivateMountRotation();
	void DeactivateMountRotation();
	void CheckIfActive();
	void ActivateTurret();
	void DeactivateTurret();
	void UpdateHeadSettings();
	void StopSound();
	void PlaySound();
	void Get_RotationValue();
	void RotationAudio();
	void Set_Look_Angle();
	void ResetLook();
	void ResetLookAngle();
	void SelectHead();
	void ReceiveBeginPlay();
	void StopRot();
	void PlayRot();
	void UpdateRotation();
	void InpActEvt_F_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void TurretIdleRotation__PlaySound__EventFunc();
	void TurretIdleRotation__Stop_Sound__EventFunc();
	void TurretIdleRotation__UpdateFunc();
	void TurretIdleRotation__FinishedFunc();
	void UserConstructionScript();
	void Setup_for_replication();
	void RepairHeadAttachment();
	bool OnHit(EImpactType ImpactType, const struct FHitResult& HitResult, float Dmg);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Turret_BaseBP_C">();
	}
	static class ABP_Turret_BaseBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Turret_BaseBP_C>();
	}
};
static_assert(alignof(ABP_Turret_BaseBP_C) == 0x000010, "Wrong alignment on ABP_Turret_BaseBP_C");
static_assert(sizeof(ABP_Turret_BaseBP_C) == 0x000430, "Wrong size on ABP_Turret_BaseBP_C");
static_assert(offsetof(ABP_Turret_BaseBP_C, UberGraphFrame) == 0x000240, "Member 'ABP_Turret_BaseBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, CenterGazeArroe) == 0x000248, "Member 'ABP_Turret_BaseBP_C::CenterGazeArroe' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, BP_TargetIndicatorComponent) == 0x000250, "Member 'ABP_Turret_BaseBP_C::BP_TargetIndicatorComponent' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Billboard) == 0x000258, "Member 'ABP_Turret_BaseBP_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretDirection) == 0x000260, "Member 'ABP_Turret_BaseBP_C::TurretDirection' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Root) == 0x000268, "Member 'ABP_Turret_BaseBP_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TrackSound) == 0x000270, "Member 'ABP_Turret_BaseBP_C::TrackSound' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, IdleSound) == 0x000278, "Member 'ABP_Turret_BaseBP_C::IdleSound' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Mount) == 0x000280, "Member 'ABP_Turret_BaseBP_C::Mount' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Base) == 0x000288, "Member 'ABP_Turret_BaseBP_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretIdleRotation_Idle_7210E3DD446822833EEB8191BF201E61) == 0x000290, "Member 'ABP_Turret_BaseBP_C::TurretIdleRotation_Idle_7210E3DD446822833EEB8191BF201E61' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretIdleRotation__Direction_7210E3DD446822833EEB8191BF201E61) == 0x000294, "Member 'ABP_Turret_BaseBP_C::TurretIdleRotation__Direction_7210E3DD446822833EEB8191BF201E61' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretIdleRotation) == 0x000298, "Member 'ABP_Turret_BaseBP_C::TurretIdleRotation' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, DeactivateTheTurret) == 0x0002A0, "Member 'ABP_Turret_BaseBP_C::DeactivateTheTurret' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Tag) == 0x0002A4, "Member 'ABP_Turret_BaseBP_C::Tag' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, DeltaTime) == 0x0002AC, "Member 'ABP_Turret_BaseBP_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RotSpeed) == 0x0002B0, "Member 'ABP_Turret_BaseBP_C::RotSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Ilde_Rot_Arc) == 0x0002B4, "Member 'ABP_Turret_BaseBP_C::Ilde_Rot_Arc' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, MinLookAngle) == 0x0002B8, "Member 'ABP_Turret_BaseBP_C::MinLookAngle' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, MaxLookAngle) == 0x0002BC, "Member 'ABP_Turret_BaseBP_C::MaxLookAngle' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretBarrelLength) == 0x0002C0, "Member 'ABP_Turret_BaseBP_C::TurretBarrelLength' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, StartLookAngleHead) == 0x0002C4, "Member 'ABP_Turret_BaseBP_C::StartLookAngleHead' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HitActor) == 0x0002C8, "Member 'ABP_Turret_BaseBP_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadActor) == 0x0002D0, "Member 'ABP_Turret_BaseBP_C::HeadActor' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadLaser) == 0x0002D8, "Member 'ABP_Turret_BaseBP_C::HeadLaser' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadMissile) == 0x0002E0, "Member 'ABP_Turret_BaseBP_C::HeadMissile' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadFlamer) == 0x0002E8, "Member 'ABP_Turret_BaseBP_C::HeadFlamer' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Head_Gun) == 0x0002F0, "Member 'ABP_Turret_BaseBP_C::Head_Gun' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadSetting) == 0x0002F8, "Member 'ABP_Turret_BaseBP_C::HeadSetting' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadTransform) == 0x000360, "Member 'ABP_Turret_BaseBP_C::HeadTransform' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, ChooseGunHead) == 0x000390, "Member 'ABP_Turret_BaseBP_C::ChooseGunHead' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, FireRate) == 0x000394, "Member 'ABP_Turret_BaseBP_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, ObjectCollisionToTrace) == 0x000398, "Member 'ABP_Turret_BaseBP_C::ObjectCollisionToTrace' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, ObjectCollisionToBlock) == 0x0003A0, "Member 'ABP_Turret_BaseBP_C::ObjectCollisionToBlock' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, LaserColor) == 0x0003B0, "Member 'ABP_Turret_BaseBP_C::LaserColor' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretVisionWidth) == 0x0003C0, "Member 'ABP_Turret_BaseBP_C::TurretVisionWidth' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, TurretVisionLength) == 0x0003C4, "Member 'ABP_Turret_BaseBP_C::TurretVisionLength' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, AdjustLaserAngle) == 0x0003C8, "Member 'ABP_Turret_BaseBP_C::AdjustLaserAngle' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HideLaserOnHitTarget) == 0x0003D4, "Member 'ABP_Turret_BaseBP_C::HideLaserOnHitTarget' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HideTrackingLaser) == 0x0003D5, "Member 'ABP_Turret_BaseBP_C::HideTrackingLaser' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RotCheck_B) == 0x0003D8, "Member 'ABP_Turret_BaseBP_C::RotCheck_B' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RotCheck_A) == 0x0003DC, "Member 'ABP_Turret_BaseBP_C::RotCheck_A' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, EaseInSound) == 0x0003E0, "Member 'ABP_Turret_BaseBP_C::EaseInSound' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, EaseOutSound) == 0x0003E4, "Member 'ABP_Turret_BaseBP_C::EaseOutSound' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, InRange) == 0x0003E8, "Member 'ABP_Turret_BaseBP_C::InRange' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, MountRotAngle) == 0x0003EC, "Member 'ABP_Turret_BaseBP_C::MountRotAngle' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, DebugLines) == 0x0003F8, "Member 'ABP_Turret_BaseBP_C::DebugLines' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, UseIdle) == 0x0003F9, "Member 'ABP_Turret_BaseBP_C::UseIdle' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, IdleFromLookDirections) == 0x0003FA, "Member 'ABP_Turret_BaseBP_C::IdleFromLookDirections' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, BaseHealth) == 0x0003FC, "Member 'ABP_Turret_BaseBP_C::BaseHealth' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadHealth) == 0x000400, "Member 'ABP_Turret_BaseBP_C::HeadHealth' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HeadDestroyed) == 0x000404, "Member 'ABP_Turret_BaseBP_C::HeadDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, Is_Repairable) == 0x000405, "Member 'ABP_Turret_BaseBP_C::Is_Repairable' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RepairPawn) == 0x000408, "Member 'ABP_Turret_BaseBP_C::RepairPawn' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RepairRadius) == 0x000418, "Member 'ABP_Turret_BaseBP_C::RepairRadius' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, NeedsRepair) == 0x00041C, "Member 'ABP_Turret_BaseBP_C::NeedsRepair' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, MayRepair) == 0x00041D, "Member 'ABP_Turret_BaseBP_C::MayRepair' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, RepairHead) == 0x000420, "Member 'ABP_Turret_BaseBP_C::RepairHead' has a wrong offset!");
static_assert(offsetof(ABP_Turret_BaseBP_C, HitComponent) == 0x000428, "Member 'ABP_Turret_BaseBP_C::HitComponent' has a wrong offset!");

}

