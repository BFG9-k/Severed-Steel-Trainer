#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AdrenalineX

#include "Basic.hpp"

#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AdrenalineX.WBP_AdrenalineX_C
// 0x0028 (0x0288 - 0x0260)
class UWBP_AdrenalineX_C final : public UOverclockWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_25;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MyDyn;                                             // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlowAlpha;                                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlowSpeed;                                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldGlowe;                                       // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WBP_AdrenalineX(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SLoMochange(bool bNewStatus);
	void SetOverclockPercent(float InPercent);
	struct FLinearColor GetColorAndOpacity_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AdrenalineX_C">();
	}
	static class UWBP_AdrenalineX_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AdrenalineX_C>();
	}
};
static_assert(alignof(UWBP_AdrenalineX_C) == 0x000008, "Wrong alignment on UWBP_AdrenalineX_C");
static_assert(sizeof(UWBP_AdrenalineX_C) == 0x000288, "Wrong size on UWBP_AdrenalineX_C");
static_assert(offsetof(UWBP_AdrenalineX_C, UberGraphFrame) == 0x000260, "Member 'UWBP_AdrenalineX_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_AdrenalineX_C, Image_25) == 0x000268, "Member 'UWBP_AdrenalineX_C::Image_25' has a wrong offset!");
static_assert(offsetof(UWBP_AdrenalineX_C, MyDyn) == 0x000270, "Member 'UWBP_AdrenalineX_C::MyDyn' has a wrong offset!");
static_assert(offsetof(UWBP_AdrenalineX_C, GlowAlpha) == 0x000278, "Member 'UWBP_AdrenalineX_C::GlowAlpha' has a wrong offset!");
static_assert(offsetof(UWBP_AdrenalineX_C, GlowSpeed) == 0x00027C, "Member 'UWBP_AdrenalineX_C::GlowSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_AdrenalineX_C, ShouldGlowe) == 0x000280, "Member 'UWBP_AdrenalineX_C::ShouldGlowe' has a wrong offset!");

}

