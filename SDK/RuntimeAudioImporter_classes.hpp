#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeAudioImporter

#include "Basic.hpp"

#include "RuntimeAudioImporter_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class RuntimeAudioImporter.ImportedSoundWave
// 0x0140 (0x0500 - 0x03C0)
class alignas(0x10) UImportedSoundWave : public USoundWaveProcedural
{
public:
	uint8                                         Pad_3C0[0x18];                                     // 0x03C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAudioPlaybackFinished;                           // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x18];                                     // 0x03E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<float>& PCMData)> OnGeneratePCMData;                                 // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_410[0x40];                                     // 0x0410(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<float>& PopulatedAudioData)> OnPopulateAudioData;                               // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x40];                                     // 0x0460(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPopulateAudioState;                              // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B0[0x50];                                     // 0x04B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<float> GetPCMBufferCopy();
	bool MixSoundWaveChannels(int32 NewNumOfChannels);
	void PrepareSoundWaveForMetaSounds(const TDelegate<void(bool bSucceeded)>& Result);
	void ReleaseMemory();
	void ReleasePlayedAudioData(const TDelegate<void(bool bSucceeded)>& Result);
	bool ResampleSoundWave(int32 NewSampleRate);
	bool RewindPlaybackTime(float PlaybackTime);
	void SetLooping(bool bLoop);
	void SetPitch(float InPitch);
	void SetSubtitles(const TArray<struct FEditableSubtitleCue>& InSubtitles);
	void SetVolume(float InVolume);

	ERuntimeAudioFormat GetAudioFormat() const;
	bool GetAudioHeaderInfo(struct FRuntimeAudioHeaderInfo* HeaderInfo) const;
	float GetDurationConst() const;
	float GetDurationOffset() const;
	int32 GetNumOfChannels() const;
	float GetPlaybackPercentage() const;
	float GetPlaybackTime() const;
	int32 GetSampleRate() const;
	bool IsPlaybackFinished() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImportedSoundWave">();
	}
	static class UImportedSoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImportedSoundWave>();
	}
};
static_assert(alignof(UImportedSoundWave) == 0x000010, "Wrong alignment on UImportedSoundWave");
static_assert(sizeof(UImportedSoundWave) == 0x000500, "Wrong size on UImportedSoundWave");
static_assert(offsetof(UImportedSoundWave, OnAudioPlaybackFinished) == 0x0003D8, "Member 'UImportedSoundWave::OnAudioPlaybackFinished' has a wrong offset!");
static_assert(offsetof(UImportedSoundWave, OnGeneratePCMData) == 0x000400, "Member 'UImportedSoundWave::OnGeneratePCMData' has a wrong offset!");
static_assert(offsetof(UImportedSoundWave, OnPopulateAudioData) == 0x000450, "Member 'UImportedSoundWave::OnPopulateAudioData' has a wrong offset!");
static_assert(offsetof(UImportedSoundWave, OnPopulateAudioState) == 0x0004A0, "Member 'UImportedSoundWave::OnPopulateAudioState' has a wrong offset!");

// Class RuntimeAudioImporter.StreamingSoundWave
// 0x0020 (0x0520 - 0x0500)
class UStreamingSoundWave : public UImportedSoundWave
{
public:
	uint8                                         Pad_500[0x20];                                     // 0x0500(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UStreamingSoundWave* CreateStreamingSoundWave();

	void AppendAudioDataFromEncoded(const TArray<uint8>& AudioData, ERuntimeAudioFormat AudioFormat);
	void AppendAudioDataFromRAW(const TArray<uint8>& RAWData, ERuntimeRAWAudioFormat RAWFormat, int32 InSampleRate, int32 NumOfChannels);
	void PreAllocateAudioData(int64 NumOfBytesToPreAllocate, const TDelegate<void(bool bSucceeded)>& Result);
	void SetStopSoundOnPlaybackFinish(bool bStop);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSoundWave">();
	}
	static class UStreamingSoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSoundWave>();
	}
};
static_assert(alignof(UStreamingSoundWave) == 0x000010, "Wrong alignment on UStreamingSoundWave");
static_assert(sizeof(UStreamingSoundWave) == 0x000520, "Wrong size on UStreamingSoundWave");

// Class RuntimeAudioImporter.CapturableSoundWave
// 0x0010 (0x0530 - 0x0520)
class UCapturableSoundWave final : public UStreamingSoundWave
{
public:
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCapturableSoundWave* CreateCapturableSoundWave();
	static void GetAvailableAudioInputDevices(const TDelegate<void(TArray<struct FRuntimeAudioInputDeviceInfo>& AvailableDevices)>& Result);

	bool StartCapture(int32 DeviceID);
	void StopCapture();
	bool ToggleMute(bool bMute);

	bool IsCapturing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CapturableSoundWave">();
	}
	static class UCapturableSoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCapturableSoundWave>();
	}
};
static_assert(alignof(UCapturableSoundWave) == 0x000010, "Wrong alignment on UCapturableSoundWave");
static_assert(sizeof(UCapturableSoundWave) == 0x000530, "Wrong size on UCapturableSoundWave");

// Class RuntimeAudioImporter.PreImportedSoundAsset
// 0x0018 (0x0040 - 0x0028)
class UPreImportedSoundAsset final : public UObject
{
public:
	TArray<uint8>                                 AudioDataArray;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreImportedSoundAsset">();
	}
	static class UPreImportedSoundAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreImportedSoundAsset>();
	}
};
static_assert(alignof(UPreImportedSoundAsset) == 0x000008, "Wrong alignment on UPreImportedSoundAsset");
static_assert(sizeof(UPreImportedSoundAsset) == 0x000040, "Wrong size on UPreImportedSoundAsset");
static_assert(offsetof(UPreImportedSoundAsset, AudioDataArray) == 0x000028, "Member 'UPreImportedSoundAsset::AudioDataArray' has a wrong offset!");
static_assert(offsetof(UPreImportedSoundAsset, AudioFormat) == 0x000038, "Member 'UPreImportedSoundAsset::AudioFormat' has a wrong offset!");

// Class RuntimeAudioImporter.RuntimeAudioExporter
// 0x0000 (0x0028 - 0x0028)
class URuntimeAudioExporter final : public UObject
{
public:
	static void ExportSoundWaveToBuffer(class UImportedSoundWave* ImportedSoundWave, ERuntimeAudioFormat AudioFormat, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>& Result);
	static void ExportSoundWaveToFile(class UImportedSoundWave* ImportedSoundWave, const class FString& SavePath, ERuntimeAudioFormat AudioFormat, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result);
	static void ExportSoundWaveToRAWBuffer(class UImportedSoundWave* ImportedSoundWave, ERuntimeRAWAudioFormat RAWFormat, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>& Result);
	static void ExportSoundWaveToRAWFile(class UImportedSoundWave* ImportedSoundWave, const class FString& SavePath, ERuntimeRAWAudioFormat RAWFormat, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeAudioExporter">();
	}
	static class URuntimeAudioExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeAudioExporter>();
	}
};
static_assert(alignof(URuntimeAudioExporter) == 0x000008, "Wrong alignment on URuntimeAudioExporter");
static_assert(sizeof(URuntimeAudioExporter) == 0x000028, "Wrong size on URuntimeAudioExporter");

// Class RuntimeAudioImporter.RuntimeAudioImporterLibrary
// 0x0050 (0x0078 - 0x0028)
class URuntimeAudioImporterLibrary final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Percentage)> OnProgress;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class URuntimeAudioImporterLibrary* Importer, class UImportedSoundWave* ImportedSoundWave, ERuntimeImportStatus Status)> OnResult;                                          // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void ConvertRegularToImportedSoundWave(class USoundWave* SoundWave, TSubclassOf<class UImportedSoundWave> ImportedSoundWaveClass, const TDelegate<void(bool bSucceeded, class UImportedSoundWave* ImportedSoundWave)>& Result);
	static class URuntimeAudioImporterLibrary* CreateRuntimeAudioImporter();

	void ImportAudioFromBuffer(const TArray<uint8>& AudioData, ERuntimeAudioFormat AudioFormat);
	void ImportAudioFromFile(const class FString& FilePath, ERuntimeAudioFormat AudioFormat);
	void ImportAudioFromPreImportedSound(class UPreImportedSoundAsset* PreImportedSoundAsset);
	void ImportAudioFromRAWBuffer(const TArray<uint8>& RAWBuffer, ERuntimeRAWAudioFormat RAWFormat, int32 SampleRate, int32 NumOfChannels);
	void ImportAudioFromRAWFile(const class FString& FilePath, ERuntimeRAWAudioFormat RAWFormat, int32 SampleRate, int32 NumOfChannels);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeAudioImporterLibrary">();
	}
	static class URuntimeAudioImporterLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeAudioImporterLibrary>();
	}
};
static_assert(alignof(URuntimeAudioImporterLibrary) == 0x000008, "Wrong alignment on URuntimeAudioImporterLibrary");
static_assert(sizeof(URuntimeAudioImporterLibrary) == 0x000078, "Wrong size on URuntimeAudioImporterLibrary");
static_assert(offsetof(URuntimeAudioImporterLibrary, OnProgress) == 0x000040, "Member 'URuntimeAudioImporterLibrary::OnProgress' has a wrong offset!");
static_assert(offsetof(URuntimeAudioImporterLibrary, OnResult) == 0x000068, "Member 'URuntimeAudioImporterLibrary::OnResult' has a wrong offset!");

// Class RuntimeAudioImporter.RuntimeAudioTranscoder
// 0x0000 (0x0028 - 0x0028)
class URuntimeAudioTranscoder final : public UObject
{
public:
	static void TranscodeEncodedDataFromBuffer(const TArray<uint8>& EncodedDataFrom, ERuntimeAudioFormat EncodedFormatFrom, ERuntimeAudioFormat EncodedFormatTo, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& EncodedData)>& Result);
	static void TranscodeEncodedDataFromFile(const class FString& FilePathFrom, ERuntimeAudioFormat EncodedFormatFrom, const class FString& FilePathTo, ERuntimeAudioFormat EncodedFormatTo, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result);
	static void TranscodeRAWDataFromBuffer(const TArray<uint8>& RAWDataFrom, ERuntimeRAWAudioFormat RAWFormatFrom, ERuntimeRAWAudioFormat RAWFormatTo, const TDelegate<void(bool bSucceeded, TArray<uint8>& RAWData)>& Result);
	static void TranscodeRAWDataFromFile(const class FString& FilePathFrom, ERuntimeRAWAudioFormat RAWFormatFrom, const class FString& FilePathTo, ERuntimeRAWAudioFormat RAWFormatTo, const TDelegate<void(bool bSucceeded)>& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeAudioTranscoder">();
	}
	static class URuntimeAudioTranscoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeAudioTranscoder>();
	}
};
static_assert(alignof(URuntimeAudioTranscoder) == 0x000008, "Wrong alignment on URuntimeAudioTranscoder");
static_assert(sizeof(URuntimeAudioTranscoder) == 0x000028, "Wrong size on URuntimeAudioTranscoder");

// Class RuntimeAudioImporter.RuntimeAudioUtilities
// 0x0000 (0x0028 - 0x0028)
class URuntimeAudioUtilities final : public UObject
{
public:
	static class FString ConvertSecondsToString(int64 Seconds);
	static ERuntimeAudioFormat GetAudioFormat(const class FString& FilePath);
	static ERuntimeAudioFormat GetAudioFormatAdvanced(const TArray<uint8>& AudioData);
	static void GetAudioHeaderInfoFromBuffer(const TArray<uint8>& AudioData, const TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>& Result);
	static void GetAudioHeaderInfoFromFile(const class FString& FilePath, const TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>& Result);
	static void ScanDirectoryForAudioFiles(const class FString& Directory, bool bRecursive, const TDelegate<void(bool bSucceeded, TArray<class FString>& AudioFilePaths)>& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RuntimeAudioUtilities">();
	}
	static class URuntimeAudioUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<URuntimeAudioUtilities>();
	}
};
static_assert(alignof(URuntimeAudioUtilities) == 0x000008, "Wrong alignment on URuntimeAudioUtilities");
static_assert(sizeof(URuntimeAudioUtilities) == 0x000028, "Wrong size on URuntimeAudioUtilities");

}

