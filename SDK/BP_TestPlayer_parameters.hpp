#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TestPlayer

#include "Basic.hpp"

#include "ToolData_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_TestPlayer.BP_TestPlayer_C.ExecuteUbergraph_BP_TestPlayer
// 0x0220 (0x0220 - 0x0000)
struct BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName Category, class FName SubItem)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_5;                        // 0x0030(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_4;                        // 0x0048(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_3;                        // 0x0060(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0078(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_2;                        // 0x0090(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x00A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x00C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x00D8(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_5;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_TestInventoryMenu_C*               CallFunc_Create_ReturnValue;                       // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedOption_OutIndex;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSelectedOption_Valid;                  // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_PlayerHUDTest_C*                   CallFunc_Create_ReturnValue_1;                     // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_6;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_MultiMenuTemplate_C*               CallFunc_Create_ReturnValue_2;                     // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_Category;                       // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_SubItem;                        // 0x0184(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_7;        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_8;        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_9;        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_10;       // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer) == 0x000008, "Wrong alignment on BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer");
static_assert(sizeof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer) == 0x000220, "Wrong size on BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, EntryPoint) == 0x000000, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key_5) == 0x000030, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key_4) == 0x000048, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key_3) == 0x000060, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, Temp_struct_Variable) == 0x000078, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key_2) == 0x000090, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key_1) == 0x0000A8, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, Temp_struct_Variable_1) == 0x0000C0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputKeyEvent_Key) == 0x0000D8, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000F0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue_5) == 0x0000FC, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue_5' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000100, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000104, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue_4) == 0x000108, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue_3) == 0x00010C, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000114, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000118, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00011C, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000120, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_1) == 0x000128, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_2) == 0x000130, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Create_ReturnValue) == 0x000138, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetSelectedOption_OutIndex) == 0x000140, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetSelectedOption_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetSelectedOption_Valid) == 0x000144, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetSelectedOption_Valid' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_3) == 0x000148, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Create_ReturnValue_1) == 0x000150, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_4) == 0x000158, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_5) == 0x000160, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_6) == 0x000168, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Create_ReturnValue_2) == 0x000170, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_IsValid_ReturnValue_3) == 0x000178, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_CustomEvent_Category) == 0x00017C, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_CustomEvent_Category' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_CustomEvent_SubItem) == 0x000184, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_CustomEvent_SubItem' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Conv_NameToString_ReturnValue) == 0x000190, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0001A0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Concat_StrStr_ReturnValue) == 0x0001B0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001C0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_IsValid_ReturnValue_4) == 0x0001D0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001D8, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_7) == 0x0001E8, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_8) == 0x0001F0, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetActorRightVector_ReturnValue) == 0x0001F8, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue_2) == 0x000204, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue_1) == 0x000208, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, K2Node_InputAxisEvent_AxisValue) == 0x00020C, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_9) == 0x000210, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer, CallFunc_GetPlayerController_ReturnValue_10) == 0x000218, "Member 'BP_TestPlayer_C_ExecuteUbergraph_BP_TestPlayer::CallFunc_GetPlayerController_ReturnValue_10' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_TurnRight_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.SubmenuCommited
// 0x0010 (0x0010 - 0x0000)
struct BP_TestPlayer_C_SubmenuCommited final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SubItem;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_SubmenuCommited) == 0x000004, "Wrong alignment on BP_TestPlayer_C_SubmenuCommited");
static_assert(sizeof(BP_TestPlayer_C_SubmenuCommited) == 0x000010, "Wrong size on BP_TestPlayer_C_SubmenuCommited");
static_assert(offsetof(BP_TestPlayer_C_SubmenuCommited, Category) == 0x000000, "Member 'BP_TestPlayer_C_SubmenuCommited::Category' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_SubmenuCommited, SubItem) == 0x000008, "Member 'BP_TestPlayer_C_SubmenuCommited::SubItem' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_21::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_16::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_5
// 0x0004 (0x0004 - 0x0000)
struct BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5) == 0x000004, "Wrong alignment on BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5");
static_assert(sizeof(BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5) == 0x000004, "Wrong size on BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5");
static_assert(offsetof(BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5, AxisValue) == 0x000000, "Member 'BP_TestPlayer_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_5::AxisValue' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_Gamepad_RightShoulder_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_Gamepad_LeftShoulder_K2Node_InputKeyEvent_2::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_LeftAlt_K2Node_InputKeyEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_3::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_LeftAlt_K2Node_InputKeyEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_LeftAlt_K2Node_InputKeyEvent_4::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.InpActEvt_LeftShift_K2Node_InputKeyEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5) == 0x000008, "Wrong alignment on BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5");
static_assert(sizeof(BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5) == 0x000018, "Wrong size on BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5");
static_assert(offsetof(BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5, Key) == 0x000000, "Member 'BP_TestPlayer_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_5::Key' has a wrong offset!");

// Function BP_TestPlayer.BP_TestPlayer_C.GetCurrentTool
// 0x0050 (0x0050 - 0x0000)
struct BP_TestPlayer_C_GetCurrentTool final
{
public:
	struct FToolData                              Output;                                            // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	struct FToolData                              CallFunc_Array_Get_Item;                           // 0x0028(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(BP_TestPlayer_C_GetCurrentTool) == 0x000008, "Wrong alignment on BP_TestPlayer_C_GetCurrentTool");
static_assert(sizeof(BP_TestPlayer_C_GetCurrentTool) == 0x000050, "Wrong size on BP_TestPlayer_C_GetCurrentTool");
static_assert(offsetof(BP_TestPlayer_C_GetCurrentTool, Output) == 0x000000, "Member 'BP_TestPlayer_C_GetCurrentTool::Output' has a wrong offset!");
static_assert(offsetof(BP_TestPlayer_C_GetCurrentTool, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_TestPlayer_C_GetCurrentTool::CallFunc_Array_Get_Item' has a wrong offset!");

}

