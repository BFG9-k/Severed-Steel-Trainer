#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Void

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Void.BP_Void_C.ExecuteUbergraph_BP_Void
// 0x0230 (0x0230 - 0x0000)
struct BP_Void_C_ExecuteUbergraph_BP_Void final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class USphereComponent*                       CallFunc_AddComponentByClass_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_InFiekd;                        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Center;                         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default_1;                           // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_WorldLoc;                       // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Radius;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent_1;          // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor_1;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp_1;                    // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex_1;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x0168(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEditMode                                     K2Node_Event_NewEditMode;                          // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EActionType                                   K2Node_Event_ToDo;                                 // 0x020E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSimulated;                           // 0x020F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bInInvis;                       // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam;                 // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInEditor;                            // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Void_C_ExecuteUbergraph_BP_Void) == 0x000010, "Wrong alignment on BP_Void_C_ExecuteUbergraph_BP_Void");
static_assert(sizeof(BP_Void_C_ExecuteUbergraph_BP_Void) == 0x000230, "Wrong size on BP_Void_C_ExecuteUbergraph_BP_Void");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, EntryPoint) == 0x000000, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, Temp_bool_Variable) == 0x000004, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, Temp_bool_Variable_1) == 0x000005, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, Temp_byte_Variable) == 0x000006, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, Temp_byte_Variable_1) == 0x000007, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_AddComponentByClass_ReturnValue) == 0x000040, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_InFiekd) == 0x000068, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_InFiekd' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Select_Default) == 0x000070, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_Center) == 0x000078, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_Center' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Select_Default_1) == 0x000084, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000088, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000098, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_WorldLoc) == 0x0000A0, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_WorldLoc' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_Radius) == 0x0000AC, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x0000B0, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000C0, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OverlappedComponent_1) == 0x000148, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherActor_1) == 0x000150, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherComp_1) == 0x000158, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherBodyIndex_1) == 0x000160, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_bFromSweep) == 0x000164, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_SweepResult) == 0x000168, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OverlappedComponent) == 0x0001F0, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherActor) == 0x0001F8, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherComp) == 0x000200, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_OtherBodyIndex) == 0x000208, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Event_NewEditMode) == 0x00020C, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Event_NewEditMode' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00020D, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Event_ToDo) == 0x00020E, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Event_ToDo' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Event_bSimulated) == 0x00020F, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Event_bSimulated' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_SwitchEnum_CmpSuccess) == 0x000210, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_CustomEvent_bInInvis) == 0x000211, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_CustomEvent_bInInvis' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_GetTYVCGameMode_NewParam) == 0x000218, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_GetTYVCGameMode_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000220, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Void_C_ExecuteUbergraph_BP_Void, K2Node_Event_bInEditor) == 0x000221, "Member 'BP_Void_C_ExecuteUbergraph_BP_Void::K2Node_Event_bInEditor' has a wrong offset!");

// Function BP_Void.BP_Void_C.SetInEditor
// 0x0001 (0x0001 - 0x0000)
struct BP_Void_C_SetInEditor final
{
public:
	bool                                          bInEditor;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Void_C_SetInEditor) == 0x000001, "Wrong alignment on BP_Void_C_SetInEditor");
static_assert(sizeof(BP_Void_C_SetInEditor) == 0x000001, "Wrong size on BP_Void_C_SetInEditor");
static_assert(offsetof(BP_Void_C_SetInEditor, bInEditor) == 0x000000, "Member 'BP_Void_C_SetInEditor::bInEditor' has a wrong offset!");

// Function BP_Void.BP_Void_C.UpdateInvisDisplay
// 0x0001 (0x0001 - 0x0000)
struct BP_Void_C_UpdateInvisDisplay final
{
public:
	bool                                          bInInvis;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Void_C_UpdateInvisDisplay) == 0x000001, "Wrong alignment on BP_Void_C_UpdateInvisDisplay");
static_assert(sizeof(BP_Void_C_UpdateInvisDisplay) == 0x000001, "Wrong size on BP_Void_C_UpdateInvisDisplay");
static_assert(offsetof(BP_Void_C_UpdateInvisDisplay, bInInvis) == 0x000000, "Member 'BP_Void_C_UpdateInvisDisplay::bInInvis' has a wrong offset!");

// Function BP_Void.BP_Void_C.DoActions
// 0x0002 (0x0002 - 0x0000)
struct BP_Void_C_DoActions final
{
public:
	EActionType                                   ToDo;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSimulated;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Void_C_DoActions) == 0x000001, "Wrong alignment on BP_Void_C_DoActions");
static_assert(sizeof(BP_Void_C_DoActions) == 0x000002, "Wrong size on BP_Void_C_DoActions");
static_assert(offsetof(BP_Void_C_DoActions, ToDo) == 0x000000, "Member 'BP_Void_C_DoActions::ToDo' has a wrong offset!");
static_assert(offsetof(BP_Void_C_DoActions, bSimulated) == 0x000001, "Member 'BP_Void_C_DoActions::bSimulated' has a wrong offset!");

// Function BP_Void.BP_Void_C.OnEditorModeChange
// 0x0001 (0x0001 - 0x0000)
struct BP_Void_C_OnEditorModeChange final
{
public:
	EEditMode                                     NewEditMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Void_C_OnEditorModeChange) == 0x000001, "Wrong alignment on BP_Void_C_OnEditorModeChange");
static_assert(sizeof(BP_Void_C_OnEditorModeChange) == 0x000001, "Wrong size on BP_Void_C_OnEditorModeChange");
static_assert(offsetof(BP_Void_C_OnEditorModeChange, NewEditMode) == 0x000000, "Member 'BP_Void_C_OnEditorModeChange::NewEditMode' has a wrong offset!");

// Function BP_Void.BP_Void_C.CustomEvent_0
// 0x0020 (0x0020 - 0x0000)
struct BP_Void_C_CustomEvent_0 final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Void_C_CustomEvent_0) == 0x000008, "Wrong alignment on BP_Void_C_CustomEvent_0");
static_assert(sizeof(BP_Void_C_CustomEvent_0) == 0x000020, "Wrong size on BP_Void_C_CustomEvent_0");
static_assert(offsetof(BP_Void_C_CustomEvent_0, OverlappedComponent) == 0x000000, "Member 'BP_Void_C_CustomEvent_0::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Void_C_CustomEvent_0, OtherActor) == 0x000008, "Member 'BP_Void_C_CustomEvent_0::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Void_C_CustomEvent_0, OtherComp) == 0x000010, "Member 'BP_Void_C_CustomEvent_0::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Void_C_CustomEvent_0, OtherBodyIndex) == 0x000018, "Member 'BP_Void_C_CustomEvent_0::OtherBodyIndex' has a wrong offset!");

// Function BP_Void.BP_Void_C.OnComponentBeginOverlap_Event_0
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Void_C_OnComponentBeginOverlap_Event_0 final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Void_C_OnComponentBeginOverlap_Event_0) == 0x000008, "Wrong alignment on BP_Void_C_OnComponentBeginOverlap_Event_0");
static_assert(sizeof(BP_Void_C_OnComponentBeginOverlap_Event_0) == 0x0000A8, "Wrong size on BP_Void_C_OnComponentBeginOverlap_Event_0");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, OverlappedComponent) == 0x000000, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, OtherActor) == 0x000008, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, OtherComp) == 0x000010, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, OtherBodyIndex) == 0x000018, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, bFromSweep) == 0x00001C, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Void_C_OnComponentBeginOverlap_Event_0, SweepResult) == 0x000020, "Member 'BP_Void_C_OnComponentBeginOverlap_Event_0::SweepResult' has a wrong offset!");

// Function BP_Void.BP_Void_C.MakeHole
// 0x0010 (0x0010 - 0x0000)
struct BP_Void_C_MakeHole final
{
public:
	struct FVector                                WorldLoc;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Void_C_MakeHole) == 0x000004, "Wrong alignment on BP_Void_C_MakeHole");
static_assert(sizeof(BP_Void_C_MakeHole) == 0x000010, "Wrong size on BP_Void_C_MakeHole");
static_assert(offsetof(BP_Void_C_MakeHole, WorldLoc) == 0x000000, "Member 'BP_Void_C_MakeHole::WorldLoc' has a wrong offset!");
static_assert(offsetof(BP_Void_C_MakeHole, Radius) == 0x00000C, "Member 'BP_Void_C_MakeHole::Radius' has a wrong offset!");

// Function BP_Void.BP_Void_C.ShutdownField
// 0x000C (0x000C - 0x0000)
struct BP_Void_C_ShutdownField final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Void_C_ShutdownField) == 0x000004, "Wrong alignment on BP_Void_C_ShutdownField");
static_assert(sizeof(BP_Void_C_ShutdownField) == 0x00000C, "Wrong size on BP_Void_C_ShutdownField");
static_assert(offsetof(BP_Void_C_ShutdownField, Center) == 0x000000, "Member 'BP_Void_C_ShutdownField::Center' has a wrong offset!");

// Function BP_Void.BP_Void_C.UpdateFFDisplay
// 0x0001 (0x0001 - 0x0000)
struct BP_Void_C_UpdateFFDisplay final
{
public:
	bool                                          InFiekd;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Void_C_UpdateFFDisplay) == 0x000001, "Wrong alignment on BP_Void_C_UpdateFFDisplay");
static_assert(sizeof(BP_Void_C_UpdateFFDisplay) == 0x000001, "Wrong size on BP_Void_C_UpdateFFDisplay");
static_assert(offsetof(BP_Void_C_UpdateFFDisplay, InFiekd) == 0x000000, "Member 'BP_Void_C_UpdateFFDisplay::InFiekd' has a wrong offset!");

// Function BP_Void.BP_Void_C.GetShouldSave
// 0x0010 (0x0010 - 0x0000)
struct BP_Void_C_GetShouldSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Void_C_GetShouldSave) == 0x000004, "Wrong alignment on BP_Void_C_GetShouldSave");
static_assert(sizeof(BP_Void_C_GetShouldSave) == 0x000010, "Wrong size on BP_Void_C_GetShouldSave");
static_assert(offsetof(BP_Void_C_GetShouldSave, ReturnValue) == 0x000000, "Member 'BP_Void_C_GetShouldSave::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_GetShouldSave, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000004, "Member 'BP_Void_C_GetShouldSave::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");

// Function BP_Void.BP_Void_C.GetActions
// 0x0020 (0x0020 - 0x0000)
struct BP_Void_C_GetActions final
{
public:
	TArray<EActionType>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	TArray<EActionType>                           K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Void_C_GetActions) == 0x000008, "Wrong alignment on BP_Void_C_GetActions");
static_assert(sizeof(BP_Void_C_GetActions) == 0x000020, "Wrong size on BP_Void_C_GetActions");
static_assert(offsetof(BP_Void_C_GetActions, ReturnValue) == 0x000000, "Member 'BP_Void_C_GetActions::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Void_C_GetActions, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_Void_C_GetActions::K2Node_MakeArray_Array' has a wrong offset!");

}

