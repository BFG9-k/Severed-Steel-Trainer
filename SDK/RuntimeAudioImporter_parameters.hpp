#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeAudioImporter

#include "Basic.hpp"

#include "RuntimeAudioImporter_structs.hpp"


namespace SDK::Params
{

// Function RuntimeAudioImporter.ImportedSoundWave.GetPCMBufferCopy
// 0x0010 (0x0010 - 0x0000)
struct ImportedSoundWave_GetPCMBufferCopy final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetPCMBufferCopy) == 0x000008, "Wrong alignment on ImportedSoundWave_GetPCMBufferCopy");
static_assert(sizeof(ImportedSoundWave_GetPCMBufferCopy) == 0x000010, "Wrong size on ImportedSoundWave_GetPCMBufferCopy");
static_assert(offsetof(ImportedSoundWave_GetPCMBufferCopy, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetPCMBufferCopy::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.MixSoundWaveChannels
// 0x0008 (0x0008 - 0x0000)
struct ImportedSoundWave_MixSoundWaveChannels final
{
public:
	int32                                         NewNumOfChannels;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImportedSoundWave_MixSoundWaveChannels) == 0x000004, "Wrong alignment on ImportedSoundWave_MixSoundWaveChannels");
static_assert(sizeof(ImportedSoundWave_MixSoundWaveChannels) == 0x000008, "Wrong size on ImportedSoundWave_MixSoundWaveChannels");
static_assert(offsetof(ImportedSoundWave_MixSoundWaveChannels, NewNumOfChannels) == 0x000000, "Member 'ImportedSoundWave_MixSoundWaveChannels::NewNumOfChannels' has a wrong offset!");
static_assert(offsetof(ImportedSoundWave_MixSoundWaveChannels, ReturnValue) == 0x000004, "Member 'ImportedSoundWave_MixSoundWaveChannels::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.PrepareSoundWaveForMetaSounds
// 0x0010 (0x0010 - 0x0000)
struct ImportedSoundWave_PrepareSoundWaveForMetaSounds final
{
public:
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_PrepareSoundWaveForMetaSounds) == 0x000004, "Wrong alignment on ImportedSoundWave_PrepareSoundWaveForMetaSounds");
static_assert(sizeof(ImportedSoundWave_PrepareSoundWaveForMetaSounds) == 0x000010, "Wrong size on ImportedSoundWave_PrepareSoundWaveForMetaSounds");
static_assert(offsetof(ImportedSoundWave_PrepareSoundWaveForMetaSounds, Result) == 0x000000, "Member 'ImportedSoundWave_PrepareSoundWaveForMetaSounds::Result' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.ReleasePlayedAudioData
// 0x0010 (0x0010 - 0x0000)
struct ImportedSoundWave_ReleasePlayedAudioData final
{
public:
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_ReleasePlayedAudioData) == 0x000004, "Wrong alignment on ImportedSoundWave_ReleasePlayedAudioData");
static_assert(sizeof(ImportedSoundWave_ReleasePlayedAudioData) == 0x000010, "Wrong size on ImportedSoundWave_ReleasePlayedAudioData");
static_assert(offsetof(ImportedSoundWave_ReleasePlayedAudioData, Result) == 0x000000, "Member 'ImportedSoundWave_ReleasePlayedAudioData::Result' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.ResampleSoundWave
// 0x0008 (0x0008 - 0x0000)
struct ImportedSoundWave_ResampleSoundWave final
{
public:
	int32                                         NewSampleRate;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImportedSoundWave_ResampleSoundWave) == 0x000004, "Wrong alignment on ImportedSoundWave_ResampleSoundWave");
static_assert(sizeof(ImportedSoundWave_ResampleSoundWave) == 0x000008, "Wrong size on ImportedSoundWave_ResampleSoundWave");
static_assert(offsetof(ImportedSoundWave_ResampleSoundWave, NewSampleRate) == 0x000000, "Member 'ImportedSoundWave_ResampleSoundWave::NewSampleRate' has a wrong offset!");
static_assert(offsetof(ImportedSoundWave_ResampleSoundWave, ReturnValue) == 0x000004, "Member 'ImportedSoundWave_ResampleSoundWave::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.RewindPlaybackTime
// 0x0008 (0x0008 - 0x0000)
struct ImportedSoundWave_RewindPlaybackTime final
{
public:
	float                                         PlaybackTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImportedSoundWave_RewindPlaybackTime) == 0x000004, "Wrong alignment on ImportedSoundWave_RewindPlaybackTime");
static_assert(sizeof(ImportedSoundWave_RewindPlaybackTime) == 0x000008, "Wrong size on ImportedSoundWave_RewindPlaybackTime");
static_assert(offsetof(ImportedSoundWave_RewindPlaybackTime, PlaybackTime) == 0x000000, "Member 'ImportedSoundWave_RewindPlaybackTime::PlaybackTime' has a wrong offset!");
static_assert(offsetof(ImportedSoundWave_RewindPlaybackTime, ReturnValue) == 0x000004, "Member 'ImportedSoundWave_RewindPlaybackTime::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.SetLooping
// 0x0001 (0x0001 - 0x0000)
struct ImportedSoundWave_SetLooping final
{
public:
	bool                                          bLoop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_SetLooping) == 0x000001, "Wrong alignment on ImportedSoundWave_SetLooping");
static_assert(sizeof(ImportedSoundWave_SetLooping) == 0x000001, "Wrong size on ImportedSoundWave_SetLooping");
static_assert(offsetof(ImportedSoundWave_SetLooping, bLoop) == 0x000000, "Member 'ImportedSoundWave_SetLooping::bLoop' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.SetPitch
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_SetPitch final
{
public:
	float                                         InPitch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_SetPitch) == 0x000004, "Wrong alignment on ImportedSoundWave_SetPitch");
static_assert(sizeof(ImportedSoundWave_SetPitch) == 0x000004, "Wrong size on ImportedSoundWave_SetPitch");
static_assert(offsetof(ImportedSoundWave_SetPitch, InPitch) == 0x000000, "Member 'ImportedSoundWave_SetPitch::InPitch' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.SetSubtitles
// 0x0010 (0x0010 - 0x0000)
struct ImportedSoundWave_SetSubtitles final
{
public:
	TArray<struct FEditableSubtitleCue>           InSubtitles;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_SetSubtitles) == 0x000008, "Wrong alignment on ImportedSoundWave_SetSubtitles");
static_assert(sizeof(ImportedSoundWave_SetSubtitles) == 0x000010, "Wrong size on ImportedSoundWave_SetSubtitles");
static_assert(offsetof(ImportedSoundWave_SetSubtitles, InSubtitles) == 0x000000, "Member 'ImportedSoundWave_SetSubtitles::InSubtitles' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_SetVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_SetVolume) == 0x000004, "Wrong alignment on ImportedSoundWave_SetVolume");
static_assert(sizeof(ImportedSoundWave_SetVolume) == 0x000004, "Wrong size on ImportedSoundWave_SetVolume");
static_assert(offsetof(ImportedSoundWave_SetVolume, InVolume) == 0x000000, "Member 'ImportedSoundWave_SetVolume::InVolume' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetAudioFormat
// 0x0001 (0x0001 - 0x0000)
struct ImportedSoundWave_GetAudioFormat final
{
public:
	ERuntimeAudioFormat                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetAudioFormat) == 0x000001, "Wrong alignment on ImportedSoundWave_GetAudioFormat");
static_assert(sizeof(ImportedSoundWave_GetAudioFormat) == 0x000001, "Wrong size on ImportedSoundWave_GetAudioFormat");
static_assert(offsetof(ImportedSoundWave_GetAudioFormat, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetAudioFormat::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetAudioHeaderInfo
// 0x0028 (0x0028 - 0x0000)
struct ImportedSoundWave_GetAudioHeaderInfo final
{
public:
	struct FRuntimeAudioHeaderInfo                HeaderInfo;                                        // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImportedSoundWave_GetAudioHeaderInfo) == 0x000008, "Wrong alignment on ImportedSoundWave_GetAudioHeaderInfo");
static_assert(sizeof(ImportedSoundWave_GetAudioHeaderInfo) == 0x000028, "Wrong size on ImportedSoundWave_GetAudioHeaderInfo");
static_assert(offsetof(ImportedSoundWave_GetAudioHeaderInfo, HeaderInfo) == 0x000000, "Member 'ImportedSoundWave_GetAudioHeaderInfo::HeaderInfo' has a wrong offset!");
static_assert(offsetof(ImportedSoundWave_GetAudioHeaderInfo, ReturnValue) == 0x000020, "Member 'ImportedSoundWave_GetAudioHeaderInfo::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetDurationConst
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetDurationConst final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetDurationConst) == 0x000004, "Wrong alignment on ImportedSoundWave_GetDurationConst");
static_assert(sizeof(ImportedSoundWave_GetDurationConst) == 0x000004, "Wrong size on ImportedSoundWave_GetDurationConst");
static_assert(offsetof(ImportedSoundWave_GetDurationConst, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetDurationConst::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetDurationOffset
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetDurationOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetDurationOffset) == 0x000004, "Wrong alignment on ImportedSoundWave_GetDurationOffset");
static_assert(sizeof(ImportedSoundWave_GetDurationOffset) == 0x000004, "Wrong size on ImportedSoundWave_GetDurationOffset");
static_assert(offsetof(ImportedSoundWave_GetDurationOffset, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetDurationOffset::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetNumOfChannels
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetNumOfChannels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetNumOfChannels) == 0x000004, "Wrong alignment on ImportedSoundWave_GetNumOfChannels");
static_assert(sizeof(ImportedSoundWave_GetNumOfChannels) == 0x000004, "Wrong size on ImportedSoundWave_GetNumOfChannels");
static_assert(offsetof(ImportedSoundWave_GetNumOfChannels, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetNumOfChannels::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetPlaybackPercentage
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetPlaybackPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetPlaybackPercentage) == 0x000004, "Wrong alignment on ImportedSoundWave_GetPlaybackPercentage");
static_assert(sizeof(ImportedSoundWave_GetPlaybackPercentage) == 0x000004, "Wrong size on ImportedSoundWave_GetPlaybackPercentage");
static_assert(offsetof(ImportedSoundWave_GetPlaybackPercentage, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetPlaybackPercentage::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetPlaybackTime
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetPlaybackTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetPlaybackTime) == 0x000004, "Wrong alignment on ImportedSoundWave_GetPlaybackTime");
static_assert(sizeof(ImportedSoundWave_GetPlaybackTime) == 0x000004, "Wrong size on ImportedSoundWave_GetPlaybackTime");
static_assert(offsetof(ImportedSoundWave_GetPlaybackTime, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetPlaybackTime::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.GetSampleRate
// 0x0004 (0x0004 - 0x0000)
struct ImportedSoundWave_GetSampleRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_GetSampleRate) == 0x000004, "Wrong alignment on ImportedSoundWave_GetSampleRate");
static_assert(sizeof(ImportedSoundWave_GetSampleRate) == 0x000004, "Wrong size on ImportedSoundWave_GetSampleRate");
static_assert(offsetof(ImportedSoundWave_GetSampleRate, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_GetSampleRate::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.ImportedSoundWave.IsPlaybackFinished
// 0x0001 (0x0001 - 0x0000)
struct ImportedSoundWave_IsPlaybackFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImportedSoundWave_IsPlaybackFinished) == 0x000001, "Wrong alignment on ImportedSoundWave_IsPlaybackFinished");
static_assert(sizeof(ImportedSoundWave_IsPlaybackFinished) == 0x000001, "Wrong size on ImportedSoundWave_IsPlaybackFinished");
static_assert(offsetof(ImportedSoundWave_IsPlaybackFinished, ReturnValue) == 0x000000, "Member 'ImportedSoundWave_IsPlaybackFinished::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.StreamingSoundWave.CreateStreamingSoundWave
// 0x0008 (0x0008 - 0x0000)
struct StreamingSoundWave_CreateStreamingSoundWave final
{
public:
	class UStreamingSoundWave*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamingSoundWave_CreateStreamingSoundWave) == 0x000008, "Wrong alignment on StreamingSoundWave_CreateStreamingSoundWave");
static_assert(sizeof(StreamingSoundWave_CreateStreamingSoundWave) == 0x000008, "Wrong size on StreamingSoundWave_CreateStreamingSoundWave");
static_assert(offsetof(StreamingSoundWave_CreateStreamingSoundWave, ReturnValue) == 0x000000, "Member 'StreamingSoundWave_CreateStreamingSoundWave::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.StreamingSoundWave.AppendAudioDataFromEncoded
// 0x0018 (0x0018 - 0x0000)
struct StreamingSoundWave_AppendAudioDataFromEncoded final
{
public:
	TArray<uint8>                                 AudioData;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StreamingSoundWave_AppendAudioDataFromEncoded) == 0x000008, "Wrong alignment on StreamingSoundWave_AppendAudioDataFromEncoded");
static_assert(sizeof(StreamingSoundWave_AppendAudioDataFromEncoded) == 0x000018, "Wrong size on StreamingSoundWave_AppendAudioDataFromEncoded");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromEncoded, AudioData) == 0x000000, "Member 'StreamingSoundWave_AppendAudioDataFromEncoded::AudioData' has a wrong offset!");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromEncoded, AudioFormat) == 0x000010, "Member 'StreamingSoundWave_AppendAudioDataFromEncoded::AudioFormat' has a wrong offset!");

// Function RuntimeAudioImporter.StreamingSoundWave.AppendAudioDataFromRAW
// 0x0020 (0x0020 - 0x0000)
struct StreamingSoundWave_AppendAudioDataFromRAW final
{
public:
	TArray<uint8>                                 RAWData;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormat;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSampleRate;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfChannels;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StreamingSoundWave_AppendAudioDataFromRAW) == 0x000008, "Wrong alignment on StreamingSoundWave_AppendAudioDataFromRAW");
static_assert(sizeof(StreamingSoundWave_AppendAudioDataFromRAW) == 0x000020, "Wrong size on StreamingSoundWave_AppendAudioDataFromRAW");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromRAW, RAWData) == 0x000000, "Member 'StreamingSoundWave_AppendAudioDataFromRAW::RAWData' has a wrong offset!");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromRAW, RAWFormat) == 0x000010, "Member 'StreamingSoundWave_AppendAudioDataFromRAW::RAWFormat' has a wrong offset!");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromRAW, InSampleRate) == 0x000014, "Member 'StreamingSoundWave_AppendAudioDataFromRAW::InSampleRate' has a wrong offset!");
static_assert(offsetof(StreamingSoundWave_AppendAudioDataFromRAW, NumOfChannels) == 0x000018, "Member 'StreamingSoundWave_AppendAudioDataFromRAW::NumOfChannels' has a wrong offset!");

// Function RuntimeAudioImporter.StreamingSoundWave.PreAllocateAudioData
// 0x0018 (0x0018 - 0x0000)
struct StreamingSoundWave_PreAllocateAudioData final
{
public:
	int64                                         NumOfBytesToPreAllocate;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamingSoundWave_PreAllocateAudioData) == 0x000008, "Wrong alignment on StreamingSoundWave_PreAllocateAudioData");
static_assert(sizeof(StreamingSoundWave_PreAllocateAudioData) == 0x000018, "Wrong size on StreamingSoundWave_PreAllocateAudioData");
static_assert(offsetof(StreamingSoundWave_PreAllocateAudioData, NumOfBytesToPreAllocate) == 0x000000, "Member 'StreamingSoundWave_PreAllocateAudioData::NumOfBytesToPreAllocate' has a wrong offset!");
static_assert(offsetof(StreamingSoundWave_PreAllocateAudioData, Result) == 0x000008, "Member 'StreamingSoundWave_PreAllocateAudioData::Result' has a wrong offset!");

// Function RuntimeAudioImporter.StreamingSoundWave.SetStopSoundOnPlaybackFinish
// 0x0001 (0x0001 - 0x0000)
struct StreamingSoundWave_SetStopSoundOnPlaybackFinish final
{
public:
	bool                                          bStop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamingSoundWave_SetStopSoundOnPlaybackFinish) == 0x000001, "Wrong alignment on StreamingSoundWave_SetStopSoundOnPlaybackFinish");
static_assert(sizeof(StreamingSoundWave_SetStopSoundOnPlaybackFinish) == 0x000001, "Wrong size on StreamingSoundWave_SetStopSoundOnPlaybackFinish");
static_assert(offsetof(StreamingSoundWave_SetStopSoundOnPlaybackFinish, bStop) == 0x000000, "Member 'StreamingSoundWave_SetStopSoundOnPlaybackFinish::bStop' has a wrong offset!");

// Function RuntimeAudioImporter.CapturableSoundWave.CreateCapturableSoundWave
// 0x0008 (0x0008 - 0x0000)
struct CapturableSoundWave_CreateCapturableSoundWave final
{
public:
	class UCapturableSoundWave*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturableSoundWave_CreateCapturableSoundWave) == 0x000008, "Wrong alignment on CapturableSoundWave_CreateCapturableSoundWave");
static_assert(sizeof(CapturableSoundWave_CreateCapturableSoundWave) == 0x000008, "Wrong size on CapturableSoundWave_CreateCapturableSoundWave");
static_assert(offsetof(CapturableSoundWave_CreateCapturableSoundWave, ReturnValue) == 0x000000, "Member 'CapturableSoundWave_CreateCapturableSoundWave::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.CapturableSoundWave.GetAvailableAudioInputDevices
// 0x0010 (0x0010 - 0x0000)
struct CapturableSoundWave_GetAvailableAudioInputDevices final
{
public:
	TDelegate<void(TArray<struct FRuntimeAudioInputDeviceInfo>& AvailableDevices)> Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturableSoundWave_GetAvailableAudioInputDevices) == 0x000004, "Wrong alignment on CapturableSoundWave_GetAvailableAudioInputDevices");
static_assert(sizeof(CapturableSoundWave_GetAvailableAudioInputDevices) == 0x000010, "Wrong size on CapturableSoundWave_GetAvailableAudioInputDevices");
static_assert(offsetof(CapturableSoundWave_GetAvailableAudioInputDevices, Result) == 0x000000, "Member 'CapturableSoundWave_GetAvailableAudioInputDevices::Result' has a wrong offset!");

// Function RuntimeAudioImporter.CapturableSoundWave.StartCapture
// 0x0008 (0x0008 - 0x0000)
struct CapturableSoundWave_StartCapture final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CapturableSoundWave_StartCapture) == 0x000004, "Wrong alignment on CapturableSoundWave_StartCapture");
static_assert(sizeof(CapturableSoundWave_StartCapture) == 0x000008, "Wrong size on CapturableSoundWave_StartCapture");
static_assert(offsetof(CapturableSoundWave_StartCapture, DeviceID) == 0x000000, "Member 'CapturableSoundWave_StartCapture::DeviceID' has a wrong offset!");
static_assert(offsetof(CapturableSoundWave_StartCapture, ReturnValue) == 0x000004, "Member 'CapturableSoundWave_StartCapture::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.CapturableSoundWave.ToggleMute
// 0x0002 (0x0002 - 0x0000)
struct CapturableSoundWave_ToggleMute final
{
public:
	bool                                          bMute;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturableSoundWave_ToggleMute) == 0x000001, "Wrong alignment on CapturableSoundWave_ToggleMute");
static_assert(sizeof(CapturableSoundWave_ToggleMute) == 0x000002, "Wrong size on CapturableSoundWave_ToggleMute");
static_assert(offsetof(CapturableSoundWave_ToggleMute, bMute) == 0x000000, "Member 'CapturableSoundWave_ToggleMute::bMute' has a wrong offset!");
static_assert(offsetof(CapturableSoundWave_ToggleMute, ReturnValue) == 0x000001, "Member 'CapturableSoundWave_ToggleMute::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.CapturableSoundWave.IsCapturing
// 0x0001 (0x0001 - 0x0000)
struct CapturableSoundWave_IsCapturing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturableSoundWave_IsCapturing) == 0x000001, "Wrong alignment on CapturableSoundWave_IsCapturing");
static_assert(sizeof(CapturableSoundWave_IsCapturing) == 0x000001, "Wrong size on CapturableSoundWave_IsCapturing");
static_assert(offsetof(CapturableSoundWave_IsCapturing, ReturnValue) == 0x000000, "Member 'CapturableSoundWave_IsCapturing::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToBuffer
// 0x0028 (0x0028 - 0x0000)
struct RuntimeAudioExporter_ExportSoundWaveToBuffer final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Quality;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)> Result;                                            // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioExporter_ExportSoundWaveToBuffer) == 0x000008, "Wrong alignment on RuntimeAudioExporter_ExportSoundWaveToBuffer");
static_assert(sizeof(RuntimeAudioExporter_ExportSoundWaveToBuffer) == 0x000028, "Wrong size on RuntimeAudioExporter_ExportSoundWaveToBuffer");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToBuffer, ImportedSoundWave) == 0x000000, "Member 'RuntimeAudioExporter_ExportSoundWaveToBuffer::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToBuffer, AudioFormat) == 0x000008, "Member 'RuntimeAudioExporter_ExportSoundWaveToBuffer::AudioFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToBuffer, Quality) == 0x000009, "Member 'RuntimeAudioExporter_ExportSoundWaveToBuffer::Quality' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToBuffer, OverrideOptions) == 0x00000C, "Member 'RuntimeAudioExporter_ExportSoundWaveToBuffer::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToBuffer, Result) == 0x000014, "Member 'RuntimeAudioExporter_ExportSoundWaveToBuffer::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToFile
// 0x0038 (0x0038 - 0x0000)
struct RuntimeAudioExporter_ExportSoundWaveToFile final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SavePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Quality;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x001C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioExporter_ExportSoundWaveToFile) == 0x000008, "Wrong alignment on RuntimeAudioExporter_ExportSoundWaveToFile");
static_assert(sizeof(RuntimeAudioExporter_ExportSoundWaveToFile) == 0x000038, "Wrong size on RuntimeAudioExporter_ExportSoundWaveToFile");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, ImportedSoundWave) == 0x000000, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, SavePath) == 0x000008, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::SavePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, AudioFormat) == 0x000018, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::AudioFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, Quality) == 0x000019, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::Quality' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, OverrideOptions) == 0x00001C, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToFile, Result) == 0x000024, "Member 'RuntimeAudioExporter_ExportSoundWaveToFile::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToRAWBuffer
// 0x0028 (0x0028 - 0x0000)
struct RuntimeAudioExporter_ExportSoundWaveToRAWBuffer final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormat;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)> Result;                                            // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer) == 0x000008, "Wrong alignment on RuntimeAudioExporter_ExportSoundWaveToRAWBuffer");
static_assert(sizeof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer) == 0x000028, "Wrong size on RuntimeAudioExporter_ExportSoundWaveToRAWBuffer");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer, ImportedSoundWave) == 0x000000, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWBuffer::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer, RAWFormat) == 0x000008, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWBuffer::RAWFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer, OverrideOptions) == 0x00000C, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWBuffer::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWBuffer, Result) == 0x000014, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWBuffer::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToRAWFile
// 0x0038 (0x0038 - 0x0000)
struct RuntimeAudioExporter_ExportSoundWaveToRAWFile final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SavePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormat;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x001C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioExporter_ExportSoundWaveToRAWFile) == 0x000008, "Wrong alignment on RuntimeAudioExporter_ExportSoundWaveToRAWFile");
static_assert(sizeof(RuntimeAudioExporter_ExportSoundWaveToRAWFile) == 0x000038, "Wrong size on RuntimeAudioExporter_ExportSoundWaveToRAWFile");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWFile, ImportedSoundWave) == 0x000000, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWFile::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWFile, SavePath) == 0x000008, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWFile::SavePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWFile, RAWFormat) == 0x000018, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWFile::RAWFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWFile, OverrideOptions) == 0x00001C, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWFile::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioExporter_ExportSoundWaveToRAWFile, Result) == 0x000024, "Member 'RuntimeAudioExporter_ExportSoundWaveToRAWFile::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ConvertRegularToImportedSoundWave
// 0x0020 (0x0020 - 0x0000)
struct RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UImportedSoundWave>         ImportedSoundWaveClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, class UImportedSoundWave* ImportedSoundWave)> Result;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave");
static_assert(sizeof(RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave) == 0x000020, "Wrong size on RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave");
static_assert(offsetof(RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave, SoundWave) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave::SoundWave' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave, ImportedSoundWaveClass) == 0x000008, "Member 'RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave::ImportedSoundWaveClass' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave, Result) == 0x000010, "Member 'RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.CreateRuntimeAudioImporter
// 0x0008 (0x0008 - 0x0000)
struct RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter final
{
public:
	class URuntimeAudioImporterLibrary*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter");
static_assert(sizeof(RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter) == 0x000008, "Wrong size on RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter");
static_assert(offsetof(RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter, ReturnValue) == 0x000000, "Member 'RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromBuffer
// 0x0018 (0x0018 - 0x0000)
struct RuntimeAudioImporterLibrary_ImportAudioFromBuffer final
{
public:
	TArray<uint8>                                 AudioData;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioImporterLibrary_ImportAudioFromBuffer) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ImportAudioFromBuffer");
static_assert(sizeof(RuntimeAudioImporterLibrary_ImportAudioFromBuffer) == 0x000018, "Wrong size on RuntimeAudioImporterLibrary_ImportAudioFromBuffer");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromBuffer, AudioData) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromBuffer::AudioData' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromBuffer, AudioFormat) == 0x000010, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromBuffer::AudioFormat' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromFile
// 0x0018 (0x0018 - 0x0000)
struct RuntimeAudioImporterLibrary_ImportAudioFromFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioImporterLibrary_ImportAudioFromFile) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ImportAudioFromFile");
static_assert(sizeof(RuntimeAudioImporterLibrary_ImportAudioFromFile) == 0x000018, "Wrong size on RuntimeAudioImporterLibrary_ImportAudioFromFile");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromFile, FilePath) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromFile, AudioFormat) == 0x000010, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromFile::AudioFormat' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromPreImportedSound
// 0x0008 (0x0008 - 0x0000)
struct RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound final
{
public:
	class UPreImportedSoundAsset*                 PreImportedSoundAsset;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound");
static_assert(sizeof(RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound) == 0x000008, "Wrong size on RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound, PreImportedSoundAsset) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound::PreImportedSoundAsset' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromRAWBuffer
// 0x0020 (0x0020 - 0x0000)
struct RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer final
{
public:
	TArray<uint8>                                 RAWBuffer;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormat;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SampleRate;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfChannels;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer");
static_assert(sizeof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer) == 0x000020, "Wrong size on RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer, RAWBuffer) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer::RAWBuffer' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer, RAWFormat) == 0x000010, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer::RAWFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer, SampleRate) == 0x000014, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer::SampleRate' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer, NumOfChannels) == 0x000018, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer::NumOfChannels' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromRAWFile
// 0x0020 (0x0020 - 0x0000)
struct RuntimeAudioImporterLibrary_ImportAudioFromRAWFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormat;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SampleRate;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfChannels;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile) == 0x000008, "Wrong alignment on RuntimeAudioImporterLibrary_ImportAudioFromRAWFile");
static_assert(sizeof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile) == 0x000020, "Wrong size on RuntimeAudioImporterLibrary_ImportAudioFromRAWFile");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile, FilePath) == 0x000000, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWFile::FilePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile, RAWFormat) == 0x000010, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWFile::RAWFormat' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile, SampleRate) == 0x000014, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWFile::SampleRate' has a wrong offset!");
static_assert(offsetof(RuntimeAudioImporterLibrary_ImportAudioFromRAWFile, NumOfChannels) == 0x000018, "Member 'RuntimeAudioImporterLibrary_ImportAudioFromRAWFile::NumOfChannels' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeEncodedDataFromBuffer
// 0x0030 (0x0030 - 0x0000)
struct RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer final
{
public:
	TArray<uint8>                                 EncodedDataFrom;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           EncodedFormatFrom;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           EncodedFormatTo;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Quality;                                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x0014(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, TArray<uint8>& EncodedData)> Result;                                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer) == 0x000008, "Wrong alignment on RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer");
static_assert(sizeof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer) == 0x000030, "Wrong size on RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, EncodedDataFrom) == 0x000000, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::EncodedDataFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, EncodedFormatFrom) == 0x000010, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::EncodedFormatFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, EncodedFormatTo) == 0x000011, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::EncodedFormatTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, Quality) == 0x000012, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::Quality' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, OverrideOptions) == 0x000014, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer, Result) == 0x00001C, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeEncodedDataFromFile
// 0x0048 (0x0048 - 0x0000)
struct RuntimeAudioTranscoder_TranscodeEncodedDataFromFile final
{
public:
	class FString                                 FilePathFrom;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           EncodedFormatFrom;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePathTo;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           EncodedFormatTo;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Quality;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeAudioExportOverrideOptions     OverrideOptions;                                   // 0x002C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile) == 0x000008, "Wrong alignment on RuntimeAudioTranscoder_TranscodeEncodedDataFromFile");
static_assert(sizeof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile) == 0x000048, "Wrong size on RuntimeAudioTranscoder_TranscodeEncodedDataFromFile");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, FilePathFrom) == 0x000000, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::FilePathFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, EncodedFormatFrom) == 0x000010, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::EncodedFormatFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, FilePathTo) == 0x000018, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::FilePathTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, EncodedFormatTo) == 0x000028, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::EncodedFormatTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, Quality) == 0x000029, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::Quality' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, OverrideOptions) == 0x00002C, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::OverrideOptions' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeEncodedDataFromFile, Result) == 0x000034, "Member 'RuntimeAudioTranscoder_TranscodeEncodedDataFromFile::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeRAWDataFromBuffer
// 0x0028 (0x0028 - 0x0000)
struct RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer final
{
public:
	TArray<uint8>                                 RAWDataFrom;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormatFrom;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormatTo;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSucceeded, TArray<uint8>& RAWData)> Result;                                            // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer) == 0x000008, "Wrong alignment on RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer");
static_assert(sizeof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer) == 0x000028, "Wrong size on RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer, RAWDataFrom) == 0x000000, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer::RAWDataFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer, RAWFormatFrom) == 0x000010, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer::RAWFormatFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer, RAWFormatTo) == 0x000011, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer::RAWFormatTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer, Result) == 0x000014, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeRAWDataFromFile
// 0x0040 (0x0040 - 0x0000)
struct RuntimeAudioTranscoder_TranscodeRAWDataFromFile final
{
public:
	class FString                                 FilePathFrom;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormatFrom;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePathTo;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeRAWAudioFormat                        RAWFormatTo;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSucceeded)>              Result;                                            // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile) == 0x000008, "Wrong alignment on RuntimeAudioTranscoder_TranscodeRAWDataFromFile");
static_assert(sizeof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile) == 0x000040, "Wrong size on RuntimeAudioTranscoder_TranscodeRAWDataFromFile");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile, FilePathFrom) == 0x000000, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromFile::FilePathFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile, RAWFormatFrom) == 0x000010, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromFile::RAWFormatFrom' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile, FilePathTo) == 0x000018, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromFile::FilePathTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile, RAWFormatTo) == 0x000028, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromFile::RAWFormatTo' has a wrong offset!");
static_assert(offsetof(RuntimeAudioTranscoder_TranscodeRAWDataFromFile, Result) == 0x00002C, "Member 'RuntimeAudioTranscoder_TranscodeRAWDataFromFile::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.ConvertSecondsToString
// 0x0018 (0x0018 - 0x0000)
struct RuntimeAudioUtilities_ConvertSecondsToString final
{
public:
	int64                                         Seconds;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioUtilities_ConvertSecondsToString) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_ConvertSecondsToString");
static_assert(sizeof(RuntimeAudioUtilities_ConvertSecondsToString) == 0x000018, "Wrong size on RuntimeAudioUtilities_ConvertSecondsToString");
static_assert(offsetof(RuntimeAudioUtilities_ConvertSecondsToString, Seconds) == 0x000000, "Member 'RuntimeAudioUtilities_ConvertSecondsToString::Seconds' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_ConvertSecondsToString, ReturnValue) == 0x000008, "Member 'RuntimeAudioUtilities_ConvertSecondsToString::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioFormat
// 0x0018 (0x0018 - 0x0000)
struct RuntimeAudioUtilities_GetAudioFormat final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioUtilities_GetAudioFormat) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_GetAudioFormat");
static_assert(sizeof(RuntimeAudioUtilities_GetAudioFormat) == 0x000018, "Wrong size on RuntimeAudioUtilities_GetAudioFormat");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioFormat, FilePath) == 0x000000, "Member 'RuntimeAudioUtilities_GetAudioFormat::FilePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioFormat, ReturnValue) == 0x000010, "Member 'RuntimeAudioUtilities_GetAudioFormat::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioFormatAdvanced
// 0x0018 (0x0018 - 0x0000)
struct RuntimeAudioUtilities_GetAudioFormatAdvanced final
{
public:
	TArray<uint8>                                 AudioData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioUtilities_GetAudioFormatAdvanced) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_GetAudioFormatAdvanced");
static_assert(sizeof(RuntimeAudioUtilities_GetAudioFormatAdvanced) == 0x000018, "Wrong size on RuntimeAudioUtilities_GetAudioFormatAdvanced");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioFormatAdvanced, AudioData) == 0x000000, "Member 'RuntimeAudioUtilities_GetAudioFormatAdvanced::AudioData' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioFormatAdvanced, ReturnValue) == 0x000010, "Member 'RuntimeAudioUtilities_GetAudioFormatAdvanced::ReturnValue' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioHeaderInfoFromBuffer
// 0x0020 (0x0020 - 0x0000)
struct RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer final
{
public:
	TArray<uint8>                                 AudioData;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)> Result;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer");
static_assert(sizeof(RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer) == 0x000020, "Wrong size on RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer, AudioData) == 0x000000, "Member 'RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer::AudioData' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer, Result) == 0x000010, "Member 'RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioHeaderInfoFromFile
// 0x0020 (0x0020 - 0x0000)
struct RuntimeAudioUtilities_GetAudioHeaderInfoFromFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)> Result;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeAudioUtilities_GetAudioHeaderInfoFromFile) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_GetAudioHeaderInfoFromFile");
static_assert(sizeof(RuntimeAudioUtilities_GetAudioHeaderInfoFromFile) == 0x000020, "Wrong size on RuntimeAudioUtilities_GetAudioHeaderInfoFromFile");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioHeaderInfoFromFile, FilePath) == 0x000000, "Member 'RuntimeAudioUtilities_GetAudioHeaderInfoFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_GetAudioHeaderInfoFromFile, Result) == 0x000010, "Member 'RuntimeAudioUtilities_GetAudioHeaderInfoFromFile::Result' has a wrong offset!");

// Function RuntimeAudioImporter.RuntimeAudioUtilities.ScanDirectoryForAudioFiles
// 0x0028 (0x0028 - 0x0000)
struct RuntimeAudioUtilities_ScanDirectoryForAudioFiles final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSucceeded, TArray<class FString>& AudioFilePaths)> Result;                                            // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeAudioUtilities_ScanDirectoryForAudioFiles) == 0x000008, "Wrong alignment on RuntimeAudioUtilities_ScanDirectoryForAudioFiles");
static_assert(sizeof(RuntimeAudioUtilities_ScanDirectoryForAudioFiles) == 0x000028, "Wrong size on RuntimeAudioUtilities_ScanDirectoryForAudioFiles");
static_assert(offsetof(RuntimeAudioUtilities_ScanDirectoryForAudioFiles, Directory) == 0x000000, "Member 'RuntimeAudioUtilities_ScanDirectoryForAudioFiles::Directory' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_ScanDirectoryForAudioFiles, bRecursive) == 0x000010, "Member 'RuntimeAudioUtilities_ScanDirectoryForAudioFiles::bRecursive' has a wrong offset!");
static_assert(offsetof(RuntimeAudioUtilities_ScanDirectoryForAudioFiles, Result) == 0x000014, "Member 'RuntimeAudioUtilities_ScanDirectoryForAudioFiles::Result' has a wrong offset!");

}

