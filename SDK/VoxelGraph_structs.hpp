#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoxelGraph

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VoxelGraph.EVoxelFunctionAxisDependencies
// NumValues: 0x0006
enum class EVoxelFunctionAxisDependencies : uint8
{
	X                                        = 0,
	XYWithCache                              = 1,
	XYWithoutCache                           = 2,
	XYZWithCache                             = 3,
	XYZWithoutCache                          = 4,
	EVoxelFunctionAxisDependencies_MAX       = 5,
};

// Enum VoxelGraph.EVoxelGraphGeneratorDebugLevel
// NumValues: 0x0009
enum class EVoxelGraphGeneratorDebugLevel : uint8
{
	BeforeMacroInlining                      = 0,
	AfterMacroInlining                       = 1,
	AfterBiomeMergeReplace                   = 2,
	AfterSmartMinMaxReplace                  = 3,
	BeforeFillFunctionSeparators             = 4,
	Output                                   = 5,
	Function                                 = 6,
	Axis                                     = 7,
	EVoxelGraphGeneratorDebugLevel_MAX       = 8,
};

// Enum VoxelGraph.EVoxelGraphMaterialPreviewType
// NumValues: 0x000B
enum class EVoxelGraphMaterialPreviewType : uint8
{
	RGB                                      = 0,
	Alpha                                    = 1,
	SingleIndex                              = 2,
	MultiIndex_Overview                      = 3,
	MultiIndex_SingleIndexPreview            = 4,
	MultiIndex_Wetness                       = 5,
	UV0                                      = 6,
	UV1                                      = 7,
	UV2                                      = 8,
	UV3                                      = 9,
	EVoxelGraphMaterialPreviewType_MAX       = 10,
};

// Enum VoxelGraph.EVoxelGraphPreviewShowValue
// NumValues: 0x0004
enum class EVoxelGraphPreviewShowValue : uint8
{
	ShowValue                                = 0,
	ShowRange                                = 1,
	ShowValueAndRange                        = 2,
	EVoxelGraphPreviewShowValue_MAX          = 3,
};

// Enum VoxelGraph.EVoxelGraphPreviewType
// NumValues: 0x0005
enum class EVoxelGraphPreviewType : uint8
{
	Density                                  = 0,
	Material                                 = 1,
	Cost                                     = 2,
	RangeAnalysis                            = 3,
	EVoxelGraphPreviewType_MAX               = 4,
};

// Enum VoxelGraph.EVoxelGraphPreviewAxes
// NumValues: 0x0004
enum class EVoxelGraphPreviewAxes : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EVoxelGraphPreviewAxes_MAX               = 3,
};

// Enum VoxelGraph.EVoxelNodeIfBranchToUseForRangeAnalysis
// NumValues: 0x0004
enum class EVoxelNodeIfBranchToUseForRangeAnalysis : uint8
{
	None                                     = 0,
	UseTrue                                  = 1,
	UseFalse                                 = 2,
	EVoxelNodeIfBranchToUseForRangeAnalysis_MAX = 3,
};

// Enum VoxelGraph.EVoxelPortalNodePinCategory
// NumValues: 0x0007
enum class EVoxelPortalNodePinCategory : uint8
{
	Boolean                                  = 0,
	Int                                      = 1,
	Float                                    = 2,
	Material                                 = 3,
	Color                                    = 4,
	Seed                                     = 5,
	EVoxelPortalNodePinCategory_MAX          = 6,
};

// Enum VoxelGraph.EVoxelDataPinCategory
// NumValues: 0x0006
enum class EVoxelDataPinCategory : uint8
{
	Boolean                                  = 0,
	Int                                      = 1,
	Float                                    = 2,
	Material                                 = 3,
	Color                                    = 4,
	EVoxelDataPinCategory_MAX                = 5,
};

// Enum VoxelGraph.EVoxelPinCategory
// NumValues: 0x000A
enum class EVoxelPinCategory : uint8
{
	Exec                                     = 0,
	Boolean                                  = 1,
	Int                                      = 2,
	Float                                    = 3,
	Material                                 = 4,
	Color                                    = 5,
	Seed                                     = 6,
	Wildcard                                 = 7,
	Vector                                   = 8,
	EVoxelPinCategory_MAX                    = 9,
};

// ScriptStruct VoxelGraph.BiomeMapElement
// 0x0018 (0x0018 - 0x0000)
struct FBiomeMapElement final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeMapElement) == 0x000008, "Wrong alignment on FBiomeMapElement");
static_assert(sizeof(FBiomeMapElement) == 0x000018, "Wrong size on FBiomeMapElement");
static_assert(offsetof(FBiomeMapElement, Color) == 0x000000, "Member 'FBiomeMapElement::Color' has a wrong offset!");
static_assert(offsetof(FBiomeMapElement, Name) == 0x000008, "Member 'FBiomeMapElement::Name' has a wrong offset!");

// ScriptStruct VoxelGraph.VoxelGraphMacroPin
// 0x0040 (0x0040 - 0x0000)
struct FVoxelGraphMacroPin final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelPinCategory                             Category;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tooltip;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomDefaultValue;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelGraphMacroPin) == 0x000008, "Wrong alignment on FVoxelGraphMacroPin");
static_assert(sizeof(FVoxelGraphMacroPin) == 0x000040, "Wrong size on FVoxelGraphMacroPin");
static_assert(offsetof(FVoxelGraphMacroPin, Name) == 0x000000, "Member 'FVoxelGraphMacroPin::Name' has a wrong offset!");
static_assert(offsetof(FVoxelGraphMacroPin, Category) == 0x000010, "Member 'FVoxelGraphMacroPin::Category' has a wrong offset!");
static_assert(offsetof(FVoxelGraphMacroPin, Tooltip) == 0x000018, "Member 'FVoxelGraphMacroPin::Tooltip' has a wrong offset!");
static_assert(offsetof(FVoxelGraphMacroPin, DefaultValue) == 0x000028, "Member 'FVoxelGraphMacroPin::DefaultValue' has a wrong offset!");
static_assert(offsetof(FVoxelGraphMacroPin, bCustomDefaultValue) == 0x000038, "Member 'FVoxelGraphMacroPin::bCustomDefaultValue' has a wrong offset!");

// ScriptStruct VoxelGraph.VoxelGraphOutput
// 0x0020 (0x0020 - 0x0000)
struct FVoxelGraphOutput final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelDataPinCategory                         Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Index;                                             // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGraphOutput) == 0x000004, "Wrong alignment on FVoxelGraphOutput");
static_assert(sizeof(FVoxelGraphOutput) == 0x000020, "Wrong size on FVoxelGraphOutput");
static_assert(offsetof(FVoxelGraphOutput, Name) == 0x000000, "Member 'FVoxelGraphOutput::Name' has a wrong offset!");
static_assert(offsetof(FVoxelGraphOutput, Category) == 0x000008, "Member 'FVoxelGraphOutput::Category' has a wrong offset!");
static_assert(offsetof(FVoxelGraphOutput, Guid) == 0x00000C, "Member 'FVoxelGraphOutput::Guid' has a wrong offset!");
static_assert(offsetof(FVoxelGraphOutput, Index) == 0x00001C, "Member 'FVoxelGraphOutput::Index' has a wrong offset!");

// ScriptStruct VoxelGraph.VoxelPortalNodeSelector
// 0x0008 (0x0008 - 0x0000)
struct FVoxelPortalNodeSelector final
{
public:
	TWeakObjectPtr<class UVoxelLocalVariableDeclaration> Input;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPortalNodeSelector) == 0x000004, "Wrong alignment on FVoxelPortalNodeSelector");
static_assert(sizeof(FVoxelPortalNodeSelector) == 0x000008, "Wrong size on FVoxelPortalNodeSelector");
static_assert(offsetof(FVoxelPortalNodeSelector, Input) == 0x000000, "Member 'FVoxelPortalNodeSelector::Input' has a wrong offset!");

// ScriptStruct VoxelGraph.VoxelPin
// 0x0048 (0x0048 - 0x0000)
struct FVoxelPin final
{
public:
	struct FGuid                                  PinId;                                             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelPinCategory                             PinCategory;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVoxelNode*>                     OtherNodes;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          OtherPinIds;                                       // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPin) == 0x000008, "Wrong alignment on FVoxelPin");
static_assert(sizeof(FVoxelPin) == 0x000048, "Wrong size on FVoxelPin");
static_assert(offsetof(FVoxelPin, PinId) == 0x000000, "Member 'FVoxelPin::PinId' has a wrong offset!");
static_assert(offsetof(FVoxelPin, DefaultValue) == 0x000010, "Member 'FVoxelPin::DefaultValue' has a wrong offset!");
static_assert(offsetof(FVoxelPin, PinCategory) == 0x000020, "Member 'FVoxelPin::PinCategory' has a wrong offset!");
static_assert(offsetof(FVoxelPin, OtherNodes) == 0x000028, "Member 'FVoxelPin::OtherNodes' has a wrong offset!");
static_assert(offsetof(FVoxelPin, OtherPinIds) == 0x000038, "Member 'FVoxelPin::OtherPinIds' has a wrong offset!");

// ScriptStruct VoxelGraph.VoxelNamedDataPin
// 0x0018 (0x0018 - 0x0000)
struct FVoxelNamedDataPin final
{
public:
	EVoxelDataPinCategory                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelNamedDataPin) == 0x000008, "Wrong alignment on FVoxelNamedDataPin");
static_assert(sizeof(FVoxelNamedDataPin) == 0x000018, "Wrong size on FVoxelNamedDataPin");
static_assert(offsetof(FVoxelNamedDataPin, Type) == 0x000000, "Member 'FVoxelNamedDataPin::Type' has a wrong offset!");
static_assert(offsetof(FVoxelNamedDataPin, Name) == 0x000008, "Member 'FVoxelNamedDataPin::Name' has a wrong offset!");

}

