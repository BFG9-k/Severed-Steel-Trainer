#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeAudioImporter

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum RuntimeAudioImporter.ERuntimeImportStatus
// NumValues: 0x0007
enum class ERuntimeImportStatus : uint8
{
	SuccessfulImport                         = 0,
	FailedToReadAudioDataArray               = 1,
	SoundWaveDeclarationError                = 2,
	InvalidAudioFormat                       = 3,
	AudioDoesNotExist                        = 4,
	LoadFileToArrayError                     = 5,
	ERuntimeImportStatus_MAX                 = 6,
};

// Enum RuntimeAudioImporter.ERuntimeAudioFormat
// NumValues: 0x0008
enum class ERuntimeAudioFormat : uint8
{
	Auto                                     = 0,
	Mp3                                      = 1,
	Wav                                      = 2,
	Flac                                     = 3,
	OggVorbis                                = 4,
	Bink                                     = 5,
	Invalid                                  = 6,
	ERuntimeAudioFormat_MAX                  = 7,
};

// Enum RuntimeAudioImporter.ERuntimeRAWAudioFormat
// NumValues: 0x0008
enum class ERuntimeRAWAudioFormat : uint8
{
	Int8                                     = 0,
	UInt8                                    = 1,
	Int16                                    = 2,
	UInt16                                   = 3,
	Int32                                    = 4,
	UInt32                                   = 5,
	Float32                                  = 6,
	ERuntimeRAWAudioFormat_MAX               = 7,
};

// ScriptStruct RuntimeAudioImporter.CompressedSoundWaveInfo
// 0x000C (0x000C - 0x0000)
struct FCompressedSoundWaveInfo final
{
public:
	ESoundGroup                                   SoundGroup;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompressedSoundWaveInfo) == 0x000004, "Wrong alignment on FCompressedSoundWaveInfo");
static_assert(sizeof(FCompressedSoundWaveInfo) == 0x00000C, "Wrong size on FCompressedSoundWaveInfo");
static_assert(offsetof(FCompressedSoundWaveInfo, SoundGroup) == 0x000000, "Member 'FCompressedSoundWaveInfo::SoundGroup' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, bLooping) == 0x000001, "Member 'FCompressedSoundWaveInfo::bLooping' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, Volume) == 0x000004, "Member 'FCompressedSoundWaveInfo::Volume' has a wrong offset!");
static_assert(offsetof(FCompressedSoundWaveInfo, Pitch) == 0x000008, "Member 'FCompressedSoundWaveInfo::Pitch' has a wrong offset!");

// ScriptStruct RuntimeAudioImporter.RuntimeAudioHeaderInfo
// 0x0020 (0x0020 - 0x0000)
struct FRuntimeAudioHeaderInfo final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfChannels;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         PCMDataSize;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeAudioFormat                           AudioFormat;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeAudioHeaderInfo) == 0x000008, "Wrong alignment on FRuntimeAudioHeaderInfo");
static_assert(sizeof(FRuntimeAudioHeaderInfo) == 0x000020, "Wrong size on FRuntimeAudioHeaderInfo");
static_assert(offsetof(FRuntimeAudioHeaderInfo, Duration) == 0x000000, "Member 'FRuntimeAudioHeaderInfo::Duration' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioHeaderInfo, NumOfChannels) == 0x000004, "Member 'FRuntimeAudioHeaderInfo::NumOfChannels' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioHeaderInfo, SampleRate) == 0x000008, "Member 'FRuntimeAudioHeaderInfo::SampleRate' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioHeaderInfo, PCMDataSize) == 0x000010, "Member 'FRuntimeAudioHeaderInfo::PCMDataSize' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioHeaderInfo, AudioFormat) == 0x000018, "Member 'FRuntimeAudioHeaderInfo::AudioFormat' has a wrong offset!");

// ScriptStruct RuntimeAudioImporter.RuntimeAudioInputDeviceInfo
// 0x0030 (0x0030 - 0x0000)
struct FRuntimeAudioInputDeviceInfo final
{
public:
	class FString                                 DeviceName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputChannels;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreferredSampleRate;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsHardwareAEC;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeAudioInputDeviceInfo) == 0x000008, "Wrong alignment on FRuntimeAudioInputDeviceInfo");
static_assert(sizeof(FRuntimeAudioInputDeviceInfo) == 0x000030, "Wrong size on FRuntimeAudioInputDeviceInfo");
static_assert(offsetof(FRuntimeAudioInputDeviceInfo, DeviceName) == 0x000000, "Member 'FRuntimeAudioInputDeviceInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioInputDeviceInfo, DeviceID) == 0x000010, "Member 'FRuntimeAudioInputDeviceInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioInputDeviceInfo, InputChannels) == 0x000020, "Member 'FRuntimeAudioInputDeviceInfo::InputChannels' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioInputDeviceInfo, PreferredSampleRate) == 0x000024, "Member 'FRuntimeAudioInputDeviceInfo::PreferredSampleRate' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioInputDeviceInfo, bSupportsHardwareAEC) == 0x000028, "Member 'FRuntimeAudioInputDeviceInfo::bSupportsHardwareAEC' has a wrong offset!");

// ScriptStruct RuntimeAudioImporter.RuntimeAudioExportOverrideOptions
// 0x0008 (0x0008 - 0x0000)
struct FRuntimeAudioExportOverrideOptions final
{
public:
	int32                                         NumOfChannels;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeAudioExportOverrideOptions) == 0x000004, "Wrong alignment on FRuntimeAudioExportOverrideOptions");
static_assert(sizeof(FRuntimeAudioExportOverrideOptions) == 0x000008, "Wrong size on FRuntimeAudioExportOverrideOptions");
static_assert(offsetof(FRuntimeAudioExportOverrideOptions, NumOfChannels) == 0x000000, "Member 'FRuntimeAudioExportOverrideOptions::NumOfChannels' has a wrong offset!");
static_assert(offsetof(FRuntimeAudioExportOverrideOptions, SampleRate) == 0x000004, "Member 'FRuntimeAudioExportOverrideOptions::SampleRate' has a wrong offset!");

// ScriptStruct RuntimeAudioImporter.EditableSubtitleCue
// 0x0020 (0x0020 - 0x0000)
struct FEditableSubtitleCue final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditableSubtitleCue) == 0x000008, "Wrong alignment on FEditableSubtitleCue");
static_assert(sizeof(FEditableSubtitleCue) == 0x000020, "Wrong size on FEditableSubtitleCue");
static_assert(offsetof(FEditableSubtitleCue, Text) == 0x000000, "Member 'FEditableSubtitleCue::Text' has a wrong offset!");
static_assert(offsetof(FEditableSubtitleCue, Time) == 0x000018, "Member 'FEditableSubtitleCue::Time' has a wrong offset!");

}

