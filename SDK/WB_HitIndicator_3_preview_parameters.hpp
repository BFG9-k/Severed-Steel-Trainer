#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_HitIndicator_3_preview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_ProgressBarType_structs.hpp"
#include "E_ProgressBars_structs.hpp"


namespace SDK::Params
{

// Function WB_HitIndicator_3_preview.WB_HitIndicator_3_preview_C.ExecuteUbergraph_WB_HitIndicator_3_preview
// 0x0068 (0x0068 - 0x0000)
struct WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_Scale;                                // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsMoving;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ProgressBarType                             K2Node_Event_ProgressType;                         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Time;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_EmptyColor;                           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Event_FillColor;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ProgressBars                                K2Node_Event_ProgressBarType;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_Color;                                // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview) == 0x000008, "Wrong alignment on WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview");
static_assert(sizeof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview) == 0x000068, "Wrong size on WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, EntryPoint) == 0x000000, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_MakeStruct_LinearColor) == 0x000004, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_Scale) == 0x000014, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_Scale' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_IsMoving) == 0x00001C, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_IsMoving' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_ProgressType) == 0x00001D, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_ProgressType' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_Time) == 0x000020, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_Value) == 0x000024, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_EmptyColor) == 0x000028, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_EmptyColor' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_FillColor) == 0x000038, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_FillColor' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_ProgressBarType) == 0x000048, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_ProgressBarType' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, K2Node_Event_Color) == 0x00004C, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::K2Node_Event_Color' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview, CallFunc_PlayAnimation_ReturnValue) == 0x000060, "Member 'WB_HitIndicator_3_preview_C_ExecuteUbergraph_WB_HitIndicator_3_preview::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WB_HitIndicator_3_preview.WB_HitIndicator_3_preview_C.HitIndicator
// 0x0010 (0x0010 - 0x0000)
struct WB_HitIndicator_3_preview_C_HitIndicator final
{
public:
	struct FLinearColor                           Color_0;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_HitIndicator_3_preview_C_HitIndicator) == 0x000004, "Wrong alignment on WB_HitIndicator_3_preview_C_HitIndicator");
static_assert(sizeof(WB_HitIndicator_3_preview_C_HitIndicator) == 0x000010, "Wrong size on WB_HitIndicator_3_preview_C_HitIndicator");
static_assert(offsetof(WB_HitIndicator_3_preview_C_HitIndicator, Color_0) == 0x000000, "Member 'WB_HitIndicator_3_preview_C_HitIndicator::Color_0' has a wrong offset!");

// Function WB_HitIndicator_3_preview.WB_HitIndicator_3_preview_C.UpdateProgressBar
// 0x0030 (0x0030 - 0x0000)
struct WB_HitIndicator_3_preview_C_UpdateProgressBar final
{
public:
	E_ProgressBarType                             ProgressType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EmptyColor;                                        // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FillColor;                                         // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ProgressBars                                ProgressBarType;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_HitIndicator_3_preview_C_UpdateProgressBar) == 0x000004, "Wrong alignment on WB_HitIndicator_3_preview_C_UpdateProgressBar");
static_assert(sizeof(WB_HitIndicator_3_preview_C_UpdateProgressBar) == 0x000030, "Wrong size on WB_HitIndicator_3_preview_C_UpdateProgressBar");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, ProgressType) == 0x000000, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::ProgressType' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, Time) == 0x000004, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::Time' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, Value) == 0x000008, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::Value' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, EmptyColor) == 0x00000C, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::EmptyColor' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, FillColor) == 0x00001C, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::FillColor' has a wrong offset!");
static_assert(offsetof(WB_HitIndicator_3_preview_C_UpdateProgressBar, ProgressBarType) == 0x00002C, "Member 'WB_HitIndicator_3_preview_C_UpdateProgressBar::ProgressBarType' has a wrong offset!");

// Function WB_HitIndicator_3_preview.WB_HitIndicator_3_preview_C.CrosshairReaction
// 0x0001 (0x0001 - 0x0000)
struct WB_HitIndicator_3_preview_C_CrosshairReaction final
{
public:
	bool                                          IsMoving_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_HitIndicator_3_preview_C_CrosshairReaction) == 0x000001, "Wrong alignment on WB_HitIndicator_3_preview_C_CrosshairReaction");
static_assert(sizeof(WB_HitIndicator_3_preview_C_CrosshairReaction) == 0x000001, "Wrong size on WB_HitIndicator_3_preview_C_CrosshairReaction");
static_assert(offsetof(WB_HitIndicator_3_preview_C_CrosshairReaction, IsMoving_0) == 0x000000, "Member 'WB_HitIndicator_3_preview_C_CrosshairReaction::IsMoving_0' has a wrong offset!");

// Function WB_HitIndicator_3_preview.WB_HitIndicator_3_preview_C.ActivateCrosshair
// 0x0008 (0x0008 - 0x0000)
struct WB_HitIndicator_3_preview_C_ActivateCrosshair final
{
public:
	struct FVector2D                              Scale;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_HitIndicator_3_preview_C_ActivateCrosshair) == 0x000004, "Wrong alignment on WB_HitIndicator_3_preview_C_ActivateCrosshair");
static_assert(sizeof(WB_HitIndicator_3_preview_C_ActivateCrosshair) == 0x000008, "Wrong size on WB_HitIndicator_3_preview_C_ActivateCrosshair");
static_assert(offsetof(WB_HitIndicator_3_preview_C_ActivateCrosshair, Scale) == 0x000000, "Member 'WB_HitIndicator_3_preview_C_ActivateCrosshair::Scale' has a wrong offset!");

}

