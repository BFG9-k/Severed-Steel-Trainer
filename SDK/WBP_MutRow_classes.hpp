#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MutRow

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MutRow.WBP_MutRow_C
// 0x00C0 (0x0320 - 0x0260)
class UWBP_MutRow_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_0;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_AdamButton_C*                      WBP_AdamButton;                                    // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_AdamSmallToggleButton_C*           WBP_AdamSmallToggleButton;                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EGameModifier                                 MutEnum;                                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool NewStatus, EGameModifier MyMod)> OnStatusChanged;                                   // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   MyDesk;                                            // 0x02A0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMulticastInlineDelegate<void(EGameModifier MyData)> OnHovered;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              UnHovered;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   Key;                                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Unlocked;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockLevel;                                       // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   SoftCard;                                          // 0x02E8(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UClass* CardCDO)> OnHoveredAsCard;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_WBP_MutRow(int32 EntryPoint);
	void BndEvt__WBP_AdamSmallToggleButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();
	void PreConstruct(bool IsDesignTime);
	void BndEvt__WBP_MutRow_Button_0_K2Node_ComponentBoundEvent_12_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__WBP_MutRow_Button_0_K2Node_ComponentBoundEvent_11_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__WBP_MutRow_Button_0_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamSmallToggleButton_K2Node_ComponentBoundEvent_9_OnUnhovered__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamSmallToggleButton_K2Node_ComponentBoundEvent_8_OnHovered__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamButton_K2Node_ComponentBoundEvent_7_OnPressed__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamButton_K2Node_ComponentBoundEvent_4_OnUnhovered__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamButton_K2Node_ComponentBoundEvent_2_OnHovered__DelegateSignature();
	void BndEvt__WBP_MutRow_WBP_AdamButton_C_0_K2Node_ComponentBoundEvent_6_OnUnhovered__DelegateSignature();
	void Construct();
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void BndEvt__Button_36_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void OnLoaded_EC035B00405FE4E5E444D8AEDBD6CA54(TSubclassOf<class UObject> Loaded);
	void OnLoaded_7409808C4E90ACFA7FEEF380244D5C78(TSubclassOf<class UObject> Loaded);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MutRow_C">();
	}
	static class UWBP_MutRow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MutRow_C>();
	}
};
static_assert(alignof(UWBP_MutRow_C) == 0x000008, "Wrong alignment on UWBP_MutRow_C");
static_assert(sizeof(UWBP_MutRow_C) == 0x000320, "Wrong size on UWBP_MutRow_C");
static_assert(offsetof(UWBP_MutRow_C, UberGraphFrame) == 0x000260, "Member 'UWBP_MutRow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, Border_0) == 0x000268, "Member 'UWBP_MutRow_C::Border_0' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, Button_0) == 0x000270, "Member 'UWBP_MutRow_C::Button_0' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, WBP_AdamButton) == 0x000278, "Member 'UWBP_MutRow_C::WBP_AdamButton' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, WBP_AdamSmallToggleButton) == 0x000280, "Member 'UWBP_MutRow_C::WBP_AdamSmallToggleButton' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, MutEnum) == 0x000288, "Member 'UWBP_MutRow_C::MutEnum' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, OnStatusChanged) == 0x000290, "Member 'UWBP_MutRow_C::OnStatusChanged' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, MyDesk) == 0x0002A0, "Member 'UWBP_MutRow_C::MyDesk' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, OnHovered) == 0x0002B8, "Member 'UWBP_MutRow_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, UnHovered) == 0x0002C8, "Member 'UWBP_MutRow_C::UnHovered' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, Key) == 0x0002D8, "Member 'UWBP_MutRow_C::Key' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, Unlocked) == 0x0002E0, "Member 'UWBP_MutRow_C::Unlocked' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, UnlockLevel) == 0x0002E4, "Member 'UWBP_MutRow_C::UnlockLevel' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, SoftCard) == 0x0002E8, "Member 'UWBP_MutRow_C::SoftCard' has a wrong offset!");
static_assert(offsetof(UWBP_MutRow_C, OnHoveredAsCard) == 0x000310, "Member 'UWBP_MutRow_C::OnHoveredAsCard' has a wrong offset!");

}

