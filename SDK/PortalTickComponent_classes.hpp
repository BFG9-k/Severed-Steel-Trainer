#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalTickComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PortalTickComponent.PortalTickComponent_C
// 0x0030 (0x00E0 - 0x00B0)
class UPortalTickComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APortalBP_C*                            CurrentPortal;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APortalBP_C*                            TargetPortal;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsOverlappingPortal;                           // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class APortalBP_C*                            OwningPortal;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_PortalTickComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ChangeLocation(const struct FVector& Location, struct FVector* new_location);
	void ChangeDirection(const struct FVector& Direction, struct FVector* NewParam);
	void ChangeRotation(const struct FRotator& Rotation, struct FRotator* NewParam);
	void ChangeVelocity(const struct FVector& vel, struct FVector* NewParam);
	void ChangeScale(float* multiply_by);
	void ChangeTransform(const struct FTransform& transform_in, struct FTransform* transform_out);
	void TeleportOverlappingActors();
	void ChangeActorThroughPortal(class AActor* ActorToPass);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PortalTickComponent_C">();
	}
	static class UPortalTickComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalTickComponent_C>();
	}
};
static_assert(alignof(UPortalTickComponent_C) == 0x000008, "Wrong alignment on UPortalTickComponent_C");
static_assert(sizeof(UPortalTickComponent_C) == 0x0000E0, "Wrong size on UPortalTickComponent_C");
static_assert(offsetof(UPortalTickComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UPortalTickComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPortalTickComponent_C, CurrentPortal) == 0x0000B8, "Member 'UPortalTickComponent_C::CurrentPortal' has a wrong offset!");
static_assert(offsetof(UPortalTickComponent_C, TargetPortal) == 0x0000C0, "Member 'UPortalTickComponent_C::TargetPortal' has a wrong offset!");
static_assert(offsetof(UPortalTickComponent_C, ActorsOverlappingPortal) == 0x0000C8, "Member 'UPortalTickComponent_C::ActorsOverlappingPortal' has a wrong offset!");
static_assert(offsetof(UPortalTickComponent_C, OwningPortal) == 0x0000D8, "Member 'UPortalTickComponent_C::OwningPortal' has a wrong offset!");

}

