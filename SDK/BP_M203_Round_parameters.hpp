#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_M203_Round

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_M203_Round.BP_M203_Round_C.ExecuteUbergraph_BP_M203_Round
// 0x0080 (0x0080 - 0x0000)
struct BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_StartTransform;                       // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInFiredByPlayer;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Launcher;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round) == 0x000010, "Wrong alignment on BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round");
static_assert(sizeof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round) == 0x000080, "Wrong size on BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, EntryPoint) == 0x000000, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, K2Node_Event_StartTransform) == 0x000010, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::K2Node_Event_StartTransform' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, K2Node_Event_bInFiredByPlayer) == 0x000040, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::K2Node_Event_bInFiredByPlayer' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, K2Node_Event_Launcher) == 0x000048, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::K2Node_Event_Launcher' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_M203_Round_C_ExecuteUbergraph_BP_M203_Round::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_M203_Round.BP_M203_Round_C.Launch
// 0x0040 (0x0040 - 0x0000)
struct BP_M203_Round_C_Launch final
{
public:
	struct FTransform                             StartTransform;                                    // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          bInFiredByPlayer;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Launcher;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_M203_Round_C_Launch) == 0x000010, "Wrong alignment on BP_M203_Round_C_Launch");
static_assert(sizeof(BP_M203_Round_C_Launch) == 0x000040, "Wrong size on BP_M203_Round_C_Launch");
static_assert(offsetof(BP_M203_Round_C_Launch, StartTransform) == 0x000000, "Member 'BP_M203_Round_C_Launch::StartTransform' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_Launch, bInFiredByPlayer) == 0x000030, "Member 'BP_M203_Round_C_Launch::bInFiredByPlayer' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_Launch, Launcher) == 0x000038, "Member 'BP_M203_Round_C_Launch::Launcher' has a wrong offset!");

// Function BP_M203_Round.BP_M203_Round_C.OnHit
// 0x0120 (0x0120 - 0x0000)
struct BP_M203_Round_C_OnHit final
{
public:
	EImpactType                                   ImpactType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Dmg;                                               // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnHit_ReturnValue;                        // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_M203_Round_C_OnHit) == 0x000008, "Wrong alignment on BP_M203_Round_C_OnHit");
static_assert(sizeof(BP_M203_Round_C_OnHit) == 0x000120, "Wrong size on BP_M203_Round_C_OnHit");
static_assert(offsetof(BP_M203_Round_C_OnHit, ImpactType) == 0x000000, "Member 'BP_M203_Round_C_OnHit::ImpactType' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, HitResult) == 0x000004, "Member 'BP_M203_Round_C_OnHit::HitResult' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, Dmg) == 0x00008C, "Member 'BP_M203_Round_C_OnHit::Dmg' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, ReturnValue) == 0x000090, "Member 'BP_M203_Round_C_OnHit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_bBlockingHit) == 0x000091, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_bInitialOverlap) == 0x000092, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_Time) == 0x000094, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_Distance) == 0x000098, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_Location) == 0x00009C, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A8, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_Normal) == 0x0000B4, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C0, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_PhysMat) == 0x0000D0, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_HitActor) == 0x0000D8, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_HitComponent) == 0x0000E0, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_HitBoneName) == 0x0000E8, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_HitItem) == 0x0000F0, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_ElementIndex) == 0x0000F4, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_FaceIndex) == 0x0000F8, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_TraceStart) == 0x0000FC, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_BreakHitResult_TraceEnd) == 0x000108, "Member 'BP_M203_Round_C_OnHit::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_OnHit_ReturnValue) == 0x000114, "Member 'BP_M203_Round_C_OnHit::CallFunc_OnHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_M203_Round_C_OnHit, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000118, "Member 'BP_M203_Round_C_OnHit::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

}

