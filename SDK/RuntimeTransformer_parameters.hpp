#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeTransformer

#include "Basic.hpp"

#include "RuntimeTransformer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RuntimeTransformer.BaseGizmo.RegisterDomainComponent
// 0x0010 (0x0010 - 0x0000)
struct BaseGizmo_RegisterDomainComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationDomain                         Domain;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseGizmo_RegisterDomainComponent) == 0x000008, "Wrong alignment on BaseGizmo_RegisterDomainComponent");
static_assert(sizeof(BaseGizmo_RegisterDomainComponent) == 0x000010, "Wrong size on BaseGizmo_RegisterDomainComponent");
static_assert(offsetof(BaseGizmo_RegisterDomainComponent, Component) == 0x000000, "Member 'BaseGizmo_RegisterDomainComponent::Component' has a wrong offset!");
static_assert(offsetof(BaseGizmo_RegisterDomainComponent, Domain) == 0x000008, "Member 'BaseGizmo_RegisterDomainComponent::Domain' has a wrong offset!");

// Function RuntimeTransformer.BaseGizmo.SetTransformProgressState
// 0x0002 (0x0002 - 0x0000)
struct BaseGizmo_SetTransformProgressState final
{
public:
	bool                                          bInProgress;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationDomain                         CurrentDomain;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGizmo_SetTransformProgressState) == 0x000001, "Wrong alignment on BaseGizmo_SetTransformProgressState");
static_assert(sizeof(BaseGizmo_SetTransformProgressState) == 0x000002, "Wrong size on BaseGizmo_SetTransformProgressState");
static_assert(offsetof(BaseGizmo_SetTransformProgressState, bInProgress) == 0x000000, "Member 'BaseGizmo_SetTransformProgressState::bInProgress' has a wrong offset!");
static_assert(offsetof(BaseGizmo_SetTransformProgressState, CurrentDomain) == 0x000001, "Member 'BaseGizmo_SetTransformProgressState::CurrentDomain' has a wrong offset!");

// Function RuntimeTransformer.BaseGizmo.GetTransformationDomain
// 0x0010 (0x0010 - 0x0000)
struct BaseGizmo_GetTransformationDomain final
{
public:
	class USceneComponent*                        ComponentHit;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationDomain                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseGizmo_GetTransformationDomain) == 0x000008, "Wrong alignment on BaseGizmo_GetTransformationDomain");
static_assert(sizeof(BaseGizmo_GetTransformationDomain) == 0x000010, "Wrong size on BaseGizmo_GetTransformationDomain");
static_assert(offsetof(BaseGizmo_GetTransformationDomain, ComponentHit) == 0x000000, "Member 'BaseGizmo_GetTransformationDomain::ComponentHit' has a wrong offset!");
static_assert(offsetof(BaseGizmo_GetTransformationDomain, ReturnValue) == 0x000008, "Member 'BaseGizmo_GetTransformationDomain::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.BaseGizmo.GetTransformProgressState
// 0x0001 (0x0001 - 0x0000)
struct BaseGizmo_GetTransformProgressState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGizmo_GetTransformProgressState) == 0x000001, "Wrong alignment on BaseGizmo_GetTransformProgressState");
static_assert(sizeof(BaseGizmo_GetTransformProgressState) == 0x000001, "Wrong size on BaseGizmo_GetTransformProgressState");
static_assert(offsetof(BaseGizmo_GetTransformProgressState, ReturnValue) == 0x000000, "Member 'BaseGizmo_GetTransformProgressState::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.FocusableObject.Focus
// 0x0018 (0x0018 - 0x0000)
struct FocusableObject_Focus final
{
public:
	class ATransformerPawn*                       Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentBased;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FocusableObject_Focus) == 0x000008, "Wrong alignment on FocusableObject_Focus");
static_assert(sizeof(FocusableObject_Focus) == 0x000018, "Wrong size on FocusableObject_Focus");
static_assert(offsetof(FocusableObject_Focus, Caller) == 0x000000, "Member 'FocusableObject_Focus::Caller' has a wrong offset!");
static_assert(offsetof(FocusableObject_Focus, Component) == 0x000008, "Member 'FocusableObject_Focus::Component' has a wrong offset!");
static_assert(offsetof(FocusableObject_Focus, bComponentBased) == 0x000010, "Member 'FocusableObject_Focus::bComponentBased' has a wrong offset!");

// Function RuntimeTransformer.FocusableObject.OnNewTransformation
// 0x0050 (0x0050 - 0x0000)
struct FocusableObject_OnNewTransformation final
{
public:
	class ATransformerPawn*                       Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             NewTransform;                                      // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bComponentBased;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FocusableObject_OnNewTransformation) == 0x000010, "Wrong alignment on FocusableObject_OnNewTransformation");
static_assert(sizeof(FocusableObject_OnNewTransformation) == 0x000050, "Wrong size on FocusableObject_OnNewTransformation");
static_assert(offsetof(FocusableObject_OnNewTransformation, Caller) == 0x000000, "Member 'FocusableObject_OnNewTransformation::Caller' has a wrong offset!");
static_assert(offsetof(FocusableObject_OnNewTransformation, Component) == 0x000008, "Member 'FocusableObject_OnNewTransformation::Component' has a wrong offset!");
static_assert(offsetof(FocusableObject_OnNewTransformation, NewTransform) == 0x000010, "Member 'FocusableObject_OnNewTransformation::NewTransform' has a wrong offset!");
static_assert(offsetof(FocusableObject_OnNewTransformation, bComponentBased) == 0x000040, "Member 'FocusableObject_OnNewTransformation::bComponentBased' has a wrong offset!");

// Function RuntimeTransformer.FocusableObject.Unfocus
// 0x0018 (0x0018 - 0x0000)
struct FocusableObject_Unfocus final
{
public:
	class ATransformerPawn*                       Caller;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentBased;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FocusableObject_Unfocus) == 0x000008, "Wrong alignment on FocusableObject_Unfocus");
static_assert(sizeof(FocusableObject_Unfocus) == 0x000018, "Wrong size on FocusableObject_Unfocus");
static_assert(offsetof(FocusableObject_Unfocus, Caller) == 0x000000, "Member 'FocusableObject_Unfocus::Caller' has a wrong offset!");
static_assert(offsetof(FocusableObject_Unfocus, Component) == 0x000008, "Member 'FocusableObject_Unfocus::Component' has a wrong offset!");
static_assert(offsetof(FocusableObject_Unfocus, bComponentBased) == 0x000010, "Member 'FocusableObject_Unfocus::bComponentBased' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ApplyDeltaTransform
// 0x0030 (0x0030 - 0x0000)
struct TransformerPawn_ApplyDeltaTransform final
{
public:
	struct FTransform                             DeltaTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ApplyDeltaTransform) == 0x000010, "Wrong alignment on TransformerPawn_ApplyDeltaTransform");
static_assert(sizeof(TransformerPawn_ApplyDeltaTransform) == 0x000030, "Wrong size on TransformerPawn_ApplyDeltaTransform");
static_assert(offsetof(TransformerPawn_ApplyDeltaTransform, DeltaTransform) == 0x000000, "Member 'TransformerPawn_ApplyDeltaTransform::DeltaTransform' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.CloneSelected
// 0x0002 (0x0002 - 0x0000)
struct TransformerPawn_CloneSelected final
{
public:
	bool                                          bSelectNewClones;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_CloneSelected) == 0x000001, "Wrong alignment on TransformerPawn_CloneSelected");
static_assert(sizeof(TransformerPawn_CloneSelected) == 0x000002, "Wrong size on TransformerPawn_CloneSelected");
static_assert(offsetof(TransformerPawn_CloneSelected, bSelectNewClones) == 0x000000, "Member 'TransformerPawn_CloneSelected::bSelectNewClones' has a wrong offset!");
static_assert(offsetof(TransformerPawn_CloneSelected, bAppendToList) == 0x000001, "Member 'TransformerPawn_CloneSelected::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.DeselectActor
// 0x0008 (0x0008 - 0x0000)
struct TransformerPawn_DeselectActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_DeselectActor) == 0x000008, "Wrong alignment on TransformerPawn_DeselectActor");
static_assert(sizeof(TransformerPawn_DeselectActor) == 0x000008, "Wrong size on TransformerPawn_DeselectActor");
static_assert(offsetof(TransformerPawn_DeselectActor, Actor) == 0x000000, "Member 'TransformerPawn_DeselectActor::Actor' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.DeselectAll
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_DeselectAll final
{
public:
	bool                                          bDestroyDeselected;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_DeselectAll) == 0x000008, "Wrong alignment on TransformerPawn_DeselectAll");
static_assert(sizeof(TransformerPawn_DeselectAll) == 0x000018, "Wrong size on TransformerPawn_DeselectAll");
static_assert(offsetof(TransformerPawn_DeselectAll, bDestroyDeselected) == 0x000000, "Member 'TransformerPawn_DeselectAll::bDestroyDeselected' has a wrong offset!");
static_assert(offsetof(TransformerPawn_DeselectAll, ReturnValue) == 0x000008, "Member 'TransformerPawn_DeselectAll::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.DeselectComponent
// 0x0008 (0x0008 - 0x0000)
struct TransformerPawn_DeselectComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_DeselectComponent) == 0x000008, "Wrong alignment on TransformerPawn_DeselectComponent");
static_assert(sizeof(TransformerPawn_DeselectComponent) == 0x000008, "Wrong size on TransformerPawn_DeselectComponent");
static_assert(offsetof(TransformerPawn_DeselectComponent, Component) == 0x000000, "Member 'TransformerPawn_DeselectComponent::Component' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.HandleTracedObjects
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_HandleTracedObjects final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_HandleTracedObjects) == 0x000008, "Wrong alignment on TransformerPawn_HandleTracedObjects");
static_assert(sizeof(TransformerPawn_HandleTracedObjects) == 0x000018, "Wrong size on TransformerPawn_HandleTracedObjects");
static_assert(offsetof(TransformerPawn_HandleTracedObjects, HitResults) == 0x000000, "Member 'TransformerPawn_HandleTracedObjects::HitResults' has a wrong offset!");
static_assert(offsetof(TransformerPawn_HandleTracedObjects, bAppendToList) == 0x000010, "Member 'TransformerPawn_HandleTracedObjects::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_HandleTracedObjects, ReturnValue) == 0x000011, "Member 'TransformerPawn_HandleTracedObjects::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MouseTraceByChannel
// 0x0020 (0x0020 - 0x0000)
struct TransformerPawn_MouseTraceByChannel final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_MouseTraceByChannel) == 0x000008, "Wrong alignment on TransformerPawn_MouseTraceByChannel");
static_assert(sizeof(TransformerPawn_MouseTraceByChannel) == 0x000020, "Wrong size on TransformerPawn_MouseTraceByChannel");
static_assert(offsetof(TransformerPawn_MouseTraceByChannel, TraceDistance) == 0x000000, "Member 'TransformerPawn_MouseTraceByChannel::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByChannel, TraceChannel) == 0x000004, "Member 'TransformerPawn_MouseTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByChannel, IgnoredActors) == 0x000008, "Member 'TransformerPawn_MouseTraceByChannel::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByChannel, bAppendToList) == 0x000018, "Member 'TransformerPawn_MouseTraceByChannel::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByChannel, ReturnValue) == 0x000019, "Member 'TransformerPawn_MouseTraceByChannel::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MouseTraceByObjectTypes
// 0x0030 (0x0030 - 0x0000)
struct TransformerPawn_MouseTraceByObjectTypes final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     CollisionChannels;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_MouseTraceByObjectTypes) == 0x000008, "Wrong alignment on TransformerPawn_MouseTraceByObjectTypes");
static_assert(sizeof(TransformerPawn_MouseTraceByObjectTypes) == 0x000030, "Wrong size on TransformerPawn_MouseTraceByObjectTypes");
static_assert(offsetof(TransformerPawn_MouseTraceByObjectTypes, TraceDistance) == 0x000000, "Member 'TransformerPawn_MouseTraceByObjectTypes::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByObjectTypes, CollisionChannels) == 0x000008, "Member 'TransformerPawn_MouseTraceByObjectTypes::CollisionChannels' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByObjectTypes, IgnoredActors) == 0x000018, "Member 'TransformerPawn_MouseTraceByObjectTypes::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByObjectTypes, bAppendToList) == 0x000028, "Member 'TransformerPawn_MouseTraceByObjectTypes::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByObjectTypes, ReturnValue) == 0x000029, "Member 'TransformerPawn_MouseTraceByObjectTypes::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MouseTraceByProfile
// 0x0028 (0x0028 - 0x0000)
struct TransformerPawn_MouseTraceByProfile final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_MouseTraceByProfile) == 0x000008, "Wrong alignment on TransformerPawn_MouseTraceByProfile");
static_assert(sizeof(TransformerPawn_MouseTraceByProfile) == 0x000028, "Wrong size on TransformerPawn_MouseTraceByProfile");
static_assert(offsetof(TransformerPawn_MouseTraceByProfile, TraceDistance) == 0x000000, "Member 'TransformerPawn_MouseTraceByProfile::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByProfile, ProfileName) == 0x000004, "Member 'TransformerPawn_MouseTraceByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByProfile, IgnoredActors) == 0x000010, "Member 'TransformerPawn_MouseTraceByProfile::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByProfile, bAppendToList) == 0x000020, "Member 'TransformerPawn_MouseTraceByProfile::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_MouseTraceByProfile, ReturnValue) == 0x000021, "Member 'TransformerPawn_MouseTraceByProfile::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastApplyTransform
// 0x0030 (0x0030 - 0x0000)
struct TransformerPawn_MulticastApplyTransform final
{
public:
	struct FTransform                             DeltaTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastApplyTransform) == 0x000010, "Wrong alignment on TransformerPawn_MulticastApplyTransform");
static_assert(sizeof(TransformerPawn_MulticastApplyTransform) == 0x000030, "Wrong size on TransformerPawn_MulticastApplyTransform");
static_assert(offsetof(TransformerPawn_MulticastApplyTransform, DeltaTransform) == 0x000000, "Member 'TransformerPawn_MulticastApplyTransform::DeltaTransform' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastDeselectAll
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastDeselectAll final
{
public:
	bool                                          bDestroySelected;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastDeselectAll) == 0x000001, "Wrong alignment on TransformerPawn_MulticastDeselectAll");
static_assert(sizeof(TransformerPawn_MulticastDeselectAll) == 0x000001, "Wrong size on TransformerPawn_MulticastDeselectAll");
static_assert(offsetof(TransformerPawn_MulticastDeselectAll, bDestroySelected) == 0x000000, "Member 'TransformerPawn_MulticastDeselectAll::bDestroySelected' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetComponentBased
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastSetComponentBased final
{
public:
	bool                                          bIsComponentBased;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetComponentBased) == 0x000001, "Wrong alignment on TransformerPawn_MulticastSetComponentBased");
static_assert(sizeof(TransformerPawn_MulticastSetComponentBased) == 0x000001, "Wrong size on TransformerPawn_MulticastSetComponentBased");
static_assert(offsetof(TransformerPawn_MulticastSetComponentBased, bIsComponentBased) == 0x000000, "Member 'TransformerPawn_MulticastSetComponentBased::bIsComponentBased' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetDomain
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastSetDomain final
{
public:
	ETransformationDomain                         Domain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetDomain) == 0x000001, "Wrong alignment on TransformerPawn_MulticastSetDomain");
static_assert(sizeof(TransformerPawn_MulticastSetDomain) == 0x000001, "Wrong size on TransformerPawn_MulticastSetDomain");
static_assert(offsetof(TransformerPawn_MulticastSetDomain, Domain) == 0x000000, "Member 'TransformerPawn_MulticastSetDomain::Domain' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetRotateOnLocalAxis
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastSetRotateOnLocalAxis final
{
public:
	bool                                          bRotateLocalAxis;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetRotateOnLocalAxis) == 0x000001, "Wrong alignment on TransformerPawn_MulticastSetRotateOnLocalAxis");
static_assert(sizeof(TransformerPawn_MulticastSetRotateOnLocalAxis) == 0x000001, "Wrong size on TransformerPawn_MulticastSetRotateOnLocalAxis");
static_assert(offsetof(TransformerPawn_MulticastSetRotateOnLocalAxis, bRotateLocalAxis) == 0x000000, "Member 'TransformerPawn_MulticastSetRotateOnLocalAxis::bRotateLocalAxis' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetSelectedComponents
// 0x0010 (0x0010 - 0x0000)
struct TransformerPawn_MulticastSetSelectedComponents final
{
public:
	TArray<class USceneComponent*>                Components;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetSelectedComponents) == 0x000008, "Wrong alignment on TransformerPawn_MulticastSetSelectedComponents");
static_assert(sizeof(TransformerPawn_MulticastSetSelectedComponents) == 0x000010, "Wrong size on TransformerPawn_MulticastSetSelectedComponents");
static_assert(offsetof(TransformerPawn_MulticastSetSelectedComponents, Components) == 0x000000, "Member 'TransformerPawn_MulticastSetSelectedComponents::Components' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetSpaceType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastSetSpaceType final
{
public:
	ESpaceType                                    Space;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetSpaceType) == 0x000001, "Wrong alignment on TransformerPawn_MulticastSetSpaceType");
static_assert(sizeof(TransformerPawn_MulticastSetSpaceType) == 0x000001, "Wrong size on TransformerPawn_MulticastSetSpaceType");
static_assert(offsetof(TransformerPawn_MulticastSetSpaceType, Space) == 0x000000, "Member 'TransformerPawn_MulticastSetSpaceType::Space' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.MulticastSetTransformationType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_MulticastSetTransformationType final
{
public:
	ETransformationType                           Transformation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_MulticastSetTransformationType) == 0x000001, "Wrong alignment on TransformerPawn_MulticastSetTransformationType");
static_assert(sizeof(TransformerPawn_MulticastSetTransformationType) == 0x000001, "Wrong size on TransformerPawn_MulticastSetTransformationType");
static_assert(offsetof(TransformerPawn_MulticastSetTransformationType, Transformation) == 0x000000, "Member 'TransformerPawn_MulticastSetTransformationType::Transformation' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.OnComponentSelectionChange
// 0x0010 (0x0010 - 0x0000)
struct TransformerPawn_OnComponentSelectionChange final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImplementsUFocusable;                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_OnComponentSelectionChange) == 0x000008, "Wrong alignment on TransformerPawn_OnComponentSelectionChange");
static_assert(sizeof(TransformerPawn_OnComponentSelectionChange) == 0x000010, "Wrong size on TransformerPawn_OnComponentSelectionChange");
static_assert(offsetof(TransformerPawn_OnComponentSelectionChange, Component) == 0x000000, "Member 'TransformerPawn_OnComponentSelectionChange::Component' has a wrong offset!");
static_assert(offsetof(TransformerPawn_OnComponentSelectionChange, bSelected) == 0x000008, "Member 'TransformerPawn_OnComponentSelectionChange::bSelected' has a wrong offset!");
static_assert(offsetof(TransformerPawn_OnComponentSelectionChange, bImplementsUFocusable) == 0x000009, "Member 'TransformerPawn_OnComponentSelectionChange::bImplementsUFocusable' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.OnGizmoStateChanged
// 0x0003 (0x0003 - 0x0000)
struct TransformerPawn_OnGizmoStateChanged final
{
public:
	ETransformationType                           GizmoType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransformInProgress;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationDomain                         Domain;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_OnGizmoStateChanged) == 0x000001, "Wrong alignment on TransformerPawn_OnGizmoStateChanged");
static_assert(sizeof(TransformerPawn_OnGizmoStateChanged) == 0x000003, "Wrong size on TransformerPawn_OnGizmoStateChanged");
static_assert(offsetof(TransformerPawn_OnGizmoStateChanged, GizmoType) == 0x000000, "Member 'TransformerPawn_OnGizmoStateChanged::GizmoType' has a wrong offset!");
static_assert(offsetof(TransformerPawn_OnGizmoStateChanged, bTransformInProgress) == 0x000001, "Member 'TransformerPawn_OnGizmoStateChanged::bTransformInProgress' has a wrong offset!");
static_assert(offsetof(TransformerPawn_OnGizmoStateChanged, Domain) == 0x000002, "Member 'TransformerPawn_OnGizmoStateChanged::Domain' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ReplicatedMouseTraceByChannel
// 0x0008 (0x0008 - 0x0000)
struct TransformerPawn_ReplicatedMouseTraceByChannel final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ReplicatedMouseTraceByChannel) == 0x000004, "Wrong alignment on TransformerPawn_ReplicatedMouseTraceByChannel");
static_assert(sizeof(TransformerPawn_ReplicatedMouseTraceByChannel) == 0x000008, "Wrong size on TransformerPawn_ReplicatedMouseTraceByChannel");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByChannel, TraceDistance) == 0x000000, "Member 'TransformerPawn_ReplicatedMouseTraceByChannel::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByChannel, CollisionChannel) == 0x000004, "Member 'TransformerPawn_ReplicatedMouseTraceByChannel::CollisionChannel' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByChannel, bAppendToList) == 0x000005, "Member 'TransformerPawn_ReplicatedMouseTraceByChannel::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ReplicatedMouseTraceByObjectTypes
// 0x0020 (0x0020 - 0x0000)
struct TransformerPawn_ReplicatedMouseTraceByObjectTypes final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     CollisionChannels;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ReplicatedMouseTraceByObjectTypes) == 0x000008, "Wrong alignment on TransformerPawn_ReplicatedMouseTraceByObjectTypes");
static_assert(sizeof(TransformerPawn_ReplicatedMouseTraceByObjectTypes) == 0x000020, "Wrong size on TransformerPawn_ReplicatedMouseTraceByObjectTypes");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByObjectTypes, TraceDistance) == 0x000000, "Member 'TransformerPawn_ReplicatedMouseTraceByObjectTypes::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByObjectTypes, CollisionChannels) == 0x000008, "Member 'TransformerPawn_ReplicatedMouseTraceByObjectTypes::CollisionChannels' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByObjectTypes, bAppendToList) == 0x000018, "Member 'TransformerPawn_ReplicatedMouseTraceByObjectTypes::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ReplicatedMouseTraceByProfile
// 0x0010 (0x0010 - 0x0000)
struct TransformerPawn_ReplicatedMouseTraceByProfile final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ReplicatedMouseTraceByProfile) == 0x000004, "Wrong alignment on TransformerPawn_ReplicatedMouseTraceByProfile");
static_assert(sizeof(TransformerPawn_ReplicatedMouseTraceByProfile) == 0x000010, "Wrong size on TransformerPawn_ReplicatedMouseTraceByProfile");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByProfile, TraceDistance) == 0x000000, "Member 'TransformerPawn_ReplicatedMouseTraceByProfile::TraceDistance' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByProfile, ProfileName) == 0x000004, "Member 'TransformerPawn_ReplicatedMouseTraceByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ReplicatedMouseTraceByProfile, bAppendToList) == 0x00000C, "Member 'TransformerPawn_ReplicatedMouseTraceByProfile::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SelectActor
// 0x0010 (0x0010 - 0x0000)
struct TransformerPawn_SelectActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_SelectActor) == 0x000008, "Wrong alignment on TransformerPawn_SelectActor");
static_assert(sizeof(TransformerPawn_SelectActor) == 0x000010, "Wrong size on TransformerPawn_SelectActor");
static_assert(offsetof(TransformerPawn_SelectActor, Actor) == 0x000000, "Member 'TransformerPawn_SelectActor::Actor' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SelectActor, bAppendToList) == 0x000008, "Member 'TransformerPawn_SelectActor::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SelectComponent
// 0x0010 (0x0010 - 0x0000)
struct TransformerPawn_SelectComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_SelectComponent) == 0x000008, "Wrong alignment on TransformerPawn_SelectComponent");
static_assert(sizeof(TransformerPawn_SelectComponent) == 0x000010, "Wrong size on TransformerPawn_SelectComponent");
static_assert(offsetof(TransformerPawn_SelectComponent, Component) == 0x000000, "Member 'TransformerPawn_SelectComponent::Component' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SelectComponent, bAppendToList) == 0x000008, "Member 'TransformerPawn_SelectComponent::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SelectMultipleActors
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_SelectMultipleActors final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_SelectMultipleActors) == 0x000008, "Wrong alignment on TransformerPawn_SelectMultipleActors");
static_assert(sizeof(TransformerPawn_SelectMultipleActors) == 0x000018, "Wrong size on TransformerPawn_SelectMultipleActors");
static_assert(offsetof(TransformerPawn_SelectMultipleActors, Actors) == 0x000000, "Member 'TransformerPawn_SelectMultipleActors::Actors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SelectMultipleActors, bAppendToList) == 0x000010, "Member 'TransformerPawn_SelectMultipleActors::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SelectMultipleComponents
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_SelectMultipleComponents final
{
public:
	TArray<class USceneComponent*>                Components;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_SelectMultipleComponents) == 0x000008, "Wrong alignment on TransformerPawn_SelectMultipleComponents");
static_assert(sizeof(TransformerPawn_SelectMultipleComponents) == 0x000018, "Wrong size on TransformerPawn_SelectMultipleComponents");
static_assert(offsetof(TransformerPawn_SelectMultipleComponents, Components) == 0x000000, "Member 'TransformerPawn_SelectMultipleComponents::Components' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SelectMultipleComponents, bAppendToList) == 0x000010, "Member 'TransformerPawn_SelectMultipleComponents::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerApplyTransform
// 0x0030 (0x0030 - 0x0000)
struct TransformerPawn_ServerApplyTransform final
{
public:
	struct FTransform                             DeltaTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerApplyTransform) == 0x000010, "Wrong alignment on TransformerPawn_ServerApplyTransform");
static_assert(sizeof(TransformerPawn_ServerApplyTransform) == 0x000030, "Wrong size on TransformerPawn_ServerApplyTransform");
static_assert(offsetof(TransformerPawn_ServerApplyTransform, DeltaTransform) == 0x000000, "Member 'TransformerPawn_ServerApplyTransform::DeltaTransform' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerCloneSelected
// 0x0002 (0x0002 - 0x0000)
struct TransformerPawn_ServerCloneSelected final
{
public:
	bool                                          bSelectNewClones;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerCloneSelected) == 0x000001, "Wrong alignment on TransformerPawn_ServerCloneSelected");
static_assert(sizeof(TransformerPawn_ServerCloneSelected) == 0x000002, "Wrong size on TransformerPawn_ServerCloneSelected");
static_assert(offsetof(TransformerPawn_ServerCloneSelected, bSelectNewClones) == 0x000000, "Member 'TransformerPawn_ServerCloneSelected::bSelectNewClones' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerCloneSelected, bAppendToList) == 0x000001, "Member 'TransformerPawn_ServerCloneSelected::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerDeselectAll
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerDeselectAll final
{
public:
	bool                                          bDestroySelected;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerDeselectAll) == 0x000001, "Wrong alignment on TransformerPawn_ServerDeselectAll");
static_assert(sizeof(TransformerPawn_ServerDeselectAll) == 0x000001, "Wrong size on TransformerPawn_ServerDeselectAll");
static_assert(offsetof(TransformerPawn_ServerDeselectAll, bDestroySelected) == 0x000000, "Member 'TransformerPawn_ServerDeselectAll::bDestroySelected' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerSetComponentBased
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerSetComponentBased final
{
public:
	bool                                          bIsComponentBased;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerSetComponentBased) == 0x000001, "Wrong alignment on TransformerPawn_ServerSetComponentBased");
static_assert(sizeof(TransformerPawn_ServerSetComponentBased) == 0x000001, "Wrong size on TransformerPawn_ServerSetComponentBased");
static_assert(offsetof(TransformerPawn_ServerSetComponentBased, bIsComponentBased) == 0x000000, "Member 'TransformerPawn_ServerSetComponentBased::bIsComponentBased' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerSetDomain
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerSetDomain final
{
public:
	ETransformationDomain                         Domain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerSetDomain) == 0x000001, "Wrong alignment on TransformerPawn_ServerSetDomain");
static_assert(sizeof(TransformerPawn_ServerSetDomain) == 0x000001, "Wrong size on TransformerPawn_ServerSetDomain");
static_assert(offsetof(TransformerPawn_ServerSetDomain, Domain) == 0x000000, "Member 'TransformerPawn_ServerSetDomain::Domain' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerSetRotateOnLocalAxis
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerSetRotateOnLocalAxis final
{
public:
	bool                                          bRotateLocalAxis;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerSetRotateOnLocalAxis) == 0x000001, "Wrong alignment on TransformerPawn_ServerSetRotateOnLocalAxis");
static_assert(sizeof(TransformerPawn_ServerSetRotateOnLocalAxis) == 0x000001, "Wrong size on TransformerPawn_ServerSetRotateOnLocalAxis");
static_assert(offsetof(TransformerPawn_ServerSetRotateOnLocalAxis, bRotateLocalAxis) == 0x000000, "Member 'TransformerPawn_ServerSetRotateOnLocalAxis::bRotateLocalAxis' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerSetSpaceType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerSetSpaceType final
{
public:
	ESpaceType                                    Space;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerSetSpaceType) == 0x000001, "Wrong alignment on TransformerPawn_ServerSetSpaceType");
static_assert(sizeof(TransformerPawn_ServerSetSpaceType) == 0x000001, "Wrong size on TransformerPawn_ServerSetSpaceType");
static_assert(offsetof(TransformerPawn_ServerSetSpaceType, Space) == 0x000000, "Member 'TransformerPawn_ServerSetSpaceType::Space' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerSetTransformationType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_ServerSetTransformationType final
{
public:
	ETransformationType                           Transformation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_ServerSetTransformationType) == 0x000001, "Wrong alignment on TransformerPawn_ServerSetTransformationType");
static_assert(sizeof(TransformerPawn_ServerSetTransformationType) == 0x000001, "Wrong size on TransformerPawn_ServerSetTransformationType");
static_assert(offsetof(TransformerPawn_ServerSetTransformationType, Transformation) == 0x000000, "Member 'TransformerPawn_ServerSetTransformationType::Transformation' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerTraceByChannel
// 0x001C (0x001C - 0x0000)
struct TransformerPawn_ServerTraceByChannel final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ServerTraceByChannel) == 0x000004, "Wrong alignment on TransformerPawn_ServerTraceByChannel");
static_assert(sizeof(TransformerPawn_ServerTraceByChannel) == 0x00001C, "Wrong size on TransformerPawn_ServerTraceByChannel");
static_assert(offsetof(TransformerPawn_ServerTraceByChannel, StartLocation) == 0x000000, "Member 'TransformerPawn_ServerTraceByChannel::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByChannel, EndLocation) == 0x00000C, "Member 'TransformerPawn_ServerTraceByChannel::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByChannel, TraceChannel) == 0x000018, "Member 'TransformerPawn_ServerTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByChannel, bAppendToList) == 0x000019, "Member 'TransformerPawn_ServerTraceByChannel::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerTraceByObjectTypes
// 0x0030 (0x0030 - 0x0000)
struct TransformerPawn_ServerTraceByObjectTypes final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     CollisionChannels;                                 // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ServerTraceByObjectTypes) == 0x000008, "Wrong alignment on TransformerPawn_ServerTraceByObjectTypes");
static_assert(sizeof(TransformerPawn_ServerTraceByObjectTypes) == 0x000030, "Wrong size on TransformerPawn_ServerTraceByObjectTypes");
static_assert(offsetof(TransformerPawn_ServerTraceByObjectTypes, StartLocation) == 0x000000, "Member 'TransformerPawn_ServerTraceByObjectTypes::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByObjectTypes, EndLocation) == 0x00000C, "Member 'TransformerPawn_ServerTraceByObjectTypes::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByObjectTypes, CollisionChannels) == 0x000018, "Member 'TransformerPawn_ServerTraceByObjectTypes::CollisionChannels' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByObjectTypes, bAppendToList) == 0x000028, "Member 'TransformerPawn_ServerTraceByObjectTypes::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ServerTraceByProfile
// 0x0024 (0x0024 - 0x0000)
struct TransformerPawn_ServerTraceByProfile final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ServerTraceByProfile) == 0x000004, "Wrong alignment on TransformerPawn_ServerTraceByProfile");
static_assert(sizeof(TransformerPawn_ServerTraceByProfile) == 0x000024, "Wrong size on TransformerPawn_ServerTraceByProfile");
static_assert(offsetof(TransformerPawn_ServerTraceByProfile, StartLocation) == 0x000000, "Member 'TransformerPawn_ServerTraceByProfile::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByProfile, EndLocation) == 0x00000C, "Member 'TransformerPawn_ServerTraceByProfile::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByProfile, ProfileName) == 0x000018, "Member 'TransformerPawn_ServerTraceByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ServerTraceByProfile, bAppendToList) == 0x000020, "Member 'TransformerPawn_ServerTraceByProfile::bAppendToList' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetComponentBased
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_SetComponentBased final
{
public:
	bool                                          bIsComponentBased;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetComponentBased) == 0x000001, "Wrong alignment on TransformerPawn_SetComponentBased");
static_assert(sizeof(TransformerPawn_SetComponentBased) == 0x000001, "Wrong size on TransformerPawn_SetComponentBased");
static_assert(offsetof(TransformerPawn_SetComponentBased, bIsComponentBased) == 0x000000, "Member 'TransformerPawn_SetComponentBased::bIsComponentBased' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetRotateOnLocalAxis
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_SetRotateOnLocalAxis final
{
public:
	bool                                          bRotateLocalAxis;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetRotateOnLocalAxis) == 0x000001, "Wrong alignment on TransformerPawn_SetRotateOnLocalAxis");
static_assert(sizeof(TransformerPawn_SetRotateOnLocalAxis) == 0x000001, "Wrong size on TransformerPawn_SetRotateOnLocalAxis");
static_assert(offsetof(TransformerPawn_SetRotateOnLocalAxis, bRotateLocalAxis) == 0x000000, "Member 'TransformerPawn_SetRotateOnLocalAxis::bRotateLocalAxis' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetSnappingEnabled
// 0x0002 (0x0002 - 0x0000)
struct TransformerPawn_SetSnappingEnabled final
{
public:
	ETransformationType                           TransformationType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnappingEnabled;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetSnappingEnabled) == 0x000001, "Wrong alignment on TransformerPawn_SetSnappingEnabled");
static_assert(sizeof(TransformerPawn_SetSnappingEnabled) == 0x000002, "Wrong size on TransformerPawn_SetSnappingEnabled");
static_assert(offsetof(TransformerPawn_SetSnappingEnabled, TransformationType) == 0x000000, "Member 'TransformerPawn_SetSnappingEnabled::TransformationType' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SetSnappingEnabled, bSnappingEnabled) == 0x000001, "Member 'TransformerPawn_SetSnappingEnabled::bSnappingEnabled' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetSnappingValue
// 0x0008 (0x0008 - 0x0000)
struct TransformerPawn_SetSnappingValue final
{
public:
	ETransformationType                           TransformationType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SnappingValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetSnappingValue) == 0x000004, "Wrong alignment on TransformerPawn_SetSnappingValue");
static_assert(sizeof(TransformerPawn_SetSnappingValue) == 0x000008, "Wrong size on TransformerPawn_SetSnappingValue");
static_assert(offsetof(TransformerPawn_SetSnappingValue, TransformationType) == 0x000000, "Member 'TransformerPawn_SetSnappingValue::TransformationType' has a wrong offset!");
static_assert(offsetof(TransformerPawn_SetSnappingValue, SnappingValue) == 0x000004, "Member 'TransformerPawn_SetSnappingValue::SnappingValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetSpaceType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_SetSpaceType final
{
public:
	ESpaceType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetSpaceType) == 0x000001, "Wrong alignment on TransformerPawn_SetSpaceType");
static_assert(sizeof(TransformerPawn_SetSpaceType) == 0x000001, "Wrong size on TransformerPawn_SetSpaceType");
static_assert(offsetof(TransformerPawn_SetSpaceType, Type) == 0x000000, "Member 'TransformerPawn_SetSpaceType::Type' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.SetTransformationType
// 0x0001 (0x0001 - 0x0000)
struct TransformerPawn_SetTransformationType final
{
public:
	ETransformationType                           TransformationType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_SetTransformationType) == 0x000001, "Wrong alignment on TransformerPawn_SetTransformationType");
static_assert(sizeof(TransformerPawn_SetTransformationType) == 0x000001, "Wrong size on TransformerPawn_SetTransformationType");
static_assert(offsetof(TransformerPawn_SetTransformationType, TransformationType) == 0x000000, "Member 'TransformerPawn_SetTransformationType::TransformationType' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.ShouldSelect
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_ShouldSelect final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_ShouldSelect) == 0x000008, "Wrong alignment on TransformerPawn_ShouldSelect");
static_assert(sizeof(TransformerPawn_ShouldSelect) == 0x000018, "Wrong size on TransformerPawn_ShouldSelect");
static_assert(offsetof(TransformerPawn_ShouldSelect, OwnerActor) == 0x000000, "Member 'TransformerPawn_ShouldSelect::OwnerActor' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ShouldSelect, Component) == 0x000008, "Member 'TransformerPawn_ShouldSelect::Component' has a wrong offset!");
static_assert(offsetof(TransformerPawn_ShouldSelect, ReturnValue) == 0x000010, "Member 'TransformerPawn_ShouldSelect::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.TraceByChannel
// 0x0038 (0x0038 - 0x0000)
struct TransformerPawn_TraceByChannel final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_TraceByChannel) == 0x000008, "Wrong alignment on TransformerPawn_TraceByChannel");
static_assert(sizeof(TransformerPawn_TraceByChannel) == 0x000038, "Wrong size on TransformerPawn_TraceByChannel");
static_assert(offsetof(TransformerPawn_TraceByChannel, StartLocation) == 0x000000, "Member 'TransformerPawn_TraceByChannel::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByChannel, EndLocation) == 0x00000C, "Member 'TransformerPawn_TraceByChannel::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByChannel, TraceChannel) == 0x000018, "Member 'TransformerPawn_TraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByChannel, IgnoredActors) == 0x000020, "Member 'TransformerPawn_TraceByChannel::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByChannel, bAppendToList) == 0x000030, "Member 'TransformerPawn_TraceByChannel::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByChannel, ReturnValue) == 0x000031, "Member 'TransformerPawn_TraceByChannel::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.TraceByObjectTypes
// 0x0040 (0x0040 - 0x0000)
struct TransformerPawn_TraceByObjectTypes final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     CollisionChannels;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_TraceByObjectTypes) == 0x000008, "Wrong alignment on TransformerPawn_TraceByObjectTypes");
static_assert(sizeof(TransformerPawn_TraceByObjectTypes) == 0x000040, "Wrong size on TransformerPawn_TraceByObjectTypes");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, StartLocation) == 0x000000, "Member 'TransformerPawn_TraceByObjectTypes::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, EndLocation) == 0x00000C, "Member 'TransformerPawn_TraceByObjectTypes::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, CollisionChannels) == 0x000018, "Member 'TransformerPawn_TraceByObjectTypes::CollisionChannels' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, IgnoredActors) == 0x000028, "Member 'TransformerPawn_TraceByObjectTypes::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, bAppendToList) == 0x000038, "Member 'TransformerPawn_TraceByObjectTypes::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByObjectTypes, ReturnValue) == 0x000039, "Member 'TransformerPawn_TraceByObjectTypes::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.TraceByProfile
// 0x0038 (0x0038 - 0x0000)
struct TransformerPawn_TraceByProfile final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAppendToList;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TransformerPawn_TraceByProfile) == 0x000008, "Wrong alignment on TransformerPawn_TraceByProfile");
static_assert(sizeof(TransformerPawn_TraceByProfile) == 0x000038, "Wrong size on TransformerPawn_TraceByProfile");
static_assert(offsetof(TransformerPawn_TraceByProfile, StartLocation) == 0x000000, "Member 'TransformerPawn_TraceByProfile::StartLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByProfile, EndLocation) == 0x00000C, "Member 'TransformerPawn_TraceByProfile::EndLocation' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByProfile, ProfileName) == 0x000018, "Member 'TransformerPawn_TraceByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByProfile, IgnoredActors) == 0x000020, "Member 'TransformerPawn_TraceByProfile::IgnoredActors' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByProfile, bAppendToList) == 0x000030, "Member 'TransformerPawn_TraceByProfile::bAppendToList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_TraceByProfile, ReturnValue) == 0x000031, "Member 'TransformerPawn_TraceByProfile::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.UpdateTransform
// 0x0060 (0x0060 - 0x0000)
struct TransformerPawn_UpdateTransform final
{
public:
	struct FVector                                LookingVector;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayOrigin;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0030(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_UpdateTransform) == 0x000010, "Wrong alignment on TransformerPawn_UpdateTransform");
static_assert(sizeof(TransformerPawn_UpdateTransform) == 0x000060, "Wrong size on TransformerPawn_UpdateTransform");
static_assert(offsetof(TransformerPawn_UpdateTransform, LookingVector) == 0x000000, "Member 'TransformerPawn_UpdateTransform::LookingVector' has a wrong offset!");
static_assert(offsetof(TransformerPawn_UpdateTransform, RayOrigin) == 0x00000C, "Member 'TransformerPawn_UpdateTransform::RayOrigin' has a wrong offset!");
static_assert(offsetof(TransformerPawn_UpdateTransform, RayDirection) == 0x000018, "Member 'TransformerPawn_UpdateTransform::RayDirection' has a wrong offset!");
static_assert(offsetof(TransformerPawn_UpdateTransform, ReturnValue) == 0x000030, "Member 'TransformerPawn_UpdateTransform::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.GetCurrentDomain
// 0x0002 (0x0002 - 0x0000)
struct TransformerPawn_GetCurrentDomain final
{
public:
	bool                                          TransformInProgress;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationDomain                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_GetCurrentDomain) == 0x000001, "Wrong alignment on TransformerPawn_GetCurrentDomain");
static_assert(sizeof(TransformerPawn_GetCurrentDomain) == 0x000002, "Wrong size on TransformerPawn_GetCurrentDomain");
static_assert(offsetof(TransformerPawn_GetCurrentDomain, TransformInProgress) == 0x000000, "Member 'TransformerPawn_GetCurrentDomain::TransformInProgress' has a wrong offset!");
static_assert(offsetof(TransformerPawn_GetCurrentDomain, ReturnValue) == 0x000001, "Member 'TransformerPawn_GetCurrentDomain::ReturnValue' has a wrong offset!");

// Function RuntimeTransformer.TransformerPawn.GetSelectedComponents
// 0x0018 (0x0018 - 0x0000)
struct TransformerPawn_GetSelectedComponents final
{
public:
	TArray<class USceneComponent*>                outComponentList;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USceneComponent*                        outGizmoPlacedComponent;                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformerPawn_GetSelectedComponents) == 0x000008, "Wrong alignment on TransformerPawn_GetSelectedComponents");
static_assert(sizeof(TransformerPawn_GetSelectedComponents) == 0x000018, "Wrong size on TransformerPawn_GetSelectedComponents");
static_assert(offsetof(TransformerPawn_GetSelectedComponents, outComponentList) == 0x000000, "Member 'TransformerPawn_GetSelectedComponents::outComponentList' has a wrong offset!");
static_assert(offsetof(TransformerPawn_GetSelectedComponents, outGizmoPlacedComponent) == 0x000010, "Member 'TransformerPawn_GetSelectedComponents::outGizmoPlacedComponent' has a wrong offset!");

}

