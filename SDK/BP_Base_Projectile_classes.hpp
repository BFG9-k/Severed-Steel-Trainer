#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_Projectile

#include "Basic.hpp"

#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Base_Projectile.BP_Base_Projectile_C
// 0x0088 (0x02B8 - 0x0230)
class ABP_Base_Projectile_C : public ALuosProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Sound_Projectile_Cue;                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound_Impact_Cue;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Flying_Particle;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Moving_Projectile;                                 // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Impact_Particle;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Speed;                                             // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               Rotate_Impact_Particle;                            // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Muzzle_Particle;                                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Play_Sounds;                                       // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HueShift;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         EmissiveSTR;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ProjectileCue;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USoundCue*                              ImpactCue;                                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Chargetime;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MyUV;                                              // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Base_Projectile(int32 EntryPoint);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void UserConstructionScript();
	void Hueshifter(class UPrimitiveComponent* HueShift_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Base_Projectile_C">();
	}
	static class ABP_Base_Projectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Base_Projectile_C>();
	}
};
static_assert(alignof(ABP_Base_Projectile_C) == 0x000008, "Wrong alignment on ABP_Base_Projectile_C");
static_assert(sizeof(ABP_Base_Projectile_C) == 0x0002B8, "Wrong size on ABP_Base_Projectile_C");
static_assert(offsetof(ABP_Base_Projectile_C, UberGraphFrame) == 0x000230, "Member 'ABP_Base_Projectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Sound_Projectile_Cue) == 0x000238, "Member 'ABP_Base_Projectile_C::Sound_Projectile_Cue' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Sound_Impact_Cue) == 0x000240, "Member 'ABP_Base_Projectile_C::Sound_Impact_Cue' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Flying_Particle) == 0x000248, "Member 'ABP_Base_Projectile_C::Flying_Particle' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Sphere) == 0x000250, "Member 'ABP_Base_Projectile_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, ProjectileMovement) == 0x000258, "Member 'ABP_Base_Projectile_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Moving_Projectile) == 0x000260, "Member 'ABP_Base_Projectile_C::Moving_Projectile' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Impact_Particle) == 0x000268, "Member 'ABP_Base_Projectile_C::Impact_Particle' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Speed) == 0x000270, "Member 'ABP_Base_Projectile_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Rotate_Impact_Particle) == 0x00027C, "Member 'ABP_Base_Projectile_C::Rotate_Impact_Particle' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Muzzle_Particle) == 0x000288, "Member 'ABP_Base_Projectile_C::Muzzle_Particle' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Play_Sounds) == 0x000290, "Member 'ABP_Base_Projectile_C::Play_Sounds' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, HueShift) == 0x000294, "Member 'ABP_Base_Projectile_C::HueShift' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, EmissiveSTR) == 0x000298, "Member 'ABP_Base_Projectile_C::EmissiveSTR' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, bHit) == 0x00029C, "Member 'ABP_Base_Projectile_C::bHit' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, ProjectileCue) == 0x0002A0, "Member 'ABP_Base_Projectile_C::ProjectileCue' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, ImpactCue) == 0x0002A8, "Member 'ABP_Base_Projectile_C::ImpactCue' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, Chargetime) == 0x0002B0, "Member 'ABP_Base_Projectile_C::Chargetime' has a wrong offset!");
static_assert(offsetof(ABP_Base_Projectile_C, MyUV) == 0x0002B4, "Member 'ABP_Base_Projectile_C::MyUV' has a wrong offset!");

}

