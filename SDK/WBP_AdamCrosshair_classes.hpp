#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AdamCrosshair

#include "Basic.hpp"

#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AdamCrosshair.WBP_AdamCrosshair_C
// 0x0030 (0x0290 - 0x0260)
class UWBP_AdamCrosshair_C final : public UAdamCrosshair
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                B_HitIndicator;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                B_HitIndicator_1;                                  // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_166;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_HitIndicator;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_HitIndicator_1;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_AdamCrosshair(int32 EntryPoint);
	void DoHitFlare();
	void SetMyXHair(class UTexture2D* NewParam);
	struct FLinearColor GetColorAndOpacity_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AdamCrosshair_C">();
	}
	static class UWBP_AdamCrosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AdamCrosshair_C>();
	}
};
static_assert(alignof(UWBP_AdamCrosshair_C) == 0x000008, "Wrong alignment on UWBP_AdamCrosshair_C");
static_assert(sizeof(UWBP_AdamCrosshair_C) == 0x000290, "Wrong size on UWBP_AdamCrosshair_C");
static_assert(offsetof(UWBP_AdamCrosshair_C, UberGraphFrame) == 0x000260, "Member 'UWBP_AdamCrosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_AdamCrosshair_C, B_HitIndicator) == 0x000268, "Member 'UWBP_AdamCrosshair_C::B_HitIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_AdamCrosshair_C, B_HitIndicator_1) == 0x000270, "Member 'UWBP_AdamCrosshair_C::B_HitIndicator_1' has a wrong offset!");
static_assert(offsetof(UWBP_AdamCrosshair_C, Image_166) == 0x000278, "Member 'UWBP_AdamCrosshair_C::Image_166' has a wrong offset!");
static_assert(offsetof(UWBP_AdamCrosshair_C, OV_HitIndicator) == 0x000280, "Member 'UWBP_AdamCrosshair_C::OV_HitIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_AdamCrosshair_C, OV_HitIndicator_1) == 0x000288, "Member 'UWBP_AdamCrosshair_C::OV_HitIndicator_1' has a wrong offset!");

}

