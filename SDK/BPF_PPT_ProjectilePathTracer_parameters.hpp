#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_PPT_ProjectilePathTracer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Spawn Trajectory Beam with Points
// 0x00D0 (0x00D0 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points final
{
public:
	int32                                         Divisions;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beam_Size;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Beam_Point_Texture;                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Marker_Texture;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       MID_Array_Reference;                               // 0x0030(0x0010)(Parm, OutParm)
	TArray<class UParticleSystemComponent*>       Trajectory_Beam_Reference;                         // 0x0040(0x0010)(Parm, OutParm, ContainsInstancedReference)
	class UParticleSystemComponent*               TrajectoryMarker_Reference;                        // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       Beam_Array;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_3; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points) == 0x0000D0, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Divisions) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Beam_Size) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Beam_Size' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Color) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Color' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Beam_Point_Texture) == 0x000018, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Beam_Point_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Marker_Texture) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Marker_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, __WorldContext) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, MID_Array_Reference) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::MID_Array_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Trajectory_Beam_Reference) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Trajectory_Beam_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, TrajectoryMarker_Reference) == 0x000050, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::TrajectoryMarker_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Beam_Array) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Beam_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000070, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000078, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_CreateDynamicMaterialInstance_ReturnValue_3) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_CreateDynamicMaterialInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000088, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, K2Node_MakeArray_Array) == 0x000090, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x0000A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, Temp_int_Variable) == 0x0000C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_with_Points::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Set Trajectory Beam Color
// 0x0048 (0x0048 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MID_Array_Reference;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color) == 0x000048, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, MID_Array_Reference) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::MID_Array_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, Color) == 0x000010, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::Color' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, __WorldContext) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, CallFunc_Array_Get_Item) == 0x000038, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Color::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Place Trajectory Beam
// 0x02F0 (0x02F0 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam final
{
public:
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UParticleSystemComponent*>       Trajectory_Beam_Reference;                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UParticleSystemComponent*               Trajectory_Marker_Reference;                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Out_Hit;                                           // 0x0028(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UObject*                                __WorldContext;                                    // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Highest_Point;                                     // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0180(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0234(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_3;                         // 0x02D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam) == 0x000010, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam) == 0x0002F0, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Trajectory_Points) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Trajectory_Beam_Reference) == 0x000010, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Trajectory_Beam_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Trajectory_Marker_Reference) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Trajectory_Marker_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Out_Hit) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, __WorldContext) == 0x0000B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Highest_Point) == 0x0000B8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Highest_Point' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C5, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_Time) == 0x0000C8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_Distance) == 0x0000CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_Location) == 0x0000D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_ImpactPoint) == 0x0000DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_Normal) == 0x0000E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_MakeRotFromZ_ReturnValue) == 0x000144, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000180, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_LastIndex_ReturnValue) == 0x000208, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_LastIndex_ReturnValue_1) == 0x00020C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000210, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Subtract_IntInt_ReturnValue) == 0x000214, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Less_IntInt_ReturnValue) == 0x000218, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Temp_int_Variable) == 0x00021C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_Get_Item) == 0x000220, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_Get_Item_1) == 0x000228, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000234, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Add_IntInt_ReturnValue) == 0x0002BC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_Get_Item_2) == 0x0002C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0002CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, Temp_int_Variable_1) == 0x0002D4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Array_Get_Item_3) == 0x0002D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0002E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Beam::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Set Trajectory Beam Textures
// 0x0038 (0x0038 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MID_Array_Reference;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UTexture*                               Beam_Point_Texture;                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Marker_Texture;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures) == 0x000038, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, MID_Array_Reference) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::MID_Array_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, Beam_Point_Texture) == 0x000010, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::Beam_Point_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, Marker_Texture) == 0x000018, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::Marker_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, __WorldContext) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, CallFunc_Array_Get_Item) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Set_Trajectory_Beam_Textures::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Calculate Line Trajectory
// 0x0468 (0x0468 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divisions;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_bounces;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Restitution;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Friction;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity_Scale;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Type;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trace_Complex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_ignore;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Projectile_Movement;                               // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0068(0x0010)(Parm, OutParm)
	struct FHitResult                             Out_Hit;                                           // 0x0078(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             Hit_Result_Structure;                              // 0x0100(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        Trajectory_Location_Array;                         // 0x0188(0x0010)(Edit, BlueprintVisible)
	int32                                         Bounce_Index;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Collision_Index;                                   // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gravity;                                           // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Location;                                  // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Index;                                     // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Velocity;                                     // 0x01BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Location;                                     // 0x01C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFrictionCombineMode                          Temp_byte_Variable;                                // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EF[0x1];                                      // 0x01EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x2];                                      // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x025C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6[0x2];                                      // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EE[0x2];                                      // 0x02EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0338(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue;         // 0x03A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_2;               // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_3;               // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x03EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory) == 0x000468, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Duration) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Duration' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Divisions) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Location) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Velocity) == 0x000014, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Max_bounces) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Max_bounces' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Restitution) == 0x000024, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Restitution' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Friction) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Friction' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Gravity_Scale) == 0x00002C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Gravity_Scale' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Object_Type) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Object_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Trace_Complex) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Trace_Complex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Actors_to_ignore) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Actors_to_ignore' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Draw_Debug_Type) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Projectile_Movement) == 0x000059, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Projectile_Movement' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, __WorldContext) == 0x000060, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Trajectory_Points) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Out_Hit) == 0x000078, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Hit_Result_Structure) == 0x000100, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Hit_Result_Structure' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Trajectory_Location_Array) == 0x000188, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Trajectory_Location_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Bounce_Index) == 0x000198, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Bounce_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Collision_Index) == 0x00019C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Collision_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Gravity) == 0x0001A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Gravity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Current_Location) == 0x0001AC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Current_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Current_Index) == 0x0001B8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Current_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Base_Velocity) == 0x0001BC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Base_Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Base_Location) == 0x0001C8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Base_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_bool_Variable) == 0x0001D4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_byte_Variable) == 0x0001E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_bool_Variable_1) == 0x0001EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Greater_IntInt_ReturnValue) == 0x0001ED, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Not_PreBool_ReturnValue) == 0x0001EE, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Array_Add_ReturnValue) == 0x0001FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Subtract_IntInt_ReturnValue) == 0x000200, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_IntInt_ReturnValue) == 0x000204, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000208, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00020C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000210, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000214, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000220, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_VectorVector_ReturnValue) == 0x00022C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000238, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_IntInt_ReturnValue_1) == 0x000244, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_bool_Variable_2) == 0x000248, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_int_Variable) == 0x00024C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_IntInt_ReturnValue_2) == 0x000250, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_IntInt_ReturnValue_3) == 0x000254, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000258, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BooleanAND_ReturnValue) == 0x000259, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_LineTraceSingleForObjects_OutHit) == 0x00025C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0002E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, Temp_bool_Variable_3) == 0x0002E5, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_Select_Default) == 0x0002E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_bBlockingHit) == 0x0002EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002ED, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_Time) == 0x0002F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_Distance) == 0x0002F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_Location) == 0x0002F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_ImpactPoint) == 0x000304, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_Normal) == 0x000310, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_ImpactNormal) == 0x00031C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_PhysMat) == 0x000328, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_HitActor) == 0x000330, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_HitComponent) == 0x000338, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_HitBoneName) == 0x000340, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_HitItem) == 0x000348, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_ElementIndex) == 0x00034C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_FaceIndex) == 0x000350, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_TraceStart) == 0x000354, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BreakHitResult_TraceEnd) == 0x000360, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MakeVector_ReturnValue) == 0x00036C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Array_Add_ReturnValue_1) == 0x000378, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00037C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000388, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_VSize_ReturnValue) == 0x000394, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000398, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003A4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MirrorVectorByNormal_ReturnValue) == 0x0003A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MirrorVectorByNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_BooleanAND_ReturnValue_1) == 0x0003B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003B8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x0003C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MakeRotFromZ_ReturnValue) == 0x0003D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_MathExpression_ReturnValue) == 0x0003DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_MathExpression_ReturnValue_1) == 0x0003E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_MathExpression_ReturnValue_2) == 0x0003E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_MathExpression_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_MathExpression_ReturnValue_3) == 0x0003E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_MathExpression_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x0003EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_Select_Default_1) == 0x0003F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x0003FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_Select_Default_2) == 0x000408, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00040C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, K2Node_Select_Default_3) == 0x000418, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_MakeVector_ReturnValue_1) == 0x00041C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Array_Add_ReturnValue_2) == 0x000428, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue) == 0x00042C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000438, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x000444, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000450, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x00045C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Line_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Calculate Sphere Trajectory
// 0x0470 (0x0470 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divisions;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_bounces;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Restitution;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Friction;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity_Scale;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Type;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trace_Complex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_ignore;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Projectile_Movement;                               // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0070(0x0010)(Parm, OutParm)
	struct FHitResult                             Out_Hit;                                           // 0x0080(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             Hit_Result_Structure;                              // 0x0108(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        Trajectory_Location_Array;                         // 0x0190(0x0010)(Edit, BlueprintVisible)
	int32                                         Bounce_Index;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Collision_Index;                                   // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gravity;                                           // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Location;                                  // 0x01B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Index;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Velocity;                                  // 0x01C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start_Location;                                    // 0x01D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFrictionCombineMode                          Temp_byte_Variable;                                // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7[0x1];                                      // 0x01F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0264(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x02ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EE[0x2];                                      // 0x02EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0340(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue;         // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_2;               // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_3;               // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory) == 0x000470, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Duration) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Duration' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Divisions) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Location) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Velocity) == 0x000014, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Max_bounces) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Max_bounces' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Restitution) == 0x000024, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Restitution' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Friction) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Friction' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Gravity_Scale) == 0x00002C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Gravity_Scale' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Object_Type) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Object_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Trace_Complex) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Trace_Complex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Actors_to_ignore) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Actors_to_ignore' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Draw_Debug_Type) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Radius) == 0x00005C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Radius' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Projectile_Movement) == 0x000060, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Projectile_Movement' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, __WorldContext) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Trajectory_Points) == 0x000070, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Out_Hit) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Hit_Result_Structure) == 0x000108, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Hit_Result_Structure' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Trajectory_Location_Array) == 0x000190, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Trajectory_Location_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Bounce_Index) == 0x0001A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Bounce_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Collision_Index) == 0x0001A4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Collision_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Gravity) == 0x0001A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Gravity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Current_Location) == 0x0001B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Current_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Current_Index) == 0x0001C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Current_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Current_Velocity) == 0x0001C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Current_Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Start_Location) == 0x0001D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Start_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_bool_Variable) == 0x0001DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_byte_Variable) == 0x0001EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_bool_Variable_1) == 0x0001F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Greater_IntInt_ReturnValue) == 0x0001F5, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Not_PreBool_ReturnValue) == 0x0001F6, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Array_Add_ReturnValue) == 0x000204, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Subtract_IntInt_ReturnValue) == 0x000208, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_IntInt_ReturnValue) == 0x00020C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000210, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000214, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000218, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00021C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000228, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_VectorVector_ReturnValue) == 0x000234, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000240, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_IntInt_ReturnValue_1) == 0x00024C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_bool_Variable_2) == 0x000250, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_int_Variable) == 0x000254, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_IntInt_ReturnValue_2) == 0x000258, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_IntInt_ReturnValue_3) == 0x00025C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000260, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BooleanAND_ReturnValue) == 0x000261, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000264, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0002EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, Temp_bool_Variable_3) == 0x0002ED, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_Select_Default) == 0x0002F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_bBlockingHit) == 0x0002F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002F5, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_Time) == 0x0002F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_Distance) == 0x0002FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_Location) == 0x000300, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_ImpactPoint) == 0x00030C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_Normal) == 0x000318, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_ImpactNormal) == 0x000324, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_PhysMat) == 0x000330, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_HitActor) == 0x000338, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_HitComponent) == 0x000340, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_HitBoneName) == 0x000348, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_HitItem) == 0x000350, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_ElementIndex) == 0x000354, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_FaceIndex) == 0x000358, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_TraceStart) == 0x00035C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BreakHitResult_TraceEnd) == 0x000368, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MakeVector_ReturnValue) == 0x000374, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Array_Add_ReturnValue_1) == 0x000380, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000384, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000390, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_VSize_ReturnValue) == 0x00039C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0003A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003AC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MirrorVectorByNormal_ReturnValue) == 0x0003B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MirrorVectorByNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_BooleanAND_ReturnValue_1) == 0x0003BC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x0003CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MakeRotFromZ_ReturnValue) == 0x0003D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_MathExpression_ReturnValue) == 0x0003E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_MathExpression_ReturnValue_1) == 0x0003E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_MathExpression_ReturnValue_2) == 0x0003EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_MathExpression_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_MathExpression_ReturnValue_3) == 0x0003F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_MathExpression_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x0003F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_Select_Default_1) == 0x000400, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000404, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_Select_Default_2) == 0x000410, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000414, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, K2Node_Select_Default_3) == 0x000420, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_MakeVector_ReturnValue_1) == 0x000424, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Array_Add_ReturnValue_2) == 0x000430, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000434, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000440, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x00044C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000458, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000464, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Sphere_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Calculate Capsule Trajectory
// 0x0470 (0x0470 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divisions;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_bounces;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Restitution;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Friction;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity_Scale;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Type;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trace_Complex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_ignore;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Height;                                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Projectile_Movement;                               // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0070(0x0010)(Parm, OutParm)
	struct FHitResult                             Out_Hit;                                           // 0x0080(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             Hit_Result_Structure;                              // 0x0108(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        Trajectory_Location_Array;                         // 0x0190(0x0010)(Edit, BlueprintVisible)
	int32                                         Bounce_Index;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Collision_Index;                                   // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gravity;                                           // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Location;                                  // 0x01B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Index;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Velocity;                                     // 0x01C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Location;                                     // 0x01D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFrictionCombineMode                          Temp_byte_Variable;                                // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7[0x1];                                      // 0x01F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x0264(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x02ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EE[0x2];                                      // 0x02EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0340(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue;         // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_2;               // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_3;               // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory) == 0x000470, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Duration) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Duration' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Divisions) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Location) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Velocity) == 0x000014, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Max_bounces) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Max_bounces' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Restitution) == 0x000024, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Restitution' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Friction) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Friction' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Gravity_Scale) == 0x00002C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Gravity_Scale' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Object_Type) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Object_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Trace_Complex) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Trace_Complex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Actors_to_ignore) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Actors_to_ignore' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Draw_Debug_Type) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Radius) == 0x00005C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Radius' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Half_Height) == 0x000060, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Half_Height' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Projectile_Movement) == 0x000064, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Projectile_Movement' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, __WorldContext) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Trajectory_Points) == 0x000070, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Out_Hit) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Hit_Result_Structure) == 0x000108, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Hit_Result_Structure' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Trajectory_Location_Array) == 0x000190, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Trajectory_Location_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Bounce_Index) == 0x0001A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Bounce_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Collision_Index) == 0x0001A4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Collision_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Gravity) == 0x0001A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Gravity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Current_Location) == 0x0001B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Current_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Current_Index) == 0x0001C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Current_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Base_Velocity) == 0x0001C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Base_Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Base_Location) == 0x0001D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Base_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_bool_Variable) == 0x0001DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_byte_Variable) == 0x0001EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_bool_Variable_1) == 0x0001F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Greater_IntInt_ReturnValue) == 0x0001F5, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Not_PreBool_ReturnValue) == 0x0001F6, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Array_Add_ReturnValue) == 0x000204, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Subtract_IntInt_ReturnValue) == 0x000208, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_IntInt_ReturnValue) == 0x00020C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000210, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000214, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000218, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00021C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000228, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_VectorVector_ReturnValue) == 0x000234, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000240, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_IntInt_ReturnValue_1) == 0x00024C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_bool_Variable_2) == 0x000250, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_int_Variable) == 0x000254, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_IntInt_ReturnValue_2) == 0x000258, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_IntInt_ReturnValue_3) == 0x00025C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000260, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BooleanAND_ReturnValue) == 0x000261, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x000264, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x0002EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, Temp_bool_Variable_3) == 0x0002ED, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_Select_Default) == 0x0002F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_bBlockingHit) == 0x0002F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002F5, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_Time) == 0x0002F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_Distance) == 0x0002FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_Location) == 0x000300, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_ImpactPoint) == 0x00030C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_Normal) == 0x000318, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_ImpactNormal) == 0x000324, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_PhysMat) == 0x000330, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_HitActor) == 0x000338, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_HitComponent) == 0x000340, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_HitBoneName) == 0x000348, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_HitItem) == 0x000350, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_ElementIndex) == 0x000354, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_FaceIndex) == 0x000358, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_TraceStart) == 0x00035C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BreakHitResult_TraceEnd) == 0x000368, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MakeVector_ReturnValue) == 0x000374, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Array_Add_ReturnValue_1) == 0x000380, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000384, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000390, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_VSize_ReturnValue) == 0x00039C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0003A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003AC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MirrorVectorByNormal_ReturnValue) == 0x0003B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MirrorVectorByNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_BooleanAND_ReturnValue_1) == 0x0003BC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x0003CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MakeRotFromZ_ReturnValue) == 0x0003D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_MathExpression_ReturnValue) == 0x0003E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_MathExpression_ReturnValue_1) == 0x0003E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_MathExpression_ReturnValue_2) == 0x0003EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_MathExpression_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_MathExpression_ReturnValue_3) == 0x0003F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_MathExpression_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x0003F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_Select_Default_1) == 0x000400, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000404, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_Select_Default_2) == 0x000410, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000414, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, K2Node_Select_Default_3) == 0x000420, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_MakeVector_ReturnValue_1) == 0x000424, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Array_Add_ReturnValue_2) == 0x000430, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000434, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000440, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x00044C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000458, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000464, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Capsule_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Calculate Box Trajectory
// 0x0480 (0x0480 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divisions;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_bounces;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Restitution;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Friction;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity_Scale;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Type;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trace_Complex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_ignore;                                  // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EDrawDebugTrace                               Draw_Debug_Type;                                   // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Half_Size;                                         // 0x005C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x0068(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Projectile_Movement;                               // 0x0074(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0080(0x0010)(Parm, OutParm)
	struct FHitResult                             Out_Hit;                                           // 0x0090(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             Hit_Result_Structure;                              // 0x0118(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        Trajectory_Location_Array;                         // 0x01A0(0x0010)(Edit, BlueprintVisible)
	int32                                         Bounce_Index;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Collision_Index;                                   // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gravity;                                           // 0x01B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Location;                                  // 0x01C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Index;                                     // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Velocity;                                     // 0x01D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Base_Location;                                     // 0x01E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFrictionCombineMode                          Temp_byte_Variable;                                // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_207[0x1];                                      // 0x0207(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x2];                                      // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_BoxTraceSingleForObjects_OutHit;          // 0x0274(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingleForObjects_ReturnValue;     // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x02FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FE[0x2];                                      // 0x02FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_306[0x2];                                      // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0350(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MirrorVectorByNormal_ReturnValue;         // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_2;               // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_3;               // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue_1;               // 0x0404(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0474(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory) == 0x000480, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Duration) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Duration' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Divisions) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Location) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Velocity) == 0x000014, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Max_bounces) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Max_bounces' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Restitution) == 0x000024, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Restitution' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Friction) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Friction' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Gravity_Scale) == 0x00002C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Gravity_Scale' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Object_Type) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Object_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Trace_Complex) == 0x000040, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Trace_Complex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Actors_to_ignore) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Actors_to_ignore' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Draw_Debug_Type) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Draw_Debug_Type' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Half_Size) == 0x00005C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Half_Size' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Orientation) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Orientation' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Projectile_Movement) == 0x000074, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Projectile_Movement' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, __WorldContext) == 0x000078, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Trajectory_Points) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Out_Hit) == 0x000090, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Hit_Result_Structure) == 0x000118, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Hit_Result_Structure' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Trajectory_Location_Array) == 0x0001A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Trajectory_Location_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Bounce_Index) == 0x0001B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Bounce_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Collision_Index) == 0x0001B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Collision_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Gravity) == 0x0001B8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Gravity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Current_Location) == 0x0001C4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Current_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Current_Index) == 0x0001D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Current_Index' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Base_Velocity) == 0x0001D4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Base_Velocity' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Base_Location) == 0x0001E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Base_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_bool_Variable) == 0x0001EC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_byte_Variable) == 0x0001FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000200, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_bool_Variable_1) == 0x000204, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Greater_IntInt_ReturnValue) == 0x000205, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Not_PreBool_ReturnValue) == 0x000206, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000208, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Array_Add_ReturnValue) == 0x000214, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Subtract_IntInt_ReturnValue) == 0x000218, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_IntInt_ReturnValue) == 0x00021C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000220, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000224, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000228, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00022C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000238, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_VectorVector_ReturnValue) == 0x000244, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000250, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_IntInt_ReturnValue_1) == 0x00025C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_bool_Variable_2) == 0x000260, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_int_Variable) == 0x000264, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_IntInt_ReturnValue_2) == 0x000268, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_IntInt_ReturnValue_3) == 0x00026C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000270, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BooleanAND_ReturnValue) == 0x000271, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BoxTraceSingleForObjects_OutHit) == 0x000274, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BoxTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BoxTraceSingleForObjects_ReturnValue) == 0x0002FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BoxTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, Temp_bool_Variable_3) == 0x0002FD, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_Select_Default) == 0x000300, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_bBlockingHit) == 0x000304, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_bInitialOverlap) == 0x000305, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_Time) == 0x000308, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_Distance) == 0x00030C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_Location) == 0x000310, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_ImpactPoint) == 0x00031C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_Normal) == 0x000328, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_ImpactNormal) == 0x000334, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_PhysMat) == 0x000340, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_HitActor) == 0x000348, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_HitComponent) == 0x000350, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_HitBoneName) == 0x000358, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_HitItem) == 0x000360, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_ElementIndex) == 0x000364, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_FaceIndex) == 0x000368, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_TraceStart) == 0x00036C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BreakHitResult_TraceEnd) == 0x000378, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MakeVector_ReturnValue) == 0x000384, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Array_Add_ReturnValue_1) == 0x000390, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000394, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0003A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_VSize_ReturnValue) == 0x0003AC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0003B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003BC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MirrorVectorByNormal_ReturnValue) == 0x0003C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MirrorVectorByNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_BooleanAND_ReturnValue_1) == 0x0003CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x0003DC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MakeRotFromZ_ReturnValue) == 0x0003E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_MathExpression_ReturnValue) == 0x0003F4, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_MathExpression_ReturnValue_1) == 0x0003F8, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_MathExpression_ReturnValue_2) == 0x0003FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_MathExpression_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_MathExpression_ReturnValue_3) == 0x000400, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_MathExpression_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MakeRotFromZ_ReturnValue_1) == 0x000404, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MakeRotFromZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_Select_Default_1) == 0x000410, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000414, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_Select_Default_2) == 0x000420, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000424, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, K2Node_Select_Default_3) == 0x000430, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_MakeVector_ReturnValue_1) == 0x000434, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Array_Add_ReturnValue_2) == 0x000440, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000444, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000450, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x00045C, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000468, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000474, "Member 'BPF_PPT_ProjectilePathTracer_C_Calculate_Box_Trajectory::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Spawn Trajectory Beam Only
// 0x00B8 (0x00B8 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only final
{
public:
	int32                                         Divisions;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beam_Size;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Marker_Texture;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       MID_Array_Reference;                               // 0x0028(0x0010)(Parm, OutParm)
	TArray<class UParticleSystemComponent*>       Trajectory_Beam_Reference;                         // 0x0038(0x0010)(Parm, OutParm, ContainsInstancedReference)
	class UParticleSystemComponent*               TrajectoryMarker_Reference;                        // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       Beam_Array;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only) == 0x0000B8, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Divisions) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Beam_Size) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Beam_Size' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Color) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Color' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Marker_Texture) == 0x000018, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Marker_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, __WorldContext) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, MID_Array_Reference) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::MID_Array_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Trajectory_Beam_Reference) == 0x000038, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Trajectory_Beam_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, TrajectoryMarker_Reference) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::TrajectoryMarker_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Beam_Array) == 0x000050, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Beam_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000060, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000068, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000070, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000078, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, K2Node_MakeArray_Array) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000090, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, Temp_int_Variable) == 0x0000A4, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only, CallFunc_Array_Add_ReturnValue) == 0x0000B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Beam_Only::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Spawn Trajectory Points Only
// 0x00F8 (0x00F8 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only final
{
public:
	int32                                         Divisions;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Size;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Point_Texture;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Marker_Texture;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Points_face_up;                                    // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       MID_Array_Reference;                               // 0x0038(0x0010)(Parm, OutParm)
	TArray<class UParticleSystemComponent*>       Trajectory_Beam_Reference;                         // 0x0048(0x0010)(Parm, OutParm, ContainsInstancedReference)
	class UParticleSystemComponent*               TrajectoryMarker_Reference;                        // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       Beam_Array;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_1;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only) == 0x000008, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only) == 0x0000F8, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Divisions) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Divisions' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Point_Size) == 0x000004, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Point_Size' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Color) == 0x000008, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Color' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Point_Texture) == 0x000018, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Point_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Marker_Texture) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Marker_Texture' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Points_face_up) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Points_face_up' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, __WorldContext) == 0x000030, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, MID_Array_Reference) == 0x000038, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::MID_Array_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Trajectory_Beam_Reference) == 0x000048, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Trajectory_Beam_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, TrajectoryMarker_Reference) == 0x000058, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::TrajectoryMarker_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Beam_Array) == 0x000060, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Beam_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Temp_bool_Variable) == 0x000070, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000078, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000080, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000088, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000090, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, K2Node_MakeArray_Array) == 0x000098, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B4, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Temp_int_Variable) == 0x0000C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Temp_object_Variable) == 0x0000C8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_Add_IntInt_ReturnValue) == 0x0000D4, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, Temp_object_Variable_1) == 0x0000D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, K2Node_Select_Default) == 0x0000E0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x0000E8, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only, CallFunc_Array_Add_ReturnValue) == 0x0000F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Spawn_Trajectory_Points_Only::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C.Place Trajectory Points Only
// 0x0360 (0x0360 - 0x0000)
struct BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only final
{
public:
	TArray<struct FVector>                        Trajectory_Points;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UParticleSystemComponent*>       Trajectory_Beam_Reference;                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UParticleSystemComponent*               Trajectory_Marker_Reference;                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Out_Hit;                                           // 0x0028(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Points_face_up;                                    // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Highest_Point;                                     // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0190(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_2;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable_1;                               // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item_3;                         // 0x0298(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x02A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult_1;    // 0x02D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only) == 0x000010, "Wrong alignment on BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only");
static_assert(sizeof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only) == 0x000360, "Wrong size on BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Trajectory_Points) == 0x000000, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Trajectory_Points' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Trajectory_Beam_Reference) == 0x000010, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Trajectory_Beam_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Trajectory_Marker_Reference) == 0x000020, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Trajectory_Marker_Reference' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Out_Hit) == 0x000028, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Out_Hit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Points_face_up) == 0x0000B0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Points_face_up' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, __WorldContext) == 0x0000B8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Highest_Point) == 0x0000C0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Highest_Point' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_bBlockingHit) == 0x0000CC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000CD, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_Time) == 0x0000D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_Distance) == 0x0000D4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_Location) == 0x0000D8, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E4, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_Normal) == 0x0000F0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_ImpactNormal) == 0x0000FC, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_PhysMat) == 0x000108, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_HitActor) == 0x000110, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_HitComponent) == 0x000118, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_HitBoneName) == 0x000120, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_HitItem) == 0x000128, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_ElementIndex) == 0x00012C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_FaceIndex) == 0x000130, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_TraceStart) == 0x000134, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakHitResult_TraceEnd) == 0x000140, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_MakeRotFromZ_ReturnValue) == 0x00014C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000190, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_LastIndex_ReturnValue) == 0x000218, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_LastIndex_ReturnValue_1) == 0x00021C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_LastIndex_ReturnValue_2) == 0x000220, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_LastIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Subtract_IntInt_ReturnValue) == 0x000224, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Less_IntInt_ReturnValue) == 0x000228, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Temp_int_Variable) == 0x00022C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_Get_Item) == 0x000230, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_Get_Item_1) == 0x000238, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Add_IntInt_ReturnValue) == 0x000244, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_Get_Item_2) == 0x000248, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000254, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_FindLookAtRotation_ReturnValue) == 0x000258, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakRotator_Roll) == 0x000264, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakRotator_Pitch) == 0x000268, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_BreakRotator_Yaw) == 0x00026C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Add_IntInt_ReturnValue_1) == 0x000270, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000274, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_MakeRotator_ReturnValue) == 0x000278, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, Temp_int_Variable_1) == 0x000284, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_SelectRotator_ReturnValue) == 0x000288, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Array_Get_Item_3) == 0x000298, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_MakeTransform_ReturnValue_1) == 0x0002A0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_K2_SetWorldTransform_SweepHitResult_1) == 0x0002D0, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_K2_SetWorldTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000358, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only, CallFunc_Add_IntInt_ReturnValue_2) == 0x00035C, "Member 'BPF_PPT_ProjectilePathTracer_C_Place_Trajectory_Points_Only::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

}

