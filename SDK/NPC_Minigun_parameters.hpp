#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPC_Minigun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NPC_Minigun.NPC_Minigun_C.ExecuteUbergraph_NPC_Minigun
// 0x00E0 (0x00E0 - 0x0000)
struct NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ScanFX_SwipingBeam_C*               CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorRelativeLocation_SweepHitResult; // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun) == 0x000010, "Wrong alignment on NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun");
static_assert(sizeof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun) == 0x0000E0, "Wrong size on NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, EntryPoint) == 0x000000, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::EntryPoint' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, CallFunc_K2_SetActorRelativeLocation_SweepHitResult) == 0x000050, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::CallFunc_K2_SetActorRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, K2Node_Event_DeltaSeconds) == 0x0000D8, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, K2Node_Event_EndPlayReason) == 0x0000DC, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun, CallFunc_IsValid_ReturnValue) == 0x0000DD, "Member 'NPC_Minigun_C_ExecuteUbergraph_NPC_Minigun::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function NPC_Minigun.NPC_Minigun_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct NPC_Minigun_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPC_Minigun_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on NPC_Minigun_C_ReceiveEndPlay");
static_assert(sizeof(NPC_Minigun_C_ReceiveEndPlay) == 0x000001, "Wrong size on NPC_Minigun_C_ReceiveEndPlay");
static_assert(offsetof(NPC_Minigun_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'NPC_Minigun_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function NPC_Minigun.NPC_Minigun_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct NPC_Minigun_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPC_Minigun_C_ReceiveTick) == 0x000004, "Wrong alignment on NPC_Minigun_C_ReceiveTick");
static_assert(sizeof(NPC_Minigun_C_ReceiveTick) == 0x000004, "Wrong size on NPC_Minigun_C_ReceiveTick");
static_assert(offsetof(NPC_Minigun_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'NPC_Minigun_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function NPC_Minigun.NPC_Minigun_C.NotifyBPTargetSighted
// 0x0002 (0x0002 - 0x0000)
struct NPC_Minigun_C_NotifyBPTargetSighted final
{
public:
	bool                                          bSighted;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NPC_Minigun_C_NotifyBPTargetSighted) == 0x000001, "Wrong alignment on NPC_Minigun_C_NotifyBPTargetSighted");
static_assert(sizeof(NPC_Minigun_C_NotifyBPTargetSighted) == 0x000002, "Wrong size on NPC_Minigun_C_NotifyBPTargetSighted");
static_assert(offsetof(NPC_Minigun_C_NotifyBPTargetSighted, bSighted) == 0x000000, "Member 'NPC_Minigun_C_NotifyBPTargetSighted::bSighted' has a wrong offset!");
static_assert(offsetof(NPC_Minigun_C_NotifyBPTargetSighted, ReturnValue) == 0x000001, "Member 'NPC_Minigun_C_NotifyBPTargetSighted::ReturnValue' has a wrong offset!");

}

