#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Clover

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Clover.WBP_Clover_C.ExecuteUbergraph_WBP_Clover
// 0x0070 (0x0070 - 0x0000)
struct WBP_Clover_C_ExecuteUbergraph_WBP_Clover final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Luck;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsImpossible;                        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0048(0x0028)()
};
static_assert(alignof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover) == 0x000008, "Wrong alignment on WBP_Clover_C_ExecuteUbergraph_WBP_Clover");
static_assert(sizeof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover) == 0x000070, "Wrong size on WBP_Clover_C_ExecuteUbergraph_WBP_Clover");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, EntryPoint) == 0x000000, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_int_Variable) == 0x000004, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_object_Variable) == 0x000008, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_object_Variable_1) == 0x000010, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_object_Variable_2) == 0x000018, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_object_Variable_3) == 0x000020, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_object_Variable_4) == 0x000028, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, Temp_int_Variable_1) == 0x000030, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, K2Node_Event_Luck) == 0x000034, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::K2Node_Event_Luck' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, K2Node_Select_Default) == 0x000038, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, K2Node_Event_bIsImpossible) == 0x000041, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::K2Node_Event_bIsImpossible' has a wrong offset!");
static_assert(offsetof(WBP_Clover_C_ExecuteUbergraph_WBP_Clover, K2Node_Select_Default_1) == 0x000048, "Member 'WBP_Clover_C_ExecuteUbergraph_WBP_Clover::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_Clover.WBP_Clover_C.SetupAsImpossible
// 0x0001 (0x0001 - 0x0000)
struct WBP_Clover_C_SetupAsImpossible final
{
public:
	bool                                          bIsImpossible;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Clover_C_SetupAsImpossible) == 0x000001, "Wrong alignment on WBP_Clover_C_SetupAsImpossible");
static_assert(sizeof(WBP_Clover_C_SetupAsImpossible) == 0x000001, "Wrong size on WBP_Clover_C_SetupAsImpossible");
static_assert(offsetof(WBP_Clover_C_SetupAsImpossible, bIsImpossible) == 0x000000, "Member 'WBP_Clover_C_SetupAsImpossible::bIsImpossible' has a wrong offset!");

// Function WBP_Clover.WBP_Clover_C.SetDisplayedLuck
// 0x0004 (0x0004 - 0x0000)
struct WBP_Clover_C_SetDisplayedLuck final
{
public:
	int32                                         Luck;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Clover_C_SetDisplayedLuck) == 0x000004, "Wrong alignment on WBP_Clover_C_SetDisplayedLuck");
static_assert(sizeof(WBP_Clover_C_SetDisplayedLuck) == 0x000004, "Wrong size on WBP_Clover_C_SetDisplayedLuck");
static_assert(offsetof(WBP_Clover_C_SetDisplayedLuck, Luck) == 0x000000, "Member 'WBP_Clover_C_SetDisplayedLuck::Luck' has a wrong offset!");

}

