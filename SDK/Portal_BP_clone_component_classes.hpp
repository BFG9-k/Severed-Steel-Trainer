#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Portal_BP_clone_component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Portal_BP_clone_component.Portal_BP_clone_component_C
// 0x0120 (0x01D0 - 0x00B0)
class UPortal_BP_clone_component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Owner_Actor;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         attached_clone_actors;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class USceneComponent*, class AActor*>   attached_clone_actors_dict;                        // 0x00D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class USceneComponent*                        tester;                                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         overlapping;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          OwnerActorIsPlayerPawn;                            // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Dimensions;                                        // 0x013C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TouchingPortal;                                    // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasTouchingPortal;                                 // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APortalBP_C*                            overlapped_portal;                                 // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class Aportal_CollisionDisabler_C*            collision_disabler;                                // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         last_tp_time;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APortalBP_C*                            last_tp_portal;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class USceneComponent*, class UPrimitiveComponent*> attached_clone_components_dict;                    // 0x0170(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class Aportal_CollisionDisabler_C*            collision_disabler_clone;                          // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlappingPortalSurface;                          // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasOverlappingPortalSurface;                       // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverlappingPortalSurface_1;                        // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllowClonePhysics;                                 // 0x01CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Portal_BP_clone_component(int32 EntryPoint);
	void EnableClonePhysics();
	void DisableClonePhysics();
	void UpdateRender();
	void EnableCollision();
	void DisableCollision();
	void ReceiveTick(float DeltaSeconds);
	void Event_Destroy_Clone_Actors(class AActor* DestroyedActor);
	void ReceiveBeginPlay();
	void GenerateSkeletalClones(class USkeletalMeshComponent* SkeletalMeshComponent);
	void GenerateStaticMeshClones(class UStaticMeshComponent* StaticMeshComponent);
	void GenerateClones();
	void DestroyCloneActors();
	void set_actors_hidden(bool bNewHidden);
	void check_last_tp(class APortalBP_C* portalin, float timediff, bool* newtp);
	void TransferVelocityToOwner();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Portal_BP_clone_component_C">();
	}
	static class UPortal_BP_clone_component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortal_BP_clone_component_C>();
	}
};
static_assert(alignof(UPortal_BP_clone_component_C) == 0x000008, "Wrong alignment on UPortal_BP_clone_component_C");
static_assert(sizeof(UPortal_BP_clone_component_C) == 0x0001D0, "Wrong size on UPortal_BP_clone_component_C");
static_assert(offsetof(UPortal_BP_clone_component_C, UberGraphFrame) == 0x0000B0, "Member 'UPortal_BP_clone_component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, Owner_Actor) == 0x0000B8, "Member 'UPortal_BP_clone_component_C::Owner_Actor' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, attached_clone_actors) == 0x0000C0, "Member 'UPortal_BP_clone_component_C::attached_clone_actors' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, attached_clone_actors_dict) == 0x0000D0, "Member 'UPortal_BP_clone_component_C::attached_clone_actors_dict' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, tester) == 0x000120, "Member 'UPortal_BP_clone_component_C::tester' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, overlapping) == 0x000128, "Member 'UPortal_BP_clone_component_C::overlapping' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, OwnerActorIsPlayerPawn) == 0x000138, "Member 'UPortal_BP_clone_component_C::OwnerActorIsPlayerPawn' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, Dimensions) == 0x00013C, "Member 'UPortal_BP_clone_component_C::Dimensions' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, TouchingPortal) == 0x000148, "Member 'UPortal_BP_clone_component_C::TouchingPortal' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, WasTouchingPortal) == 0x000149, "Member 'UPortal_BP_clone_component_C::WasTouchingPortal' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, overlapped_portal) == 0x000150, "Member 'UPortal_BP_clone_component_C::overlapped_portal' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, collision_disabler) == 0x000158, "Member 'UPortal_BP_clone_component_C::collision_disabler' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, last_tp_time) == 0x000160, "Member 'UPortal_BP_clone_component_C::last_tp_time' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, last_tp_portal) == 0x000168, "Member 'UPortal_BP_clone_component_C::last_tp_portal' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, attached_clone_components_dict) == 0x000170, "Member 'UPortal_BP_clone_component_C::attached_clone_components_dict' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, collision_disabler_clone) == 0x0001C0, "Member 'UPortal_BP_clone_component_C::collision_disabler_clone' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, OverlappingPortalSurface) == 0x0001C8, "Member 'UPortal_BP_clone_component_C::OverlappingPortalSurface' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, WasOverlappingPortalSurface) == 0x0001C9, "Member 'UPortal_BP_clone_component_C::WasOverlappingPortalSurface' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, OverlappingPortalSurface_1) == 0x0001CA, "Member 'UPortal_BP_clone_component_C::OverlappingPortalSurface_1' has a wrong offset!");
static_assert(offsetof(UPortal_BP_clone_component_C, AllowClonePhysics) == 0x0001CB, "Member 'UPortal_BP_clone_component_C::AllowClonePhysics' has a wrong offset!");

}

