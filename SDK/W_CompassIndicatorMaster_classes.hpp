#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassIndicatorMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_CompassMode_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CompassIndicatorMaster.W_CompassIndicatorMaster_C
// 0x0078 (0x02D8 - 0x0260)
class UW_CompassIndicatorMaster_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Indicator;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             T_DistanceToTarget;                                // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_CompassMaster_C*                     CompassMaster;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_TargetIndicatorComponent_C*         TargetComponent;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Y_PositionOffset;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         IndicatorSize;                                     // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowDistanceText;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            DistanceTextColor;                                 // 0x0298(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         DistanceText_Y_PositionOffset;                     // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         DistanceTextSize;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowOffScreen;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowAtDistance;                                    // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToShow;                                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTarget;                                  // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CompassMode                                 CompassMode;                                       // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_CompassIndicatorMaster(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CompassIndicatorMaster_C">();
	}
	static class UW_CompassIndicatorMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CompassIndicatorMaster_C>();
	}
};
static_assert(alignof(UW_CompassIndicatorMaster_C) == 0x000008, "Wrong alignment on UW_CompassIndicatorMaster_C");
static_assert(sizeof(UW_CompassIndicatorMaster_C) == 0x0002D8, "Wrong size on UW_CompassIndicatorMaster_C");
static_assert(offsetof(UW_CompassIndicatorMaster_C, UberGraphFrame) == 0x000260, "Member 'UW_CompassIndicatorMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, Image_Indicator) == 0x000268, "Member 'UW_CompassIndicatorMaster_C::Image_Indicator' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, T_DistanceToTarget) == 0x000270, "Member 'UW_CompassIndicatorMaster_C::T_DistanceToTarget' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, CompassMaster) == 0x000278, "Member 'UW_CompassIndicatorMaster_C::CompassMaster' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, TargetComponent) == 0x000280, "Member 'UW_CompassIndicatorMaster_C::TargetComponent' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, Y_PositionOffset) == 0x000288, "Member 'UW_CompassIndicatorMaster_C::Y_PositionOffset' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, IndicatorSize) == 0x00028C, "Member 'UW_CompassIndicatorMaster_C::IndicatorSize' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, ShowDistanceText) == 0x000290, "Member 'UW_CompassIndicatorMaster_C::ShowDistanceText' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceTextColor) == 0x000298, "Member 'UW_CompassIndicatorMaster_C::DistanceTextColor' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceText_Y_PositionOffset) == 0x0002C0, "Member 'UW_CompassIndicatorMaster_C::DistanceText_Y_PositionOffset' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceTextSize) == 0x0002C4, "Member 'UW_CompassIndicatorMaster_C::DistanceTextSize' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, ShowOffScreen) == 0x0002C8, "Member 'UW_CompassIndicatorMaster_C::ShowOffScreen' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, ShowAtDistance) == 0x0002C9, "Member 'UW_CompassIndicatorMaster_C::ShowAtDistance' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceToShow) == 0x0002CC, "Member 'UW_CompassIndicatorMaster_C::DistanceToShow' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, DistanceToTarget) == 0x0002D0, "Member 'UW_CompassIndicatorMaster_C::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(UW_CompassIndicatorMaster_C, CompassMode) == 0x0002D4, "Member 'UW_CompassIndicatorMaster_C::CompassMode' has a wrong offset!");

}

