#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AmmoRing

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_AmmoRing.WBP_AmmoRing_C.ExecuteUbergraph_WBP_AmmoRing
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInViz;                               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InAmmo_1;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxAmmo;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bAnimate;                             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0070(0x0018)()
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InAmmo;                               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x00B0(0x0018)()
	bool                                          K2Node_Event_bDesire;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing) == 0x000008, "Wrong alignment on WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing");
static_assert(sizeof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing) == 0x0000D0, "Wrong size on WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, EntryPoint) == 0x000000, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_bool_Variable) == 0x000004, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_byte_Variable) == 0x000005, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_float_Variable) == 0x000008, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, Temp_float_Variable_1) == 0x00000C, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_MyGeometry) == 0x000010, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_InDeltaTime) == 0x000048, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_bInViz) == 0x00004C, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_bInViz' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Select_Default) == 0x000058, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_InAmmo_1) == 0x00005C, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_InAmmo_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_MaxAmmo) == 0x000060, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_MaxAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_bAnimate) == 0x000064, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_bAnimate' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Multiply_IntInt_ReturnValue) == 0x000068, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Conv_IntToText_ReturnValue) == 0x000070, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000088, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00008C, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000090, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000094, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_FInterpTo_Constant_ReturnValue) == 0x00009C, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_GetTYVCGameMode_NewParam) == 0x0000A0, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_GetTYVCGameMode_NewParam' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_InAmmo) == 0x0000A8, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_InAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, CallFunc_Conv_IntToText_ReturnValue_1) == 0x0000B0, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Event_bDesire) == 0x0000C8, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Event_bDesire' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing, K2Node_Select_Default_1) == 0x0000CC, "Member 'WBP_AmmoRing_C_ExecuteUbergraph_WBP_AmmoRing::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.SetDesireShowAkimbo
// 0x0001 (0x0001 - 0x0000)
struct WBP_AmmoRing_C_SetDesireShowAkimbo final
{
public:
	bool                                          bDesire;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_AmmoRing_C_SetDesireShowAkimbo) == 0x000001, "Wrong alignment on WBP_AmmoRing_C_SetDesireShowAkimbo");
static_assert(sizeof(WBP_AmmoRing_C_SetDesireShowAkimbo) == 0x000001, "Wrong size on WBP_AmmoRing_C_SetDesireShowAkimbo");
static_assert(offsetof(WBP_AmmoRing_C_SetDesireShowAkimbo, bDesire) == 0x000000, "Member 'WBP_AmmoRing_C_SetDesireShowAkimbo::bDesire' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.SetAkimboAmmo
// 0x0004 (0x0004 - 0x0000)
struct WBP_AmmoRing_C_SetAkimboAmmo final
{
public:
	int32                                         InAmmo;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AmmoRing_C_SetAkimboAmmo) == 0x000004, "Wrong alignment on WBP_AmmoRing_C_SetAkimboAmmo");
static_assert(sizeof(WBP_AmmoRing_C_SetAkimboAmmo) == 0x000004, "Wrong size on WBP_AmmoRing_C_SetAkimboAmmo");
static_assert(offsetof(WBP_AmmoRing_C_SetAkimboAmmo, InAmmo) == 0x000000, "Member 'WBP_AmmoRing_C_SetAkimboAmmo::InAmmo' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.SetAmmo
// 0x000C (0x000C - 0x0000)
struct WBP_AmmoRing_C_SetAmmo final
{
public:
	int32                                         InAmmo;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAnimate;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_AmmoRing_C_SetAmmo) == 0x000004, "Wrong alignment on WBP_AmmoRing_C_SetAmmo");
static_assert(sizeof(WBP_AmmoRing_C_SetAmmo) == 0x00000C, "Wrong size on WBP_AmmoRing_C_SetAmmo");
static_assert(offsetof(WBP_AmmoRing_C_SetAmmo, InAmmo) == 0x000000, "Member 'WBP_AmmoRing_C_SetAmmo::InAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_SetAmmo, MaxAmmo) == 0x000004, "Member 'WBP_AmmoRing_C_SetAmmo::MaxAmmo' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_SetAmmo, bAnimate) == 0x000008, "Member 'WBP_AmmoRing_C_SetAmmo::bAnimate' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.SetAmmoViz
// 0x0001 (0x0001 - 0x0000)
struct WBP_AmmoRing_C_SetAmmoViz final
{
public:
	bool                                          bInViz;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_AmmoRing_C_SetAmmoViz) == 0x000001, "Wrong alignment on WBP_AmmoRing_C_SetAmmoViz");
static_assert(sizeof(WBP_AmmoRing_C_SetAmmoViz) == 0x000001, "Wrong size on WBP_AmmoRing_C_SetAmmoViz");
static_assert(offsetof(WBP_AmmoRing_C_SetAmmoViz, bInViz) == 0x000000, "Member 'WBP_AmmoRing_C_SetAmmoViz::bInViz' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_AmmoRing_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AmmoRing_C_Tick) == 0x000004, "Wrong alignment on WBP_AmmoRing_C_Tick");
static_assert(sizeof(WBP_AmmoRing_C_Tick) == 0x00003C, "Wrong size on WBP_AmmoRing_C_Tick");
static_assert(offsetof(WBP_AmmoRing_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_AmmoRing_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_AmmoRing_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_AmmoRing.WBP_AmmoRing_C.GetColorAndOpacity_0
// 0x0020 (0x0020 - 0x0000)
struct WBP_AmmoRing_C_GetColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AmmoRing_C_GetColorAndOpacity_0) == 0x000004, "Wrong alignment on WBP_AmmoRing_C_GetColorAndOpacity_0");
static_assert(sizeof(WBP_AmmoRing_C_GetColorAndOpacity_0) == 0x000020, "Wrong size on WBP_AmmoRing_C_GetColorAndOpacity_0");
static_assert(offsetof(WBP_AmmoRing_C_GetColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'WBP_AmmoRing_C_GetColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AmmoRing_C_GetColorAndOpacity_0, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000010, "Member 'WBP_AmmoRing_C_GetColorAndOpacity_0::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");

}

