#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Head_Flamer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "HeadStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Head_Flamer.BP_Head_Flamer_C
// 0x0188 (0x03A8 - 0x0220)
class ABP_Head_Flamer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               GasFlame_2;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               GasFlame_1;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Flame;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSound;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserLight;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   WarningLight;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Laser;                                             // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   LaserSource;                                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserHit;                                          // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MuzzleFlash;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FHeadStruct                            HeadSettings;                                      // 0x0288(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         MaxLaserLength;                                    // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ProjectileActor;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargerFoundSound;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargetLostSound;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Deactivate;                                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaserLocation;                                     // 0x030C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackWidth;                                        // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugLines;                                        // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TraceBlockers;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EObjectTypeQuery                              ObjectColl_To_Trace;                               // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_Laser_on_Hit;                                 // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HideLaserBeam;                                     // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_353[0x5];                                      // 0x0353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FLinearColor                           LaserColor;                                        // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rot_A;                                             // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rot_B;                                             // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlamerLength;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRate;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ActorsToDamage;                                    // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Head_Flamer(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void HeadReceiveDamage();
	void Set_LaserHidden();
	void UpdateRotation();
	void FlameHitPoint();
	void OpenGate();
	void ActivateHead();
	void DeactivateHead();
	void SetSettings();
	void ResetTraceActorHit();
	void ObjectHit();
	void SetLaser();
	void BlockerObjectHit();
	void TraceSetup();
	void fire();
	void OnRep_HideLaserBeam();
	void OnRep_HeadSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Head_Flamer_C">();
	}
	static class ABP_Head_Flamer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Head_Flamer_C>();
	}
};
static_assert(alignof(ABP_Head_Flamer_C) == 0x000008, "Wrong alignment on ABP_Head_Flamer_C");
static_assert(sizeof(ABP_Head_Flamer_C) == 0x0003A8, "Wrong size on ABP_Head_Flamer_C");
static_assert(offsetof(ABP_Head_Flamer_C, UberGraphFrame) == 0x000220, "Member 'ABP_Head_Flamer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, GasFlame_2) == 0x000228, "Member 'ABP_Head_Flamer_C::GasFlame_2' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, GasFlame_1) == 0x000230, "Member 'ABP_Head_Flamer_C::GasFlame_1' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Flame) == 0x000238, "Member 'ABP_Head_Flamer_C::Flame' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, FireSound) == 0x000240, "Member 'ABP_Head_Flamer_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Root) == 0x000248, "Member 'ABP_Head_Flamer_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, LaserLight) == 0x000250, "Member 'ABP_Head_Flamer_C::LaserLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, WarningLight) == 0x000258, "Member 'ABP_Head_Flamer_C::WarningLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Laser) == 0x000260, "Member 'ABP_Head_Flamer_C::Laser' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, LaserSource) == 0x000268, "Member 'ABP_Head_Flamer_C::LaserSource' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, LaserHit) == 0x000270, "Member 'ABP_Head_Flamer_C::LaserHit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, MuzzleFlash) == 0x000278, "Member 'ABP_Head_Flamer_C::MuzzleFlash' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Head) == 0x000280, "Member 'ABP_Head_Flamer_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, HeadSettings) == 0x000288, "Member 'ABP_Head_Flamer_C::HeadSettings' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, MaxLaserLength) == 0x0002E8, "Member 'ABP_Head_Flamer_C::MaxLaserLength' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, InRange) == 0x0002EC, "Member 'ABP_Head_Flamer_C::InRange' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, ProjectileActor) == 0x0002F0, "Member 'ABP_Head_Flamer_C::ProjectileActor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, TargerFoundSound) == 0x0002F8, "Member 'ABP_Head_Flamer_C::TargerFoundSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, TargetLostSound) == 0x000300, "Member 'ABP_Head_Flamer_C::TargetLostSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Deactivate) == 0x000308, "Member 'ABP_Head_Flamer_C::Deactivate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, LaserLocation) == 0x00030C, "Member 'ABP_Head_Flamer_C::LaserLocation' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Start) == 0x000318, "Member 'ABP_Head_Flamer_C::Start' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, End) == 0x000324, "Member 'ABP_Head_Flamer_C::End' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, HitActor) == 0x000330, "Member 'ABP_Head_Flamer_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, TrackWidth) == 0x000338, "Member 'ABP_Head_Flamer_C::TrackWidth' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, DebugLines) == 0x00033C, "Member 'ABP_Head_Flamer_C::DebugLines' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, TraceBlockers) == 0x000340, "Member 'ABP_Head_Flamer_C::TraceBlockers' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, ObjectColl_To_Trace) == 0x000350, "Member 'ABP_Head_Flamer_C::ObjectColl_To_Trace' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Hide_Laser_on_Hit) == 0x000351, "Member 'ABP_Head_Flamer_C::Hide_Laser_on_Hit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, HideLaserBeam) == 0x000352, "Member 'ABP_Head_Flamer_C::HideLaserBeam' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, IgnoreActors) == 0x000358, "Member 'ABP_Head_Flamer_C::IgnoreActors' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, LaserColor) == 0x000368, "Member 'ABP_Head_Flamer_C::LaserColor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Rot_A) == 0x000378, "Member 'ABP_Head_Flamer_C::Rot_A' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Rot_B) == 0x00037C, "Member 'ABP_Head_Flamer_C::Rot_B' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, FlamerLength) == 0x000380, "Member 'ABP_Head_Flamer_C::FlamerLength' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, Health) == 0x000384, "Member 'ABP_Head_Flamer_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, HitComponent) == 0x000388, "Member 'ABP_Head_Flamer_C::HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, FireRate) == 0x000390, "Member 'ABP_Head_Flamer_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Flamer_C, ActorsToDamage) == 0x000398, "Member 'ABP_Head_Flamer_C::ActorsToDamage' has a wrong offset!");

}

