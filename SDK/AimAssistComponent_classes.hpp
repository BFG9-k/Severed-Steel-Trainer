#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "TargetStructure_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AimAssistComponent.AimAssistComponent_C
// 0x0100 (0x01B0 - 0x00B0)
class UAimAssistComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector2D                              TargetLocationOnScreen;                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocationInWorldSpace;                        // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrictionValue;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumSpeed;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTargetStructure>               SpecifiedTargets;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible)
	class AActor*                                 TargetActor;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         FoundActorsInScene;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          InLineOfSight_;                                    // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeThreshold;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBeforeTargetGetsCleared;                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseTurnspeed;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddedSpeedAfterAcceleration;                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableAcceleration_;                               // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAngle_;                                         // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelerationZoneRadius;                            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelerationZoneAngle;                             // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelerationSpeed;                                 // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimAccelerationX;                                  // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenteringStrength;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenteringAcceleration;                             // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenteringMomentum;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyApplyWhenTargetIsMoving_;                      // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BendProjectileRadius;                              // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MultipleTargetsCoefficent;                         // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTimeSinceDifferentTarget;                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedUp;                                           // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateOnlyWhenTurning_;                          // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShotFiredStrength;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotFiredMaxTimeBetweenShot;                       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTimeSinceShotFired;                            // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotFiredSum;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebugHUD_C*                            DebugHUD;                                          // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AccelerationCurve;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isAccelerating_;                                   // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ActivateHeadAssist_;                               // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTargetIndex;                                // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TargetActorSkeletalMesh;                           // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimVelocity;                                       // 0x0180(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastForwardVector;                                 // 0x018C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadAssistDeactivationMaximum;                     // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurnHeadAssistCompletelyOff_;                      // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DeathTag;                                          // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnvelocityActivationThreshold;                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AimAssistComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void SearchForTargetsInWorld();
	void ReceiveBeginPlay();
	void LegacyFrictionAssist(float Input, float* Output);
	void GetClosestActorToCrosshairFromArray(TArray<class AActor*>& Array, class AActor** Actor);
	void FindTarget();
	void CalculateTurnSpeed(float InputX, float InputY, float* OutputX, float* OutputY);
	void RadialDeadZone(float X_Input, float Y_Input, float DeadZone, float* Output_X, float* Output_Y);
	void AxialDeadZone(float X_Input, float Y_Input, float X_Deadzone, float Y_Deadzone, float* Output_X, float* Output_Y);
	void Centering(float X_Input, float Y_Input, float* X_Output, float* Y_Output);
	void UpdateCurrentTarget();
	void CalculateDeltaRotation(const struct FVector& Current_Location, const struct FVector& Target_Location, const struct FRotator& Current_Rotation, float* Delta_X, float* Delta_Y);
	void BendProjectile(const struct FVector& Start, const struct FVector& End, struct FVector* CorrectedEnd);
	void ShotFiredAssist();
	void HandleDifferentTargetsSlowDownCalculation(class UObject* ClosestActorToCrosshair);
	void HandleShotFiredStrengthBonus();
	void Debug(const struct FVector2D& Raw_Direction, const struct FVector2D& Deadzone_Direction, const struct FVector2D& Assisted_Direction);
	void HitTarget_(class AActor* HitActorFromTrace, bool* IsTarget);

	float GetAccelerationAngle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AimAssistComponent_C">();
	}
	static class UAimAssistComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimAssistComponent_C>();
	}
};
static_assert(alignof(UAimAssistComponent_C) == 0x000008, "Wrong alignment on UAimAssistComponent_C");
static_assert(sizeof(UAimAssistComponent_C) == 0x0001B0, "Wrong size on UAimAssistComponent_C");
static_assert(offsetof(UAimAssistComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UAimAssistComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TargetLocationOnScreen) == 0x0000B8, "Member 'UAimAssistComponent_C::TargetLocationOnScreen' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TargetLocationInWorldSpace) == 0x0000C0, "Member 'UAimAssistComponent_C::TargetLocationInWorldSpace' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, FrictionValue) == 0x0000CC, "Member 'UAimAssistComponent_C::FrictionValue' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, MinimumSpeed) == 0x0000D0, "Member 'UAimAssistComponent_C::MinimumSpeed' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, SpecifiedTargets) == 0x0000D8, "Member 'UAimAssistComponent_C::SpecifiedTargets' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TargetActor) == 0x0000E8, "Member 'UAimAssistComponent_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, FoundActorsInScene) == 0x0000F0, "Member 'UAimAssistComponent_C::FoundActorsInScene' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, InLineOfSight_) == 0x000100, "Member 'UAimAssistComponent_C::InLineOfSight_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TimeThreshold) == 0x000104, "Member 'UAimAssistComponent_C::TimeThreshold' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TimeBeforeTargetGetsCleared) == 0x000108, "Member 'UAimAssistComponent_C::TimeBeforeTargetGetsCleared' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, BaseTurnspeed) == 0x00010C, "Member 'UAimAssistComponent_C::BaseTurnspeed' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AddedSpeedAfterAcceleration) == 0x000110, "Member 'UAimAssistComponent_C::AddedSpeedAfterAcceleration' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, EnableAcceleration_) == 0x000114, "Member 'UAimAssistComponent_C::EnableAcceleration_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, UseAngle_) == 0x000115, "Member 'UAimAssistComponent_C::UseAngle_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AccelerationZoneRadius) == 0x000118, "Member 'UAimAssistComponent_C::AccelerationZoneRadius' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AccelerationZoneAngle) == 0x00011C, "Member 'UAimAssistComponent_C::AccelerationZoneAngle' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AccelerationSpeed) == 0x000120, "Member 'UAimAssistComponent_C::AccelerationSpeed' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AimAccelerationX) == 0x000124, "Member 'UAimAssistComponent_C::AimAccelerationX' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, CenteringStrength) == 0x000128, "Member 'UAimAssistComponent_C::CenteringStrength' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, CenteringAcceleration) == 0x00012C, "Member 'UAimAssistComponent_C::CenteringAcceleration' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, CenteringMomentum) == 0x000130, "Member 'UAimAssistComponent_C::CenteringMomentum' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, OnlyApplyWhenTargetIsMoving_) == 0x000134, "Member 'UAimAssistComponent_C::OnlyApplyWhenTargetIsMoving_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, BendProjectileRadius) == 0x000138, "Member 'UAimAssistComponent_C::BendProjectileRadius' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, MultipleTargetsCoefficent) == 0x00013C, "Member 'UAimAssistComponent_C::MultipleTargetsCoefficent' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, LastTimeSinceDifferentTarget) == 0x000140, "Member 'UAimAssistComponent_C::LastTimeSinceDifferentTarget' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, SpeedUp) == 0x000144, "Member 'UAimAssistComponent_C::SpeedUp' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, ActivateOnlyWhenTurning_) == 0x000148, "Member 'UAimAssistComponent_C::ActivateOnlyWhenTurning_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, ShotFiredStrength) == 0x00014C, "Member 'UAimAssistComponent_C::ShotFiredStrength' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, ShotFiredMaxTimeBetweenShot) == 0x000150, "Member 'UAimAssistComponent_C::ShotFiredMaxTimeBetweenShot' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, LastTimeSinceShotFired) == 0x000154, "Member 'UAimAssistComponent_C::LastTimeSinceShotFired' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, ShotFiredSum) == 0x000158, "Member 'UAimAssistComponent_C::ShotFiredSum' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, DebugHUD) == 0x000160, "Member 'UAimAssistComponent_C::DebugHUD' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AccelerationCurve) == 0x000168, "Member 'UAimAssistComponent_C::AccelerationCurve' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, isAccelerating_) == 0x000170, "Member 'UAimAssistComponent_C::isAccelerating_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, ActivateHeadAssist_) == 0x000171, "Member 'UAimAssistComponent_C::ActivateHeadAssist_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, CurrentTargetIndex) == 0x000174, "Member 'UAimAssistComponent_C::CurrentTargetIndex' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TargetActorSkeletalMesh) == 0x000178, "Member 'UAimAssistComponent_C::TargetActorSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, AimVelocity) == 0x000180, "Member 'UAimAssistComponent_C::AimVelocity' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, LastForwardVector) == 0x00018C, "Member 'UAimAssistComponent_C::LastForwardVector' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, HeadAssistDeactivationMaximum) == 0x000198, "Member 'UAimAssistComponent_C::HeadAssistDeactivationMaximum' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TurnHeadAssistCompletelyOff_) == 0x00019C, "Member 'UAimAssistComponent_C::TurnHeadAssistCompletelyOff_' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, DeathTag) == 0x0001A0, "Member 'UAimAssistComponent_C::DeathTag' has a wrong offset!");
static_assert(offsetof(UAimAssistComponent_C, TurnvelocityActivationThreshold) == 0x0001A8, "Member 'UAimAssistComponent_C::TurnvelocityActivationThreshold' has a wrong offset!");

}

