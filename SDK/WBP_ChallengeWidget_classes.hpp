#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ChallengeWidget

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ChallengeWidget.WBP_ChallengeWidget_C
// 0x0030 (0x0290 - 0x0260)
class UWBP_ChallengeWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVerticalBox*                           ChallengeList;                                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ChallengeRow_C*                    WBP_ChallengeRow;                                  // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ChallengeRow_C*                    WBP_ChallengeRow_75;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FChallenge>                     MyChallenges;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WBP_ChallengeWidget(int32 EntryPoint);
	void ShowChallenges(const TArray<struct FChallenge>& Challenges, const TArray<struct FChallenge>& Completed);
	void Construct();
	void NewFunction_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ChallengeWidget_C">();
	}
	static class UWBP_ChallengeWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ChallengeWidget_C>();
	}
};
static_assert(alignof(UWBP_ChallengeWidget_C) == 0x000008, "Wrong alignment on UWBP_ChallengeWidget_C");
static_assert(sizeof(UWBP_ChallengeWidget_C) == 0x000290, "Wrong size on UWBP_ChallengeWidget_C");
static_assert(offsetof(UWBP_ChallengeWidget_C, UberGraphFrame) == 0x000260, "Member 'UWBP_ChallengeWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ChallengeWidget_C, ChallengeList) == 0x000268, "Member 'UWBP_ChallengeWidget_C::ChallengeList' has a wrong offset!");
static_assert(offsetof(UWBP_ChallengeWidget_C, WBP_ChallengeRow) == 0x000270, "Member 'UWBP_ChallengeWidget_C::WBP_ChallengeRow' has a wrong offset!");
static_assert(offsetof(UWBP_ChallengeWidget_C, WBP_ChallengeRow_75) == 0x000278, "Member 'UWBP_ChallengeWidget_C::WBP_ChallengeRow_75' has a wrong offset!");
static_assert(offsetof(UWBP_ChallengeWidget_C, MyChallenges) == 0x000280, "Member 'UWBP_ChallengeWidget_C::MyChallenges' has a wrong offset!");

}

