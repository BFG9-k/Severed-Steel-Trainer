#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImpactManager_BP

#include "Basic.hpp"

#include "Voxel_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ImpactManager_BP.ImpactManager_BP_C.ExecuteUbergraph_ImpactManager_BP
// 0x0140 (0x0140 - 0x0000)
struct ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVoxelWorld*                            K2Node_Event_VoxelWorld;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVoxelIntBox                           K2Node_Event_Box;                                  // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MinWorlds;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCanShatter;                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVoxelPartType                                Temp_byte_Variable;                                // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_WorldPosition;                        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Radius;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoxelPartType                                Temp_byte_Variable_1;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATYVCGameMode_BP_C*                     K2Node_DynamicCast_AsTYVCGame_Mode_BP;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorldManager*                     CallFunc_GetCurrentVoxelWorldManager_ReturnValue;  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVoxelPartType                                K2Node_Select_Default;                             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModifiedVoxelValue>            CallFunc_SetValueSphere_ModifiedValues;            // 0x0078(0x0010)(ReferenceParm)
	struct FVoxelIntBox                           CallFunc_SetValueSphere_EditedBounds;              // 0x0088(0x0018)(NoDestructor, HasGetValueTypeHash)
	class AVoxelWorld*                            K2Node_Event_OnWorld;                              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_WorldLocation;                        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x00B4(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPlayerMade;                          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_EditRadius;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FModifiedVoxelValue>            CallFunc_RemoveSphereAsync_ModifiedValues;         // 0x00C8(0x0010)(ReferenceParm)
	struct FVoxelIntBox                           CallFunc_RemoveSphereAsync_EditedBounds;           // 0x00D8(0x0018)(NoDestructor, HasGetValueTypeHash)
	TArray<struct FModifiedVoxelValue>            CallFunc_RemoveSphereAsync_ModifiedValues_1;       // 0x00F0(0x0010)(ReferenceParm)
	struct FVoxelIntBox                           CallFunc_RemoveSphereAsync_EditedBounds_1;         // 0x0100(0x0018)(NoDestructor, HasGetValueTypeHash)
	TArray<TScriptInterface<class IVoxelPhysicsPartSpawnerResult>> CallFunc_ApplyVoxelPhysics_Results;                // 0x0118(0x0010)(ReferenceParm)
	TArray<TScriptInterface<class IVoxelPhysicsPartSpawnerResult>> CallFunc_NotifyVoxelPhysicsTaskDone_Results;       // 0x0128(0x0010)(ReferenceParm)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP) == 0x000008, "Wrong alignment on ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP");
static_assert(sizeof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP) == 0x000140, "Wrong size on ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, EntryPoint) == 0x000000, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_GetTYVCGameMode_NewParam) == 0x000008, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_GetTYVCGameMode_NewParam' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_VoxelWorld) == 0x000010, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_VoxelWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_Box) == 0x000018, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_Box' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_MinWorlds) == 0x000030, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_MinWorlds' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_bCanShatter) == 0x000034, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_bCanShatter' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, Temp_byte_Variable) == 0x000035, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_WorldPosition) == 0x000038, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_WorldPosition' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_Radius) == 0x000044, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_Radius' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_Value) == 0x000048, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, Temp_byte_Variable_1) == 0x00004C, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_GetGameMode_ReturnValue) == 0x000050, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_DynamicCast_AsTYVCGame_Mode_BP) == 0x000058, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_DynamicCast_AsTYVCGame_Mode_BP' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, Temp_bool_Variable) == 0x000061, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_GetCurrentVoxelWorldManager_ReturnValue) == 0x000068, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_GetCurrentVoxelWorldManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Select_Default) == 0x000070, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_SetValueSphere_ModifiedValues) == 0x000078, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_SetValueSphere_ModifiedValues' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_SetValueSphere_EditedBounds) == 0x000088, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_SetValueSphere_EditedBounds' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_OnWorld) == 0x0000A0, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_OnWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_WorldLocation) == 0x0000A8, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_WorldLocation' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_Rotation) == 0x0000B4, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_bPlayerMade) == 0x0000C0, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_bPlayerMade' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, K2Node_Event_EditRadius) == 0x0000C4, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::K2Node_Event_EditRadius' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_RemoveSphereAsync_ModifiedValues) == 0x0000C8, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_RemoveSphereAsync_ModifiedValues' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_RemoveSphereAsync_EditedBounds) == 0x0000D8, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_RemoveSphereAsync_EditedBounds' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_RemoveSphereAsync_ModifiedValues_1) == 0x0000F0, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_RemoveSphereAsync_ModifiedValues_1' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_RemoveSphereAsync_EditedBounds_1) == 0x000100, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_RemoveSphereAsync_EditedBounds_1' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_ApplyVoxelPhysics_Results) == 0x000118, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_ApplyVoxelPhysics_Results' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_NotifyVoxelPhysicsTaskDone_Results) == 0x000128, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_NotifyVoxelPhysicsTaskDone_Results' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000138, "Member 'ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");

// Function ImpactManager_BP.ImpactManager_BP_C.DoExplosionGraph
// 0x0028 (0x0028 - 0x0000)
struct ImpactManager_BP_C_DoExplosionGraph final
{
public:
	class AVoxelWorld*                            OnWorld;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          bPlayerMade;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditRadius;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ImpactManager_BP_C_DoExplosionGraph) == 0x000008, "Wrong alignment on ImpactManager_BP_C_DoExplosionGraph");
static_assert(sizeof(ImpactManager_BP_C_DoExplosionGraph) == 0x000028, "Wrong size on ImpactManager_BP_C_DoExplosionGraph");
static_assert(offsetof(ImpactManager_BP_C_DoExplosionGraph, OnWorld) == 0x000000, "Member 'ImpactManager_BP_C_DoExplosionGraph::OnWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_DoExplosionGraph, WorldLocation) == 0x000008, "Member 'ImpactManager_BP_C_DoExplosionGraph::WorldLocation' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_DoExplosionGraph, Rotation) == 0x000014, "Member 'ImpactManager_BP_C_DoExplosionGraph::Rotation' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_DoExplosionGraph, bPlayerMade) == 0x000020, "Member 'ImpactManager_BP_C_DoExplosionGraph::bPlayerMade' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_DoExplosionGraph, EditRadius) == 0x000024, "Member 'ImpactManager_BP_C_DoExplosionGraph::EditRadius' has a wrong offset!");

// Function ImpactManager_BP.ImpactManager_BP_C.AsyncExplosion
// 0x0014 (0x0014 - 0x0000)
struct ImpactManager_BP_C_AsyncExplosion final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ImpactManager_BP_C_AsyncExplosion) == 0x000004, "Wrong alignment on ImpactManager_BP_C_AsyncExplosion");
static_assert(sizeof(ImpactManager_BP_C_AsyncExplosion) == 0x000014, "Wrong size on ImpactManager_BP_C_AsyncExplosion");
static_assert(offsetof(ImpactManager_BP_C_AsyncExplosion, WorldPosition) == 0x000000, "Member 'ImpactManager_BP_C_AsyncExplosion::WorldPosition' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_AsyncExplosion, Radius) == 0x00000C, "Member 'ImpactManager_BP_C_AsyncExplosion::Radius' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_AsyncExplosion, Value) == 0x000010, "Member 'ImpactManager_BP_C_AsyncExplosion::Value' has a wrong offset!");

// Function ImpactManager_BP.ImpactManager_BP_C.CalculateVoxelPhysics
// 0x0028 (0x0028 - 0x0000)
struct ImpactManager_BP_C_CalculateVoxelPhysics final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVoxelIntBox                           Box;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         MinWorlds;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanShatter;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ImpactManager_BP_C_CalculateVoxelPhysics) == 0x000008, "Wrong alignment on ImpactManager_BP_C_CalculateVoxelPhysics");
static_assert(sizeof(ImpactManager_BP_C_CalculateVoxelPhysics) == 0x000028, "Wrong size on ImpactManager_BP_C_CalculateVoxelPhysics");
static_assert(offsetof(ImpactManager_BP_C_CalculateVoxelPhysics, VoxelWorld) == 0x000000, "Member 'ImpactManager_BP_C_CalculateVoxelPhysics::VoxelWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_CalculateVoxelPhysics, Box) == 0x000008, "Member 'ImpactManager_BP_C_CalculateVoxelPhysics::Box' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_CalculateVoxelPhysics, MinWorlds) == 0x000020, "Member 'ImpactManager_BP_C_CalculateVoxelPhysics::MinWorlds' has a wrong offset!");
static_assert(offsetof(ImpactManager_BP_C_CalculateVoxelPhysics, bCanShatter) == 0x000024, "Member 'ImpactManager_BP_C_CalculateVoxelPhysics::bCanShatter' has a wrong offset!");

}

