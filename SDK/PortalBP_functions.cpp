#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalBP

#include "Basic.hpp"

#include "PortalBP_classes.hpp"
#include "PortalBP_parameters.hpp"


namespace SDK
{

// Function PortalBP.PortalBP_C.ExecuteUbergraph_PortalBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::ExecuteUbergraph_PortalBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "ExecuteUbergraph_PortalBP");

	Params::PortalBP_C_ExecuteUbergraph_PortalBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.F orceBeginPlay
// (BlueprintCallable, BlueprintEvent)

void APortalBP_C::F_orceBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "F orceBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.NotifyPlayingReverse
// (Event, Public, BlueprintEvent)

void APortalBP_C::NotifyPlayingReverse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "NotifyPlayingReverse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.DoActions
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EActionType                             ToDo                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSimulated                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APortalBP_C::DoActions(EActionType ToDo, bool bSimulated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "DoActions");

	Params::PortalBP_C_DoActions Parms{};

	Parms.ToDo = ToDo;
	Parms.bSimulated = bSimulated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.OnLevelReady
// (Event, Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::OnLevelReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "OnLevelReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.UpdateLinkID
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::UpdateLinkID(class FName InID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "UpdateLinkID");

	Params::PortalBP_C_UpdateLinkID Parms{};

	Parms.InID = InID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.LinkPortalEvent
// (BlueprintCallable, BlueprintEvent)

void APortalBP_C::LinkPortalEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "LinkPortalEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.DoRender
// (BlueprintCallable, BlueprintEvent)

void APortalBP_C::DoRender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "DoRender");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.SetupRender
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraOrigin                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   RecurseDepth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceMip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APortalBP_C::SetupRender(const struct FTransform& CameraOrigin, int32 RecurseDepth, bool ForceMip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetupRender");

	Params::PortalBP_C_SetupRender Parms{};

	Parms.CameraOrigin = std::move(CameraOrigin);
	Parms.RecurseDepth = RecurseDepth;
	Parms.ForceMip = ForceMip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void APortalBP_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "ReceiveActorEndOverlap");

	Params::PortalBP_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.CustomBeginOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::CustomBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CustomBeginOverlap");

	Params::PortalBP_C_CustomBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "ReceiveTick");

	Params::PortalBP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APortalBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APortalBP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.CreateRenderTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTextureRenderTarget2D* APortalBP_C::CreateRenderTarget(const struct FVector2D& InVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CreateRenderTarget");

	Params::PortalBP_C_CreateRenderTarget Parms{};

	Parms.InVec = std::move(InVec);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PortalBP.PortalBP_C.SetCurrentMipLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneCaptureComponent2D*         Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::SetCurrentMipLevel(int32 Index_0, class USceneCaptureComponent2D* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetCurrentMipLevel");

	Params::PortalBP_C_SetCurrentMipLevel Parms{};

	Parms.Index_0 = Index_0;
	Parms.Camera = Camera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.SetupPortalTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APortalBP_C*                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::SetupPortalTarget(class APortalBP_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetupPortalTarget");

	Params::PortalBP_C_SetupPortalTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.SetMaterialParams
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   texture_id                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    custom_matrix                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   invscale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ParentInvscale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ParentOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    fake_matrix                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APortalBP_C::SetMaterialParams(int32 texture_id, bool custom_matrix, float invscale, const struct FVector2D& Offset, float ParentInvscale, const struct FVector2D& ParentOffset, bool fake_matrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetMaterialParams");

	Params::PortalBP_C_SetMaterialParams Parms{};

	Parms.texture_id = texture_id;
	Parms.custom_matrix = custom_matrix;
	Parms.invscale = invscale;
	Parms.Offset = std::move(Offset);
	Parms.ParentInvscale = ParentInvscale;
	Parms.ParentOffset = std::move(ParentOffset);
	Parms.fake_matrix = fake_matrix;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.CalcProjectionMatrix
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraOrigin                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void APortalBP_C::CalcProjectionMatrix(const struct FTransform& CameraOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CalcProjectionMatrix");

	Params::PortalBP_C_CalcProjectionMatrix Parms{};

	Parms.CameraOrigin = std::move(CameraOrigin);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.RenderSimple
// (Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::RenderSimple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "RenderSimple");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.RenderNoRecur
// (Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::RenderNoRecur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "RenderNoRecur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.CheckCaptureFrameSimple
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void APortalBP_C::CheckCaptureFrameSimple(const struct FTransform& CameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CheckCaptureFrameSimple");

	Params::PortalBP_C_CheckCaptureFrameSimple Parms{};

	Parms.CameraTransform = std::move(CameraTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.SetClipPlane
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         SceneCapture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::SetClipPlane(class USceneCaptureComponent2D* SceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetClipPlane");

	Params::PortalBP_C_SetClipPlane Parms{};

	Parms.SceneCapture = SceneCapture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.SetPortalCameraLocations
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraOrigin                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          PlayerCameraLocation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::SetPortalCameraLocations(const struct FTransform& CameraOrigin, struct FVector* PlayerCameraLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetPortalCameraLocations");

	Params::PortalBP_C_SetPortalCameraLocations Parms{};

	Parms.CameraOrigin = std::move(CameraOrigin);

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerCameraLocation != nullptr)
		*PlayerCameraLocation = std::move(Parms.PlayerCameraLocation);
}


// Function PortalBP.PortalBP_C.SetPortalCameraParams
// (Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::SetPortalCameraParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetPortalCameraParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.Render
// (Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::Render()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "Render");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.EnsureComponentHasCloner
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::EnsureComponentHasCloner(class AActor* InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "EnsureComponentHasCloner");

	Params::PortalBP_C_EnsureComponentHasCloner Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.CheckGenAntiClippingMesh
// (Public, BlueprintCallable, BlueprintEvent)

void APortalBP_C::CheckGenAntiClippingMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CheckGenAntiClippingMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.GenerateAntiClippingMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APortalBP_C::GenerateAntiClippingMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "GenerateAntiClippingMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.MoveOutOfWalls
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APortalBP_C::MoveOutOfWalls()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "MoveOutOfWalls");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PortalBP.PortalBP_C.CalculateMipMapLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RecurseDepth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceMip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APortalBP_C::CalculateMipMapLevel(const struct FVector& StartPos, int32 RecurseDepth, bool ForceMip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CalculateMipMapLevel");

	Params::PortalBP_C_CalculateMipMapLevel Parms{};

	Parms.StartPos = std::move(StartPos);
	Parms.RecurseDepth = RecurseDepth;
	Parms.ForceMip = ForceMip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.PortalPointToScreen
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       CameraOrigin                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ScreenLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool APortalBP_C::PortalPointToScreen(const struct FTransform& CameraOrigin, const struct FVector& Location, struct FVector2D* ScreenLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "PortalPointToScreen");

	Params::PortalBP_C_PortalPointToScreen Parms{};

	Parms.CameraOrigin = std::move(CameraOrigin);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (ScreenLocation != nullptr)
		*ScreenLocation = std::move(Parms.ScreenLocation);

	return Parms.ReturnValue;
}


// Function PortalBP.PortalBP_C.CalcScreenRadiusFromPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   radius_screenspace                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::CalcScreenRadiusFromPosition(const struct FVector& StartPos, float* radius_screenspace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "CalcScreenRadiusFromPosition");

	Params::PortalBP_C_CalcScreenRadiusFromPosition Parms{};

	Parms.StartPos = std::move(StartPos);

	UObject::ProcessEvent(Func, &Parms);

	if (radius_screenspace != nullptr)
		*radius_screenspace = Parms.radius_screenspace;
}


// Function PortalBP.PortalBP_C.SetNewTargetPortal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APortalBP_C*                      TargetPortal_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APortalBP_C::SetNewTargetPortal(class APortalBP_C* TargetPortal_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "SetNewTargetPortal");

	Params::PortalBP_C_SetNewTargetPortal Parms{};

	Parms.TargetPortal_0 = TargetPortal_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.Set Detail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHigh                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APortalBP_C::Set_Detail(bool bHigh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "Set Detail");

	Params::PortalBP_C_Set_Detail Parms{};

	Parms.bHigh = bHigh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PortalBP.PortalBP_C.GetActions
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EActionType>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<EActionType> APortalBP_C::GetActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalBP_C", "GetActions");

	Params::PortalBP_C_GetActions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

