#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VoxelDoor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"
#include "E_DoorState_structs.hpp"


namespace SDK::Params
{

// Function BP_VoxelDoor.BP_VoxelDoor_C.ExecuteUbergraph_BP_VoxelDoor
// 0x0618 (0x0618 - 0x0000)
struct BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DoorState                                   Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_DoorState                                   Temp_byte_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DoorState                                   Temp_byte_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DoorState                                   Temp_byte_Variable_3;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameModifier                                 Temp_byte_Variable_4;                              // 0x0050(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameModifier                                 Temp_byte_Variable_5;                              // 0x0051(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	EImpactType                                   Temp_byte_Variable_6;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EImpactType                                   Temp_byte_Variable_7;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EImpactType                                   K2Node_Select_Default;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x00DC(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_CustomEvent_BlowOffHinge;                   // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Interactor;                     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EImpactType                                   K2Node_CustomEvent_ImpactType;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0174(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_SleepingComponent;      // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_BoneName;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_2;        // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_ImpactResult_1;         // 0x0214(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X;                            // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_DoorState                                   K2Node_Select_Default_4;                           // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_5;                           // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x02D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x02F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam;                 // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AImpactManager*                         CallFunc_GetImpactManager_ReturnValue;             // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Interactor;                           // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPC*                                   K2Node_DynamicCast_AsNPC;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_ImpactResult;           // 0x03A4(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x042D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42E[0x2];                                      // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0478(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0494(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x04A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x04AC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_ResolveImpact_TraceOrigin;                // 0x0534(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ResolveImpact_ReturnValue;                // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_542[0x6];                                      // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0550(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam_1;               // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam_2;               // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0571(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_572[0x6];                                      // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam_3;               // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0580(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddActorWorldRotation_SweepHitResult;  // 0x0590(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor");
static_assert(sizeof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor) == 0x000618, "Wrong size on BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, EntryPoint) == 0x000000, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable) == 0x000004, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable) == 0x000008, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable_1) == 0x00000C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable_2) == 0x000010, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_bool_Variable) == 0x000014, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_struct_Variable) == 0x000018, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_struct_Variable_1) == 0x000028, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_bool_Variable_1) == 0x000038, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_1) == 0x000039, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_2) == 0x00003A, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_3) == 0x00003B, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable_3) == 0x00003C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_bool_Variable_2) == 0x000044, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable_4) == 0x000048, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_float_Variable_5) == 0x00004C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_4) == 0x000050, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_5) == 0x000051, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_bool_Variable_3) == 0x000052, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_CreateDelegate_OutputDelegate) == 0x000054, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000068, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_6) == 0x000070, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, Temp_byte_Variable_7) == 0x000071, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default) == 0x000080, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000084, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetRightVector_ReturnValue) == 0x00009C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x0000A8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default_1) == 0x0000B4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_HitComponent) == 0x0000B8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_OtherActor) == 0x0000C0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_OtherComp) == 0x0000C8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0000D0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_Hit) == 0x0000DC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_CustomEvent_BlowOffHinge) == 0x000164, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_CustomEvent_BlowOffHinge' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_CustomEvent_Interactor) == 0x000168, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_CustomEvent_Interactor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_CustomEvent_ImpactType) == 0x000170, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_CustomEvent_ImpactType' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default_2) == 0x000174, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000184, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000188, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default_3) == 0x000194, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000198, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001A4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_SleepingComponent) == 0x0001B0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_SleepingComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_BoneName) == 0x0001B8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_BoneName' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0001CC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorRotation_ReturnValue_2) == 0x0001D8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001E4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_NegateRotator_ReturnValue) == 0x0001F0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_ComposeRotators_ReturnValue) == 0x0001FC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000208, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_ImpactResult_1) == 0x000214, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_ImpactResult_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakVector_X) == 0x00029C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakVector_Y) == 0x0002A0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakVector_Z) == 0x0002A4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0002A8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default_4) == 0x0002A9, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Select_Default_5) == 0x0002AC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002B0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0002B4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_MakeRotator_ReturnValue) == 0x0002C0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0002D0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0002D8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Event_DeltaSeconds) == 0x0002DC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002E0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0002E4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BooleanOR_ReturnValue) == 0x0002E8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_MakeRotator_ReturnValue_1) == 0x0002EC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x0002F8, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetTYVCGameMode_NewParam) == 0x000380, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetTYVCGameMode_NewParam' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetImpactManager_ReturnValue) == 0x000388, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetImpactManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_Event_Interactor) == 0x000390, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_Event_Interactor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_DynamicCast_AsNPC) == 0x000398, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_DynamicCast_AsNPC' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_DynamicCast_bSuccess) == 0x0003A0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, K2Node_ComponentBoundEvent_ImpactResult) == 0x0003A4, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::K2Node_ComponentBoundEvent_ImpactResult' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_bBlockingHit) == 0x00042C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_bInitialOverlap) == 0x00042D, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_Time) == 0x000430, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_Distance) == 0x000434, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_Location) == 0x000438, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_ImpactPoint) == 0x000444, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_Normal) == 0x000450, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_ImpactNormal) == 0x00045C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_PhysMat) == 0x000468, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_HitActor) == 0x000470, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_HitComponent) == 0x000478, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_HitBoneName) == 0x000480, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_HitItem) == 0x000488, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_ElementIndex) == 0x00048C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_FaceIndex) == 0x000490, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_TraceStart) == 0x000494, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BreakHitResult_TraceEnd) == 0x0004A0, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_MakeHitResult_ReturnValue) == 0x0004AC, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_ResolveImpact_TraceOrigin) == 0x000534, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_ResolveImpact_TraceOrigin' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_ResolveImpact_ReturnValue) == 0x000540, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_ResolveImpact_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000541, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000548, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000550, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetTYVCGameMode_NewParam_1) == 0x000560, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetTYVCGameMode_NewParam_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetTYVCGameMode_NewParam_2) == 0x000568, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetTYVCGameMode_NewParam_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Array_Contains_ReturnValue) == 0x000570, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_BooleanOR_ReturnValue_1) == 0x000571, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_GetTYVCGameMode_NewParam_3) == 0x000578, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_GetTYVCGameMode_NewParam_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000580, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_Array_Contains_ReturnValue_1) == 0x00058C, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor, CallFunc_K2_AddActorWorldRotation_SweepHitResult) == 0x000590, "Member 'BP_VoxelDoor_C_ExecuteUbergraph_BP_VoxelDoor::CallFunc_K2_AddActorWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature) == 0x000004, "Wrong alignment on BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature");
static_assert(sizeof(BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature) == 0x000088, "Wrong size on BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature, ImpactResult) == 0x000000, "Member 'BP_VoxelDoor_C_BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature::ImpactResult' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.RequestInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_VoxelDoor_C_RequestInteraction final
{
public:
	class AActor*                                 Interactor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_RequestInteraction) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_RequestInteraction");
static_assert(sizeof(BP_VoxelDoor_C_RequestInteraction) == 0x000008, "Wrong size on BP_VoxelDoor_C_RequestInteraction");
static_assert(offsetof(BP_VoxelDoor_C_RequestInteraction, Interactor) == 0x000000, "Member 'BP_VoxelDoor_C_RequestInteraction::Interactor' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VoxelDoor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_VoxelDoor_C_ReceiveTick");
static_assert(sizeof(BP_VoxelDoor_C_ReceiveTick) == 0x000004, "Wrong size on BP_VoxelDoor_C_ReceiveTick");
static_assert(offsetof(BP_VoxelDoor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_VoxelDoor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature) == 0x000004, "Wrong alignment on BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature");
static_assert(sizeof(BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature) == 0x000088, "Wrong size on BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature, ImpactResult) == 0x000000, "Member 'BP_VoxelDoor_C_BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature::ImpactResult' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature");
static_assert(sizeof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature) == 0x000010, "Wrong size on BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature, SleepingComponent) == 0x000000, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature::SleepingComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature, BoneName) == 0x000008, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature::BoneName' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.OpenDoor
// 0x0018 (0x0018 - 0x0000)
struct BP_VoxelDoor_C_OpenDoor final
{
public:
	bool                                          BlowOffHinge;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EImpactType                                   ImpactType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_OpenDoor) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_OpenDoor");
static_assert(sizeof(BP_VoxelDoor_C_OpenDoor) == 0x000018, "Wrong size on BP_VoxelDoor_C_OpenDoor");
static_assert(offsetof(BP_VoxelDoor_C_OpenDoor, BlowOffHinge) == 0x000000, "Member 'BP_VoxelDoor_C_OpenDoor::BlowOffHinge' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OpenDoor, Interactor) == 0x000008, "Member 'BP_VoxelDoor_C_OpenDoor::Interactor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OpenDoor, ImpactType) == 0x000010, "Member 'BP_VoxelDoor_C_OpenDoor::ImpactType' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_VoxelDoor_C_BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.IsInteractable
// 0x0004 (0x0004 - 0x0000)
struct BP_VoxelDoor_C_IsInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VoxelDoor_C_IsInteractable) == 0x000001, "Wrong alignment on BP_VoxelDoor_C_IsInteractable");
static_assert(sizeof(BP_VoxelDoor_C_IsInteractable) == 0x000004, "Wrong size on BP_VoxelDoor_C_IsInteractable");
static_assert(offsetof(BP_VoxelDoor_C_IsInteractable, ReturnValue) == 0x000000, "Member 'BP_VoxelDoor_C_IsInteractable::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_IsInteractable, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_VoxelDoor_C_IsInteractable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_IsInteractable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_VoxelDoor_C_IsInteractable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_IsInteractable, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_VoxelDoor_C_IsInteractable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.GetInteractionText
// 0x0068 (0x0068 - 0x0000)
struct BP_VoxelDoor_C_GetInteractionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0050(0x0018)()
};
static_assert(alignof(BP_VoxelDoor_C_GetInteractionText) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_GetInteractionText");
static_assert(sizeof(BP_VoxelDoor_C_GetInteractionText) == 0x000068, "Wrong size on BP_VoxelDoor_C_GetInteractionText");
static_assert(offsetof(BP_VoxelDoor_C_GetInteractionText, ReturnValue) == 0x000000, "Member 'BP_VoxelDoor_C_GetInteractionText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_GetInteractionText, Temp_bool_Variable) == 0x000018, "Member 'BP_VoxelDoor_C_GetInteractionText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_GetInteractionText, Temp_text_Variable) == 0x000020, "Member 'BP_VoxelDoor_C_GetInteractionText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_GetInteractionText, Temp_text_Variable_1) == 0x000038, "Member 'BP_VoxelDoor_C_GetInteractionText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_GetInteractionText, K2Node_Select_Default) == 0x000050, "Member 'BP_VoxelDoor_C_GetInteractionText::K2Node_Select_Default' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.OnHit
// 0x0148 (0x0148 - 0x0000)
struct BP_VoxelDoor_C_OnHit final
{
public:
	EImpactType                                   ImpactType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Dmg;                                               // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_OnHit) == 0x000008, "Wrong alignment on BP_VoxelDoor_C_OnHit");
static_assert(sizeof(BP_VoxelDoor_C_OnHit) == 0x000148, "Wrong size on BP_VoxelDoor_C_OnHit");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, ImpactType) == 0x000000, "Member 'BP_VoxelDoor_C_OnHit::ImpactType' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, HitResult) == 0x000004, "Member 'BP_VoxelDoor_C_OnHit::HitResult' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, Dmg) == 0x00008C, "Member 'BP_VoxelDoor_C_OnHit::Dmg' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, ReturnValue) == 0x000090, "Member 'BP_VoxelDoor_C_OnHit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_bBlockingHit) == 0x000091, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_bInitialOverlap) == 0x000092, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_Time) == 0x000094, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_Distance) == 0x000098, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_Location) == 0x00009C, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A8, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_Normal) == 0x0000B4, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C0, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_PhysMat) == 0x0000D0, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_HitActor) == 0x0000D8, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_HitComponent) == 0x0000E0, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_HitBoneName) == 0x0000E8, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_HitItem) == 0x0000F0, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_ElementIndex) == 0x0000F4, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_FaceIndex) == 0x0000F8, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_TraceStart) == 0x0000FC, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BreakHitResult_TraceEnd) == 0x000108, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000114, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000120, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000121, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000122, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000123, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000124, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000125, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000126, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue) == 0x000127, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000128, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_1) == 0x000129, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00012A, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_2) == 0x00012B, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x00012C, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_3) == 0x00012D, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x00012E, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_4) == 0x00012F, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_5) == 0x000130, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x000131, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x000132, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_6) == 0x000133, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x000134, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_7) == 0x000135, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_Not_PreBool_ReturnValue) == 0x000136, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_8) == 0x000137, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanAND_ReturnValue) == 0x000138, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_9) == 0x000139, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_10) == 0x00013A, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_BooleanOR_ReturnValue_11) == 0x00013B, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_OnHit, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000140, "Member 'BP_VoxelDoor_C_OnHit::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_VoxelDoor.BP_VoxelDoor_C.SetLock
// 0x0034 (0x0034 - 0x0000)
struct BP_VoxelDoor_C_SetLock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VoxelDoor_C_SetLock) == 0x000004, "Wrong alignment on BP_VoxelDoor_C_SetLock");
static_assert(sizeof(BP_VoxelDoor_C_SetLock) == 0x000034, "Wrong size on BP_VoxelDoor_C_SetLock");
static_assert(offsetof(BP_VoxelDoor_C_SetLock, Lock) == 0x000000, "Member 'BP_VoxelDoor_C_SetLock::Lock' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_SetLock, Temp_bool_Variable) == 0x000001, "Member 'BP_VoxelDoor_C_SetLock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_SetLock, Temp_struct_Variable) == 0x000004, "Member 'BP_VoxelDoor_C_SetLock::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_SetLock, Temp_struct_Variable_1) == 0x000014, "Member 'BP_VoxelDoor_C_SetLock::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VoxelDoor_C_SetLock, K2Node_Select_Default) == 0x000024, "Member 'BP_VoxelDoor_C_SetLock::K2Node_Select_Default' has a wrong offset!");

}

