#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RMAMirrorAnimation

#include "Basic.hpp"

#include "RMAMirrorAnimation_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GenerateBoneConfig
// 0x0001 (0x0001 - 0x0000)
struct RMAMirrorAnimationMirrorTable_GenerateBoneConfig final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_GenerateBoneConfig) == 0x000001, "Wrong alignment on RMAMirrorAnimationMirrorTable_GenerateBoneConfig");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_GenerateBoneConfig) == 0x000001, "Wrong size on RMAMirrorAnimationMirrorTable_GenerateBoneConfig");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_GenerateBoneConfig, ReturnValue) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_GenerateBoneConfig::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GetAnimSelection
// 0x0010 (0x0010 - 0x0000)
struct RMAMirrorAnimationMirrorTable_GetAnimSelection final
{
public:
	TArray<class UAnimSequence*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_GetAnimSelection) == 0x000008, "Wrong alignment on RMAMirrorAnimationMirrorTable_GetAnimSelection");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_GetAnimSelection) == 0x000010, "Wrong size on RMAMirrorAnimationMirrorTable_GetAnimSelection");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_GetAnimSelection, ReturnValue) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_GetAnimSelection::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.GetFileVersion
// 0x0008 (0x0008 - 0x0000)
struct RMAMirrorAnimationMirrorTable_GetFileVersion final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_GetFileVersion) == 0x000004, "Wrong alignment on RMAMirrorAnimationMirrorTable_GetFileVersion");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_GetFileVersion) == 0x000008, "Wrong size on RMAMirrorAnimationMirrorTable_GetFileVersion");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_GetFileVersion, ReturnValue) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_GetFileVersion::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorAnimations
// 0x0001 (0x0001 - 0x0000)
struct RMAMirrorAnimationMirrorTable_MirrorAnimations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_MirrorAnimations) == 0x000001, "Wrong alignment on RMAMirrorAnimationMirrorTable_MirrorAnimations");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_MirrorAnimations) == 0x000001, "Wrong size on RMAMirrorAnimationMirrorTable_MirrorAnimations");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorAnimations, ReturnValue) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_MirrorAnimations::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorLocation
// 0x0050 (0x0050 - 0x0000)
struct RMAMirrorAnimationMirrorTable_MirrorLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RefLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RefRotation;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRMAMirrorAnimationSingleBoneConfig    BoneConfig;                                        // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_MirrorLocation) == 0x000010, "Wrong alignment on RMAMirrorAnimationMirrorTable_MirrorLocation");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_MirrorLocation) == 0x000050, "Wrong size on RMAMirrorAnimationMirrorTable_MirrorLocation");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocation, Location) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocation::Location' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocation, RefLocation) == 0x00000C, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocation::RefLocation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocation, RefRotation) == 0x000020, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocation::RefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocation, BoneConfig) == 0x000030, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocation::BoneConfig' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocation, ReturnValue) == 0x00003C, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocation::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorLocationToOtherPose
// 0x0070 (0x0070 - 0x0000)
struct RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceRefLocation;                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  SourceRefRotation;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetRefLocation;                                 // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  TargetRefRotation;                                 // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRMAMirrorAnimationDoubleBoneConfig    BoneConfig;                                        // 0x0050(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0064(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose) == 0x000010, "Wrong alignment on RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose) == 0x000070, "Wrong size on RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, SourceLocation) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::SourceLocation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, SourceRefLocation) == 0x00000C, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::SourceRefLocation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, SourceRefRotation) == 0x000020, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::SourceRefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, TargetRefLocation) == 0x000030, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::TargetRefLocation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, TargetRefRotation) == 0x000040, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::TargetRefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, BoneConfig) == 0x000050, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::BoneConfig' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose, ReturnValue) == 0x000064, "Member 'RMAMirrorAnimationMirrorTable_MirrorLocationToOtherPose::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorRotation
// 0x0040 (0x0040 - 0x0000)
struct RMAMirrorAnimationMirrorTable_MirrorRotation final
{
public:
	struct FQuat                                  Rotation;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  RefRotation;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRMAMirrorAnimationSingleBoneConfig    BoneConfig;                                        // 0x0020(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_MirrorRotation) == 0x000010, "Wrong alignment on RMAMirrorAnimationMirrorTable_MirrorRotation");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_MirrorRotation) == 0x000040, "Wrong size on RMAMirrorAnimationMirrorTable_MirrorRotation");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotation, Rotation) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotation::Rotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotation, RefRotation) == 0x000010, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotation::RefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotation, BoneConfig) == 0x000020, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotation::BoneConfig' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotation, ReturnValue) == 0x000030, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotation::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationMirrorTable.MirrorRotationToOtherPose
// 0x0060 (0x0060 - 0x0000)
struct RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose final
{
public:
	struct FQuat                                  SourceRotation;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  SourceRefRotation;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  TargetRefRotation;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRMAMirrorAnimationDoubleBoneConfig    BoneConfig;                                        // 0x0030(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose) == 0x000010, "Wrong alignment on RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose");
static_assert(sizeof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose) == 0x000060, "Wrong size on RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose, SourceRotation) == 0x000000, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose::SourceRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose, SourceRefRotation) == 0x000010, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose::SourceRefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose, TargetRefRotation) == 0x000020, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose::TargetRefRotation' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose, BoneConfig) == 0x000030, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose::BoneConfig' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose, ReturnValue) == 0x000050, "Member 'RMAMirrorAnimationMirrorTable_MirrorRotationToOtherPose::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetPathNameForLoadedAsset
// 0x0018 (0x0018 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset final
{
public:
	class UObject*                                LoadedAsset;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset) == 0x000008, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset) == 0x000018, "Wrong size on RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset, LoadedAsset) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset::LoadedAsset' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset, ReturnValue) == 0x000008, "Member 'RMAMirrorAnimationFunctionLibrary_GetPathNameForLoadedAsset::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetUserPreference
// 0x0028 (0x0028 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_GetUserPreference final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_GetUserPreference) == 0x000008, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_GetUserPreference");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_GetUserPreference) == 0x000028, "Wrong size on RMAMirrorAnimationFunctionLibrary_GetUserPreference");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetUserPreference, Key) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_GetUserPreference::Key' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetUserPreference, Successful) == 0x000010, "Member 'RMAMirrorAnimationFunctionLibrary_GetUserPreference::Successful' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetUserPreference, ReturnValue) == 0x000018, "Member 'RMAMirrorAnimationFunctionLibrary_GetUserPreference::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.GetVersion
// 0x0008 (0x0008 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_GetVersion final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_GetVersion) == 0x000004, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_GetVersion");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_GetVersion) == 0x000008, "Wrong size on RMAMirrorAnimationFunctionLibrary_GetVersion");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_GetVersion, ReturnValue) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_GetVersion::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SaveLoadedAsset
// 0x0010 (0x0010 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset final
{
public:
	class UObject*                                AssetToSave;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset) == 0x000008, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset) == 0x000010, "Wrong size on RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset, AssetToSave) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset::AssetToSave' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset, ReturnValue) == 0x000008, "Member 'RMAMirrorAnimationFunctionLibrary_SaveLoadedAsset::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SetUserPreference
// 0x0028 (0x0028 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_SetUserPreference final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewValue;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_SetUserPreference) == 0x000008, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_SetUserPreference");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_SetUserPreference) == 0x000028, "Wrong size on RMAMirrorAnimationFunctionLibrary_SetUserPreference");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SetUserPreference, Key) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_SetUserPreference::Key' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SetUserPreference, NewValue) == 0x000010, "Member 'RMAMirrorAnimationFunctionLibrary_SetUserPreference::NewValue' has a wrong offset!");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SetUserPreference, ReturnValue) == 0x000020, "Member 'RMAMirrorAnimationFunctionLibrary_SetUserPreference::ReturnValue' has a wrong offset!");

// Function RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary.SyncBrowserToObjects
// 0x0010 (0x0010 - 0x0000)
struct RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects final
{
public:
	TArray<class FString>                         AssetPaths;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects) == 0x000008, "Wrong alignment on RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects");
static_assert(sizeof(RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects) == 0x000010, "Wrong size on RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects");
static_assert(offsetof(RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects, AssetPaths) == 0x000000, "Member 'RMAMirrorAnimationFunctionLibrary_SyncBrowserToObjects::AssetPaths' has a wrong offset!");

}

