#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_CrosshairManager

#include "Basic.hpp"

#include "E_ProgressBarType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ProgressBars_structs.hpp"


namespace SDK::Params
{

// Function I_CrosshairManager.I_CrosshairManager_C.ActivateCrosshair
// 0x0008 (0x0008 - 0x0000)
struct I_CrosshairManager_C_ActivateCrosshair final
{
public:
	struct FVector2D                              Scale;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CrosshairManager_C_ActivateCrosshair) == 0x000004, "Wrong alignment on I_CrosshairManager_C_ActivateCrosshair");
static_assert(sizeof(I_CrosshairManager_C_ActivateCrosshair) == 0x000008, "Wrong size on I_CrosshairManager_C_ActivateCrosshair");
static_assert(offsetof(I_CrosshairManager_C_ActivateCrosshair, Scale) == 0x000000, "Member 'I_CrosshairManager_C_ActivateCrosshair::Scale' has a wrong offset!");

// Function I_CrosshairManager.I_CrosshairManager_C.CrosshairReaction
// 0x0001 (0x0001 - 0x0000)
struct I_CrosshairManager_C_CrosshairReaction final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(I_CrosshairManager_C_CrosshairReaction) == 0x000001, "Wrong alignment on I_CrosshairManager_C_CrosshairReaction");
static_assert(sizeof(I_CrosshairManager_C_CrosshairReaction) == 0x000001, "Wrong size on I_CrosshairManager_C_CrosshairReaction");
static_assert(offsetof(I_CrosshairManager_C_CrosshairReaction, IsMoving) == 0x000000, "Member 'I_CrosshairManager_C_CrosshairReaction::IsMoving' has a wrong offset!");

// Function I_CrosshairManager.I_CrosshairManager_C.HitIndicator
// 0x0010 (0x0010 - 0x0000)
struct I_CrosshairManager_C_HitIndicator final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CrosshairManager_C_HitIndicator) == 0x000004, "Wrong alignment on I_CrosshairManager_C_HitIndicator");
static_assert(sizeof(I_CrosshairManager_C_HitIndicator) == 0x000010, "Wrong size on I_CrosshairManager_C_HitIndicator");
static_assert(offsetof(I_CrosshairManager_C_HitIndicator, Color) == 0x000000, "Member 'I_CrosshairManager_C_HitIndicator::Color' has a wrong offset!");

// Function I_CrosshairManager.I_CrosshairManager_C.UpdateProgressBar
// 0x0030 (0x0030 - 0x0000)
struct I_CrosshairManager_C_UpdateProgressBar final
{
public:
	E_ProgressBarType                             ProgressType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EmptyColor;                                        // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FillColor;                                         // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ProgressBars                                ProgressBarType;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CrosshairManager_C_UpdateProgressBar) == 0x000004, "Wrong alignment on I_CrosshairManager_C_UpdateProgressBar");
static_assert(sizeof(I_CrosshairManager_C_UpdateProgressBar) == 0x000030, "Wrong size on I_CrosshairManager_C_UpdateProgressBar");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, ProgressType) == 0x000000, "Member 'I_CrosshairManager_C_UpdateProgressBar::ProgressType' has a wrong offset!");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, Time) == 0x000004, "Member 'I_CrosshairManager_C_UpdateProgressBar::Time' has a wrong offset!");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, Value) == 0x000008, "Member 'I_CrosshairManager_C_UpdateProgressBar::Value' has a wrong offset!");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, EmptyColor) == 0x00000C, "Member 'I_CrosshairManager_C_UpdateProgressBar::EmptyColor' has a wrong offset!");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, FillColor) == 0x00001C, "Member 'I_CrosshairManager_C_UpdateProgressBar::FillColor' has a wrong offset!");
static_assert(offsetof(I_CrosshairManager_C_UpdateProgressBar, ProgressBarType) == 0x00002C, "Member 'I_CrosshairManager_C_UpdateProgressBar::ProgressBarType' has a wrong offset!");

}

