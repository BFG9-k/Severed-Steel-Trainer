#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleDamageIndicatorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C
// 0x0078 (0x0128 - 0x00B0)
class UBP_CircleDamageIndicatorComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Dynamic;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_DamageIndicator_C*>          PointDamageIndicators;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         DisappearanceSpeed;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x00D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             PointIndicator;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearDamageDistance;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NearIndicator;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UIScale;                                           // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenOffset;                                      // 0x0104(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IndicatorSpriteOffset;                             // 0x010C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IndicatorSpriteSize;                               // 0x0114(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NearIndicatorSpriteSize;                           // 0x011C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CircleDamageIndicatorComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void DmgTaken(const struct FVector& FromLocation);
	void RemoveIndicator(class UUI_DamageIndicator_C* Indicator);
	void CalculateAngle(const struct FVector& FromLocation, class UUI_DamageIndicator_C* Indicator);
	void NearDamage(class UUI_DamageIndicator_C** Indicator);
	void CustomSettings(class UUI_DamageIndicator_C* IndicatorIn, bool PointDamage, class UUI_DamageIndicator_C** Indicator);
	void RemoveAllIndicators();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CircleDamageIndicatorComponent_C">();
	}
	static class UBP_CircleDamageIndicatorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CircleDamageIndicatorComponent_C>();
	}
};
static_assert(alignof(UBP_CircleDamageIndicatorComponent_C) == 0x000008, "Wrong alignment on UBP_CircleDamageIndicatorComponent_C");
static_assert(sizeof(UBP_CircleDamageIndicatorComponent_C) == 0x000128, "Wrong size on UBP_CircleDamageIndicatorComponent_C");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_CircleDamageIndicatorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, Dynamic) == 0x0000B8, "Member 'UBP_CircleDamageIndicatorComponent_C::Dynamic' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, PointDamageIndicators) == 0x0000C0, "Member 'UBP_CircleDamageIndicatorComponent_C::PointDamageIndicators' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, DisappearanceSpeed) == 0x0000D0, "Member 'UBP_CircleDamageIndicatorComponent_C::DisappearanceSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, Color) == 0x0000D4, "Member 'UBP_CircleDamageIndicatorComponent_C::Color' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, PointIndicator) == 0x0000E8, "Member 'UBP_CircleDamageIndicatorComponent_C::PointIndicator' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, NearDamageDistance) == 0x0000F0, "Member 'UBP_CircleDamageIndicatorComponent_C::NearDamageDistance' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, NearIndicator) == 0x0000F8, "Member 'UBP_CircleDamageIndicatorComponent_C::NearIndicator' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, UIScale) == 0x000100, "Member 'UBP_CircleDamageIndicatorComponent_C::UIScale' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, ScreenOffset) == 0x000104, "Member 'UBP_CircleDamageIndicatorComponent_C::ScreenOffset' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, IndicatorSpriteOffset) == 0x00010C, "Member 'UBP_CircleDamageIndicatorComponent_C::IndicatorSpriteOffset' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, IndicatorSpriteSize) == 0x000114, "Member 'UBP_CircleDamageIndicatorComponent_C::IndicatorSpriteSize' has a wrong offset!");
static_assert(offsetof(UBP_CircleDamageIndicatorComponent_C, NearIndicatorSpriteSize) == 0x00011C, "Member 'UBP_CircleDamageIndicatorComponent_C::NearIndicatorSpriteSize' has a wrong offset!");

}

