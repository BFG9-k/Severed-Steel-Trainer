#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalBP

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PortalBP.PortalBP_C
// 0x0118 (0x0360 - 0x0248)
class APortalBP_C final : public ATeleporter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               ProceduralMesh;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPortalTickComponent_C*                 PortalTickComponent;                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PortalMeshInvCube;                                 // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PortalMeshNear;                                    // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   portalMeshFar;                                     // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PortalMeshGroup;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorwayMesh;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               PortalSceneCapture;                                // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          SimulatePhysics;                                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APortalBP_C*                            TargetPortal;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SubScaleSimpleRecut;                               // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorwayDepthScale;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoorwayDepthOffset;                                // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PerformTeleportInComponent;                        // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckVelToTeleport;                                // 0x02CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CE[0x2];                                      // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderMipScaledownSpeed;                           // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireRecentRender;                               // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderMipLevels;                                   // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowRecursionCamera;                              // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseSimpleRenderMethod;                             // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DE[0x2];                                      // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsOverlappingPortal;                           // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               PortalMaterial;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CaptureFrame;                                      // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTextureRenderTarget2D*>         RenderTargetArray;                                 // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              PortalScreenSpacePos;                              // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PortalScreenSpaceScale;                            // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalPortalScale;                                  // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FinalPortalOffset;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMipLevel;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenRadius;                                      // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClipPlaneOffset;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverlappingPlayer;                                 // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    BlockingWall;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectClipPlane;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceLinkPortalOnSpawn;                            // 0x0344(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          RenderEnabled;                                     // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderQualityMultiplier;                           // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportAddVel;                                    // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirtyTeleport;                                     // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableCollsionWallDistanceCheck;                  // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartOn;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PortalBP(int32 EntryPoint);
	void F_orceBeginPlay();
	void NotifyPlayingReverse();
	void DoActions(EActionType ToDo, bool bSimulated);
	void OnLevelReady();
	void UpdateLinkID(class FName InID);
	void LinkPortalEvent();
	void DoRender();
	void SetupRender(const struct FTransform& CameraOrigin, int32 RecurseDepth, bool ForceMip);
	void ReceiveDestroyed();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void CustomBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	class UTextureRenderTarget2D* CreateRenderTarget(const struct FVector2D& InVec);
	void SetCurrentMipLevel(int32 Index_0, class USceneCaptureComponent2D* Camera);
	void SetupPortalTarget(class APortalBP_C* Target);
	void SetMaterialParams(int32 texture_id, bool custom_matrix, float invscale, const struct FVector2D& Offset, float ParentInvscale, const struct FVector2D& ParentOffset, bool fake_matrix);
	void CalcProjectionMatrix(const struct FTransform& CameraOrigin);
	void RenderSimple();
	void RenderNoRecur();
	void CheckCaptureFrameSimple(const struct FTransform& CameraTransform);
	void SetClipPlane(class USceneCaptureComponent2D* SceneCapture);
	void SetPortalCameraLocations(const struct FTransform& CameraOrigin, struct FVector* PlayerCameraLocation);
	void SetPortalCameraParams();
	void Render();
	void EnsureComponentHasCloner(class AActor* InputPin);
	void CheckGenAntiClippingMesh();
	void GenerateAntiClippingMesh();
	void MoveOutOfWalls();
	void CalculateMipMapLevel(const struct FVector& StartPos, int32 RecurseDepth, bool ForceMip);
	bool PortalPointToScreen(const struct FTransform& CameraOrigin, const struct FVector& Location, struct FVector2D* ScreenLocation);
	void CalcScreenRadiusFromPosition(const struct FVector& StartPos, float* radius_screenspace);
	void SetNewTargetPortal(class APortalBP_C* TargetPortal_0);
	void Set_Detail(bool bHigh);
	TArray<EActionType> GetActions();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PortalBP_C">();
	}
	static class APortalBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalBP_C>();
	}
};
static_assert(alignof(APortalBP_C) == 0x000008, "Wrong alignment on APortalBP_C");
static_assert(sizeof(APortalBP_C) == 0x000360, "Wrong size on APortalBP_C");
static_assert(offsetof(APortalBP_C, UberGraphFrame) == 0x000248, "Member 'APortalBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APortalBP_C, SpotLight) == 0x000250, "Member 'APortalBP_C::SpotLight' has a wrong offset!");
static_assert(offsetof(APortalBP_C, Audio) == 0x000258, "Member 'APortalBP_C::Audio' has a wrong offset!");
static_assert(offsetof(APortalBP_C, Box) == 0x000260, "Member 'APortalBP_C::Box' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ProceduralMesh) == 0x000268, "Member 'APortalBP_C::ProceduralMesh' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalTickComponent) == 0x000270, "Member 'APortalBP_C::PortalTickComponent' has a wrong offset!");
static_assert(offsetof(APortalBP_C, Arrow) == 0x000278, "Member 'APortalBP_C::Arrow' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalMeshInvCube) == 0x000280, "Member 'APortalBP_C::PortalMeshInvCube' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalMeshNear) == 0x000288, "Member 'APortalBP_C::PortalMeshNear' has a wrong offset!");
static_assert(offsetof(APortalBP_C, portalMeshFar) == 0x000290, "Member 'APortalBP_C::portalMeshFar' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalMeshGroup) == 0x000298, "Member 'APortalBP_C::PortalMeshGroup' has a wrong offset!");
static_assert(offsetof(APortalBP_C, DoorwayMesh) == 0x0002A0, "Member 'APortalBP_C::DoorwayMesh' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalSceneCapture) == 0x0002A8, "Member 'APortalBP_C::PortalSceneCapture' has a wrong offset!");
static_assert(offsetof(APortalBP_C, SimulatePhysics) == 0x0002B0, "Member 'APortalBP_C::SimulatePhysics' has a wrong offset!");
static_assert(offsetof(APortalBP_C, TargetPortal) == 0x0002B8, "Member 'APortalBP_C::TargetPortal' has a wrong offset!");
static_assert(offsetof(APortalBP_C, SubScaleSimpleRecut) == 0x0002C0, "Member 'APortalBP_C::SubScaleSimpleRecut' has a wrong offset!");
static_assert(offsetof(APortalBP_C, DoorwayDepthScale) == 0x0002C4, "Member 'APortalBP_C::DoorwayDepthScale' has a wrong offset!");
static_assert(offsetof(APortalBP_C, DoorwayDepthOffset) == 0x0002C8, "Member 'APortalBP_C::DoorwayDepthOffset' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PerformTeleportInComponent) == 0x0002CC, "Member 'APortalBP_C::PerformTeleportInComponent' has a wrong offset!");
static_assert(offsetof(APortalBP_C, CheckVelToTeleport) == 0x0002CD, "Member 'APortalBP_C::CheckVelToTeleport' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RenderMipScaledownSpeed) == 0x0002D0, "Member 'APortalBP_C::RenderMipScaledownSpeed' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RequireRecentRender) == 0x0002D4, "Member 'APortalBP_C::RequireRecentRender' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RenderMipLevels) == 0x0002D8, "Member 'APortalBP_C::RenderMipLevels' has a wrong offset!");
static_assert(offsetof(APortalBP_C, AllowRecursionCamera) == 0x0002DC, "Member 'APortalBP_C::AllowRecursionCamera' has a wrong offset!");
static_assert(offsetof(APortalBP_C, UseSimpleRenderMethod) == 0x0002DD, "Member 'APortalBP_C::UseSimpleRenderMethod' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ActorsOverlappingPortal) == 0x0002E0, "Member 'APortalBP_C::ActorsOverlappingPortal' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalMaterial) == 0x0002F0, "Member 'APortalBP_C::PortalMaterial' has a wrong offset!");
static_assert(offsetof(APortalBP_C, CaptureFrame) == 0x0002F8, "Member 'APortalBP_C::CaptureFrame' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RenderTargetArray) == 0x000300, "Member 'APortalBP_C::RenderTargetArray' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalScreenSpacePos) == 0x000310, "Member 'APortalBP_C::PortalScreenSpacePos' has a wrong offset!");
static_assert(offsetof(APortalBP_C, PortalScreenSpaceScale) == 0x000318, "Member 'APortalBP_C::PortalScreenSpaceScale' has a wrong offset!");
static_assert(offsetof(APortalBP_C, FinalPortalScale) == 0x00031C, "Member 'APortalBP_C::FinalPortalScale' has a wrong offset!");
static_assert(offsetof(APortalBP_C, FinalPortalOffset) == 0x000320, "Member 'APortalBP_C::FinalPortalOffset' has a wrong offset!");
static_assert(offsetof(APortalBP_C, CurrentMipLevel) == 0x000328, "Member 'APortalBP_C::CurrentMipLevel' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ScreenRadius) == 0x00032C, "Member 'APortalBP_C::ScreenRadius' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ClipPlaneOffset) == 0x000330, "Member 'APortalBP_C::ClipPlaneOffset' has a wrong offset!");
static_assert(offsetof(APortalBP_C, OverlappingPlayer) == 0x000334, "Member 'APortalBP_C::OverlappingPlayer' has a wrong offset!");
static_assert(offsetof(APortalBP_C, BlockingWall) == 0x000338, "Member 'APortalBP_C::BlockingWall' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ProjectClipPlane) == 0x000340, "Member 'APortalBP_C::ProjectClipPlane' has a wrong offset!");
static_assert(offsetof(APortalBP_C, ForceLinkPortalOnSpawn) == 0x000344, "Member 'APortalBP_C::ForceLinkPortalOnSpawn' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RenderEnabled) == 0x000345, "Member 'APortalBP_C::RenderEnabled' has a wrong offset!");
static_assert(offsetof(APortalBP_C, RenderQualityMultiplier) == 0x000348, "Member 'APortalBP_C::RenderQualityMultiplier' has a wrong offset!");
static_assert(offsetof(APortalBP_C, TeleportAddVel) == 0x00034C, "Member 'APortalBP_C::TeleportAddVel' has a wrong offset!");
static_assert(offsetof(APortalBP_C, DirtyTeleport) == 0x000350, "Member 'APortalBP_C::DirtyTeleport' has a wrong offset!");
static_assert(offsetof(APortalBP_C, DisableCollsionWallDistanceCheck) == 0x000354, "Member 'APortalBP_C::DisableCollsionWallDistanceCheck' has a wrong offset!");
static_assert(offsetof(APortalBP_C, bStartOn) == 0x000358, "Member 'APortalBP_C::bStartOn' has a wrong offset!");

}

