#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ThankYouVeryCool

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "RuntimeAudioImporter_structs.hpp"
#include "Engine_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Voxel_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function ThankYouVeryCool.StatsManager.CheckCompletion
// 0x0020 (0x0020 - 0x0000)
struct StatsManager_CheckCompletion final
{
public:
	TArray<struct FChallenge>                     SaveList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChallenge                             ToCheck;                                           // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDifficulty                                   OutDifficulty;                                     // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatsManager_CheckCompletion) == 0x000008, "Wrong alignment on StatsManager_CheckCompletion");
static_assert(sizeof(StatsManager_CheckCompletion) == 0x000020, "Wrong size on StatsManager_CheckCompletion");
static_assert(offsetof(StatsManager_CheckCompletion, SaveList) == 0x000000, "Member 'StatsManager_CheckCompletion::SaveList' has a wrong offset!");
static_assert(offsetof(StatsManager_CheckCompletion, ToCheck) == 0x000010, "Member 'StatsManager_CheckCompletion::ToCheck' has a wrong offset!");
static_assert(offsetof(StatsManager_CheckCompletion, OutDifficulty) == 0x00001C, "Member 'StatsManager_CheckCompletion::OutDifficulty' has a wrong offset!");
static_assert(offsetof(StatsManager_CheckCompletion, ReturnValue) == 0x00001D, "Member 'StatsManager_CheckCompletion::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.CheckFresh
// 0x0002 (0x0002 - 0x0000)
struct StatsManager_CheckFresh final
{
public:
	EFeat                                         InFeat;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_CheckFresh) == 0x000001, "Wrong alignment on StatsManager_CheckFresh");
static_assert(sizeof(StatsManager_CheckFresh) == 0x000002, "Wrong size on StatsManager_CheckFresh");
static_assert(offsetof(StatsManager_CheckFresh, InFeat) == 0x000000, "Member 'StatsManager_CheckFresh::InFeat' has a wrong offset!");
static_assert(offsetof(StatsManager_CheckFresh, ReturnValue) == 0x000001, "Member 'StatsManager_CheckFresh::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.FeatToChallengeText
// 0x0020 (0x0020 - 0x0000)
struct StatsManager_FeatToChallengeText final
{
public:
	EFeat                                         InFeat;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_FeatToChallengeText) == 0x000008, "Wrong alignment on StatsManager_FeatToChallengeText");
static_assert(sizeof(StatsManager_FeatToChallengeText) == 0x000020, "Wrong size on StatsManager_FeatToChallengeText");
static_assert(offsetof(StatsManager_FeatToChallengeText, InFeat) == 0x000000, "Member 'StatsManager_FeatToChallengeText::InFeat' has a wrong offset!");
static_assert(offsetof(StatsManager_FeatToChallengeText, ReturnValue) == 0x000008, "Member 'StatsManager_FeatToChallengeText::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.FeatToChallengeTextSingular
// 0x0020 (0x0020 - 0x0000)
struct StatsManager_FeatToChallengeTextSingular final
{
public:
	EFeat                                         InFeat;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_FeatToChallengeTextSingular) == 0x000008, "Wrong alignment on StatsManager_FeatToChallengeTextSingular");
static_assert(sizeof(StatsManager_FeatToChallengeTextSingular) == 0x000020, "Wrong size on StatsManager_FeatToChallengeTextSingular");
static_assert(offsetof(StatsManager_FeatToChallengeTextSingular, InFeat) == 0x000000, "Member 'StatsManager_FeatToChallengeTextSingular::InFeat' has a wrong offset!");
static_assert(offsetof(StatsManager_FeatToChallengeTextSingular, ReturnValue) == 0x000008, "Member 'StatsManager_FeatToChallengeTextSingular::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GetColorForRank
// 0x0014 (0x0014 - 0x0000)
struct StatsManager_GetColorForRank final
{
public:
	int32                                         InRank;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GetColorForRank) == 0x000004, "Wrong alignment on StatsManager_GetColorForRank");
static_assert(sizeof(StatsManager_GetColorForRank) == 0x000014, "Wrong size on StatsManager_GetColorForRank");
static_assert(offsetof(StatsManager_GetColorForRank, InRank) == 0x000000, "Member 'StatsManager_GetColorForRank::InRank' has a wrong offset!");
static_assert(offsetof(StatsManager_GetColorForRank, ReturnValue) == 0x000004, "Member 'StatsManager_GetColorForRank::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GetCurrentDailyCount
// 0x0004 (0x0004 - 0x0000)
struct StatsManager_GetCurrentDailyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GetCurrentDailyCount) == 0x000004, "Wrong alignment on StatsManager_GetCurrentDailyCount");
static_assert(sizeof(StatsManager_GetCurrentDailyCount) == 0x000004, "Wrong size on StatsManager_GetCurrentDailyCount");
static_assert(offsetof(StatsManager_GetCurrentDailyCount, ReturnValue) == 0x000000, "Member 'StatsManager_GetCurrentDailyCount::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GetTextForRank
// 0x0020 (0x0020 - 0x0000)
struct StatsManager_GetTextForRank final
{
public:
	int32                                         InRank;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GetTextForRank) == 0x000008, "Wrong alignment on StatsManager_GetTextForRank");
static_assert(sizeof(StatsManager_GetTextForRank) == 0x000020, "Wrong size on StatsManager_GetTextForRank");
static_assert(offsetof(StatsManager_GetTextForRank, InRank) == 0x000000, "Member 'StatsManager_GetTextForRank::InRank' has a wrong offset!");
static_assert(offsetof(StatsManager_GetTextForRank, ReturnValue) == 0x000008, "Member 'StatsManager_GetTextForRank::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GiveCheevo
// 0x0010 (0x0010 - 0x0000)
struct StatsManager_GiveCheevo final
{
public:
	class FString                                 ToGive;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GiveCheevo) == 0x000008, "Wrong alignment on StatsManager_GiveCheevo");
static_assert(sizeof(StatsManager_GiveCheevo) == 0x000010, "Wrong size on StatsManager_GiveCheevo");
static_assert(offsetof(StatsManager_GiveCheevo, ToGive) == 0x000000, "Member 'StatsManager_GiveCheevo::ToGive' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GiveCheevoOthers
// 0x0008 (0x0008 - 0x0000)
struct StatsManager_GiveCheevoOthers final
{
public:
	class FName                                   ToGive;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GiveCheevoOthers) == 0x000004, "Wrong alignment on StatsManager_GiveCheevoOthers");
static_assert(sizeof(StatsManager_GiveCheevoOthers) == 0x000008, "Wrong size on StatsManager_GiveCheevoOthers");
static_assert(offsetof(StatsManager_GiveCheevoOthers, ToGive) == 0x000000, "Member 'StatsManager_GiveCheevoOthers::ToGive' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GiveCheevos
// 0x0010 (0x0010 - 0x0000)
struct StatsManager_GiveCheevos final
{
public:
	TArray<class FString>                         ToGive;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GiveCheevos) == 0x000008, "Wrong alignment on StatsManager_GiveCheevos");
static_assert(sizeof(StatsManager_GiveCheevos) == 0x000010, "Wrong size on StatsManager_GiveCheevos");
static_assert(offsetof(StatsManager_GiveCheevos, ToGive) == 0x000000, "Member 'StatsManager_GiveCheevos::ToGive' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.GiveCheevosOthers
// 0x0010 (0x0010 - 0x0000)
struct StatsManager_GiveCheevosOthers final
{
public:
	TArray<class FName>                           ToGive;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_GiveCheevosOthers) == 0x000008, "Wrong alignment on StatsManager_GiveCheevosOthers");
static_assert(sizeof(StatsManager_GiveCheevosOthers) == 0x000010, "Wrong size on StatsManager_GiveCheevosOthers");
static_assert(offsetof(StatsManager_GiveCheevosOthers, ToGive) == 0x000000, "Member 'StatsManager_GiveCheevosOthers::ToGive' has a wrong offset!");

// Function ThankYouVeryCool.StatsManager.OnGDKSessionManagerStatsRetrieved
// 0x0008 (0x0008 - 0x0000)
struct StatsManager_OnGDKSessionManagerStatsRetrieved final
{
public:
	int32                                         Headshots;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsManager_OnGDKSessionManagerStatsRetrieved) == 0x000004, "Wrong alignment on StatsManager_OnGDKSessionManagerStatsRetrieved");
static_assert(sizeof(StatsManager_OnGDKSessionManagerStatsRetrieved) == 0x000008, "Wrong size on StatsManager_OnGDKSessionManagerStatsRetrieved");
static_assert(offsetof(StatsManager_OnGDKSessionManagerStatsRetrieved, Headshots) == 0x000000, "Member 'StatsManager_OnGDKSessionManagerStatsRetrieved::Headshots' has a wrong offset!");
static_assert(offsetof(StatsManager_OnGDKSessionManagerStatsRetrieved, Kills) == 0x000004, "Member 'StatsManager_OnGDKSessionManagerStatsRetrieved::Kills' has a wrong offset!");

// Function ThankYouVeryCool.CoverGeneratorComponent.OnNavmeshGenerationFinished
// 0x0008 (0x0008 - 0x0000)
struct CoverGeneratorComponent_OnNavmeshGenerationFinished final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverGeneratorComponent_OnNavmeshGenerationFinished) == 0x000008, "Wrong alignment on CoverGeneratorComponent_OnNavmeshGenerationFinished");
static_assert(sizeof(CoverGeneratorComponent_OnNavmeshGenerationFinished) == 0x000008, "Wrong size on CoverGeneratorComponent_OnNavmeshGenerationFinished");
static_assert(offsetof(CoverGeneratorComponent_OnNavmeshGenerationFinished, NavData) == 0x000000, "Member 'CoverGeneratorComponent_OnNavmeshGenerationFinished::NavData' has a wrong offset!");

// Function ThankYouVeryCool.SquadBT.GetBB
// 0x0008 (0x0008 - 0x0000)
struct SquadBT_GetBB final
{
public:
	class UBlackboardComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadBT_GetBB) == 0x000008, "Wrong alignment on SquadBT_GetBB");
static_assert(sizeof(SquadBT_GetBB) == 0x000008, "Wrong size on SquadBT_GetBB");
static_assert(offsetof(SquadBT_GetBB, ReturnValue) == 0x000000, "Member 'SquadBT_GetBB::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.SquadBT.Stop
// 0x0010 (0x0010 - 0x0000)
struct SquadBT_Stop final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadBT_Stop) == 0x000008, "Wrong alignment on SquadBT_Stop");
static_assert(sizeof(SquadBT_Stop) == 0x000010, "Wrong size on SquadBT_Stop");
static_assert(offsetof(SquadBT_Stop, Reason) == 0x000000, "Member 'SquadBT_Stop::Reason' has a wrong offset!");

// Function ThankYouVeryCool.CloverWidget.SetDisplayedLuck
// 0x0004 (0x0004 - 0x0000)
struct CloverWidget_SetDisplayedLuck final
{
public:
	int32                                         Luck;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloverWidget_SetDisplayedLuck) == 0x000004, "Wrong alignment on CloverWidget_SetDisplayedLuck");
static_assert(sizeof(CloverWidget_SetDisplayedLuck) == 0x000004, "Wrong size on CloverWidget_SetDisplayedLuck");
static_assert(offsetof(CloverWidget_SetDisplayedLuck, Luck) == 0x000000, "Member 'CloverWidget_SetDisplayedLuck::Luck' has a wrong offset!");

// Function ThankYouVeryCool.CloverWidget.SetupAsImpossible
// 0x0001 (0x0001 - 0x0000)
struct CloverWidget_SetupAsImpossible final
{
public:
	bool                                          bIsImpossible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloverWidget_SetupAsImpossible) == 0x000001, "Wrong alignment on CloverWidget_SetupAsImpossible");
static_assert(sizeof(CloverWidget_SetupAsImpossible) == 0x000001, "Wrong size on CloverWidget_SetupAsImpossible");
static_assert(offsetof(CloverWidget_SetupAsImpossible, bIsImpossible) == 0x000000, "Member 'CloverWidget_SetupAsImpossible::bIsImpossible' has a wrong offset!");

// Function ThankYouVeryCool.AmmoCountWidget.SetAkimboAmmo
// 0x0004 (0x0004 - 0x0000)
struct AmmoCountWidget_SetAkimboAmmo final
{
public:
	int32                                         InAmmo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoCountWidget_SetAkimboAmmo) == 0x000004, "Wrong alignment on AmmoCountWidget_SetAkimboAmmo");
static_assert(sizeof(AmmoCountWidget_SetAkimboAmmo) == 0x000004, "Wrong size on AmmoCountWidget_SetAkimboAmmo");
static_assert(offsetof(AmmoCountWidget_SetAkimboAmmo, InAmmo) == 0x000000, "Member 'AmmoCountWidget_SetAkimboAmmo::InAmmo' has a wrong offset!");

// Function ThankYouVeryCool.AmmoCountWidget.SetAmmo
// 0x000C (0x000C - 0x0000)
struct AmmoCountWidget_SetAmmo final
{
public:
	int32                                         InAmmo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmmoCountWidget_SetAmmo) == 0x000004, "Wrong alignment on AmmoCountWidget_SetAmmo");
static_assert(sizeof(AmmoCountWidget_SetAmmo) == 0x00000C, "Wrong size on AmmoCountWidget_SetAmmo");
static_assert(offsetof(AmmoCountWidget_SetAmmo, InAmmo) == 0x000000, "Member 'AmmoCountWidget_SetAmmo::InAmmo' has a wrong offset!");
static_assert(offsetof(AmmoCountWidget_SetAmmo, MaxAmmo) == 0x000004, "Member 'AmmoCountWidget_SetAmmo::MaxAmmo' has a wrong offset!");
static_assert(offsetof(AmmoCountWidget_SetAmmo, bAnimate) == 0x000008, "Member 'AmmoCountWidget_SetAmmo::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.AmmoCountWidget.SetAmmoViz
// 0x0001 (0x0001 - 0x0000)
struct AmmoCountWidget_SetAmmoViz final
{
public:
	bool                                          bInViz;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoCountWidget_SetAmmoViz) == 0x000001, "Wrong alignment on AmmoCountWidget_SetAmmoViz");
static_assert(sizeof(AmmoCountWidget_SetAmmoViz) == 0x000001, "Wrong size on AmmoCountWidget_SetAmmoViz");
static_assert(offsetof(AmmoCountWidget_SetAmmoViz, bInViz) == 0x000000, "Member 'AmmoCountWidget_SetAmmoViz::bInViz' has a wrong offset!");

// Function ThankYouVeryCool.AmmoCountWidget.SetDesireShowAkimbo
// 0x0001 (0x0001 - 0x0000)
struct AmmoCountWidget_SetDesireShowAkimbo final
{
public:
	bool                                          bDesire;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoCountWidget_SetDesireShowAkimbo) == 0x000001, "Wrong alignment on AmmoCountWidget_SetDesireShowAkimbo");
static_assert(sizeof(AmmoCountWidget_SetDesireShowAkimbo) == 0x000001, "Wrong size on AmmoCountWidget_SetDesireShowAkimbo");
static_assert(offsetof(AmmoCountWidget_SetDesireShowAkimbo, bDesire) == 0x000000, "Member 'AmmoCountWidget_SetDesireShowAkimbo::bDesire' has a wrong offset!");

// Function ThankYouVeryCool.TutorialGuide.SetInstructions
// 0x0001 (0x0001 - 0x0000)
struct TutorialGuide_SetInstructions final
{
public:
	bool                                          bForController;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGuide_SetInstructions) == 0x000001, "Wrong alignment on TutorialGuide_SetInstructions");
static_assert(sizeof(TutorialGuide_SetInstructions) == 0x000001, "Wrong size on TutorialGuide_SetInstructions");
static_assert(offsetof(TutorialGuide_SetInstructions, bForController) == 0x000000, "Member 'TutorialGuide_SetInstructions::bForController' has a wrong offset!");

// Function ThankYouVeryCool.ConsoleIconsDataAsset.GetGamepadButtonIcon
// 0x0028 (0x0028 - 0x0000)
struct ConsoleIconsDataAsset_GetGamepadButtonIcon final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleIconsDataAsset_GetGamepadButtonIcon) == 0x000008, "Wrong alignment on ConsoleIconsDataAsset_GetGamepadButtonIcon");
static_assert(sizeof(ConsoleIconsDataAsset_GetGamepadButtonIcon) == 0x000028, "Wrong size on ConsoleIconsDataAsset_GetGamepadButtonIcon");
static_assert(offsetof(ConsoleIconsDataAsset_GetGamepadButtonIcon, WorldContextObject) == 0x000000, "Member 'ConsoleIconsDataAsset_GetGamepadButtonIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ConsoleIconsDataAsset_GetGamepadButtonIcon, Key) == 0x000008, "Member 'ConsoleIconsDataAsset_GetGamepadButtonIcon::Key' has a wrong offset!");
static_assert(offsetof(ConsoleIconsDataAsset_GetGamepadButtonIcon, ReturnValue) == 0x000020, "Member 'ConsoleIconsDataAsset_GetGamepadButtonIcon::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCGDKSessionManager.SendArcadeLevelCompleteEvent
// 0x0018 (0x0018 - 0x0000)
struct TYVCGDKSessionManager_SendArcadeLevelCompleteEvent final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCGDKSessionManager_SendArcadeLevelCompleteEvent) == 0x000008, "Wrong alignment on TYVCGDKSessionManager_SendArcadeLevelCompleteEvent");
static_assert(sizeof(TYVCGDKSessionManager_SendArcadeLevelCompleteEvent) == 0x000018, "Wrong size on TYVCGDKSessionManager_SendArcadeLevelCompleteEvent");
static_assert(offsetof(TYVCGDKSessionManager_SendArcadeLevelCompleteEvent, LevelName) == 0x000000, "Member 'TYVCGDKSessionManager_SendArcadeLevelCompleteEvent::LevelName' has a wrong offset!");
static_assert(offsetof(TYVCGDKSessionManager_SendArcadeLevelCompleteEvent, Score) == 0x000010, "Member 'TYVCGDKSessionManager_SendArcadeLevelCompleteEvent::Score' has a wrong offset!");
static_assert(offsetof(TYVCGDKSessionManager_SendArcadeLevelCompleteEvent, Time) == 0x000014, "Member 'TYVCGDKSessionManager_SendArcadeLevelCompleteEvent::Time' has a wrong offset!");

// Function ThankYouVeryCool.TYVCGDKSessionManager.SendFirefightLevelEvent
// 0x0004 (0x0004 - 0x0000)
struct TYVCGDKSessionManager_SendFirefightLevelEvent final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCGDKSessionManager_SendFirefightLevelEvent) == 0x000004, "Wrong alignment on TYVCGDKSessionManager_SendFirefightLevelEvent");
static_assert(sizeof(TYVCGDKSessionManager_SendFirefightLevelEvent) == 0x000004, "Wrong size on TYVCGDKSessionManager_SendFirefightLevelEvent");
static_assert(offsetof(TYVCGDKSessionManager_SendFirefightLevelEvent, Level) == 0x000000, "Member 'TYVCGDKSessionManager_SendFirefightLevelEvent::Level' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.GetCoverSystem
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_GetCoverSystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoverSystem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverSystem_GetCoverSystem) == 0x000008, "Wrong alignment on CoverSystem_GetCoverSystem");
static_assert(sizeof(CoverSystem_GetCoverSystem) == 0x000010, "Wrong size on CoverSystem_GetCoverSystem");
static_assert(offsetof(CoverSystem_GetCoverSystem, WorldContextObject) == 0x000000, "Member 'CoverSystem_GetCoverSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoverSystem_GetCoverSystem, ReturnValue) == 0x000008, "Member 'CoverSystem_GetCoverSystem::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.HoldCover
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_HoldCover final
{
public:
	struct FVector                                ElementLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoverSystem_HoldCover) == 0x000004, "Wrong alignment on CoverSystem_HoldCover");
static_assert(sizeof(CoverSystem_HoldCover) == 0x000010, "Wrong size on CoverSystem_HoldCover");
static_assert(offsetof(CoverSystem_HoldCover, ElementLocation) == 0x000000, "Member 'CoverSystem_HoldCover::ElementLocation' has a wrong offset!");
static_assert(offsetof(CoverSystem_HoldCover, ReturnValue) == 0x00000C, "Member 'CoverSystem_HoldCover::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.OnNavMeshTilesUpdated
// 0x0050 (0x0050 - 0x0000)
struct CoverSystem_OnNavMeshTilesUpdated final
{
public:
	TSet<uint32>                                  UpdatedTiles;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverSystem_OnNavMeshTilesUpdated) == 0x000008, "Wrong alignment on CoverSystem_OnNavMeshTilesUpdated");
static_assert(sizeof(CoverSystem_OnNavMeshTilesUpdated) == 0x000050, "Wrong size on CoverSystem_OnNavMeshTilesUpdated");
static_assert(offsetof(CoverSystem_OnNavMeshTilesUpdated, UpdatedTiles) == 0x000000, "Member 'CoverSystem_OnNavMeshTilesUpdated::UpdatedTiles' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.ReleaseCover
// 0x0010 (0x0010 - 0x0000)
struct CoverSystem_ReleaseCover final
{
public:
	struct FVector                                ElementLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoverSystem_ReleaseCover) == 0x000004, "Wrong alignment on CoverSystem_ReleaseCover");
static_assert(sizeof(CoverSystem_ReleaseCover) == 0x000010, "Wrong size on CoverSystem_ReleaseCover");
static_assert(offsetof(CoverSystem_ReleaseCover, ElementLocation) == 0x000000, "Member 'CoverSystem_ReleaseCover::ElementLocation' has a wrong offset!");
static_assert(offsetof(CoverSystem_ReleaseCover, ReturnValue) == 0x00000C, "Member 'CoverSystem_ReleaseCover::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.RemoveCoverPointsOfObject
// 0x0008 (0x0008 - 0x0000)
struct CoverSystem_RemoveCoverPointsOfObject final
{
public:
	const class AActor*                           CoverObject;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverSystem_RemoveCoverPointsOfObject) == 0x000008, "Wrong alignment on CoverSystem_RemoveCoverPointsOfObject");
static_assert(sizeof(CoverSystem_RemoveCoverPointsOfObject) == 0x000008, "Wrong size on CoverSystem_RemoveCoverPointsOfObject");
static_assert(offsetof(CoverSystem_RemoveCoverPointsOfObject, CoverObject) == 0x000000, "Member 'CoverSystem_RemoveCoverPointsOfObject::CoverObject' has a wrong offset!");

// Function ThankYouVeryCool.CoverSystem.RemoveStaleCoverPoints
// 0x0018 (0x0018 - 0x0000)
struct CoverSystem_RemoveStaleCoverPoints final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoverSystem_RemoveStaleCoverPoints) == 0x000004, "Wrong alignment on CoverSystem_RemoveStaleCoverPoints");
static_assert(sizeof(CoverSystem_RemoveStaleCoverPoints) == 0x000018, "Wrong size on CoverSystem_RemoveStaleCoverPoints");
static_assert(offsetof(CoverSystem_RemoveStaleCoverPoints, Origin) == 0x000000, "Member 'CoverSystem_RemoveStaleCoverPoints::Origin' has a wrong offset!");
static_assert(offsetof(CoverSystem_RemoveStaleCoverPoints, Extent) == 0x00000C, "Member 'CoverSystem_RemoveStaleCoverPoints::Extent' has a wrong offset!");

// Function ThankYouVeryCool.TYVCHUD.IntroduceChapter
// 0x0020 (0x0020 - 0x0000)
struct TYVCHUD_IntroduceChapter final
{
public:
	class FString                                 ChapterTitle;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnComplete;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCHUD_IntroduceChapter) == 0x000008, "Wrong alignment on TYVCHUD_IntroduceChapter");
static_assert(sizeof(TYVCHUD_IntroduceChapter) == 0x000020, "Wrong size on TYVCHUD_IntroduceChapter");
static_assert(offsetof(TYVCHUD_IntroduceChapter, ChapterTitle) == 0x000000, "Member 'TYVCHUD_IntroduceChapter::ChapterTitle' has a wrong offset!");
static_assert(offsetof(TYVCHUD_IntroduceChapter, OnComplete) == 0x000010, "Member 'TYVCHUD_IntroduceChapter::OnComplete' has a wrong offset!");

// Function ThankYouVeryCool.TYVCHUD.SetLoadBarViz
// 0x0001 (0x0001 - 0x0000)
struct TYVCHUD_SetLoadBarViz final
{
public:
	bool                                          bIsViz;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCHUD_SetLoadBarViz) == 0x000001, "Wrong alignment on TYVCHUD_SetLoadBarViz");
static_assert(sizeof(TYVCHUD_SetLoadBarViz) == 0x000001, "Wrong size on TYVCHUD_SetLoadBarViz");
static_assert(offsetof(TYVCHUD_SetLoadBarViz, bIsViz) == 0x000000, "Member 'TYVCHUD_SetLoadBarViz::bIsViz' has a wrong offset!");

// Function ThankYouVeryCool.TYVCHUD.SetupForTime
// 0x0018 (0x0018 - 0x0000)
struct TYVCHUD_SetupForTime final
{
public:
	class FString                                 Time;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewTrophy;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewBestTime;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   TropyToShow;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCHUD_SetupForTime) == 0x000008, "Wrong alignment on TYVCHUD_SetupForTime");
static_assert(sizeof(TYVCHUD_SetupForTime) == 0x000018, "Wrong size on TYVCHUD_SetupForTime");
static_assert(offsetof(TYVCHUD_SetupForTime, Time) == 0x000000, "Member 'TYVCHUD_SetupForTime::Time' has a wrong offset!");
static_assert(offsetof(TYVCHUD_SetupForTime, bNewTrophy) == 0x000010, "Member 'TYVCHUD_SetupForTime::bNewTrophy' has a wrong offset!");
static_assert(offsetof(TYVCHUD_SetupForTime, bNewBestTime) == 0x000011, "Member 'TYVCHUD_SetupForTime::bNewBestTime' has a wrong offset!");
static_assert(offsetof(TYVCHUD_SetupForTime, TropyToShow) == 0x000012, "Member 'TYVCHUD_SetupForTime::TropyToShow' has a wrong offset!");

// Function ThankYouVeryCool.TYVCHUD.ShowFinishedScreenforChapter
// 0x0018 (0x0018 - 0x0000)
struct TYVCHUD_ShowFinishedScreenforChapter final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNext;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCHUD_ShowFinishedScreenforChapter) == 0x000008, "Wrong alignment on TYVCHUD_ShowFinishedScreenforChapter");
static_assert(sizeof(TYVCHUD_ShowFinishedScreenforChapter) == 0x000018, "Wrong size on TYVCHUD_ShowFinishedScreenforChapter");
static_assert(offsetof(TYVCHUD_ShowFinishedScreenforChapter, Title) == 0x000000, "Member 'TYVCHUD_ShowFinishedScreenforChapter::Title' has a wrong offset!");
static_assert(offsetof(TYVCHUD_ShowFinishedScreenforChapter, bShowNext) == 0x000010, "Member 'TYVCHUD_ShowFinishedScreenforChapter::bShowNext' has a wrong offset!");

// Function ThankYouVeryCool.TYVCHUD.UpdateTaskDisplay
// 0x0004 (0x0004 - 0x0000)
struct TYVCHUD_UpdateTaskDisplay final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCHUD_UpdateTaskDisplay) == 0x000004, "Wrong alignment on TYVCHUD_UpdateTaskDisplay");
static_assert(sizeof(TYVCHUD_UpdateTaskDisplay) == 0x000004, "Wrong size on TYVCHUD_UpdateTaskDisplay");
static_assert(offsetof(TYVCHUD_UpdateTaskDisplay, Percentage) == 0x000000, "Member 'TYVCHUD_UpdateTaskDisplay::Percentage' has a wrong offset!");

// Function ThankYouVeryCool.TYVCActor.OnImpact
// 0x0090 (0x0090 - 0x0000)
struct TYVCActor_OnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Joules;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImpactType                                   ImpactType;                                        // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x008D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCActor_OnImpact) == 0x000004, "Wrong alignment on TYVCActor_OnImpact");
static_assert(sizeof(TYVCActor_OnImpact) == 0x000090, "Wrong size on TYVCActor_OnImpact");
static_assert(offsetof(TYVCActor_OnImpact, HitResult) == 0x000000, "Member 'TYVCActor_OnImpact::HitResult' has a wrong offset!");
static_assert(offsetof(TYVCActor_OnImpact, Joules) == 0x000088, "Member 'TYVCActor_OnImpact::Joules' has a wrong offset!");
static_assert(offsetof(TYVCActor_OnImpact, ImpactType) == 0x00008C, "Member 'TYVCActor_OnImpact::ImpactType' has a wrong offset!");
static_assert(offsetof(TYVCActor_OnImpact, ReturnValue) == 0x00008D, "Member 'TYVCActor_OnImpact::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCLight.CreateProbeLight
// 0x0008 (0x0008 - 0x0000)
struct TYVCLight_CreateProbeLight final
{
public:
	class ATYVCProbeLight*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCLight_CreateProbeLight) == 0x000008, "Wrong alignment on TYVCLight_CreateProbeLight");
static_assert(sizeof(TYVCLight_CreateProbeLight) == 0x000008, "Wrong size on TYVCLight_CreateProbeLight");
static_assert(offsetof(TYVCLight_CreateProbeLight, ReturnValue) == 0x000000, "Member 'TYVCLight_CreateProbeLight::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCLight.UpdateFlicker
// 0x0004 (0x0004 - 0x0000)
struct TYVCLight_UpdateFlicker final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCLight_UpdateFlicker) == 0x000004, "Wrong alignment on TYVCLight_UpdateFlicker");
static_assert(sizeof(TYVCLight_UpdateFlicker) == 0x000004, "Wrong size on TYVCLight_UpdateFlicker");
static_assert(offsetof(TYVCLight_UpdateFlicker, DeltaTime) == 0x000000, "Member 'TYVCLight_UpdateFlicker::DeltaTime' has a wrong offset!");

// Function ThankYouVeryCool.RechargeStation.GetRandomColor
// 0x0010 (0x0010 - 0x0000)
struct RechargeStation_GetRandomColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RechargeStation_GetRandomColor) == 0x000004, "Wrong alignment on RechargeStation_GetRandomColor");
static_assert(sizeof(RechargeStation_GetRandomColor) == 0x000010, "Wrong size on RechargeStation_GetRandomColor");
static_assert(offsetof(RechargeStation_GetRandomColor, ReturnValue) == 0x000000, "Member 'RechargeStation_GetRandomColor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RechargeStation.OnEditorModeChange
// 0x0001 (0x0001 - 0x0000)
struct RechargeStation_OnEditorModeChange final
{
public:
	EEditMode                                     NewEditMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RechargeStation_OnEditorModeChange) == 0x000001, "Wrong alignment on RechargeStation_OnEditorModeChange");
static_assert(sizeof(RechargeStation_OnEditorModeChange) == 0x000001, "Wrong size on RechargeStation_OnEditorModeChange");
static_assert(offsetof(RechargeStation_OnEditorModeChange, NewEditMode) == 0x000000, "Member 'RechargeStation_OnEditorModeChange::NewEditMode' has a wrong offset!");

// Function ThankYouVeryCool.ArcadeLevelAsset.GetLevelSave
// 0x0008 (0x0008 - 0x0000)
struct ArcadeLevelAsset_GetLevelSave final
{
public:
	class ULevelEditorSave*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeLevelAsset_GetLevelSave) == 0x000008, "Wrong alignment on ArcadeLevelAsset_GetLevelSave");
static_assert(sizeof(ArcadeLevelAsset_GetLevelSave) == 0x000008, "Wrong size on ArcadeLevelAsset_GetLevelSave");
static_assert(offsetof(ArcadeLevelAsset_GetLevelSave, ReturnValue) == 0x000000, "Member 'ArcadeLevelAsset_GetLevelSave::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArcadeLevelAsset.GetPreviewImage
// 0x0008 (0x0008 - 0x0000)
struct ArcadeLevelAsset_GetPreviewImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeLevelAsset_GetPreviewImage) == 0x000008, "Wrong alignment on ArcadeLevelAsset_GetPreviewImage");
static_assert(sizeof(ArcadeLevelAsset_GetPreviewImage) == 0x000008, "Wrong size on ArcadeLevelAsset_GetPreviewImage");
static_assert(offsetof(ArcadeLevelAsset_GetPreviewImage, ReturnValue) == 0x000000, "Member 'ArcadeLevelAsset_GetPreviewImage::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArcadeLevelAsset.GetShouldFetchImgFromDisc
// 0x0001 (0x0001 - 0x0000)
struct ArcadeLevelAsset_GetShouldFetchImgFromDisc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArcadeLevelAsset_GetShouldFetchImgFromDisc) == 0x000001, "Wrong alignment on ArcadeLevelAsset_GetShouldFetchImgFromDisc");
static_assert(sizeof(ArcadeLevelAsset_GetShouldFetchImgFromDisc) == 0x000001, "Wrong size on ArcadeLevelAsset_GetShouldFetchImgFromDisc");
static_assert(offsetof(ArcadeLevelAsset_GetShouldFetchImgFromDisc, ReturnValue) == 0x000000, "Member 'ArcadeLevelAsset_GetShouldFetchImgFromDisc::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.DoCinematicOvercharge
// 0x0018 (0x0018 - 0x0000)
struct ArmCannon_DoCinematicOvercharge final
{
public:
	TArray<struct FTransform>                     ChargePoints;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForWorkshopSwap;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArmCannon_DoCinematicOvercharge) == 0x000008, "Wrong alignment on ArmCannon_DoCinematicOvercharge");
static_assert(sizeof(ArmCannon_DoCinematicOvercharge) == 0x000018, "Wrong size on ArmCannon_DoCinematicOvercharge");
static_assert(offsetof(ArmCannon_DoCinematicOvercharge, ChargePoints) == 0x000000, "Member 'ArmCannon_DoCinematicOvercharge::ChargePoints' has a wrong offset!");
static_assert(offsetof(ArmCannon_DoCinematicOvercharge, bForWorkshopSwap) == 0x000010, "Member 'ArmCannon_DoCinematicOvercharge::bForWorkshopSwap' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.DoPunchCharge
// 0x000C (0x000C - 0x0000)
struct ArmCannon_DoPunchCharge final
{
public:
	struct FVector                                WorldDir;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_DoPunchCharge) == 0x000004, "Wrong alignment on ArmCannon_DoPunchCharge");
static_assert(sizeof(ArmCannon_DoPunchCharge) == 0x00000C, "Wrong size on ArmCannon_DoPunchCharge");
static_assert(offsetof(ArmCannon_DoPunchCharge, WorldDir) == 0x000000, "Member 'ArmCannon_DoPunchCharge::WorldDir' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.FireWidePulseProjectile
// 0x0050 (0x0050 - 0x0000)
struct ArmCannon_FireWidePulseProjectile final
{
public:
	struct FTransform                             StartingTransform;                                 // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Chargetime;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagmaUV;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMega;                                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALuosProjectile*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArmCannon_FireWidePulseProjectile) == 0x000010, "Wrong alignment on ArmCannon_FireWidePulseProjectile");
static_assert(sizeof(ArmCannon_FireWidePulseProjectile) == 0x000050, "Wrong size on ArmCannon_FireWidePulseProjectile");
static_assert(offsetof(ArmCannon_FireWidePulseProjectile, StartingTransform) == 0x000000, "Member 'ArmCannon_FireWidePulseProjectile::StartingTransform' has a wrong offset!");
static_assert(offsetof(ArmCannon_FireWidePulseProjectile, Chargetime) == 0x000030, "Member 'ArmCannon_FireWidePulseProjectile::Chargetime' has a wrong offset!");
static_assert(offsetof(ArmCannon_FireWidePulseProjectile, MagmaUV) == 0x000034, "Member 'ArmCannon_FireWidePulseProjectile::MagmaUV' has a wrong offset!");
static_assert(offsetof(ArmCannon_FireWidePulseProjectile, bMega) == 0x000038, "Member 'ArmCannon_FireWidePulseProjectile::bMega' has a wrong offset!");
static_assert(offsetof(ArmCannon_FireWidePulseProjectile, ReturnValue) == 0x000040, "Member 'ArmCannon_FireWidePulseProjectile::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.LoadSkin
// 0x0008 (0x0008 - 0x0000)
struct ArmCannon_LoadSkin final
{
public:
	class FName                                   InJacket;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_LoadSkin) == 0x000004, "Wrong alignment on ArmCannon_LoadSkin");
static_assert(sizeof(ArmCannon_LoadSkin) == 0x000008, "Wrong size on ArmCannon_LoadSkin");
static_assert(offsetof(ArmCannon_LoadSkin, InJacket) == 0x000000, "Member 'ArmCannon_LoadSkin::InJacket' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.OnFoamHit
// 0x00A8 (0x00A8 - 0x0000)
struct ArmCannon_OnFoamHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArmCannon_OnFoamHit) == 0x000008, "Wrong alignment on ArmCannon_OnFoamHit");
static_assert(sizeof(ArmCannon_OnFoamHit) == 0x0000A8, "Wrong size on ArmCannon_OnFoamHit");
static_assert(offsetof(ArmCannon_OnFoamHit, SelfActor) == 0x000000, "Member 'ArmCannon_OnFoamHit::SelfActor' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnFoamHit, OtherActor) == 0x000008, "Member 'ArmCannon_OnFoamHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnFoamHit, NormalImpulse) == 0x000010, "Member 'ArmCannon_OnFoamHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnFoamHit, Hit) == 0x00001C, "Member 'ArmCannon_OnFoamHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.OnThrownHit
// 0x00B0 (0x00B0 - 0x0000)
struct ArmCannon_OnThrownHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArmCannon_OnThrownHit) == 0x000008, "Wrong alignment on ArmCannon_OnThrownHit");
static_assert(sizeof(ArmCannon_OnThrownHit) == 0x0000B0, "Wrong size on ArmCannon_OnThrownHit");
static_assert(offsetof(ArmCannon_OnThrownHit, HitComponent) == 0x000000, "Member 'ArmCannon_OnThrownHit::HitComponent' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnThrownHit, OtherActor) == 0x000008, "Member 'ArmCannon_OnThrownHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnThrownHit, OtherComp) == 0x000010, "Member 'ArmCannon_OnThrownHit::OtherComp' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnThrownHit, NormalImpulse) == 0x000018, "Member 'ArmCannon_OnThrownHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnThrownHit, Hit) == 0x000024, "Member 'ArmCannon_OnThrownHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.OnWidePulseHit
// 0x00E0 (0x00E0 - 0x0000)
struct ArmCannon_OnWidePulseHit final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 OnActor;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitVelocity;                                       // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0044(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Chargetime;                                        // 0x00CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagmaUV;                                           // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        HitComp;                                           // 0x00D8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_OnWidePulseHit) == 0x000010, "Wrong alignment on ArmCannon_OnWidePulseHit");
static_assert(sizeof(ArmCannon_OnWidePulseHit) == 0x0000E0, "Wrong size on ArmCannon_OnWidePulseHit");
static_assert(offsetof(ArmCannon_OnWidePulseHit, Transform) == 0x000000, "Member 'ArmCannon_OnWidePulseHit::Transform' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, OnActor) == 0x000030, "Member 'ArmCannon_OnWidePulseHit::OnActor' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, HitVelocity) == 0x000038, "Member 'ArmCannon_OnWidePulseHit::HitVelocity' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, HitResult) == 0x000044, "Member 'ArmCannon_OnWidePulseHit::HitResult' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, Chargetime) == 0x0000CC, "Member 'ArmCannon_OnWidePulseHit::Chargetime' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, MagmaUV) == 0x0000D0, "Member 'ArmCannon_OnWidePulseHit::MagmaUV' has a wrong offset!");
static_assert(offsetof(ArmCannon_OnWidePulseHit, HitComp) == 0x0000D8, "Member 'ArmCannon_OnWidePulseHit::HitComp' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.QueryRadialForMode
// 0x0001 (0x0001 - 0x0000)
struct ArmCannon_QueryRadialForMode final
{
public:
	ECannonMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_QueryRadialForMode) == 0x000001, "Wrong alignment on ArmCannon_QueryRadialForMode");
static_assert(sizeof(ArmCannon_QueryRadialForMode) == 0x000001, "Wrong size on ArmCannon_QueryRadialForMode");
static_assert(offsetof(ArmCannon_QueryRadialForMode, ReturnValue) == 0x000000, "Member 'ArmCannon_QueryRadialForMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.RechargeFromBackpack
// 0x0008 (0x0008 - 0x0000)
struct ArmCannon_RechargeFromBackpack final
{
public:
	class UBackpack*                              BackpackComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_RechargeFromBackpack) == 0x000008, "Wrong alignment on ArmCannon_RechargeFromBackpack");
static_assert(sizeof(ArmCannon_RechargeFromBackpack) == 0x000008, "Wrong size on ArmCannon_RechargeFromBackpack");
static_assert(offsetof(ArmCannon_RechargeFromBackpack, BackpackComp) == 0x000000, "Member 'ArmCannon_RechargeFromBackpack::BackpackComp' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.RechargeFromStation
// 0x0008 (0x0008 - 0x0000)
struct ArmCannon_RechargeFromStation final
{
public:
	class AActor*                                 Station;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_RechargeFromStation) == 0x000008, "Wrong alignment on ArmCannon_RechargeFromStation");
static_assert(sizeof(ArmCannon_RechargeFromStation) == 0x000008, "Wrong size on ArmCannon_RechargeFromStation");
static_assert(offsetof(ArmCannon_RechargeFromStation, Station) == 0x000000, "Member 'ArmCannon_RechargeFromStation::Station' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.SetArmCannonRaise
// 0x0001 (0x0001 - 0x0000)
struct ArmCannon_SetArmCannonRaise final
{
public:
	bool                                          bShouldRaise;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_SetArmCannonRaise) == 0x000001, "Wrong alignment on ArmCannon_SetArmCannonRaise");
static_assert(sizeof(ArmCannon_SetArmCannonRaise) == 0x000001, "Wrong size on ArmCannon_SetArmCannonRaise");
static_assert(offsetof(ArmCannon_SetArmCannonRaise, bShouldRaise) == 0x000000, "Member 'ArmCannon_SetArmCannonRaise::bShouldRaise' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.SetBeamEndPoint
// 0x000C (0x000C - 0x0000)
struct ArmCannon_SetBeamEndPoint final
{
public:
	struct FVector                                InEnd;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_SetBeamEndPoint) == 0x000004, "Wrong alignment on ArmCannon_SetBeamEndPoint");
static_assert(sizeof(ArmCannon_SetBeamEndPoint) == 0x00000C, "Wrong size on ArmCannon_SetBeamEndPoint");
static_assert(offsetof(ArmCannon_SetBeamEndPoint, InEnd) == 0x000000, "Member 'ArmCannon_SetBeamEndPoint::InEnd' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.SetIdleSeqTo
// 0x0008 (0x0008 - 0x0000)
struct ArmCannon_SetIdleSeqTo final
{
public:
	class UAnimSequence*                          IdleSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_SetIdleSeqTo) == 0x000008, "Wrong alignment on ArmCannon_SetIdleSeqTo");
static_assert(sizeof(ArmCannon_SetIdleSeqTo) == 0x000008, "Wrong size on ArmCannon_SetIdleSeqTo");
static_assert(offsetof(ArmCannon_SetIdleSeqTo, IdleSeq) == 0x000000, "Member 'ArmCannon_SetIdleSeqTo::IdleSeq' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.SetModeTo
// 0x0001 (0x0001 - 0x0000)
struct ArmCannon_SetModeTo final
{
public:
	ECannonMode                                   InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_SetModeTo) == 0x000001, "Wrong alignment on ArmCannon_SetModeTo");
static_assert(sizeof(ArmCannon_SetModeTo) == 0x000001, "Wrong size on ArmCannon_SetModeTo");
static_assert(offsetof(ArmCannon_SetModeTo, InMode) == 0x000000, "Member 'ArmCannon_SetModeTo::InMode' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.SetVisualsForMode
// 0x0001 (0x0001 - 0x0000)
struct ArmCannon_SetVisualsForMode final
{
public:
	ECannonMode                                   ForMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_SetVisualsForMode) == 0x000001, "Wrong alignment on ArmCannon_SetVisualsForMode");
static_assert(sizeof(ArmCannon_SetVisualsForMode) == 0x000001, "Wrong size on ArmCannon_SetVisualsForMode");
static_assert(offsetof(ArmCannon_SetVisualsForMode, ForMode) == 0x000000, "Member 'ArmCannon_SetVisualsForMode::ForMode' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.ShowChargePercent
// 0x0004 (0x0004 - 0x0000)
struct ArmCannon_ShowChargePercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_ShowChargePercent) == 0x000004, "Wrong alignment on ArmCannon_ShowChargePercent");
static_assert(sizeof(ArmCannon_ShowChargePercent) == 0x000004, "Wrong size on ArmCannon_ShowChargePercent");
static_assert(offsetof(ArmCannon_ShowChargePercent, InPercent) == 0x000000, "Member 'ArmCannon_ShowChargePercent::InPercent' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.ShowOvercharge
// 0x0002 (0x0002 - 0x0000)
struct ArmCannon_ShowOvercharge final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_ShowOvercharge) == 0x000001, "Wrong alignment on ArmCannon_ShowOvercharge");
static_assert(sizeof(ArmCannon_ShowOvercharge) == 0x000002, "Wrong size on ArmCannon_ShowOvercharge");
static_assert(offsetof(ArmCannon_ShowOvercharge, bShow) == 0x000000, "Member 'ArmCannon_ShowOvercharge::bShow' has a wrong offset!");
static_assert(offsetof(ArmCannon_ShowOvercharge, bInstant) == 0x000001, "Member 'ArmCannon_ShowOvercharge::bInstant' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannon.TickCharge
// 0x0004 (0x0004 - 0x0000)
struct ArmCannon_TickCharge final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannon_TickCharge) == 0x000004, "Wrong alignment on ArmCannon_TickCharge");
static_assert(sizeof(ArmCannon_TickCharge) == 0x000004, "Wrong size on ArmCannon_TickCharge");
static_assert(offsetof(ArmCannon_TickCharge, Value) == 0x000000, "Member 'ArmCannon_TickCharge::Value' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannonModeWidget.GetSelectedMode
// 0x0001 (0x0001 - 0x0000)
struct ArmCannonModeWidget_GetSelectedMode final
{
public:
	ECannonMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannonModeWidget_GetSelectedMode) == 0x000001, "Wrong alignment on ArmCannonModeWidget_GetSelectedMode");
static_assert(sizeof(ArmCannonModeWidget_GetSelectedMode) == 0x000001, "Wrong size on ArmCannonModeWidget_GetSelectedMode");
static_assert(offsetof(ArmCannonModeWidget_GetSelectedMode, ReturnValue) == 0x000000, "Member 'ArmCannonModeWidget_GetSelectedMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ArmCannonModeWidget.SetupModes
// 0x0010 (0x0010 - 0x0000)
struct ArmCannonModeWidget_SetupModes final
{
public:
	TArray<ECannonMode>                           Modes;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmCannonModeWidget_SetupModes) == 0x000008, "Wrong alignment on ArmCannonModeWidget_SetupModes");
static_assert(sizeof(ArmCannonModeWidget_SetupModes) == 0x000010, "Wrong size on ArmCannonModeWidget_SetupModes");
static_assert(offsetof(ArmCannonModeWidget_SetupModes, Modes) == 0x000000, "Member 'ArmCannonModeWidget_SetupModes::Modes' has a wrong offset!");

// Function ThankYouVeryCool.Backpack.TickMuzzleFlash
// 0x0004 (0x0004 - 0x0000)
struct Backpack_TickMuzzleFlash final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Backpack_TickMuzzleFlash) == 0x000004, "Wrong alignment on Backpack_TickMuzzleFlash");
static_assert(sizeof(Backpack_TickMuzzleFlash) == 0x000004, "Wrong size on Backpack_TickMuzzleFlash");
static_assert(offsetof(Backpack_TickMuzzleFlash, Value) == 0x000000, "Member 'Backpack_TickMuzzleFlash::Value' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.AddBoxToGenerator
// 0x0020 (0x0020 - 0x0000)
struct VoxelBuilder2_AddBoxToGenerator final
{
public:
	struct FVector                                BoxDims;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHollow;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellSize;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterial                                Mat;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RGB;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoot;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSub;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_AddBoxToGenerator) == 0x000004, "Wrong alignment on VoxelBuilder2_AddBoxToGenerator");
static_assert(sizeof(VoxelBuilder2_AddBoxToGenerator) == 0x000020, "Wrong size on VoxelBuilder2_AddBoxToGenerator");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, BoxDims) == 0x000000, "Member 'VoxelBuilder2_AddBoxToGenerator::BoxDims' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, bHollow) == 0x00000C, "Member 'VoxelBuilder2_AddBoxToGenerator::bHollow' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, ShellSize) == 0x000010, "Member 'VoxelBuilder2_AddBoxToGenerator::ShellSize' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, Mat) == 0x000014, "Member 'VoxelBuilder2_AddBoxToGenerator::Mat' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, RGB) == 0x000018, "Member 'VoxelBuilder2_AddBoxToGenerator::RGB' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, bIsRoot) == 0x00001C, "Member 'VoxelBuilder2_AddBoxToGenerator::bIsRoot' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddBoxToGenerator, bIsSub) == 0x00001D, "Member 'VoxelBuilder2_AddBoxToGenerator::bIsSub' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.AddHexPrismGenerator
// 0x001C (0x001C - 0x0000)
struct VoxelBuilder2_AddHexPrismGenerator final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHollow;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellSize;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterial                                Mat;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RGB;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoot;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_AddHexPrismGenerator) == 0x000004, "Wrong alignment on VoxelBuilder2_AddHexPrismGenerator");
static_assert(sizeof(VoxelBuilder2_AddHexPrismGenerator) == 0x00001C, "Wrong size on VoxelBuilder2_AddHexPrismGenerator");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, Radius) == 0x000000, "Member 'VoxelBuilder2_AddHexPrismGenerator::Radius' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, Thickness) == 0x000004, "Member 'VoxelBuilder2_AddHexPrismGenerator::Thickness' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, bHollow) == 0x000008, "Member 'VoxelBuilder2_AddHexPrismGenerator::bHollow' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, ShellSize) == 0x00000C, "Member 'VoxelBuilder2_AddHexPrismGenerator::ShellSize' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, Mat) == 0x000010, "Member 'VoxelBuilder2_AddHexPrismGenerator::Mat' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, RGB) == 0x000014, "Member 'VoxelBuilder2_AddHexPrismGenerator::RGB' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddHexPrismGenerator, bIsRoot) == 0x000018, "Member 'VoxelBuilder2_AddHexPrismGenerator::bIsRoot' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.AddOctohedronToGenerator
// 0x0018 (0x0018 - 0x0000)
struct VoxelBuilder2_AddOctohedronToGenerator final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHollow;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellSize;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterial                                Mat;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RGB;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoot;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_AddOctohedronToGenerator) == 0x000004, "Wrong alignment on VoxelBuilder2_AddOctohedronToGenerator");
static_assert(sizeof(VoxelBuilder2_AddOctohedronToGenerator) == 0x000018, "Wrong size on VoxelBuilder2_AddOctohedronToGenerator");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, Radius) == 0x000000, "Member 'VoxelBuilder2_AddOctohedronToGenerator::Radius' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, bHollow) == 0x000004, "Member 'VoxelBuilder2_AddOctohedronToGenerator::bHollow' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, ShellSize) == 0x000008, "Member 'VoxelBuilder2_AddOctohedronToGenerator::ShellSize' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, Mat) == 0x00000C, "Member 'VoxelBuilder2_AddOctohedronToGenerator::Mat' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, RGB) == 0x000010, "Member 'VoxelBuilder2_AddOctohedronToGenerator::RGB' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddOctohedronToGenerator, bIsRoot) == 0x000014, "Member 'VoxelBuilder2_AddOctohedronToGenerator::bIsRoot' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.AddRoundedCylinderGenerator
// 0x0020 (0x0020 - 0x0000)
struct VoxelBuilder2_AddRoundedCylinderGenerator final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothness;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHollow;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellSize;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterial                                Mat;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RGB;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoot;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_AddRoundedCylinderGenerator) == 0x000004, "Wrong alignment on VoxelBuilder2_AddRoundedCylinderGenerator");
static_assert(sizeof(VoxelBuilder2_AddRoundedCylinderGenerator) == 0x000020, "Wrong size on VoxelBuilder2_AddRoundedCylinderGenerator");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, Radius) == 0x000000, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::Radius' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, Smoothness) == 0x000004, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::Smoothness' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, Height) == 0x000008, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::Height' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, bHollow) == 0x00000C, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::bHollow' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, ShellSize) == 0x000010, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::ShellSize' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, Mat) == 0x000014, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::Mat' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, RGB) == 0x000018, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::RGB' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddRoundedCylinderGenerator, bIsRoot) == 0x00001C, "Member 'VoxelBuilder2_AddRoundedCylinderGenerator::bIsRoot' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.AddTorusGenerator
// 0x001C (0x001C - 0x0000)
struct VoxelBuilder2_AddTorusGenerator final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHollow;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellSize;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterial                                Mat;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RGB;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoot;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_AddTorusGenerator) == 0x000004, "Wrong alignment on VoxelBuilder2_AddTorusGenerator");
static_assert(sizeof(VoxelBuilder2_AddTorusGenerator) == 0x00001C, "Wrong size on VoxelBuilder2_AddTorusGenerator");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, Radius) == 0x000000, "Member 'VoxelBuilder2_AddTorusGenerator::Radius' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, Thickness) == 0x000004, "Member 'VoxelBuilder2_AddTorusGenerator::Thickness' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, bHollow) == 0x000008, "Member 'VoxelBuilder2_AddTorusGenerator::bHollow' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, ShellSize) == 0x00000C, "Member 'VoxelBuilder2_AddTorusGenerator::ShellSize' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, Mat) == 0x000010, "Member 'VoxelBuilder2_AddTorusGenerator::Mat' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, RGB) == 0x000014, "Member 'VoxelBuilder2_AddTorusGenerator::RGB' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_AddTorusGenerator, bIsRoot) == 0x000018, "Member 'VoxelBuilder2_AddTorusGenerator::bIsRoot' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.Build
// 0x0003 (0x0003 - 0x0000)
struct VoxelBuilder2_Build final
{
public:
	bool                                          bStampToOuterWorlds;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSubtractive;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtractFromAll;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_Build) == 0x000001, "Wrong alignment on VoxelBuilder2_Build");
static_assert(sizeof(VoxelBuilder2_Build) == 0x000003, "Wrong size on VoxelBuilder2_Build");
static_assert(offsetof(VoxelBuilder2_Build, bStampToOuterWorlds) == 0x000000, "Member 'VoxelBuilder2_Build::bStampToOuterWorlds' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_Build, bForceSubtractive) == 0x000001, "Member 'VoxelBuilder2_Build::bForceSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_Build, bSubtractFromAll) == 0x000002, "Member 'VoxelBuilder2_Build::bSubtractFromAll' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.Build_Imp
// 0x0003 (0x0003 - 0x0000)
struct VoxelBuilder2_Build_Imp final
{
public:
	bool                                          bStampToOuterWorlds;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSubtractive;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_Build_Imp) == 0x000001, "Wrong alignment on VoxelBuilder2_Build_Imp");
static_assert(sizeof(VoxelBuilder2_Build_Imp) == 0x000003, "Wrong size on VoxelBuilder2_Build_Imp");
static_assert(offsetof(VoxelBuilder2_Build_Imp, bStampToOuterWorlds) == 0x000000, "Member 'VoxelBuilder2_Build_Imp::bStampToOuterWorlds' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_Build_Imp, bForceSubtractive) == 0x000001, "Member 'VoxelBuilder2_Build_Imp::bForceSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_Build_Imp, ReturnValue) == 0x000002, "Member 'VoxelBuilder2_Build_Imp::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.GetOuterWorldsAffected
// 0x0010 (0x0010 - 0x0000)
struct VoxelBuilder2_GetOuterWorldsAffected final
{
public:
	TArray<class AVoxelWorld*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_GetOuterWorldsAffected) == 0x000008, "Wrong alignment on VoxelBuilder2_GetOuterWorldsAffected");
static_assert(sizeof(VoxelBuilder2_GetOuterWorldsAffected) == 0x000010, "Wrong size on VoxelBuilder2_GetOuterWorldsAffected");
static_assert(offsetof(VoxelBuilder2_GetOuterWorldsAffected, ReturnValue) == 0x000000, "Member 'VoxelBuilder2_GetOuterWorldsAffected::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.GetTurtleWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct VoxelBuilder2_GetTurtleWorldTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_GetTurtleWorldTransform) == 0x000010, "Wrong alignment on VoxelBuilder2_GetTurtleWorldTransform");
static_assert(sizeof(VoxelBuilder2_GetTurtleWorldTransform) == 0x000030, "Wrong size on VoxelBuilder2_GetTurtleWorldTransform");
static_assert(offsetof(VoxelBuilder2_GetTurtleWorldTransform, ReturnValue) == 0x000000, "Member 'VoxelBuilder2_GetTurtleWorldTransform::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.MoveTurtle
// 0x0008 (0x0008 - 0x0000)
struct VoxelBuilder2_MoveTurtle final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinusOne;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_MoveTurtle) == 0x000004, "Wrong alignment on VoxelBuilder2_MoveTurtle");
static_assert(sizeof(VoxelBuilder2_MoveTurtle) == 0x000008, "Wrong size on VoxelBuilder2_MoveTurtle");
static_assert(offsetof(VoxelBuilder2_MoveTurtle, Units) == 0x000000, "Member 'VoxelBuilder2_MoveTurtle::Units' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_MoveTurtle, bMinusOne) == 0x000004, "Member 'VoxelBuilder2_MoveTurtle::bMinusOne' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.RotateTurtle
// 0x000C (0x000C - 0x0000)
struct VoxelBuilder2_RotateTurtle final
{
public:
	struct FRotator                               RotateDelta;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_RotateTurtle) == 0x000004, "Wrong alignment on VoxelBuilder2_RotateTurtle");
static_assert(sizeof(VoxelBuilder2_RotateTurtle) == 0x00000C, "Wrong size on VoxelBuilder2_RotateTurtle");
static_assert(offsetof(VoxelBuilder2_RotateTurtle, RotateDelta) == 0x000000, "Member 'VoxelBuilder2_RotateTurtle::RotateDelta' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SetTurtleWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct VoxelBuilder2_SetTurtleWorldTransform final
{
public:
	struct FTransform                             ToSet;                                             // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_SetTurtleWorldTransform) == 0x000010, "Wrong alignment on VoxelBuilder2_SetTurtleWorldTransform");
static_assert(sizeof(VoxelBuilder2_SetTurtleWorldTransform) == 0x000030, "Wrong size on VoxelBuilder2_SetTurtleWorldTransform");
static_assert(offsetof(VoxelBuilder2_SetTurtleWorldTransform, ToSet) == 0x000000, "Member 'VoxelBuilder2_SetTurtleWorldTransform::ToSet' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SlideTurtleRight
// 0x0008 (0x0008 - 0x0000)
struct VoxelBuilder2_SlideTurtleRight final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinusOne;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_SlideTurtleRight) == 0x000004, "Wrong alignment on VoxelBuilder2_SlideTurtleRight");
static_assert(sizeof(VoxelBuilder2_SlideTurtleRight) == 0x000008, "Wrong size on VoxelBuilder2_SlideTurtleRight");
static_assert(offsetof(VoxelBuilder2_SlideTurtleRight, Units) == 0x000000, "Member 'VoxelBuilder2_SlideTurtleRight::Units' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SlideTurtleRight, bMinusOne) == 0x000004, "Member 'VoxelBuilder2_SlideTurtleRight::bMinusOne' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SlideTurtleUp
// 0x0008 (0x0008 - 0x0000)
struct VoxelBuilder2_SlideTurtleUp final
{
public:
	int32                                         Units;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinusOne;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_SlideTurtleUp) == 0x000004, "Wrong alignment on VoxelBuilder2_SlideTurtleUp");
static_assert(sizeof(VoxelBuilder2_SlideTurtleUp) == 0x000008, "Wrong size on VoxelBuilder2_SlideTurtleUp");
static_assert(offsetof(VoxelBuilder2_SlideTurtleUp, Units) == 0x000000, "Member 'VoxelBuilder2_SlideTurtleUp::Units' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SlideTurtleUp, bMinusOne) == 0x000004, "Member 'VoxelBuilder2_SlideTurtleUp::bMinusOne' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SpawnActorAtTurtle
// 0x0020 (0x0020 - 0x0000)
struct VoxelBuilder2_SpawnActorAtTurtle final
{
public:
	TSubclassOf<class AActor>                     ToSpawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_SpawnActorAtTurtle) == 0x000008, "Wrong alignment on VoxelBuilder2_SpawnActorAtTurtle");
static_assert(sizeof(VoxelBuilder2_SpawnActorAtTurtle) == 0x000020, "Wrong size on VoxelBuilder2_SpawnActorAtTurtle");
static_assert(offsetof(VoxelBuilder2_SpawnActorAtTurtle, ToSpawn) == 0x000000, "Member 'VoxelBuilder2_SpawnActorAtTurtle::ToSpawn' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorAtTurtle, SpawnedActor) == 0x000008, "Member 'VoxelBuilder2_SpawnActorAtTurtle::SpawnedActor' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorAtTurtle, Scale) == 0x000010, "Member 'VoxelBuilder2_SpawnActorAtTurtle::Scale' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SpawnActorsInGrid
// 0x0060 (0x0060 - 0x0000)
struct VoxelBuilder2_SpawnActorsInGrid final
{
public:
	int32                                         XDistance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YDistance;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XCount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OffsetSpawnLocation;                               // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationFromTurtleStart;                           // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnFirstAtCurrentLocation;                       // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrimFromMiddleX;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrimFromMiddleY;                                   // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToTrimFromEdgeX;                                   // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToTrimFromEdgeY;                                   // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_SpawnActorsInGrid) == 0x000008, "Wrong alignment on VoxelBuilder2_SpawnActorsInGrid");
static_assert(sizeof(VoxelBuilder2_SpawnActorsInGrid) == 0x000060, "Wrong size on VoxelBuilder2_SpawnActorsInGrid");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, XDistance) == 0x000000, "Member 'VoxelBuilder2_SpawnActorsInGrid::XDistance' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, YDistance) == 0x000004, "Member 'VoxelBuilder2_SpawnActorsInGrid::YDistance' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, XCount) == 0x000008, "Member 'VoxelBuilder2_SpawnActorsInGrid::XCount' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, YCount) == 0x00000C, "Member 'VoxelBuilder2_SpawnActorsInGrid::YCount' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, ActorClass) == 0x000010, "Member 'VoxelBuilder2_SpawnActorsInGrid::ActorClass' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, OffsetSpawnLocation) == 0x000018, "Member 'VoxelBuilder2_SpawnActorsInGrid::OffsetSpawnLocation' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, RotationFromTurtleStart) == 0x000024, "Member 'VoxelBuilder2_SpawnActorsInGrid::RotationFromTurtleStart' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, OutActors) == 0x000030, "Member 'VoxelBuilder2_SpawnActorsInGrid::OutActors' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, Scale) == 0x000040, "Member 'VoxelBuilder2_SpawnActorsInGrid::Scale' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, SpawnFirstAtCurrentLocation) == 0x00004C, "Member 'VoxelBuilder2_SpawnActorsInGrid::SpawnFirstAtCurrentLocation' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, TrimFromMiddleX) == 0x000050, "Member 'VoxelBuilder2_SpawnActorsInGrid::TrimFromMiddleX' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, TrimFromMiddleY) == 0x000054, "Member 'VoxelBuilder2_SpawnActorsInGrid::TrimFromMiddleY' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, ToTrimFromEdgeX) == 0x000058, "Member 'VoxelBuilder2_SpawnActorsInGrid::ToTrimFromEdgeX' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInGrid, ToTrimFromEdgeY) == 0x00005C, "Member 'VoxelBuilder2_SpawnActorsInGrid::ToTrimFromEdgeY' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.SpawnActorsInLine
// 0x0050 (0x0050 - 0x0000)
struct VoxelBuilder2_SpawnActorsInLine final
{
public:
	int32                                         LineDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OffsetSpawnLocation;                               // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationFromLine;                                  // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnTurtleWhenFinished;                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnFirstAtCurrentLocation;                       // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrimFromMiddle;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrimFromEdge;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_SpawnActorsInLine) == 0x000008, "Wrong alignment on VoxelBuilder2_SpawnActorsInLine");
static_assert(sizeof(VoxelBuilder2_SpawnActorsInLine) == 0x000050, "Wrong size on VoxelBuilder2_SpawnActorsInLine");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, LineDistance) == 0x000000, "Member 'VoxelBuilder2_SpawnActorsInLine::LineDistance' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, ActorCount) == 0x000004, "Member 'VoxelBuilder2_SpawnActorsInLine::ActorCount' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, ActorClass) == 0x000008, "Member 'VoxelBuilder2_SpawnActorsInLine::ActorClass' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, OffsetSpawnLocation) == 0x000010, "Member 'VoxelBuilder2_SpawnActorsInLine::OffsetSpawnLocation' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, RotationFromLine) == 0x00001C, "Member 'VoxelBuilder2_SpawnActorsInLine::RotationFromLine' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, OutActors) == 0x000028, "Member 'VoxelBuilder2_SpawnActorsInLine::OutActors' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, Scale) == 0x000038, "Member 'VoxelBuilder2_SpawnActorsInLine::Scale' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, ReturnTurtleWhenFinished) == 0x000044, "Member 'VoxelBuilder2_SpawnActorsInLine::ReturnTurtleWhenFinished' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, SpawnFirstAtCurrentLocation) == 0x000045, "Member 'VoxelBuilder2_SpawnActorsInLine::SpawnFirstAtCurrentLocation' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, TrimFromMiddle) == 0x000048, "Member 'VoxelBuilder2_SpawnActorsInLine::TrimFromMiddle' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_SpawnActorsInLine, TrimFromEdge) == 0x00004C, "Member 'VoxelBuilder2_SpawnActorsInLine::TrimFromEdge' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.StampAssets
// 0x0008 (0x0008 - 0x0000)
struct VoxelBuilder2_StampAssets final
{
public:
	int32                                         Priority_0;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToOuterWorld;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBuilder2_StampAssets) == 0x000004, "Wrong alignment on VoxelBuilder2_StampAssets");
static_assert(sizeof(VoxelBuilder2_StampAssets) == 0x000008, "Wrong size on VoxelBuilder2_StampAssets");
static_assert(offsetof(VoxelBuilder2_StampAssets, Priority_0) == 0x000000, "Member 'VoxelBuilder2_StampAssets::Priority_0' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_StampAssets, bToOuterWorld) == 0x000004, "Member 'VoxelBuilder2_StampAssets::bToOuterWorld' has a wrong offset!");
static_assert(offsetof(VoxelBuilder2_StampAssets, ReturnValue) == 0x000005, "Member 'VoxelBuilder2_StampAssets::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.VoxelBuilder2.TurnTurtleYaw
// 0x0004 (0x0004 - 0x0000)
struct VoxelBuilder2_TurnTurtleYaw final
{
public:
	int32                                         Degrees;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBuilder2_TurnTurtleYaw) == 0x000004, "Wrong alignment on VoxelBuilder2_TurnTurtleYaw");
static_assert(sizeof(VoxelBuilder2_TurnTurtleYaw) == 0x000004, "Wrong size on VoxelBuilder2_TurnTurtleYaw");
static_assert(offsetof(VoxelBuilder2_TurnTurtleYaw, Degrees) == 0x000000, "Member 'VoxelBuilder2_TurnTurtleYaw::Degrees' has a wrong offset!");

// Function ThankYouVeryCool.BloodSplatter.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct BloodSplatter_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodSplatter_OnHit) == 0x000008, "Wrong alignment on BloodSplatter_OnHit");
static_assert(sizeof(BloodSplatter_OnHit) == 0x0000B0, "Wrong size on BloodSplatter_OnHit");
static_assert(offsetof(BloodSplatter_OnHit, HitComponent) == 0x000000, "Member 'BloodSplatter_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(BloodSplatter_OnHit, OtherActor) == 0x000008, "Member 'BloodSplatter_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BloodSplatter_OnHit, OtherComponent) == 0x000010, "Member 'BloodSplatter_OnHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(BloodSplatter_OnHit, NormalImpulse) == 0x000018, "Member 'BloodSplatter_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BloodSplatter_OnHit, Hit) == 0x000024, "Member 'BloodSplatter_OnHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.SquadTask_Base.GetBB
// 0x0010 (0x0010 - 0x0000)
struct SquadTask_Base_GetBB final
{
public:
	class UBehaviorTreeComponent*                 BTComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlackboardComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadTask_Base_GetBB) == 0x000008, "Wrong alignment on SquadTask_Base_GetBB");
static_assert(sizeof(SquadTask_Base_GetBB) == 0x000010, "Wrong size on SquadTask_Base_GetBB");
static_assert(offsetof(SquadTask_Base_GetBB, BTComp) == 0x000000, "Member 'SquadTask_Base_GetBB::BTComp' has a wrong offset!");
static_assert(offsetof(SquadTask_Base_GetBB, ReturnValue) == 0x000008, "Member 'SquadTask_Base_GetBB::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.SquadTask_Base.GetSquadBT
// 0x0010 (0x0010 - 0x0000)
struct SquadTask_Base_GetSquadBT final
{
public:
	class UBehaviorTreeComponent*                 BTComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USquadBT*                               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadTask_Base_GetSquadBT) == 0x000008, "Wrong alignment on SquadTask_Base_GetSquadBT");
static_assert(sizeof(SquadTask_Base_GetSquadBT) == 0x000010, "Wrong size on SquadTask_Base_GetSquadBT");
static_assert(offsetof(SquadTask_Base_GetSquadBT, BTComp) == 0x000000, "Member 'SquadTask_Base_GetSquadBT::BTComp' has a wrong offset!");
static_assert(offsetof(SquadTask_Base_GetSquadBT, ReturnValue) == 0x000008, "Member 'SquadTask_Base_GetSquadBT::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.BTS_OperateWeapon.BurstShot
// 0x0008 (0x0008 - 0x0000)
struct BTS_OperateWeapon_BurstShot final
{
public:
	float                                         BurstLength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_OperateWeapon_BurstShot) == 0x000004, "Wrong alignment on BTS_OperateWeapon_BurstShot");
static_assert(sizeof(BTS_OperateWeapon_BurstShot) == 0x000008, "Wrong size on BTS_OperateWeapon_BurstShot");
static_assert(offsetof(BTS_OperateWeapon_BurstShot, BurstLength) == 0x000000, "Member 'BTS_OperateWeapon_BurstShot::BurstLength' has a wrong offset!");
static_assert(offsetof(BTS_OperateWeapon_BurstShot, CoolDownTime) == 0x000004, "Member 'BTS_OperateWeapon_BurstShot::CoolDownTime' has a wrong offset!");

// Function ThankYouVeryCool.BTS_OperateWeapon.ReloadComplete
// 0x0010 (0x0010 - 0x0000)
struct BTS_OperateWeapon_ReloadComplete final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTS_OperateWeapon_ReloadComplete) == 0x000008, "Wrong alignment on BTS_OperateWeapon_ReloadComplete");
static_assert(sizeof(BTS_OperateWeapon_ReloadComplete) == 0x000010, "Wrong size on BTS_OperateWeapon_ReloadComplete");
static_assert(offsetof(BTS_OperateWeapon_ReloadComplete, AnimMontage) == 0x000000, "Member 'BTS_OperateWeapon_ReloadComplete::AnimMontage' has a wrong offset!");
static_assert(offsetof(BTS_OperateWeapon_ReloadComplete, bInterrupted) == 0x000008, "Member 'BTS_OperateWeapon_ReloadComplete::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.BTS_OperateWeapon.SingleShot
// 0x0004 (0x0004 - 0x0000)
struct BTS_OperateWeapon_SingleShot final
{
public:
	float                                         CoolDownTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTS_OperateWeapon_SingleShot) == 0x000004, "Wrong alignment on BTS_OperateWeapon_SingleShot");
static_assert(sizeof(BTS_OperateWeapon_SingleShot) == 0x000004, "Wrong size on BTS_OperateWeapon_SingleShot");
static_assert(offsetof(BTS_OperateWeapon_SingleShot, CoolDownTime) == 0x000000, "Member 'BTS_OperateWeapon_SingleShot::CoolDownTime' has a wrong offset!");

// Function ThankYouVeryCool.BTTask_DrawSidearm.DrawComplete
// 0x0010 (0x0010 - 0x0000)
struct BTTask_DrawSidearm_DrawComplete final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_DrawSidearm_DrawComplete) == 0x000008, "Wrong alignment on BTTask_DrawSidearm_DrawComplete");
static_assert(sizeof(BTTask_DrawSidearm_DrawComplete) == 0x000010, "Wrong size on BTTask_DrawSidearm_DrawComplete");
static_assert(offsetof(BTTask_DrawSidearm_DrawComplete, AnimMontage) == 0x000000, "Member 'BTTask_DrawSidearm_DrawComplete::AnimMontage' has a wrong offset!");
static_assert(offsetof(BTTask_DrawSidearm_DrawComplete, bInterrupted) == 0x000008, "Member 'BTTask_DrawSidearm_DrawComplete::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.BuildingBoundsTrigger.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct BuildingBoundsTrigger_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingBoundsTrigger_OnOverlapBegin) == 0x000008, "Wrong alignment on BuildingBoundsTrigger_OnOverlapBegin");
static_assert(sizeof(BuildingBoundsTrigger_OnOverlapBegin) == 0x000010, "Wrong size on BuildingBoundsTrigger_OnOverlapBegin");
static_assert(offsetof(BuildingBoundsTrigger_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'BuildingBoundsTrigger_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BuildingBoundsTrigger_OnOverlapBegin, OtherActor) == 0x000008, "Member 'BuildingBoundsTrigger_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function ThankYouVeryCool.BuildingBoundsTrigger.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct BuildingBoundsTrigger_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingBoundsTrigger_OnOverlapEnd) == 0x000008, "Wrong alignment on BuildingBoundsTrigger_OnOverlapEnd");
static_assert(sizeof(BuildingBoundsTrigger_OnOverlapEnd) == 0x000010, "Wrong size on BuildingBoundsTrigger_OnOverlapEnd");
static_assert(offsetof(BuildingBoundsTrigger_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'BuildingBoundsTrigger_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BuildingBoundsTrigger_OnOverlapEnd, OtherActor) == 0x000008, "Member 'BuildingBoundsTrigger_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function ThankYouVeryCool.CampaignIDInterface.GetID
// 0x0008 (0x0008 - 0x0000)
struct CampaignIDInterface_GetID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignIDInterface_GetID) == 0x000004, "Wrong alignment on CampaignIDInterface_GetID");
static_assert(sizeof(CampaignIDInterface_GetID) == 0x000008, "Wrong size on CampaignIDInterface_GetID");
static_assert(offsetof(CampaignIDInterface_GetID, ReturnValue) == 0x000000, "Member 'CampaignIDInterface_GetID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CampaignIDInterface.SetHighlighted
// 0x0001 (0x0001 - 0x0000)
struct CampaignIDInterface_SetHighlighted final
{
public:
	bool                                          bIsHighlighted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignIDInterface_SetHighlighted) == 0x000001, "Wrong alignment on CampaignIDInterface_SetHighlighted");
static_assert(sizeof(CampaignIDInterface_SetHighlighted) == 0x000001, "Wrong size on CampaignIDInterface_SetHighlighted");
static_assert(offsetof(CampaignIDInterface_SetHighlighted, bIsHighlighted) == 0x000000, "Member 'CampaignIDInterface_SetHighlighted::bIsHighlighted' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.DoEdenMapThing
// 0x0028 (0x0028 - 0x0000)
struct CampaignManager_DoEdenMapThing final
{
public:
	class FName                                   From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DestinationText;                                   // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_DoEdenMapThing) == 0x000008, "Wrong alignment on CampaignManager_DoEdenMapThing");
static_assert(sizeof(CampaignManager_DoEdenMapThing) == 0x000028, "Wrong size on CampaignManager_DoEdenMapThing");
static_assert(offsetof(CampaignManager_DoEdenMapThing, From) == 0x000000, "Member 'CampaignManager_DoEdenMapThing::From' has a wrong offset!");
static_assert(offsetof(CampaignManager_DoEdenMapThing, To) == 0x000008, "Member 'CampaignManager_DoEdenMapThing::To' has a wrong offset!");
static_assert(offsetof(CampaignManager_DoEdenMapThing, DestinationText) == 0x000010, "Member 'CampaignManager_DoEdenMapThing::DestinationText' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.EndCampaignLevel
// 0x0028 (0x0028 - 0x0000)
struct CampaignManager_EndCampaignLevel final
{
public:
	TSoftClassPtr<class UClass>                   NextChapter;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_EndCampaignLevel) == 0x000008, "Wrong alignment on CampaignManager_EndCampaignLevel");
static_assert(sizeof(CampaignManager_EndCampaignLevel) == 0x000028, "Wrong size on CampaignManager_EndCampaignLevel");
static_assert(offsetof(CampaignManager_EndCampaignLevel, NextChapter) == 0x000000, "Member 'CampaignManager_EndCampaignLevel::NextChapter' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.GetCurrentChapter
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_GetCurrentChapter final
{
public:
	class AChapter*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_GetCurrentChapter) == 0x000008, "Wrong alignment on CampaignManager_GetCurrentChapter");
static_assert(sizeof(CampaignManager_GetCurrentChapter) == 0x000008, "Wrong size on CampaignManager_GetCurrentChapter");
static_assert(offsetof(CampaignManager_GetCurrentChapter, ReturnValue) == 0x000000, "Member 'CampaignManager_GetCurrentChapter::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.GetNewPlayer
// 0x0050 (0x0050 - 0x0000)
struct CampaignManager_GetNewPlayer final
{
public:
	struct FTransform                             AtTransform;                                       // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponBase>                WithWeapon;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagCount;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCharacter*                       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampaignManager_GetNewPlayer) == 0x000010, "Wrong alignment on CampaignManager_GetNewPlayer");
static_assert(sizeof(CampaignManager_GetNewPlayer) == 0x000050, "Wrong size on CampaignManager_GetNewPlayer");
static_assert(offsetof(CampaignManager_GetNewPlayer, AtTransform) == 0x000000, "Member 'CampaignManager_GetNewPlayer::AtTransform' has a wrong offset!");
static_assert(offsetof(CampaignManager_GetNewPlayer, WithWeapon) == 0x000030, "Member 'CampaignManager_GetNewPlayer::WithWeapon' has a wrong offset!");
static_assert(offsetof(CampaignManager_GetNewPlayer, MagCount) == 0x000038, "Member 'CampaignManager_GetNewPlayer::MagCount' has a wrong offset!");
static_assert(offsetof(CampaignManager_GetNewPlayer, ReturnValue) == 0x000040, "Member 'CampaignManager_GetNewPlayer::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.NodeLoadDuringGameplayDone
// 0x0020 (0x0020 - 0x0000)
struct CampaignManager_NodeLoadDuringGameplayDone final
{
public:
	struct FTYVCNodeMemory                        InNodeMemory;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_NodeLoadDuringGameplayDone) == 0x000008, "Wrong alignment on CampaignManager_NodeLoadDuringGameplayDone");
static_assert(sizeof(CampaignManager_NodeLoadDuringGameplayDone) == 0x000020, "Wrong size on CampaignManager_NodeLoadDuringGameplayDone");
static_assert(offsetof(CampaignManager_NodeLoadDuringGameplayDone, InNodeMemory) == 0x000000, "Member 'CampaignManager_NodeLoadDuringGameplayDone::InNodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.NodeUnloaded
// 0x0010 (0x0010 - 0x0000)
struct CampaignManager_NodeUnloaded final
{
public:
	TArray<class FName>                           NodeName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_NodeUnloaded) == 0x000008, "Wrong alignment on CampaignManager_NodeUnloaded");
static_assert(sizeof(CampaignManager_NodeUnloaded) == 0x000010, "Wrong size on CampaignManager_NodeUnloaded");
static_assert(offsetof(CampaignManager_NodeUnloaded, NodeName) == 0x000000, "Member 'CampaignManager_NodeUnloaded::NodeName' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.NotifyActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_NotifyActorDestroyed final
{
public:
	class FName                                   ActorId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_NotifyActorDestroyed) == 0x000004, "Wrong alignment on CampaignManager_NotifyActorDestroyed");
static_assert(sizeof(CampaignManager_NotifyActorDestroyed) == 0x000008, "Wrong size on CampaignManager_NotifyActorDestroyed");
static_assert(offsetof(CampaignManager_NotifyActorDestroyed, ActorId) == 0x000000, "Member 'CampaignManager_NotifyActorDestroyed::ActorId' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.NotifyActorTookDamage
// 0x000C (0x000C - 0x0000)
struct CampaignManager_NotifyActorTookDamage final
{
public:
	class FName                                   ActorId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_NotifyActorTookDamage) == 0x000004, "Wrong alignment on CampaignManager_NotifyActorTookDamage");
static_assert(sizeof(CampaignManager_NotifyActorTookDamage) == 0x00000C, "Wrong size on CampaignManager_NotifyActorTookDamage");
static_assert(offsetof(CampaignManager_NotifyActorTookDamage, ActorId) == 0x000000, "Member 'CampaignManager_NotifyActorTookDamage::ActorId' has a wrong offset!");
static_assert(offsetof(CampaignManager_NotifyActorTookDamage, Damage) == 0x000008, "Member 'CampaignManager_NotifyActorTookDamage::Damage' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.NotifyCustomEvent
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_NotifyCustomEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_NotifyCustomEvent) == 0x000004, "Wrong alignment on CampaignManager_NotifyCustomEvent");
static_assert(sizeof(CampaignManager_NotifyCustomEvent) == 0x000008, "Wrong size on CampaignManager_NotifyCustomEvent");
static_assert(offsetof(CampaignManager_NotifyCustomEvent, EventName) == 0x000000, "Member 'CampaignManager_NotifyCustomEvent::EventName' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.PlayCutscene
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_PlayCutscene final
{
public:
	class UFileMediaSource*                       InSource;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_PlayCutscene) == 0x000008, "Wrong alignment on CampaignManager_PlayCutscene");
static_assert(sizeof(CampaignManager_PlayCutscene) == 0x000008, "Wrong size on CampaignManager_PlayCutscene");
static_assert(offsetof(CampaignManager_PlayCutscene, InSource) == 0x000000, "Member 'CampaignManager_PlayCutscene::InSource' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.RequestLevelLoad
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_RequestLevelLoad final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_RequestLevelLoad) == 0x000004, "Wrong alignment on CampaignManager_RequestLevelLoad");
static_assert(sizeof(CampaignManager_RequestLevelLoad) == 0x000008, "Wrong size on CampaignManager_RequestLevelLoad");
static_assert(offsetof(CampaignManager_RequestLevelLoad, LevelName) == 0x000000, "Member 'CampaignManager_RequestLevelLoad::LevelName' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.SaveCampaign
// 0x0038 (0x0038 - 0x0000)
struct CampaignManager_SaveCampaign final
{
public:
	TSoftClassPtr<class UClass>                   OnChapter;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   ForDifficulty;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCampaignDataAsset*                     LoadedNextAsset;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_SaveCampaign) == 0x000008, "Wrong alignment on CampaignManager_SaveCampaign");
static_assert(sizeof(CampaignManager_SaveCampaign) == 0x000038, "Wrong size on CampaignManager_SaveCampaign");
static_assert(offsetof(CampaignManager_SaveCampaign, OnChapter) == 0x000000, "Member 'CampaignManager_SaveCampaign::OnChapter' has a wrong offset!");
static_assert(offsetof(CampaignManager_SaveCampaign, ForDifficulty) == 0x000028, "Member 'CampaignManager_SaveCampaign::ForDifficulty' has a wrong offset!");
static_assert(offsetof(CampaignManager_SaveCampaign, LoadedNextAsset) == 0x000030, "Member 'CampaignManager_SaveCampaign::LoadedNextAsset' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.SetCustomEmmisiveColor
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_SetCustomEmmisiveColor final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_SetCustomEmmisiveColor) == 0x000004, "Wrong alignment on CampaignManager_SetCustomEmmisiveColor");
static_assert(sizeof(CampaignManager_SetCustomEmmisiveColor) == 0x000008, "Wrong size on CampaignManager_SetCustomEmmisiveColor");
static_assert(offsetof(CampaignManager_SetCustomEmmisiveColor, Channel) == 0x000000, "Member 'CampaignManager_SetCustomEmmisiveColor::Channel' has a wrong offset!");
static_assert(offsetof(CampaignManager_SetCustomEmmisiveColor, InColor) == 0x000004, "Member 'CampaignManager_SetCustomEmmisiveColor::InColor' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.SetPlayFDVid
// 0x0001 (0x0001 - 0x0000)
struct CampaignManager_SetPlayFDVid final
{
public:
	bool                                          bShouldPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_SetPlayFDVid) == 0x000001, "Wrong alignment on CampaignManager_SetPlayFDVid");
static_assert(sizeof(CampaignManager_SetPlayFDVid) == 0x000001, "Wrong size on CampaignManager_SetPlayFDVid");
static_assert(offsetof(CampaignManager_SetPlayFDVid, bShouldPlay) == 0x000000, "Member 'CampaignManager_SetPlayFDVid::bShouldPlay' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.SpawnNPCDuringChapter
// 0x0050 (0x0050 - 0x0000)
struct CampaignManager_SpawnNPCDuringChapter final
{
public:
	TSubclassOf<class ANPC>                       ClassToSpawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ACampaignMarker*                        MyMarker;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnUnleased;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampaignManager_SpawnNPCDuringChapter) == 0x000010, "Wrong alignment on CampaignManager_SpawnNPCDuringChapter");
static_assert(sizeof(CampaignManager_SpawnNPCDuringChapter) == 0x000050, "Wrong size on CampaignManager_SpawnNPCDuringChapter");
static_assert(offsetof(CampaignManager_SpawnNPCDuringChapter, ClassToSpawn) == 0x000000, "Member 'CampaignManager_SpawnNPCDuringChapter::ClassToSpawn' has a wrong offset!");
static_assert(offsetof(CampaignManager_SpawnNPCDuringChapter, SpawnTransform) == 0x000010, "Member 'CampaignManager_SpawnNPCDuringChapter::SpawnTransform' has a wrong offset!");
static_assert(offsetof(CampaignManager_SpawnNPCDuringChapter, MyMarker) == 0x000040, "Member 'CampaignManager_SpawnNPCDuringChapter::MyMarker' has a wrong offset!");
static_assert(offsetof(CampaignManager_SpawnNPCDuringChapter, bSpawnUnleased) == 0x000048, "Member 'CampaignManager_SpawnNPCDuringChapter::bSpawnUnleased' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.StartChapterObject
// 0x0010 (0x0010 - 0x0000)
struct CampaignManager_StartChapterObject final
{
public:
	TSubclassOf<class UCampaignDataAsset>         InData;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   Difficulty;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkip;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampaignManager_StartChapterObject) == 0x000008, "Wrong alignment on CampaignManager_StartChapterObject");
static_assert(sizeof(CampaignManager_StartChapterObject) == 0x000010, "Wrong size on CampaignManager_StartChapterObject");
static_assert(offsetof(CampaignManager_StartChapterObject, InData) == 0x000000, "Member 'CampaignManager_StartChapterObject::InData' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartChapterObject, Difficulty) == 0x000008, "Member 'CampaignManager_StartChapterObject::Difficulty' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartChapterObject, bIsSkip) == 0x000009, "Member 'CampaignManager_StartChapterObject::bIsSkip' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.StartChapterObjectWorkshop
// 0x0010 (0x0010 - 0x0000)
struct CampaignManager_StartChapterObjectWorkshop final
{
public:
	class UArcadeLevelAssetWorkshop*              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   Difficulty;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkip;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampaignManager_StartChapterObjectWorkshop) == 0x000008, "Wrong alignment on CampaignManager_StartChapterObjectWorkshop");
static_assert(sizeof(CampaignManager_StartChapterObjectWorkshop) == 0x000010, "Wrong size on CampaignManager_StartChapterObjectWorkshop");
static_assert(offsetof(CampaignManager_StartChapterObjectWorkshop, InAsset) == 0x000000, "Member 'CampaignManager_StartChapterObjectWorkshop::InAsset' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartChapterObjectWorkshop, Difficulty) == 0x000008, "Member 'CampaignManager_StartChapterObjectWorkshop::Difficulty' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartChapterObjectWorkshop, bIsSkip) == 0x000009, "Member 'CampaignManager_StartChapterObjectWorkshop::bIsSkip' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.StartCustomCampaign
// 0x0010 (0x0010 - 0x0000)
struct CampaignManager_StartCustomCampaign final
{
public:
	class UCustomCampaign*                        InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   Difficulty;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkip;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampaignManager_StartCustomCampaign) == 0x000008, "Wrong alignment on CampaignManager_StartCustomCampaign");
static_assert(sizeof(CampaignManager_StartCustomCampaign) == 0x000010, "Wrong size on CampaignManager_StartCustomCampaign");
static_assert(offsetof(CampaignManager_StartCustomCampaign, InAsset) == 0x000000, "Member 'CampaignManager_StartCustomCampaign::InAsset' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartCustomCampaign, Difficulty) == 0x000008, "Member 'CampaignManager_StartCustomCampaign::Difficulty' has a wrong offset!");
static_assert(offsetof(CampaignManager_StartCustomCampaign, bIsSkip) == 0x000009, "Member 'CampaignManager_StartCustomCampaign::bIsSkip' has a wrong offset!");

// Function ThankYouVeryCool.CampaignManager.UnloadOver
// 0x0008 (0x0008 - 0x0000)
struct CampaignManager_UnloadOver final
{
public:
	class FName                                   UnloadedName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignManager_UnloadOver) == 0x000004, "Wrong alignment on CampaignManager_UnloadOver");
static_assert(sizeof(CampaignManager_UnloadOver) == 0x000008, "Wrong size on CampaignManager_UnloadOver");
static_assert(offsetof(CampaignManager_UnloadOver, UnloadedName) == 0x000000, "Member 'CampaignManager_UnloadOver::UnloadedName' has a wrong offset!");

// Function ThankYouVeryCool.CampaignMarker.DoManualSpawn
// 0x0002 (0x0002 - 0x0000)
struct CampaignMarker_DoManualSpawn final
{
public:
	bool                                          bForceSpecial;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFX;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignMarker_DoManualSpawn) == 0x000001, "Wrong alignment on CampaignMarker_DoManualSpawn");
static_assert(sizeof(CampaignMarker_DoManualSpawn) == 0x000002, "Wrong size on CampaignMarker_DoManualSpawn");
static_assert(offsetof(CampaignMarker_DoManualSpawn, bForceSpecial) == 0x000000, "Member 'CampaignMarker_DoManualSpawn::bForceSpecial' has a wrong offset!");
static_assert(offsetof(CampaignMarker_DoManualSpawn, bSkipFX) == 0x000001, "Member 'CampaignMarker_DoManualSpawn::bSkipFX' has a wrong offset!");

// Function ThankYouVeryCool.CampaignMarker.EditorModeChanged_Implementation
// 0x0001 (0x0001 - 0x0000)
struct CampaignMarker_EditorModeChanged_Implementation final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignMarker_EditorModeChanged_Implementation) == 0x000001, "Wrong alignment on CampaignMarker_EditorModeChanged_Implementation");
static_assert(sizeof(CampaignMarker_EditorModeChanged_Implementation) == 0x000001, "Wrong size on CampaignMarker_EditorModeChanged_Implementation");
static_assert(offsetof(CampaignMarker_EditorModeChanged_Implementation, NewMode) == 0x000000, "Member 'CampaignMarker_EditorModeChanged_Implementation::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.CampaignMarker.GetRandomSpecialType
// 0x0008 (0x0008 - 0x0000)
struct CampaignMarker_GetRandomSpecialType final
{
public:
	TSubclassOf<class ANPC>                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignMarker_GetRandomSpecialType) == 0x000008, "Wrong alignment on CampaignMarker_GetRandomSpecialType");
static_assert(sizeof(CampaignMarker_GetRandomSpecialType) == 0x000008, "Wrong size on CampaignMarker_GetRandomSpecialType");
static_assert(offsetof(CampaignMarker_GetRandomSpecialType, ReturnValue) == 0x000000, "Member 'CampaignMarker_GetRandomSpecialType::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.EditorModeChanged_Implementation
// 0x0001 (0x0001 - 0x0000)
struct CampaignTriggerVolume_EditorModeChanged_Implementation final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_EditorModeChanged_Implementation) == 0x000001, "Wrong alignment on CampaignTriggerVolume_EditorModeChanged_Implementation");
static_assert(sizeof(CampaignTriggerVolume_EditorModeChanged_Implementation) == 0x000001, "Wrong size on CampaignTriggerVolume_EditorModeChanged_Implementation");
static_assert(offsetof(CampaignTriggerVolume_EditorModeChanged_Implementation, NewMode) == 0x000000, "Member 'CampaignTriggerVolume_EditorModeChanged_Implementation::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.GetNPCsWithin
// 0x0010 (0x0010 - 0x0000)
struct CampaignTriggerVolume_GetNPCsWithin final
{
public:
	TArray<class ANPC*>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_GetNPCsWithin) == 0x000008, "Wrong alignment on CampaignTriggerVolume_GetNPCsWithin");
static_assert(sizeof(CampaignTriggerVolume_GetNPCsWithin) == 0x000010, "Wrong size on CampaignTriggerVolume_GetNPCsWithin");
static_assert(offsetof(CampaignTriggerVolume_GetNPCsWithin, ReturnValue) == 0x000000, "Member 'CampaignTriggerVolume_GetNPCsWithin::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct CampaignTriggerVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on CampaignTriggerVolume_OnOverlapBegin");
static_assert(sizeof(CampaignTriggerVolume_OnOverlapBegin) == 0x000010, "Wrong size on CampaignTriggerVolume_OnOverlapBegin");
static_assert(offsetof(CampaignTriggerVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'CampaignTriggerVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CampaignTriggerVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'CampaignTriggerVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct CampaignTriggerVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on CampaignTriggerVolume_OnOverlapEnd");
static_assert(sizeof(CampaignTriggerVolume_OnOverlapEnd) == 0x000010, "Wrong size on CampaignTriggerVolume_OnOverlapEnd");
static_assert(offsetof(CampaignTriggerVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'CampaignTriggerVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(CampaignTriggerVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'CampaignTriggerVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.SetDims
// 0x000C (0x000C - 0x0000)
struct CampaignTriggerVolume_SetDims final
{
public:
	struct FVector                                InDims;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_SetDims) == 0x000004, "Wrong alignment on CampaignTriggerVolume_SetDims");
static_assert(sizeof(CampaignTriggerVolume_SetDims) == 0x00000C, "Wrong size on CampaignTriggerVolume_SetDims");
static_assert(offsetof(CampaignTriggerVolume_SetDims, InDims) == 0x000000, "Member 'CampaignTriggerVolume_SetDims::InDims' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.SetHighlightedHUD
// 0x0001 (0x0001 - 0x0000)
struct CampaignTriggerVolume_SetHighlightedHUD final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_SetHighlightedHUD) == 0x000001, "Wrong alignment on CampaignTriggerVolume_SetHighlightedHUD");
static_assert(sizeof(CampaignTriggerVolume_SetHighlightedHUD) == 0x000001, "Wrong size on CampaignTriggerVolume_SetHighlightedHUD");
static_assert(offsetof(CampaignTriggerVolume_SetHighlightedHUD, bHighlighted) == 0x000000, "Member 'CampaignTriggerVolume_SetHighlightedHUD::bHighlighted' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.SetInteractable
// 0x0001 (0x0001 - 0x0000)
struct CampaignTriggerVolume_SetInteractable final
{
public:
	bool                                          bInteractable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_SetInteractable) == 0x000001, "Wrong alignment on CampaignTriggerVolume_SetInteractable");
static_assert(sizeof(CampaignTriggerVolume_SetInteractable) == 0x000001, "Wrong size on CampaignTriggerVolume_SetInteractable");
static_assert(offsetof(CampaignTriggerVolume_SetInteractable, bInteractable) == 0x000000, "Member 'CampaignTriggerVolume_SetInteractable::bInteractable' has a wrong offset!");

// Function ThankYouVeryCool.CampaignTriggerVolume.SetNavBlocking
// 0x0001 (0x0001 - 0x0000)
struct CampaignTriggerVolume_SetNavBlocking final
{
public:
	bool                                          bNavBlocking;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTriggerVolume_SetNavBlocking) == 0x000001, "Wrong alignment on CampaignTriggerVolume_SetNavBlocking");
static_assert(sizeof(CampaignTriggerVolume_SetNavBlocking) == 0x000001, "Wrong size on CampaignTriggerVolume_SetNavBlocking");
static_assert(offsetof(CampaignTriggerVolume_SetNavBlocking, bNavBlocking) == 0x000000, "Member 'CampaignTriggerVolume_SetNavBlocking::bNavBlocking' has a wrong offset!");

// Function ThankYouVeryCool.CardData.GetTYVCGameMode
// 0x0008 (0x0008 - 0x0000)
struct CardData_GetTYVCGameMode final
{
public:
	class AThankYouVeryCoolGameMode*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CardData_GetTYVCGameMode) == 0x000008, "Wrong alignment on CardData_GetTYVCGameMode");
static_assert(sizeof(CardData_GetTYVCGameMode) == 0x000008, "Wrong size on CardData_GetTYVCGameMode");
static_assert(offsetof(CardData_GetTYVCGameMode, ReturnValue) == 0x000000, "Member 'CardData_GetTYVCGameMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.DoHeadshot
// 0x000C (0x000C - 0x0000)
struct Chameleon_DoHeadshot final
{
public:
	struct FVector                                HeadshotLocation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_DoHeadshot) == 0x000004, "Wrong alignment on Chameleon_DoHeadshot");
static_assert(sizeof(Chameleon_DoHeadshot) == 0x00000C, "Wrong size on Chameleon_DoHeadshot");
static_assert(offsetof(Chameleon_DoHeadshot, HeadshotLocation) == 0x000000, "Member 'Chameleon_DoHeadshot::HeadshotLocation' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.ForceFadeOutOpacity
// 0x0004 (0x0004 - 0x0000)
struct Chameleon_ForceFadeOutOpacity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_ForceFadeOutOpacity) == 0x000004, "Wrong alignment on Chameleon_ForceFadeOutOpacity");
static_assert(sizeof(Chameleon_ForceFadeOutOpacity) == 0x000004, "Wrong size on Chameleon_ForceFadeOutOpacity");
static_assert(offsetof(Chameleon_ForceFadeOutOpacity, Value) == 0x000000, "Member 'Chameleon_ForceFadeOutOpacity::Value' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.GetPPVol
// 0x0008 (0x0008 - 0x0000)
struct Chameleon_GetPPVol final
{
public:
	class APostProcessVolume*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_GetPPVol) == 0x000008, "Wrong alignment on Chameleon_GetPPVol");
static_assert(sizeof(Chameleon_GetPPVol) == 0x000008, "Wrong size on Chameleon_GetPPVol");
static_assert(offsetof(Chameleon_GetPPVol, ReturnValue) == 0x000000, "Member 'Chameleon_GetPPVol::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.GetPPVolume
// 0x0008 (0x0008 - 0x0000)
struct Chameleon_GetPPVolume final
{
public:
	class APostProcessVolume*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_GetPPVolume) == 0x000008, "Wrong alignment on Chameleon_GetPPVolume");
static_assert(sizeof(Chameleon_GetPPVolume) == 0x000008, "Wrong size on Chameleon_GetPPVolume");
static_assert(offsetof(Chameleon_GetPPVolume, ReturnValue) == 0x000000, "Member 'Chameleon_GetPPVolume::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.LerpFadeOut
// 0x0004 (0x0004 - 0x0000)
struct Chameleon_LerpFadeOut final
{
public:
	float                                         SpeedModifier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_LerpFadeOut) == 0x000004, "Wrong alignment on Chameleon_LerpFadeOut");
static_assert(sizeof(Chameleon_LerpFadeOut) == 0x000004, "Wrong size on Chameleon_LerpFadeOut");
static_assert(offsetof(Chameleon_LerpFadeOut, SpeedModifier) == 0x000000, "Member 'Chameleon_LerpFadeOut::SpeedModifier' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.SetBlinkHalfOpen
// 0x0001 (0x0001 - 0x0000)
struct Chameleon_SetBlinkHalfOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_SetBlinkHalfOpen) == 0x000001, "Wrong alignment on Chameleon_SetBlinkHalfOpen");
static_assert(sizeof(Chameleon_SetBlinkHalfOpen) == 0x000001, "Wrong size on Chameleon_SetBlinkHalfOpen");
static_assert(offsetof(Chameleon_SetBlinkHalfOpen, bOpen) == 0x000000, "Member 'Chameleon_SetBlinkHalfOpen::bOpen' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.SetEffectSpeed
// 0x0004 (0x0004 - 0x0000)
struct Chameleon_SetEffectSpeed final
{
public:
	float                                         SpeedFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_SetEffectSpeed) == 0x000004, "Wrong alignment on Chameleon_SetEffectSpeed");
static_assert(sizeof(Chameleon_SetEffectSpeed) == 0x000004, "Wrong size on Chameleon_SetEffectSpeed");
static_assert(offsetof(Chameleon_SetEffectSpeed, SpeedFactor) == 0x000000, "Member 'Chameleon_SetEffectSpeed::SpeedFactor' has a wrong offset!");

// Function ThankYouVeryCool.Chameleon.ShowBloodOnScreen
// 0x0004 (0x0004 - 0x0000)
struct Chameleon_ShowBloodOnScreen final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chameleon_ShowBloodOnScreen) == 0x000004, "Wrong alignment on Chameleon_ShowBloodOnScreen");
static_assert(sizeof(Chameleon_ShowBloodOnScreen) == 0x000004, "Wrong size on Chameleon_ShowBloodOnScreen");
static_assert(offsetof(Chameleon_ShowBloodOnScreen, Strength) == 0x000000, "Member 'Chameleon_ShowBloodOnScreen::Strength' has a wrong offset!");

// Function ThankYouVeryCool.ChangeNotifyingRecastNavMesh.OnNavmeshGenerationFinishedHandler
// 0x0008 (0x0008 - 0x0000)
struct ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler) == 0x000008, "Wrong alignment on ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler");
static_assert(sizeof(ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler) == 0x000008, "Wrong size on ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler");
static_assert(offsetof(ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler, NavData) == 0x000000, "Member 'ChangeNotifyingRecastNavMesh_OnNavmeshGenerationFinishedHandler::NavData' has a wrong offset!");

// Function ThankYouVeryCool.TypewriterTextBlock.PlayFromStart
// 0x0018 (0x0018 - 0x0000)
struct TypewriterTextBlock_PlayFromStart final
{
public:
	TDelegate<void()>                             FinishedDel;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundToPlay;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TypewriterTextBlock_PlayFromStart) == 0x000008, "Wrong alignment on TypewriterTextBlock_PlayFromStart");
static_assert(sizeof(TypewriterTextBlock_PlayFromStart) == 0x000018, "Wrong size on TypewriterTextBlock_PlayFromStart");
static_assert(offsetof(TypewriterTextBlock_PlayFromStart, FinishedDel) == 0x000000, "Member 'TypewriterTextBlock_PlayFromStart::FinishedDel' has a wrong offset!");
static_assert(offsetof(TypewriterTextBlock_PlayFromStart, SoundToPlay) == 0x000010, "Member 'TypewriterTextBlock_PlayFromStart::SoundToPlay' has a wrong offset!");

// Function ThankYouVeryCool.TypewriterTextBlock.SetTextToType
// 0x0018 (0x0018 - 0x0000)
struct TypewriterTextBlock_SetTextToType final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TypewriterTextBlock_SetTextToType) == 0x000008, "Wrong alignment on TypewriterTextBlock_SetTextToType");
static_assert(sizeof(TypewriterTextBlock_SetTextToType) == 0x000018, "Wrong size on TypewriterTextBlock_SetTextToType");
static_assert(offsetof(TypewriterTextBlock_SetTextToType, InText) == 0x000000, "Member 'TypewriterTextBlock_SetTextToType::InText' has a wrong offset!");

// Function ThankYouVeryCool.TypewriterTextBlock.Tick
// 0x0004 (0x0004 - 0x0000)
struct TypewriterTextBlock_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TypewriterTextBlock_Tick) == 0x000004, "Wrong alignment on TypewriterTextBlock_Tick");
static_assert(sizeof(TypewriterTextBlock_Tick) == 0x000004, "Wrong size on TypewriterTextBlock_Tick");
static_assert(offsetof(TypewriterTextBlock_Tick, DeltaTime) == 0x000000, "Member 'TypewriterTextBlock_Tick::DeltaTime' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.EndChapter
// 0x0028 (0x0028 - 0x0000)
struct Chapter_EndChapter final
{
public:
	TSoftClassPtr<class UClass>                   NextChapter;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_EndChapter) == 0x000008, "Wrong alignment on Chapter_EndChapter");
static_assert(sizeof(Chapter_EndChapter) == 0x000028, "Wrong size on Chapter_EndChapter");
static_assert(offsetof(Chapter_EndChapter, NextChapter) == 0x000000, "Member 'Chapter_EndChapter::NextChapter' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetActorFromID
// 0x0018 (0x0018 - 0x0000)
struct Chapter_GetActorFromID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     GetAsClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetActorFromID) == 0x000008, "Wrong alignment on Chapter_GetActorFromID");
static_assert(sizeof(Chapter_GetActorFromID) == 0x000018, "Wrong size on Chapter_GetActorFromID");
static_assert(offsetof(Chapter_GetActorFromID, InID) == 0x000000, "Member 'Chapter_GetActorFromID::InID' has a wrong offset!");
static_assert(offsetof(Chapter_GetActorFromID, GetAsClass) == 0x000008, "Member 'Chapter_GetActorFromID::GetAsClass' has a wrong offset!");
static_assert(offsetof(Chapter_GetActorFromID, ReturnValue) == 0x000010, "Member 'Chapter_GetActorFromID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetActorsFromID
// 0x0018 (0x0018 - 0x0000)
struct Chapter_GetActorsFromID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetActorsFromID) == 0x000008, "Wrong alignment on Chapter_GetActorsFromID");
static_assert(sizeof(Chapter_GetActorsFromID) == 0x000018, "Wrong size on Chapter_GetActorsFromID");
static_assert(offsetof(Chapter_GetActorsFromID, InID) == 0x000000, "Member 'Chapter_GetActorsFromID::InID' has a wrong offset!");
static_assert(offsetof(Chapter_GetActorsFromID, ReturnValue) == 0x000008, "Member 'Chapter_GetActorsFromID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetLevelsToLoad
// 0x0010 (0x0010 - 0x0000)
struct Chapter_GetLevelsToLoad final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetLevelsToLoad) == 0x000008, "Wrong alignment on Chapter_GetLevelsToLoad");
static_assert(sizeof(Chapter_GetLevelsToLoad) == 0x000010, "Wrong size on Chapter_GetLevelsToLoad");
static_assert(offsetof(Chapter_GetLevelsToLoad, ReturnValue) == 0x000000, "Member 'Chapter_GetLevelsToLoad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetLightsFromID
// 0x0018 (0x0018 - 0x0000)
struct Chapter_GetLightsFromID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEditorLight*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetLightsFromID) == 0x000008, "Wrong alignment on Chapter_GetLightsFromID");
static_assert(sizeof(Chapter_GetLightsFromID) == 0x000018, "Wrong size on Chapter_GetLightsFromID");
static_assert(offsetof(Chapter_GetLightsFromID, InID) == 0x000000, "Member 'Chapter_GetLightsFromID::InID' has a wrong offset!");
static_assert(offsetof(Chapter_GetLightsFromID, ReturnValue) == 0x000008, "Member 'Chapter_GetLightsFromID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetPlayerSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct Chapter_GetPlayerSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetPlayerSpawnTransform) == 0x000010, "Wrong alignment on Chapter_GetPlayerSpawnTransform");
static_assert(sizeof(Chapter_GetPlayerSpawnTransform) == 0x000030, "Wrong size on Chapter_GetPlayerSpawnTransform");
static_assert(offsetof(Chapter_GetPlayerSpawnTransform, ReturnValue) == 0x000000, "Member 'Chapter_GetPlayerSpawnTransform::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.GetTransformOfID
// 0x0040 (0x0040 - 0x0000)
struct Chapter_GetTransformOfID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_GetTransformOfID) == 0x000010, "Wrong alignment on Chapter_GetTransformOfID");
static_assert(sizeof(Chapter_GetTransformOfID) == 0x000040, "Wrong size on Chapter_GetTransformOfID");
static_assert(offsetof(Chapter_GetTransformOfID, InID) == 0x000000, "Member 'Chapter_GetTransformOfID::InID' has a wrong offset!");
static_assert(offsetof(Chapter_GetTransformOfID, ReturnValue) == 0x000010, "Member 'Chapter_GetTransformOfID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct Chapter_NotifyActorDestroyed final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyActorDestroyed) == 0x000004, "Wrong alignment on Chapter_NotifyActorDestroyed");
static_assert(sizeof(Chapter_NotifyActorDestroyed) == 0x000008, "Wrong size on Chapter_NotifyActorDestroyed");
static_assert(offsetof(Chapter_NotifyActorDestroyed, ID) == 0x000000, "Member 'Chapter_NotifyActorDestroyed::ID' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyActorTookDamage
// 0x000C (0x000C - 0x0000)
struct Chapter_NotifyActorTookDamage final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyActorTookDamage) == 0x000004, "Wrong alignment on Chapter_NotifyActorTookDamage");
static_assert(sizeof(Chapter_NotifyActorTookDamage) == 0x00000C, "Wrong size on Chapter_NotifyActorTookDamage");
static_assert(offsetof(Chapter_NotifyActorTookDamage, ID) == 0x000000, "Member 'Chapter_NotifyActorTookDamage::ID' has a wrong offset!");
static_assert(offsetof(Chapter_NotifyActorTookDamage, Damage) == 0x000008, "Member 'Chapter_NotifyActorTookDamage::Damage' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyCustomEvent
// 0x0008 (0x0008 - 0x0000)
struct Chapter_NotifyCustomEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyCustomEvent) == 0x000004, "Wrong alignment on Chapter_NotifyCustomEvent");
static_assert(sizeof(Chapter_NotifyCustomEvent) == 0x000008, "Wrong size on Chapter_NotifyCustomEvent");
static_assert(offsetof(Chapter_NotifyCustomEvent, EventName) == 0x000000, "Member 'Chapter_NotifyCustomEvent::EventName' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyNPCDied
// 0x0008 (0x0008 - 0x0000)
struct Chapter_NotifyNPCDied final
{
public:
	class ANPC*                                   DeadNPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyNPCDied) == 0x000008, "Wrong alignment on Chapter_NotifyNPCDied");
static_assert(sizeof(Chapter_NotifyNPCDied) == 0x000008, "Wrong size on Chapter_NotifyNPCDied");
static_assert(offsetof(Chapter_NotifyNPCDied, DeadNPC) == 0x000000, "Member 'Chapter_NotifyNPCDied::DeadNPC' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyOverlapStart
// 0x0018 (0x0018 - 0x0000)
struct Chapter_NotifyOverlapStart final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OhterActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TriggerVolume;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyOverlapStart) == 0x000008, "Wrong alignment on Chapter_NotifyOverlapStart");
static_assert(sizeof(Chapter_NotifyOverlapStart) == 0x000018, "Wrong size on Chapter_NotifyOverlapStart");
static_assert(offsetof(Chapter_NotifyOverlapStart, ID) == 0x000000, "Member 'Chapter_NotifyOverlapStart::ID' has a wrong offset!");
static_assert(offsetof(Chapter_NotifyOverlapStart, OhterActor) == 0x000008, "Member 'Chapter_NotifyOverlapStart::OhterActor' has a wrong offset!");
static_assert(offsetof(Chapter_NotifyOverlapStart, TriggerVolume) == 0x000010, "Member 'Chapter_NotifyOverlapStart::TriggerVolume' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyOverlapStop
// 0x0008 (0x0008 - 0x0000)
struct Chapter_NotifyOverlapStop final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyOverlapStop) == 0x000004, "Wrong alignment on Chapter_NotifyOverlapStop");
static_assert(sizeof(Chapter_NotifyOverlapStop) == 0x000008, "Wrong size on Chapter_NotifyOverlapStop");
static_assert(offsetof(Chapter_NotifyOverlapStop, ID) == 0x000000, "Member 'Chapter_NotifyOverlapStop::ID' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyPlayerMoveStatus
// 0x0001 (0x0001 - 0x0000)
struct Chapter_NotifyPlayerMoveStatus final
{
public:
	bool                                          bIsMoving;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyPlayerMoveStatus) == 0x000001, "Wrong alignment on Chapter_NotifyPlayerMoveStatus");
static_assert(sizeof(Chapter_NotifyPlayerMoveStatus) == 0x000001, "Wrong size on Chapter_NotifyPlayerMoveStatus");
static_assert(offsetof(Chapter_NotifyPlayerMoveStatus, bIsMoving) == 0x000000, "Member 'Chapter_NotifyPlayerMoveStatus::bIsMoving' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.NotifyVoxelDamage
// 0x0004 (0x0004 - 0x0000)
struct Chapter_NotifyVoxelDamage final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Chapter_NotifyVoxelDamage) == 0x000004, "Wrong alignment on Chapter_NotifyVoxelDamage");
static_assert(sizeof(Chapter_NotifyVoxelDamage) == 0x000004, "Wrong size on Chapter_NotifyVoxelDamage");
static_assert(offsetof(Chapter_NotifyVoxelDamage, Volume) == 0x000000, "Member 'Chapter_NotifyVoxelDamage::Volume' has a wrong offset!");

// Function ThankYouVeryCool.Chapter.SetObjectiveText
// 0x0018 (0x0018 - 0x0000)
struct Chapter_SetObjectiveText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotify;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Chapter_SetObjectiveText) == 0x000008, "Wrong alignment on Chapter_SetObjectiveText");
static_assert(sizeof(Chapter_SetObjectiveText) == 0x000018, "Wrong size on Chapter_SetObjectiveText");
static_assert(offsetof(Chapter_SetObjectiveText, Text) == 0x000000, "Member 'Chapter_SetObjectiveText::Text' has a wrong offset!");
static_assert(offsetof(Chapter_SetObjectiveText, bDoNotify) == 0x000010, "Member 'Chapter_SetObjectiveText::bDoNotify' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetTimespanAsString
// 0x0018 (0x0018 - 0x0000)
struct DailyManager_GetTimespanAsString final
{
public:
	struct FTimespan                              In;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetTimespanAsString) == 0x000008, "Wrong alignment on DailyManager_GetTimespanAsString");
static_assert(sizeof(DailyManager_GetTimespanAsString) == 0x000018, "Wrong size on DailyManager_GetTimespanAsString");
static_assert(offsetof(DailyManager_GetTimespanAsString, In) == 0x000000, "Member 'DailyManager_GetTimespanAsString::In' has a wrong offset!");
static_assert(offsetof(DailyManager_GetTimespanAsString, ReturnValue) == 0x000008, "Member 'DailyManager_GetTimespanAsString::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.TimespanTicksNegative
// 0x0010 (0x0010 - 0x0000)
struct DailyManager_TimespanTicksNegative final
{
public:
	struct FTimespan                              In;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DailyManager_TimespanTicksNegative) == 0x000008, "Wrong alignment on DailyManager_TimespanTicksNegative");
static_assert(sizeof(DailyManager_TimespanTicksNegative) == 0x000010, "Wrong size on DailyManager_TimespanTicksNegative");
static_assert(offsetof(DailyManager_TimespanTicksNegative, In) == 0x000000, "Member 'DailyManager_TimespanTicksNegative::In' has a wrong offset!");
static_assert(offsetof(DailyManager_TimespanTicksNegative, ReturnValue) == 0x000008, "Member 'DailyManager_TimespanTicksNegative::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetChallengeFromDateTime
// 0x0030 (0x0030 - 0x0000)
struct DailyManager_GetChallengeFromDateTime final
{
public:
	struct FDateTime                              DateTimeIn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDailyChallenge                        ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetChallengeFromDateTime) == 0x000008, "Wrong alignment on DailyManager_GetChallengeFromDateTime");
static_assert(sizeof(DailyManager_GetChallengeFromDateTime) == 0x000030, "Wrong size on DailyManager_GetChallengeFromDateTime");
static_assert(offsetof(DailyManager_GetChallengeFromDateTime, DateTimeIn) == 0x000000, "Member 'DailyManager_GetChallengeFromDateTime::DateTimeIn' has a wrong offset!");
static_assert(offsetof(DailyManager_GetChallengeFromDateTime, ReturnValue) == 0x000008, "Member 'DailyManager_GetChallengeFromDateTime::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetConsoleLeaderboardNameFromChallenge
// 0x0020 (0x0020 - 0x0000)
struct DailyManager_GetConsoleLeaderboardNameFromChallenge final
{
public:
	class FString                                 Challenge;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetConsoleLeaderboardNameFromChallenge) == 0x000008, "Wrong alignment on DailyManager_GetConsoleLeaderboardNameFromChallenge");
static_assert(sizeof(DailyManager_GetConsoleLeaderboardNameFromChallenge) == 0x000020, "Wrong size on DailyManager_GetConsoleLeaderboardNameFromChallenge");
static_assert(offsetof(DailyManager_GetConsoleLeaderboardNameFromChallenge, Challenge) == 0x000000, "Member 'DailyManager_GetConsoleLeaderboardNameFromChallenge::Challenge' has a wrong offset!");
static_assert(offsetof(DailyManager_GetConsoleLeaderboardNameFromChallenge, ReturnValue) == 0x000010, "Member 'DailyManager_GetConsoleLeaderboardNameFromChallenge::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetConsoleNetworkDateTimeUTC
// 0x0008 (0x0008 - 0x0000)
struct DailyManager_GetConsoleNetworkDateTimeUTC final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetConsoleNetworkDateTimeUTC) == 0x000008, "Wrong alignment on DailyManager_GetConsoleNetworkDateTimeUTC");
static_assert(sizeof(DailyManager_GetConsoleNetworkDateTimeUTC) == 0x000008, "Wrong size on DailyManager_GetConsoleNetworkDateTimeUTC");
static_assert(offsetof(DailyManager_GetConsoleNetworkDateTimeUTC, ReturnValue) == 0x000000, "Member 'DailyManager_GetConsoleNetworkDateTimeUTC::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetMyDateTime
// 0x0008 (0x0008 - 0x0000)
struct DailyManager_GetMyDateTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetMyDateTime) == 0x000008, "Wrong alignment on DailyManager_GetMyDateTime");
static_assert(sizeof(DailyManager_GetMyDateTime) == 0x000008, "Wrong size on DailyManager_GetMyDateTime");
static_assert(offsetof(DailyManager_GetMyDateTime, ReturnValue) == 0x000000, "Member 'DailyManager_GetMyDateTime::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetMyString
// 0x0010 (0x0010 - 0x0000)
struct DailyManager_GetMyString final
{
public:
	class FString                                 Out;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetMyString) == 0x000008, "Wrong alignment on DailyManager_GetMyString");
static_assert(sizeof(DailyManager_GetMyString) == 0x000010, "Wrong size on DailyManager_GetMyString");
static_assert(offsetof(DailyManager_GetMyString, Out) == 0x000000, "Member 'DailyManager_GetMyString::Out' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetSecondsToMidnight
// 0x0004 (0x0004 - 0x0000)
struct DailyManager_GetSecondsToMidnight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetSecondsToMidnight) == 0x000004, "Wrong alignment on DailyManager_GetSecondsToMidnight");
static_assert(sizeof(DailyManager_GetSecondsToMidnight) == 0x000004, "Wrong size on DailyManager_GetSecondsToMidnight");
static_assert(offsetof(DailyManager_GetSecondsToMidnight, ReturnValue) == 0x000000, "Member 'DailyManager_GetSecondsToMidnight::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetSpanToMidnight
// 0x0008 (0x0008 - 0x0000)
struct DailyManager_GetSpanToMidnight final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetSpanToMidnight) == 0x000008, "Wrong alignment on DailyManager_GetSpanToMidnight");
static_assert(sizeof(DailyManager_GetSpanToMidnight) == 0x000008, "Wrong size on DailyManager_GetSpanToMidnight");
static_assert(offsetof(DailyManager_GetSpanToMidnight, ReturnValue) == 0x000000, "Member 'DailyManager_GetSpanToMidnight::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.GetYesterday
// 0x0020 (0x0020 - 0x0000)
struct DailyManager_GetYesterday final
{
public:
	struct FDateTime                              InDateTime;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OutDateTime;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_GetYesterday) == 0x000008, "Wrong alignment on DailyManager_GetYesterday");
static_assert(sizeof(DailyManager_GetYesterday) == 0x000020, "Wrong size on DailyManager_GetYesterday");
static_assert(offsetof(DailyManager_GetYesterday, InDateTime) == 0x000000, "Member 'DailyManager_GetYesterday::InDateTime' has a wrong offset!");
static_assert(offsetof(DailyManager_GetYesterday, OutString) == 0x000008, "Member 'DailyManager_GetYesterday::OutString' has a wrong offset!");
static_assert(offsetof(DailyManager_GetYesterday, OutDateTime) == 0x000018, "Member 'DailyManager_GetYesterday::OutDateTime' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.HasStringBeenSet
// 0x0001 (0x0001 - 0x0000)
struct DailyManager_HasStringBeenSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_HasStringBeenSet) == 0x000001, "Wrong alignment on DailyManager_HasStringBeenSet");
static_assert(sizeof(DailyManager_HasStringBeenSet) == 0x000001, "Wrong size on DailyManager_HasStringBeenSet");
static_assert(offsetof(DailyManager_HasStringBeenSet, ReturnValue) == 0x000000, "Member 'DailyManager_HasStringBeenSet::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.PlayChallenge
// 0x0030 (0x0030 - 0x0000)
struct DailyManager_PlayChallenge final
{
public:
	struct FDailyChallenge                        ToPlay;                                            // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	EDifficulty                                   InDiff;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DailyManager_PlayChallenge) == 0x000008, "Wrong alignment on DailyManager_PlayChallenge");
static_assert(sizeof(DailyManager_PlayChallenge) == 0x000030, "Wrong size on DailyManager_PlayChallenge");
static_assert(offsetof(DailyManager_PlayChallenge, ToPlay) == 0x000000, "Member 'DailyManager_PlayChallenge::ToPlay' has a wrong offset!");
static_assert(offsetof(DailyManager_PlayChallenge, InDiff) == 0x000028, "Member 'DailyManager_PlayChallenge::InDiff' has a wrong offset!");

// Function ThankYouVeryCool.DailyManager.SetTodayAsDateTime
// 0x0008 (0x0008 - 0x0000)
struct DailyManager_SetTodayAsDateTime final
{
public:
	struct FDateTime                              InDt;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyManager_SetTodayAsDateTime) == 0x000008, "Wrong alignment on DailyManager_SetTodayAsDateTime");
static_assert(sizeof(DailyManager_SetTodayAsDateTime) == 0x000008, "Wrong size on DailyManager_SetTodayAsDateTime");
static_assert(offsetof(DailyManager_SetTodayAsDateTime, InDt) == 0x000000, "Member 'DailyManager_SetTodayAsDateTime::InDt' has a wrong offset!");

// Function ThankYouVeryCool.debris.OnStop
// 0x0010 (0x0010 - 0x0000)
struct debris_OnStop final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(debris_OnStop) == 0x000008, "Wrong alignment on debris_OnStop");
static_assert(sizeof(debris_OnStop) == 0x000010, "Wrong size on debris_OnStop");
static_assert(offsetof(debris_OnStop, SleepingComponent) == 0x000000, "Member 'debris_OnStop::SleepingComponent' has a wrong offset!");
static_assert(offsetof(debris_OnStop, BoneName) == 0x000008, "Member 'debris_OnStop::BoneName' has a wrong offset!");

// Function ThankYouVeryCool.TYVCAnimInstance_Post.SetALSMovementModeC
// 0x0001 (0x0001 - 0x0000)
struct TYVCAnimInstance_Post_SetALSMovementModeC final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCAnimInstance_Post_SetALSMovementModeC) == 0x000001, "Wrong alignment on TYVCAnimInstance_Post_SetALSMovementModeC");
static_assert(sizeof(TYVCAnimInstance_Post_SetALSMovementModeC) == 0x000001, "Wrong size on TYVCAnimInstance_Post_SetALSMovementModeC");
static_assert(offsetof(TYVCAnimInstance_Post_SetALSMovementModeC, MovementMode) == 0x000000, "Member 'TYVCAnimInstance_Post_SetALSMovementModeC::MovementMode' has a wrong offset!");

// Function ThankYouVeryCool.TYVCAnimInstance_Post.SetIKEnabledC
// 0x0001 (0x0001 - 0x0000)
struct TYVCAnimInstance_Post_SetIKEnabledC final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCAnimInstance_Post_SetIKEnabledC) == 0x000001, "Wrong alignment on TYVCAnimInstance_Post_SetIKEnabledC");
static_assert(sizeof(TYVCAnimInstance_Post_SetIKEnabledC) == 0x000001, "Wrong size on TYVCAnimInstance_Post_SetIKEnabledC");
static_assert(offsetof(TYVCAnimInstance_Post_SetIKEnabledC, Enabled) == 0x000000, "Member 'TYVCAnimInstance_Post_SetIKEnabledC::Enabled' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.DoActions
// 0x0002 (0x0002 - 0x0000)
struct EditorInterface_DoActions final
{
public:
	EActionType                                   ToDo;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulated;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_DoActions) == 0x000001, "Wrong alignment on EditorInterface_DoActions");
static_assert(sizeof(EditorInterface_DoActions) == 0x000002, "Wrong size on EditorInterface_DoActions");
static_assert(offsetof(EditorInterface_DoActions, ToDo) == 0x000000, "Member 'EditorInterface_DoActions::ToDo' has a wrong offset!");
static_assert(offsetof(EditorInterface_DoActions, bSimulated) == 0x000001, "Member 'EditorInterface_DoActions::bSimulated' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.EditorModeChanged
// 0x0001 (0x0001 - 0x0000)
struct EditorInterface_EditorModeChanged final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_EditorModeChanged) == 0x000001, "Wrong alignment on EditorInterface_EditorModeChanged");
static_assert(sizeof(EditorInterface_EditorModeChanged) == 0x000001, "Wrong size on EditorInterface_EditorModeChanged");
static_assert(offsetof(EditorInterface_EditorModeChanged, NewMode) == 0x000000, "Member 'EditorInterface_EditorModeChanged::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.GetActions
// 0x0010 (0x0010 - 0x0000)
struct EditorInterface_GetActions final
{
public:
	TArray<EActionType>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_GetActions) == 0x000008, "Wrong alignment on EditorInterface_GetActions");
static_assert(sizeof(EditorInterface_GetActions) == 0x000010, "Wrong size on EditorInterface_GetActions");
static_assert(offsetof(EditorInterface_GetActions, ReturnValue) == 0x000000, "Member 'EditorInterface_GetActions::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.GetGoals
// 0x0010 (0x0010 - 0x0000)
struct EditorInterface_GetGoals final
{
public:
	TArray<EGoalType>                             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_GetGoals) == 0x000008, "Wrong alignment on EditorInterface_GetGoals");
static_assert(sizeof(EditorInterface_GetGoals) == 0x000010, "Wrong size on EditorInterface_GetGoals");
static_assert(offsetof(EditorInterface_GetGoals, ReturnValue) == 0x000000, "Member 'EditorInterface_GetGoals::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.GetShouldSave
// 0x0001 (0x0001 - 0x0000)
struct EditorInterface_GetShouldSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_GetShouldSave) == 0x000001, "Wrong alignment on EditorInterface_GetShouldSave");
static_assert(sizeof(EditorInterface_GetShouldSave) == 0x000001, "Wrong size on EditorInterface_GetShouldSave");
static_assert(offsetof(EditorInterface_GetShouldSave, ReturnValue) == 0x000000, "Member 'EditorInterface_GetShouldSave::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.SetInEditor
// 0x0001 (0x0001 - 0x0000)
struct EditorInterface_SetInEditor final
{
public:
	bool                                          bInEditor;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_SetInEditor) == 0x000001, "Wrong alignment on EditorInterface_SetInEditor");
static_assert(sizeof(EditorInterface_SetInEditor) == 0x000001, "Wrong size on EditorInterface_SetInEditor");
static_assert(offsetof(EditorInterface_SetInEditor, bInEditor) == 0x000000, "Member 'EditorInterface_SetInEditor::bInEditor' has a wrong offset!");

// Function ThankYouVeryCool.EditorInterface.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct EditorInterface_SetSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorInterface_SetSelected) == 0x000001, "Wrong alignment on EditorInterface_SetSelected");
static_assert(sizeof(EditorInterface_SetSelected) == 0x000001, "Wrong size on EditorInterface_SetSelected");
static_assert(offsetof(EditorInterface_SetSelected, bIsSelected) == 0x000000, "Member 'EditorInterface_SetSelected::bIsSelected' has a wrong offset!");

// Function ThankYouVeryCool.EditorLight.DoShortFlicker
// 0x0004 (0x0004 - 0x0000)
struct EditorLight_DoShortFlicker final
{
public:
	float                                         ForTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorLight_DoShortFlicker) == 0x000004, "Wrong alignment on EditorLight_DoShortFlicker");
static_assert(sizeof(EditorLight_DoShortFlicker) == 0x000004, "Wrong size on EditorLight_DoShortFlicker");
static_assert(offsetof(EditorLight_DoShortFlicker, ForTime) == 0x000000, "Member 'EditorLight_DoShortFlicker::ForTime' has a wrong offset!");

// Function ThankYouVeryCool.EditorLight.EditorModeChanged_Implementation
// 0x0001 (0x0001 - 0x0000)
struct EditorLight_EditorModeChanged_Implementation final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorLight_EditorModeChanged_Implementation) == 0x000001, "Wrong alignment on EditorLight_EditorModeChanged_Implementation");
static_assert(sizeof(EditorLight_EditorModeChanged_Implementation) == 0x000001, "Wrong size on EditorLight_EditorModeChanged_Implementation");
static_assert(offsetof(EditorLight_EditorModeChanged_Implementation, NewMode) == 0x000000, "Member 'EditorLight_EditorModeChanged_Implementation::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.EditorLight.SetFlicker
// 0x0001 (0x0001 - 0x0000)
struct EditorLight_SetFlicker final
{
public:
	bool                                          bFlicker;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorLight_SetFlicker) == 0x000001, "Wrong alignment on EditorLight_SetFlicker");
static_assert(sizeof(EditorLight_SetFlicker) == 0x000001, "Wrong size on EditorLight_SetFlicker");
static_assert(offsetof(EditorLight_SetFlicker, bFlicker) == 0x000000, "Member 'EditorLight_SetFlicker::bFlicker' has a wrong offset!");

// Function ThankYouVeryCool.EditorLight.Setup
// 0x0014 (0x0014 - 0x0000)
struct EditorLight_Setup final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temp;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveTransaction;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowWhenSimple;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorLight_Setup) == 0x000004, "Wrong alignment on EditorLight_Setup");
static_assert(sizeof(EditorLight_Setup) == 0x000014, "Wrong size on EditorLight_Setup");
static_assert(offsetof(EditorLight_Setup, Intensity) == 0x000000, "Member 'EditorLight_Setup::Intensity' has a wrong offset!");
static_assert(offsetof(EditorLight_Setup, Temp) == 0x000004, "Member 'EditorLight_Setup::Temp' has a wrong offset!");
static_assert(offsetof(EditorLight_Setup, Radius) == 0x000008, "Member 'EditorLight_Setup::Radius' has a wrong offset!");
static_assert(offsetof(EditorLight_Setup, Color) == 0x00000C, "Member 'EditorLight_Setup::Color' has a wrong offset!");
static_assert(offsetof(EditorLight_Setup, bSaveTransaction) == 0x000010, "Member 'EditorLight_Setup::bSaveTransaction' has a wrong offset!");
static_assert(offsetof(EditorLight_Setup, bInShowWhenSimple) == 0x000011, "Member 'EditorLight_Setup::bInShowWhenSimple' has a wrong offset!");

// Function ThankYouVeryCool.FeedbackActor.DoFade
// 0x0004 (0x0004 - 0x0000)
struct FeedbackActor_DoFade final
{
public:
	int32                                         Stack;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackActor_DoFade) == 0x000004, "Wrong alignment on FeedbackActor_DoFade");
static_assert(sizeof(FeedbackActor_DoFade) == 0x000004, "Wrong size on FeedbackActor_DoFade");
static_assert(offsetof(FeedbackActor_DoFade, Stack) == 0x000000, "Member 'FeedbackActor_DoFade::Stack' has a wrong offset!");

// Function ThankYouVeryCool.FeedbackActor.SetupText
// 0x0018 (0x0018 - 0x0000)
struct FeedbackActor_SetupText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackActor_SetupText) == 0x000008, "Wrong alignment on FeedbackActor_SetupText");
static_assert(sizeof(FeedbackActor_SetupText) == 0x000018, "Wrong size on FeedbackActor_SetupText");
static_assert(offsetof(FeedbackActor_SetupText, InText) == 0x000000, "Member 'FeedbackActor_SetupText::InText' has a wrong offset!");

// Function ThankYouVeryCool.FeedbackActor.SetupTexture
// 0x0001 (0x0001 - 0x0000)
struct FeedbackActor_SetupTexture final
{
public:
	EFeedback                                     ForType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackActor_SetupTexture) == 0x000001, "Wrong alignment on FeedbackActor_SetupTexture");
static_assert(sizeof(FeedbackActor_SetupTexture) == 0x000001, "Wrong size on FeedbackActor_SetupTexture");
static_assert(offsetof(FeedbackActor_SetupTexture, ForType) == 0x000000, "Member 'FeedbackActor_SetupTexture::ForType' has a wrong offset!");

// Function ThankYouVeryCool.FeedbackActor.SetupValue
// 0x0004 (0x0004 - 0x0000)
struct FeedbackActor_SetupValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackActor_SetupValue) == 0x000004, "Wrong alignment on FeedbackActor_SetupValue");
static_assert(sizeof(FeedbackActor_SetupValue) == 0x000004, "Wrong size on FeedbackActor_SetupValue");
static_assert(offsetof(FeedbackActor_SetupValue, Value) == 0x000000, "Member 'FeedbackActor_SetupValue::Value' has a wrong offset!");

// Function ThankYouVeryCool.FireNumberOfShots.FireShots
// 0x0018 (0x0018 - 0x0000)
struct FireNumberOfShots_FireShots final
{
public:
	class ANPC*                                   InShooter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InShotCount;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFireNumberOfShots*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireNumberOfShots_FireShots) == 0x000008, "Wrong alignment on FireNumberOfShots_FireShots");
static_assert(sizeof(FireNumberOfShots_FireShots) == 0x000018, "Wrong size on FireNumberOfShots_FireShots");
static_assert(offsetof(FireNumberOfShots_FireShots, InShooter) == 0x000000, "Member 'FireNumberOfShots_FireShots::InShooter' has a wrong offset!");
static_assert(offsetof(FireNumberOfShots_FireShots, InShotCount) == 0x000008, "Member 'FireNumberOfShots_FireShots::InShotCount' has a wrong offset!");
static_assert(offsetof(FireNumberOfShots_FireShots, ReturnValue) == 0x000010, "Member 'FireNumberOfShots_FireShots::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPS5ActivityManager.IsCampaignActivityLaunchRequested
// 0x0001 (0x0001 - 0x0000)
struct TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested) == 0x000001, "Wrong alignment on TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested");
static_assert(sizeof(TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested) == 0x000001, "Wrong size on TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested");
static_assert(offsetof(TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested, ReturnValue) == 0x000000, "Member 'TYVCPS5ActivityManager_IsCampaignActivityLaunchRequested::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.FootstepComponent.UpdateOnLand
// 0x0088 (0x0088 - 0x0000)
struct FootstepComponent_UpdateOnLand final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootstepComponent_UpdateOnLand) == 0x000004, "Wrong alignment on FootstepComponent_UpdateOnLand");
static_assert(sizeof(FootstepComponent_UpdateOnLand) == 0x000088, "Wrong size on FootstepComponent_UpdateOnLand");
static_assert(offsetof(FootstepComponent_UpdateOnLand, Hit) == 0x000000, "Member 'FootstepComponent_UpdateOnLand::Hit' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.GetDefaultFocus
// 0x0008 (0x0008 - 0x0000)
struct GameMenuWidget_GetDefaultFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_GetDefaultFocus) == 0x000008, "Wrong alignment on GameMenuWidget_GetDefaultFocus");
static_assert(sizeof(GameMenuWidget_GetDefaultFocus) == 0x000008, "Wrong size on GameMenuWidget_GetDefaultFocus");
static_assert(offsetof(GameMenuWidget_GetDefaultFocus, ReturnValue) == 0x000000, "Member 'GameMenuWidget_GetDefaultFocus::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.GetPauseDefaultFocus
// 0x0008 (0x0008 - 0x0000)
struct GameMenuWidget_GetPauseDefaultFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_GetPauseDefaultFocus) == 0x000008, "Wrong alignment on GameMenuWidget_GetPauseDefaultFocus");
static_assert(sizeof(GameMenuWidget_GetPauseDefaultFocus) == 0x000008, "Wrong size on GameMenuWidget_GetPauseDefaultFocus");
static_assert(offsetof(GameMenuWidget_GetPauseDefaultFocus, ReturnValue) == 0x000000, "Member 'GameMenuWidget_GetPauseDefaultFocus::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.ShowThisVictoryWidget
// 0x0008 (0x0008 - 0x0000)
struct GameMenuWidget_ShowThisVictoryWidget final
{
public:
	class UUserWidget*                            InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_ShowThisVictoryWidget) == 0x000008, "Wrong alignment on GameMenuWidget_ShowThisVictoryWidget");
static_assert(sizeof(GameMenuWidget_ShowThisVictoryWidget) == 0x000008, "Wrong size on GameMenuWidget_ShowThisVictoryWidget");
static_assert(offsetof(GameMenuWidget_ShowThisVictoryWidget, InWidget) == 0x000000, "Member 'GameMenuWidget_ShowThisVictoryWidget::InWidget' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.StartArcade
// 0x0018 (0x0018 - 0x0000)
struct GameMenuWidget_StartArcade final
{
public:
	EDifficulty                                   Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     GameType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnWithArmCannon;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomLevel;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArcadeLevelAsset*                      InAsset;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBizarre;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameMenuWidget_StartArcade) == 0x000008, "Wrong alignment on GameMenuWidget_StartArcade");
static_assert(sizeof(GameMenuWidget_StartArcade) == 0x000018, "Wrong size on GameMenuWidget_StartArcade");
static_assert(offsetof(GameMenuWidget_StartArcade, Difficulty) == 0x000000, "Member 'GameMenuWidget_StartArcade::Difficulty' has a wrong offset!");
static_assert(offsetof(GameMenuWidget_StartArcade, GameType) == 0x000001, "Member 'GameMenuWidget_StartArcade::GameType' has a wrong offset!");
static_assert(offsetof(GameMenuWidget_StartArcade, bSpawnWithArmCannon) == 0x000002, "Member 'GameMenuWidget_StartArcade::bSpawnWithArmCannon' has a wrong offset!");
static_assert(offsetof(GameMenuWidget_StartArcade, bCustomLevel) == 0x000003, "Member 'GameMenuWidget_StartArcade::bCustomLevel' has a wrong offset!");
static_assert(offsetof(GameMenuWidget_StartArcade, InAsset) == 0x000008, "Member 'GameMenuWidget_StartArcade::InAsset' has a wrong offset!");
static_assert(offsetof(GameMenuWidget_StartArcade, bBizarre) == 0x000010, "Member 'GameMenuWidget_StartArcade::bBizarre' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.StartLevelEditorLoad
// 0x0008 (0x0008 - 0x0000)
struct GameMenuWidget_StartLevelEditorLoad final
{
public:
	class UArcadeLevelAssetWorkshop*              LevelAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_StartLevelEditorLoad) == 0x000008, "Wrong alignment on GameMenuWidget_StartLevelEditorLoad");
static_assert(sizeof(GameMenuWidget_StartLevelEditorLoad) == 0x000008, "Wrong size on GameMenuWidget_StartLevelEditorLoad");
static_assert(offsetof(GameMenuWidget_StartLevelEditorLoad, LevelAsset) == 0x000000, "Member 'GameMenuWidget_StartLevelEditorLoad::LevelAsset' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.StartLevelEditorNew
// 0x0010 (0x0010 - 0x0000)
struct GameMenuWidget_StartLevelEditorNew final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_StartLevelEditorNew) == 0x000008, "Wrong alignment on GameMenuWidget_StartLevelEditorNew");
static_assert(sizeof(GameMenuWidget_StartLevelEditorNew) == 0x000010, "Wrong size on GameMenuWidget_StartLevelEditorNew");
static_assert(offsetof(GameMenuWidget_StartLevelEditorNew, LevelPath) == 0x000000, "Member 'GameMenuWidget_StartLevelEditorNew::LevelPath' has a wrong offset!");

// Function ThankYouVeryCool.GameMenuWidget.StartLevelEditorVox
// 0x0010 (0x0010 - 0x0000)
struct GameMenuWidget_StartLevelEditorVox final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuWidget_StartLevelEditorVox) == 0x000008, "Wrong alignment on GameMenuWidget_StartLevelEditorVox");
static_assert(sizeof(GameMenuWidget_StartLevelEditorVox) == 0x000010, "Wrong size on GameMenuWidget_StartLevelEditorVox");
static_assert(offsetof(GameMenuWidget_StartLevelEditorVox, LevelPath) == 0x000000, "Member 'GameMenuWidget_StartLevelEditorVox::LevelPath' has a wrong offset!");

// Function ThankYouVeryCool.GameplayGask_EndArcade.TaskEndArcade
// 0x0028 (0x0028 - 0x0000)
struct GameplayGask_EndArcade_TaskEndArcade final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     InGameType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayGask_EndArcade*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayGask_EndArcade_TaskEndArcade) == 0x000008, "Wrong alignment on GameplayGask_EndArcade_TaskEndArcade");
static_assert(sizeof(GameplayGask_EndArcade_TaskEndArcade) == 0x000028, "Wrong size on GameplayGask_EndArcade_TaskEndArcade");
static_assert(offsetof(GameplayGask_EndArcade_TaskEndArcade, TaskOwner) == 0x000000, "Member 'GameplayGask_EndArcade_TaskEndArcade::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayGask_EndArcade_TaskEndArcade, InGameMode) == 0x000010, "Member 'GameplayGask_EndArcade_TaskEndArcade::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayGask_EndArcade_TaskEndArcade, InGameType) == 0x000018, "Member 'GameplayGask_EndArcade_TaskEndArcade::InGameType' has a wrong offset!");
static_assert(offsetof(GameplayGask_EndArcade_TaskEndArcade, Priority) == 0x000019, "Member 'GameplayGask_EndArcade_TaskEndArcade::Priority' has a wrong offset!");
static_assert(offsetof(GameplayGask_EndArcade_TaskEndArcade, ReturnValue) == 0x000020, "Member 'GameplayGask_EndArcade_TaskEndArcade::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayGask_EndArcade.NodeUnloaded
// 0x0010 (0x0010 - 0x0000)
struct GameplayGask_EndArcade_NodeUnloaded final
{
public:
	TArray<class FName>                           Levelnames;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayGask_EndArcade_NodeUnloaded) == 0x000008, "Wrong alignment on GameplayGask_EndArcade_NodeUnloaded");
static_assert(sizeof(GameplayGask_EndArcade_NodeUnloaded) == 0x000010, "Wrong size on GameplayGask_EndArcade_NodeUnloaded");
static_assert(offsetof(GameplayGask_EndArcade_NodeUnloaded, Levelnames) == 0x000000, "Member 'GameplayGask_EndArcade_NodeUnloaded::Levelnames' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.DoFresh
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_DoFresh final
{
public:
	EFeat                                         ForFeat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_DoFresh) == 0x000001, "Wrong alignment on GameplayHUD_DoFresh");
static_assert(sizeof(GameplayHUD_DoFresh) == 0x000001, "Wrong size on GameplayHUD_DoFresh");
static_assert(offsetof(GameplayHUD_DoFresh, ForFeat) == 0x000000, "Member 'GameplayHUD_DoFresh::ForFeat' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.DoStale
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_DoStale final
{
public:
	EFeat                                         ForFeat;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_DoStale) == 0x000001, "Wrong alignment on GameplayHUD_DoStale");
static_assert(sizeof(GameplayHUD_DoStale) == 0x000001, "Wrong size on GameplayHUD_DoStale");
static_assert(offsetof(GameplayHUD_DoStale, ForFeat) == 0x000000, "Member 'GameplayHUD_DoStale::ForFeat' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.FocusOnWeapon
// 0x0008 (0x0008 - 0x0000)
struct GameplayHUD_FocusOnWeapon final
{
public:
	class AWeaponBase*                            ToFocus;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_FocusOnWeapon) == 0x000008, "Wrong alignment on GameplayHUD_FocusOnWeapon");
static_assert(sizeof(GameplayHUD_FocusOnWeapon) == 0x000008, "Wrong size on GameplayHUD_FocusOnWeapon");
static_assert(offsetof(GameplayHUD_FocusOnWeapon, ToFocus) == 0x000000, "Member 'GameplayHUD_FocusOnWeapon::ToFocus' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.NotifyCannonMode
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_NotifyCannonMode final
{
public:
	ECannonMode                                   NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_NotifyCannonMode) == 0x000001, "Wrong alignment on GameplayHUD_NotifyCannonMode");
static_assert(sizeof(GameplayHUD_NotifyCannonMode) == 0x000001, "Wrong size on GameplayHUD_NotifyCannonMode");
static_assert(offsetof(GameplayHUD_NotifyCannonMode, NewMode) == 0x000000, "Member 'GameplayHUD_NotifyCannonMode::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetAmmoViz
// 0x0002 (0x0002 - 0x0000)
struct GameplayHUD_SetAmmoViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetAmmoViz) == 0x000001, "Wrong alignment on GameplayHUD_SetAmmoViz");
static_assert(sizeof(GameplayHUD_SetAmmoViz) == 0x000002, "Wrong size on GameplayHUD_SetAmmoViz");
static_assert(offsetof(GameplayHUD_SetAmmoViz, bViz) == 0x000000, "Member 'GameplayHUD_SetAmmoViz::bViz' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetAmmoViz, bAnimate) == 0x000001, "Member 'GameplayHUD_SetAmmoViz::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCannonChargeViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetCannonChargeViz final
{
public:
	bool                                          bIsViz;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCannonChargeViz) == 0x000001, "Wrong alignment on GameplayHUD_SetCannonChargeViz");
static_assert(sizeof(GameplayHUD_SetCannonChargeViz) == 0x000001, "Wrong size on GameplayHUD_SetCannonChargeViz");
static_assert(offsetof(GameplayHUD_SetCannonChargeViz, bIsViz) == 0x000000, "Member 'GameplayHUD_SetCannonChargeViz::bIsViz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCannonPercentage
// 0x0004 (0x0004 - 0x0000)
struct GameplayHUD_SetCannonPercentage final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCannonPercentage) == 0x000004, "Wrong alignment on GameplayHUD_SetCannonPercentage");
static_assert(sizeof(GameplayHUD_SetCannonPercentage) == 0x000004, "Wrong size on GameplayHUD_SetCannonPercentage");
static_assert(offsetof(GameplayHUD_SetCannonPercentage, InPercent) == 0x000000, "Member 'GameplayHUD_SetCannonPercentage::InPercent' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCannonShots
// 0x0008 (0x0008 - 0x0000)
struct GameplayHUD_SetCannonShots final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCannonShots) == 0x000004, "Wrong alignment on GameplayHUD_SetCannonShots");
static_assert(sizeof(GameplayHUD_SetCannonShots) == 0x000008, "Wrong size on GameplayHUD_SetCannonShots");
static_assert(offsetof(GameplayHUD_SetCannonShots, Left) == 0x000000, "Member 'GameplayHUD_SetCannonShots::Left' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetCannonShots, Total) == 0x000004, "Member 'GameplayHUD_SetCannonShots::Total' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCannonShotsViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetCannonShotsViz final
{
public:
	bool                                          bIsViz;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCannonShotsViz) == 0x000001, "Wrong alignment on GameplayHUD_SetCannonShotsViz");
static_assert(sizeof(GameplayHUD_SetCannonShotsViz) == 0x000001, "Wrong size on GameplayHUD_SetCannonShotsViz");
static_assert(offsetof(GameplayHUD_SetCannonShotsViz, bIsViz) == 0x000000, "Member 'GameplayHUD_SetCannonShotsViz::bIsViz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCardsViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetCardsViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCardsViz) == 0x000001, "Wrong alignment on GameplayHUD_SetCardsViz");
static_assert(sizeof(GameplayHUD_SetCardsViz) == 0x000001, "Wrong size on GameplayHUD_SetCardsViz");
static_assert(offsetof(GameplayHUD_SetCardsViz, bViz) == 0x000000, "Member 'GameplayHUD_SetCardsViz::bViz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCompassViz
// 0x0002 (0x0002 - 0x0000)
struct GameplayHUD_SetCompassViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCompassViz) == 0x000001, "Wrong alignment on GameplayHUD_SetCompassViz");
static_assert(sizeof(GameplayHUD_SetCompassViz) == 0x000002, "Wrong size on GameplayHUD_SetCompassViz");
static_assert(offsetof(GameplayHUD_SetCompassViz, bViz) == 0x000000, "Member 'GameplayHUD_SetCompassViz::bViz' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetCompassViz, bAnimate) == 0x000001, "Member 'GameplayHUD_SetCompassViz::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCompressedHUD
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetCompressedHUD final
{
public:
	bool                                          bCompressed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCompressedHUD) == 0x000001, "Wrong alignment on GameplayHUD_SetCompressedHUD");
static_assert(sizeof(GameplayHUD_SetCompressedHUD) == 0x000001, "Wrong size on GameplayHUD_SetCompressedHUD");
static_assert(offsetof(GameplayHUD_SetCompressedHUD, bCompressed) == 0x000000, "Member 'GameplayHUD_SetCompressedHUD::bCompressed' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCrosshairTexture
// 0x0008 (0x0008 - 0x0000)
struct GameplayHUD_SetCrosshairTexture final
{
public:
	class UTexture2D*                             ToSet;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCrosshairTexture) == 0x000008, "Wrong alignment on GameplayHUD_SetCrosshairTexture");
static_assert(sizeof(GameplayHUD_SetCrosshairTexture) == 0x000008, "Wrong size on GameplayHUD_SetCrosshairTexture");
static_assert(offsetof(GameplayHUD_SetCrosshairTexture, ToSet) == 0x000000, "Member 'GameplayHUD_SetCrosshairTexture::ToSet' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetCrosshairViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetCrosshairViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetCrosshairViz) == 0x000001, "Wrong alignment on GameplayHUD_SetCrosshairViz");
static_assert(sizeof(GameplayHUD_SetCrosshairViz) == 0x000001, "Wrong size on GameplayHUD_SetCrosshairViz");
static_assert(offsetof(GameplayHUD_SetCrosshairViz, bViz) == 0x000000, "Member 'GameplayHUD_SetCrosshairViz::bViz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetEnemiesRemaining
// 0x0008 (0x0008 - 0x0000)
struct GameplayHUD_SetEnemiesRemaining final
{
public:
	int32                                         Remaining;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetEnemiesRemaining) == 0x000004, "Wrong alignment on GameplayHUD_SetEnemiesRemaining");
static_assert(sizeof(GameplayHUD_SetEnemiesRemaining) == 0x000008, "Wrong size on GameplayHUD_SetEnemiesRemaining");
static_assert(offsetof(GameplayHUD_SetEnemiesRemaining, Remaining) == 0x000000, "Member 'GameplayHUD_SetEnemiesRemaining::Remaining' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetEnemiesRemaining, Total) == 0x000004, "Member 'GameplayHUD_SetEnemiesRemaining::Total' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetKickPromptViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetKickPromptViz final
{
public:
	bool                                          Viz;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetKickPromptViz) == 0x000001, "Wrong alignment on GameplayHUD_SetKickPromptViz");
static_assert(sizeof(GameplayHUD_SetKickPromptViz) == 0x000001, "Wrong size on GameplayHUD_SetKickPromptViz");
static_assert(offsetof(GameplayHUD_SetKickPromptViz, Viz) == 0x000000, "Member 'GameplayHUD_SetKickPromptViz::Viz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetLuckViz
// 0x0002 (0x0002 - 0x0000)
struct GameplayHUD_SetLuckViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetLuckViz) == 0x000001, "Wrong alignment on GameplayHUD_SetLuckViz");
static_assert(sizeof(GameplayHUD_SetLuckViz) == 0x000002, "Wrong size on GameplayHUD_SetLuckViz");
static_assert(offsetof(GameplayHUD_SetLuckViz, bViz) == 0x000000, "Member 'GameplayHUD_SetLuckViz::bViz' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetLuckViz, bAnimate) == 0x000001, "Member 'GameplayHUD_SetLuckViz::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetMultiplier
// 0x0008 (0x0008 - 0x0000)
struct GameplayHUD_SetMultiplier final
{
public:
	int32                                         multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUp;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayHUD_SetMultiplier) == 0x000004, "Wrong alignment on GameplayHUD_SetMultiplier");
static_assert(sizeof(GameplayHUD_SetMultiplier) == 0x000008, "Wrong size on GameplayHUD_SetMultiplier");
static_assert(offsetof(GameplayHUD_SetMultiplier, multiplier) == 0x000000, "Member 'GameplayHUD_SetMultiplier::multiplier' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetMultiplier, bIsUp) == 0x000004, "Member 'GameplayHUD_SetMultiplier::bIsUp' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetMultiplier, bShouldAnimate) == 0x000005, "Member 'GameplayHUD_SetMultiplier::bShouldAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetMultiplierOnlyCorner
// 0x0004 (0x0004 - 0x0000)
struct GameplayHUD_SetMultiplierOnlyCorner final
{
public:
	int32                                         multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetMultiplierOnlyCorner) == 0x000004, "Wrong alignment on GameplayHUD_SetMultiplierOnlyCorner");
static_assert(sizeof(GameplayHUD_SetMultiplierOnlyCorner) == 0x000004, "Wrong size on GameplayHUD_SetMultiplierOnlyCorner");
static_assert(offsetof(GameplayHUD_SetMultiplierOnlyCorner, multiplier) == 0x000000, "Member 'GameplayHUD_SetMultiplierOnlyCorner::multiplier' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetObjectiveProgress
// 0x0004 (0x0004 - 0x0000)
struct GameplayHUD_SetObjectiveProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetObjectiveProgress) == 0x000004, "Wrong alignment on GameplayHUD_SetObjectiveProgress");
static_assert(sizeof(GameplayHUD_SetObjectiveProgress) == 0x000004, "Wrong size on GameplayHUD_SetObjectiveProgress");
static_assert(offsetof(GameplayHUD_SetObjectiveProgress, Progress) == 0x000000, "Member 'GameplayHUD_SetObjectiveProgress::Progress' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetObjectiveText
// 0x0018 (0x0018 - 0x0000)
struct GameplayHUD_SetObjectiveText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotify;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayHUD_SetObjectiveText) == 0x000008, "Wrong alignment on GameplayHUD_SetObjectiveText");
static_assert(sizeof(GameplayHUD_SetObjectiveText) == 0x000018, "Wrong size on GameplayHUD_SetObjectiveText");
static_assert(offsetof(GameplayHUD_SetObjectiveText, InText) == 0x000000, "Member 'GameplayHUD_SetObjectiveText::InText' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetObjectiveText, bDoNotify) == 0x000010, "Member 'GameplayHUD_SetObjectiveText::bDoNotify' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetObjectiveViz
// 0x0002 (0x0002 - 0x0000)
struct GameplayHUD_SetObjectiveViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetObjectiveViz) == 0x000001, "Wrong alignment on GameplayHUD_SetObjectiveViz");
static_assert(sizeof(GameplayHUD_SetObjectiveViz) == 0x000002, "Wrong size on GameplayHUD_SetObjectiveViz");
static_assert(offsetof(GameplayHUD_SetObjectiveViz, bViz) == 0x000000, "Member 'GameplayHUD_SetObjectiveViz::bViz' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetObjectiveViz, bAnimate) == 0x000001, "Member 'GameplayHUD_SetObjectiveViz::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetScore
// 0x0004 (0x0004 - 0x0000)
struct GameplayHUD_SetScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetScore) == 0x000004, "Wrong alignment on GameplayHUD_SetScore");
static_assert(sizeof(GameplayHUD_SetScore) == 0x000004, "Wrong size on GameplayHUD_SetScore");
static_assert(offsetof(GameplayHUD_SetScore, Score) == 0x000000, "Member 'GameplayHUD_SetScore::Score' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetSloMoViz
// 0x0002 (0x0002 - 0x0000)
struct GameplayHUD_SetSloMoViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetSloMoViz) == 0x000001, "Wrong alignment on GameplayHUD_SetSloMoViz");
static_assert(sizeof(GameplayHUD_SetSloMoViz) == 0x000002, "Wrong size on GameplayHUD_SetSloMoViz");
static_assert(offsetof(GameplayHUD_SetSloMoViz, bViz) == 0x000000, "Member 'GameplayHUD_SetSloMoViz::bViz' has a wrong offset!");
static_assert(offsetof(GameplayHUD_SetSloMoViz, bAnimate) == 0x000001, "Member 'GameplayHUD_SetSloMoViz::bAnimate' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetSpeedrunnersViz
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetSpeedrunnersViz final
{
public:
	bool                                          bIsViz;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetSpeedrunnersViz) == 0x000001, "Wrong alignment on GameplayHUD_SetSpeedrunnersViz");
static_assert(sizeof(GameplayHUD_SetSpeedrunnersViz) == 0x000001, "Wrong size on GameplayHUD_SetSpeedrunnersViz");
static_assert(offsetof(GameplayHUD_SetSpeedrunnersViz, bIsViz) == 0x000000, "Member 'GameplayHUD_SetSpeedrunnersViz::bIsViz' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.SetupForMode
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_SetupForMode final
{
public:
	EGameType                                     ForMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_SetupForMode) == 0x000001, "Wrong alignment on GameplayHUD_SetupForMode");
static_assert(sizeof(GameplayHUD_SetupForMode) == 0x000001, "Wrong size on GameplayHUD_SetupForMode");
static_assert(offsetof(GameplayHUD_SetupForMode, ForMode) == 0x000000, "Member 'GameplayHUD_SetupForMode::ForMode' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.ShowArcadeOver
// 0x0001 (0x0001 - 0x0000)
struct GameplayHUD_ShowArcadeOver final
{
public:
	bool                                          bArcadeOver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_ShowArcadeOver) == 0x000001, "Wrong alignment on GameplayHUD_ShowArcadeOver");
static_assert(sizeof(GameplayHUD_ShowArcadeOver) == 0x000001, "Wrong size on GameplayHUD_ShowArcadeOver");
static_assert(offsetof(GameplayHUD_ShowArcadeOver, bArcadeOver) == 0x000000, "Member 'GameplayHUD_ShowArcadeOver::bArcadeOver' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.ShowRemainingNotification
// 0x0004 (0x0004 - 0x0000)
struct GameplayHUD_ShowRemainingNotification final
{
public:
	int32                                         Remaining;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_ShowRemainingNotification) == 0x000004, "Wrong alignment on GameplayHUD_ShowRemainingNotification");
static_assert(sizeof(GameplayHUD_ShowRemainingNotification) == 0x000004, "Wrong size on GameplayHUD_ShowRemainingNotification");
static_assert(offsetof(GameplayHUD_ShowRemainingNotification, Remaining) == 0x000000, "Member 'GameplayHUD_ShowRemainingNotification::Remaining' has a wrong offset!");

// Function ThankYouVeryCool.GameplayHUD.UpdateChallengeCount
// 0x0010 (0x0010 - 0x0000)
struct GameplayHUD_UpdateChallengeCount final
{
public:
	TArray<struct FChallengeDisplay>              ToDisplay;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayHUD_UpdateChallengeCount) == 0x000008, "Wrong alignment on GameplayHUD_UpdateChallengeCount");
static_assert(sizeof(GameplayHUD_UpdateChallengeCount) == 0x000010, "Wrong size on GameplayHUD_UpdateChallengeCount");
static_assert(offsetof(GameplayHUD_UpdateChallengeCount, ToDisplay) == 0x000000, "Member 'GameplayHUD_UpdateChallengeCount::ToDisplay' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.TaskLoadChapter
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_LoadChapter_TaskLoadChapter final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadChapter*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_TaskLoadChapter) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_TaskLoadChapter");
static_assert(sizeof(GameplayTask_LoadChapter_TaskLoadChapter) == 0x000020, "Wrong size on GameplayTask_LoadChapter_TaskLoadChapter");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapter, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadChapter_TaskLoadChapter::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapter, Priority) == 0x000010, "Member 'GameplayTask_LoadChapter_TaskLoadChapter::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapter, ReturnValue) == 0x000018, "Member 'GameplayTask_LoadChapter_TaskLoadChapter::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.TaskLoadChapterQuick
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_LoadChapter_TaskLoadChapterQuick final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadChapter*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_TaskLoadChapterQuick) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_TaskLoadChapterQuick");
static_assert(sizeof(GameplayTask_LoadChapter_TaskLoadChapterQuick) == 0x000020, "Wrong size on GameplayTask_LoadChapter_TaskLoadChapterQuick");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapterQuick, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadChapter_TaskLoadChapterQuick::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapterQuick, Priority) == 0x000010, "Member 'GameplayTask_LoadChapter_TaskLoadChapterQuick::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskLoadChapterQuick, ReturnValue) == 0x000018, "Member 'GameplayTask_LoadChapter_TaskLoadChapterQuick::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.TaskStartChapter
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_LoadChapter_TaskStartChapter final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class AChapter*                               InChapter;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   Difficulty;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCampaignDataAsset*                     DataAsset;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadChapter*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_TaskStartChapter) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_TaskStartChapter");
static_assert(sizeof(GameplayTask_LoadChapter_TaskStartChapter) == 0x000038, "Wrong size on GameplayTask_LoadChapter_TaskStartChapter");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadChapter_TaskStartChapter::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, InChapter) == 0x000010, "Member 'GameplayTask_LoadChapter_TaskStartChapter::InChapter' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, Difficulty) == 0x000018, "Member 'GameplayTask_LoadChapter_TaskStartChapter::Difficulty' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, DataAsset) == 0x000020, "Member 'GameplayTask_LoadChapter_TaskStartChapter::DataAsset' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, Priority) == 0x000028, "Member 'GameplayTask_LoadChapter_TaskStartChapter::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadChapter_TaskStartChapter, ReturnValue) == 0x000030, "Member 'GameplayTask_LoadChapter_TaskStartChapter::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.NodeReset
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_LoadChapter_NodeReset final
{
public:
	struct FTYVCNodeMemory                        InNodeMemory;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_NodeReset) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_NodeReset");
static_assert(sizeof(GameplayTask_LoadChapter_NodeReset) == 0x000020, "Wrong size on GameplayTask_LoadChapter_NodeReset");
static_assert(offsetof(GameplayTask_LoadChapter_NodeReset, InNodeMemory) == 0x000000, "Member 'GameplayTask_LoadChapter_NodeReset::InNodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.PostNodeLoaded
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_LoadChapter_PostNodeLoaded final
{
public:
	struct FTYVCNodeMemory                        NodeMemory;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_PostNodeLoaded) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_PostNodeLoaded");
static_assert(sizeof(GameplayTask_LoadChapter_PostNodeLoaded) == 0x000020, "Wrong size on GameplayTask_LoadChapter_PostNodeLoaded");
static_assert(offsetof(GameplayTask_LoadChapter_PostNodeLoaded, NodeMemory) == 0x000000, "Member 'GameplayTask_LoadChapter_PostNodeLoaded::NodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadChapter.VoxelDataLoaded
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_LoadChapter_VoxelDataLoaded final
{
public:
	struct FVoxelUncompressedWorldSave            Save;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadChapter_VoxelDataLoaded) == 0x000008, "Wrong alignment on GameplayTask_LoadChapter_VoxelDataLoaded");
static_assert(sizeof(GameplayTask_LoadChapter_VoxelDataLoaded) == 0x000020, "Wrong size on GameplayTask_LoadChapter_VoxelDataLoaded");
static_assert(offsetof(GameplayTask_LoadChapter_VoxelDataLoaded, Save) == 0x000000, "Member 'GameplayTask_LoadChapter_VoxelDataLoaded::Save' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.TaskLoadNode_ForArcade
// 0x0048 (0x0048 - 0x0000)
struct GameplayTask_LoadNode_TaskLoadNode_ForArcade final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadNode*                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_TaskLoadNode_ForArcade) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_TaskLoadNode_ForArcade");
static_assert(sizeof(GameplayTask_LoadNode_TaskLoadNode_ForArcade) == 0x000048, "Wrong size on GameplayTask_LoadNode_TaskLoadNode_ForArcade");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, NodeName) == 0x000010, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, InGameMode) == 0x000020, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, OnCompleteDel) == 0x000028, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, Priority) == 0x000038, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForArcade, ReturnValue) == 0x000040, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForArcade::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.TaskLoadNode_ForCampaign
// 0x0048 (0x0048 - 0x0000)
struct GameplayTask_LoadNode_TaskLoadNode_ForCampaign final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AChapter*                               InChapter;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadNode*                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_TaskLoadNode_ForCampaign");
static_assert(sizeof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign) == 0x000048, "Wrong size on GameplayTask_LoadNode_TaskLoadNode_ForCampaign");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, NodeName) == 0x000010, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, InChapter) == 0x000020, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::InChapter' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, OnCompleteDel) == 0x000028, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, Priority) == 0x000038, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForCampaign, ReturnValue) == 0x000040, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.TaskLoadNode_ForEditorLoad
// 0x0058 (0x0058 - 0x0000)
struct GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             PreVDel;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadNode*                 ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad");
static_assert(sizeof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad) == 0x000058, "Wrong size on GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, NodeName) == 0x000010, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, InGameMode) == 0x000020, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, OnCompleteDel) == 0x000028, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, PreVDel) == 0x000038, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::PreVDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, Priority) == 0x000048, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad, ReturnValue) == 0x000050, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorLoad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.TaskLoadNode_ForEditorVox
// 0x0060 (0x0060 - 0x0000)
struct GameplayTask_LoadNode_TaskLoadNode_ForEditorVox final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NodeName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        InDataAsset;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             PreVDel;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_LoadNode*                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_TaskLoadNode_ForEditorVox");
static_assert(sizeof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox) == 0x000060, "Wrong size on GameplayTask_LoadNode_TaskLoadNode_ForEditorVox");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, TaskOwner) == 0x000000, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, NodeName) == 0x000010, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, InGameMode) == 0x000020, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, OnCompleteDel) == 0x000028, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, InDataAsset) == 0x000038, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::InDataAsset' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, PreVDel) == 0x000040, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::PreVDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, Priority) == 0x000050, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_LoadNode_TaskLoadNode_ForEditorVox, ReturnValue) == 0x000058, "Member 'GameplayTask_LoadNode_TaskLoadNode_ForEditorVox::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.NotifyVoxelWorldLoaded
// 0x0008 (0x0008 - 0x0000)
struct GameplayTask_LoadNode_NotifyVoxelWorldLoaded final
{
public:
	class AVoxelWorld*                            LoadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_NotifyVoxelWorldLoaded) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_NotifyVoxelWorldLoaded");
static_assert(sizeof(GameplayTask_LoadNode_NotifyVoxelWorldLoaded) == 0x000008, "Wrong size on GameplayTask_LoadNode_NotifyVoxelWorldLoaded");
static_assert(offsetof(GameplayTask_LoadNode_NotifyVoxelWorldLoaded, LoadedWorld) == 0x000000, "Member 'GameplayTask_LoadNode_NotifyVoxelWorldLoaded::LoadedWorld' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_LoadNode.TickLoadingStandalones
// 0x0008 (0x0008 - 0x0000)
struct GameplayTask_LoadNode_TickLoadingStandalones final
{
public:
	class AVoxelWorld*                            LoadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_LoadNode_TickLoadingStandalones) == 0x000008, "Wrong alignment on GameplayTask_LoadNode_TickLoadingStandalones");
static_assert(sizeof(GameplayTask_LoadNode_TickLoadingStandalones) == 0x000008, "Wrong size on GameplayTask_LoadNode_TickLoadingStandalones");
static_assert(offsetof(GameplayTask_LoadNode_TickLoadingStandalones, LoadedWorld) == 0x000000, "Member 'GameplayTask_LoadNode_TickLoadingStandalones::LoadedWorld' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ResetArcade.TaskResetArcade
// 0x0028 (0x0028 - 0x0000)
struct GameplayTask_ResetArcade_TaskResetArcade final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ResetArcade*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ResetArcade_TaskResetArcade) == 0x000008, "Wrong alignment on GameplayTask_ResetArcade_TaskResetArcade");
static_assert(sizeof(GameplayTask_ResetArcade_TaskResetArcade) == 0x000028, "Wrong size on GameplayTask_ResetArcade_TaskResetArcade");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetArcade, TaskOwner) == 0x000000, "Member 'GameplayTask_ResetArcade_TaskResetArcade::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetArcade, InGameMode) == 0x000010, "Member 'GameplayTask_ResetArcade_TaskResetArcade::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetArcade, Priority) == 0x000018, "Member 'GameplayTask_ResetArcade_TaskResetArcade::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetArcade, ReturnValue) == 0x000020, "Member 'GameplayTask_ResetArcade_TaskResetArcade::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ResetArcade.TaskResetEditor
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_ResetArcade_TaskResetEditor final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnComplete;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ResetArcade*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ResetArcade_TaskResetEditor) == 0x000008, "Wrong alignment on GameplayTask_ResetArcade_TaskResetEditor");
static_assert(sizeof(GameplayTask_ResetArcade_TaskResetEditor) == 0x000038, "Wrong size on GameplayTask_ResetArcade_TaskResetEditor");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetEditor, TaskOwner) == 0x000000, "Member 'GameplayTask_ResetArcade_TaskResetEditor::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetEditor, InGameMode) == 0x000010, "Member 'GameplayTask_ResetArcade_TaskResetEditor::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetEditor, OnComplete) == 0x000018, "Member 'GameplayTask_ResetArcade_TaskResetEditor::OnComplete' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetEditor, Priority) == 0x000028, "Member 'GameplayTask_ResetArcade_TaskResetEditor::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetArcade_TaskResetEditor, ReturnValue) == 0x000030, "Member 'GameplayTask_ResetArcade_TaskResetEditor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ResetArcade.ResetComplete
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_ResetArcade_ResetComplete final
{
public:
	struct FTYVCNodeMemory                        NodeMemory;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ResetArcade_ResetComplete) == 0x000008, "Wrong alignment on GameplayTask_ResetArcade_ResetComplete");
static_assert(sizeof(GameplayTask_ResetArcade_ResetComplete) == 0x000020, "Wrong size on GameplayTask_ResetArcade_ResetComplete");
static_assert(offsetof(GameplayTask_ResetArcade_ResetComplete, NodeMemory) == 0x000000, "Member 'GameplayTask_ResetArcade_ResetComplete::NodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ResetNodeToGen.TaskReloadVox
// 0x0050 (0x0050 - 0x0000)
struct GameplayTask_ResetNodeToGen_TaskReloadVox final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   NodeName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelIntBox>                   InPrimaryBoxes;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ResetNodeToGen*           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ResetNodeToGen_TaskReloadVox) == 0x000008, "Wrong alignment on GameplayTask_ResetNodeToGen_TaskReloadVox");
static_assert(sizeof(GameplayTask_ResetNodeToGen_TaskReloadVox) == 0x000050, "Wrong size on GameplayTask_ResetNodeToGen_TaskReloadVox");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, TaskOwner) == 0x000000, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, NodeName) == 0x000010, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, InGameMode) == 0x000018, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, InPrimaryBoxes) == 0x000020, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::InPrimaryBoxes' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, OnCompleteDel) == 0x000030, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, Priority) == 0x000040, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskReloadVox, ReturnValue) == 0x000048, "Member 'GameplayTask_ResetNodeToGen_TaskReloadVox::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ResetNodeToGen.TaskResetNode
// 0x0050 (0x0050 - 0x0000)
struct GameplayTask_ResetNodeToGen_TaskResetNode final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   NodeName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelIntBox>                   InPrimaryBoxes;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTYVCNodeMemory& NodeMemory)> OnCompleteDel;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ResetNodeToGen*           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ResetNodeToGen_TaskResetNode) == 0x000008, "Wrong alignment on GameplayTask_ResetNodeToGen_TaskResetNode");
static_assert(sizeof(GameplayTask_ResetNodeToGen_TaskResetNode) == 0x000050, "Wrong size on GameplayTask_ResetNodeToGen_TaskResetNode");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, TaskOwner) == 0x000000, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, NodeName) == 0x000010, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::NodeName' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, InGameMode) == 0x000018, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, InPrimaryBoxes) == 0x000020, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::InPrimaryBoxes' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, OnCompleteDel) == 0x000030, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, Priority) == 0x000040, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ResetNodeToGen_TaskResetNode, ReturnValue) == 0x000048, "Member 'GameplayTask_ResetNodeToGen_TaskResetNode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_SaveChapter.TaskSaveChapter
// 0x0028 (0x0028 - 0x0000)
struct GameplayTask_SaveChapter_TaskSaveChapter final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   InNode;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_SaveChapter*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_SaveChapter_TaskSaveChapter) == 0x000008, "Wrong alignment on GameplayTask_SaveChapter_TaskSaveChapter");
static_assert(sizeof(GameplayTask_SaveChapter_TaskSaveChapter) == 0x000028, "Wrong size on GameplayTask_SaveChapter_TaskSaveChapter");
static_assert(offsetof(GameplayTask_SaveChapter_TaskSaveChapter, TaskOwner) == 0x000000, "Member 'GameplayTask_SaveChapter_TaskSaveChapter::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_SaveChapter_TaskSaveChapter, InNode) == 0x000010, "Member 'GameplayTask_SaveChapter_TaskSaveChapter::InNode' has a wrong offset!");
static_assert(offsetof(GameplayTask_SaveChapter_TaskSaveChapter, Priority) == 0x000018, "Member 'GameplayTask_SaveChapter_TaskSaveChapter::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_SaveChapter_TaskSaveChapter, ReturnValue) == 0x000020, "Member 'GameplayTask_SaveChapter_TaskSaveChapter::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_SaveChapter.AsyncSaveDone
// 0x0018 (0x0018 - 0x0000)
struct GameplayTask_SaveChapter_AsyncSaveDone final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTask_SaveChapter_AsyncSaveDone) == 0x000008, "Wrong alignment on GameplayTask_SaveChapter_AsyncSaveDone");
static_assert(sizeof(GameplayTask_SaveChapter_AsyncSaveDone) == 0x000018, "Wrong size on GameplayTask_SaveChapter_AsyncSaveDone");
static_assert(offsetof(GameplayTask_SaveChapter_AsyncSaveDone, Name_0) == 0x000000, "Member 'GameplayTask_SaveChapter_AsyncSaveDone::Name_0' has a wrong offset!");
static_assert(offsetof(GameplayTask_SaveChapter_AsyncSaveDone, Slot) == 0x000010, "Member 'GameplayTask_SaveChapter_AsyncSaveDone::Slot' has a wrong offset!");
static_assert(offsetof(GameplayTask_SaveChapter_AsyncSaveDone, bSuccess) == 0x000014, "Member 'GameplayTask_SaveChapter_AsyncSaveDone::bSuccess' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_SaveChapter.GetCompleteSave
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_SaveChapter_GetCompleteSave final
{
public:
	struct FVoxelUncompressedWorldSave            Save;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_SaveChapter_GetCompleteSave) == 0x000008, "Wrong alignment on GameplayTask_SaveChapter_GetCompleteSave");
static_assert(sizeof(GameplayTask_SaveChapter_GetCompleteSave) == 0x000020, "Wrong size on GameplayTask_SaveChapter_GetCompleteSave");
static_assert(offsetof(GameplayTask_SaveChapter_GetCompleteSave, Save) == 0x000000, "Member 'GameplayTask_SaveChapter_GetCompleteSave::Save' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ShowText.TaskIntermissionText
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_ShowText_TaskIntermissionText final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	ECharacter                                    InForCharacter;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ShowText*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ShowText_TaskIntermissionText) == 0x000008, "Wrong alignment on GameplayTask_ShowText_TaskIntermissionText");
static_assert(sizeof(GameplayTask_ShowText_TaskIntermissionText) == 0x000038, "Wrong size on GameplayTask_ShowText_TaskIntermissionText");
static_assert(offsetof(GameplayTask_ShowText_TaskIntermissionText, TaskOwner) == 0x000000, "Member 'GameplayTask_ShowText_TaskIntermissionText::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskIntermissionText, InText) == 0x000010, "Member 'GameplayTask_ShowText_TaskIntermissionText::InText' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskIntermissionText, InForCharacter) == 0x000028, "Member 'GameplayTask_ShowText_TaskIntermissionText::InForCharacter' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskIntermissionText, Priority) == 0x000029, "Member 'GameplayTask_ShowText_TaskIntermissionText::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskIntermissionText, ReturnValue) == 0x000030, "Member 'GameplayTask_ShowText_TaskIntermissionText::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ShowText.TaskTutorialText
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_ShowText_TaskTutorialText final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_ShowText*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ShowText_TaskTutorialText) == 0x000008, "Wrong alignment on GameplayTask_ShowText_TaskTutorialText");
static_assert(sizeof(GameplayTask_ShowText_TaskTutorialText) == 0x000038, "Wrong size on GameplayTask_ShowText_TaskTutorialText");
static_assert(offsetof(GameplayTask_ShowText_TaskTutorialText, TaskOwner) == 0x000000, "Member 'GameplayTask_ShowText_TaskTutorialText::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskTutorialText, InText) == 0x000010, "Member 'GameplayTask_ShowText_TaskTutorialText::InText' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskTutorialText, Priority) == 0x000028, "Member 'GameplayTask_ShowText_TaskTutorialText::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_ShowText_TaskTutorialText, ReturnValue) == 0x000030, "Member 'GameplayTask_ShowText_TaskTutorialText::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_ShowText.PauseStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct GameplayTask_ShowText_PauseStatusChanged final
{
public:
	bool                                          bPauseStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_ShowText_PauseStatusChanged) == 0x000001, "Wrong alignment on GameplayTask_ShowText_PauseStatusChanged");
static_assert(sizeof(GameplayTask_ShowText_PauseStatusChanged) == 0x000001, "Wrong size on GameplayTask_ShowText_PauseStatusChanged");
static_assert(offsetof(GameplayTask_ShowText_PauseStatusChanged, bPauseStatus) == 0x000000, "Member 'GameplayTask_ShowText_PauseStatusChanged::bPauseStatus' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartArcade.TaskStartArcade
// 0x0040 (0x0040 - 0x0000)
struct GameplayTask_StartArcade_TaskStartArcade final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	EDifficulty                                   InDifficulty;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AThankYouVeryCoolGameMode*              InGameMode;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     InGameType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomLevel;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UArcadeLevelAsset*                      InArcadeAsset;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_StartArcade*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartArcade_TaskStartArcade) == 0x000008, "Wrong alignment on GameplayTask_StartArcade_TaskStartArcade");
static_assert(sizeof(GameplayTask_StartArcade_TaskStartArcade) == 0x000040, "Wrong size on GameplayTask_StartArcade_TaskStartArcade");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, TaskOwner) == 0x000000, "Member 'GameplayTask_StartArcade_TaskStartArcade::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, InDifficulty) == 0x000010, "Member 'GameplayTask_StartArcade_TaskStartArcade::InDifficulty' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, InGameMode) == 0x000018, "Member 'GameplayTask_StartArcade_TaskStartArcade::InGameMode' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, InGameType) == 0x000020, "Member 'GameplayTask_StartArcade_TaskStartArcade::InGameType' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, bCustomLevel) == 0x000021, "Member 'GameplayTask_StartArcade_TaskStartArcade::bCustomLevel' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, InArcadeAsset) == 0x000028, "Member 'GameplayTask_StartArcade_TaskStartArcade::InArcadeAsset' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, Priority) == 0x000030, "Member 'GameplayTask_StartArcade_TaskStartArcade::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartArcade_TaskStartArcade, ReturnValue) == 0x000038, "Member 'GameplayTask_StartArcade_TaskStartArcade::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartArcade.PostNodeLoaded
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_StartArcade_PostNodeLoaded final
{
public:
	struct FTYVCNodeMemory                        NodeMemory;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartArcade_PostNodeLoaded) == 0x000008, "Wrong alignment on GameplayTask_StartArcade_PostNodeLoaded");
static_assert(sizeof(GameplayTask_StartArcade_PostNodeLoaded) == 0x000020, "Wrong size on GameplayTask_StartArcade_PostNodeLoaded");
static_assert(offsetof(GameplayTask_StartArcade_PostNodeLoaded, NodeMemory) == 0x000000, "Member 'GameplayTask_StartArcade_PostNodeLoaded::NodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartEditor.TaskReloadVox
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_StartEditor_TaskReloadVox final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 InVoxPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelEditorManager*                    InLevelEditorManager;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_StartEditor*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartEditor_TaskReloadVox) == 0x000008, "Wrong alignment on GameplayTask_StartEditor_TaskReloadVox");
static_assert(sizeof(GameplayTask_StartEditor_TaskReloadVox) == 0x000038, "Wrong size on GameplayTask_StartEditor_TaskReloadVox");
static_assert(offsetof(GameplayTask_StartEditor_TaskReloadVox, TaskOwner) == 0x000000, "Member 'GameplayTask_StartEditor_TaskReloadVox::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskReloadVox, InVoxPath) == 0x000010, "Member 'GameplayTask_StartEditor_TaskReloadVox::InVoxPath' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskReloadVox, InLevelEditorManager) == 0x000020, "Member 'GameplayTask_StartEditor_TaskReloadVox::InLevelEditorManager' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskReloadVox, Priority) == 0x000028, "Member 'GameplayTask_StartEditor_TaskReloadVox::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskReloadVox, ReturnValue) == 0x000030, "Member 'GameplayTask_StartEditor_TaskReloadVox::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartEditor.TaskStartEditorLoad
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_StartEditor_TaskStartEditorLoad final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class UArcadeLevelAsset*                      InLevelAsset;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelEditorManager*                    InLevelEditorManager;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForArcade;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelEditorSave*                       SaveOverride;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayTask_StartEditor*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartEditor_TaskStartEditorLoad) == 0x000008, "Wrong alignment on GameplayTask_StartEditor_TaskStartEditorLoad");
static_assert(sizeof(GameplayTask_StartEditor_TaskStartEditorLoad) == 0x000038, "Wrong size on GameplayTask_StartEditor_TaskStartEditorLoad");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, TaskOwner) == 0x000000, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, InLevelAsset) == 0x000010, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::InLevelAsset' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, InLevelEditorManager) == 0x000018, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::InLevelEditorManager' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, bForArcade) == 0x000020, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::bForArcade' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, Priority) == 0x000021, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, SaveOverride) == 0x000028, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::SaveOverride' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorLoad, ReturnValue) == 0x000030, "Member 'GameplayTask_StartEditor_TaskStartEditorLoad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartEditor.TaskStartEditorNew
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_StartEditor_TaskStartEditorNew final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelEditorManager*                    InLevelEditorManager;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_StartEditor*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartEditor_TaskStartEditorNew) == 0x000008, "Wrong alignment on GameplayTask_StartEditor_TaskStartEditorNew");
static_assert(sizeof(GameplayTask_StartEditor_TaskStartEditorNew) == 0x000038, "Wrong size on GameplayTask_StartEditor_TaskStartEditorNew");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorNew, TaskOwner) == 0x000000, "Member 'GameplayTask_StartEditor_TaskStartEditorNew::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorNew, NewName) == 0x000010, "Member 'GameplayTask_StartEditor_TaskStartEditorNew::NewName' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorNew, InLevelEditorManager) == 0x000020, "Member 'GameplayTask_StartEditor_TaskStartEditorNew::InLevelEditorManager' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorNew, Priority) == 0x000028, "Member 'GameplayTask_StartEditor_TaskStartEditorNew::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorNew, ReturnValue) == 0x000030, "Member 'GameplayTask_StartEditor_TaskStartEditorNew::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartEditor.TaskStartEditorVox
// 0x0038 (0x0038 - 0x0000)
struct GameplayTask_StartEditor_TaskStartEditorVox final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 InVoxPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelEditorManager*                    InLevelEditorManager;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_StartEditor*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartEditor_TaskStartEditorVox) == 0x000008, "Wrong alignment on GameplayTask_StartEditor_TaskStartEditorVox");
static_assert(sizeof(GameplayTask_StartEditor_TaskStartEditorVox) == 0x000038, "Wrong size on GameplayTask_StartEditor_TaskStartEditorVox");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorVox, TaskOwner) == 0x000000, "Member 'GameplayTask_StartEditor_TaskStartEditorVox::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorVox, InVoxPath) == 0x000010, "Member 'GameplayTask_StartEditor_TaskStartEditorVox::InVoxPath' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorVox, InLevelEditorManager) == 0x000020, "Member 'GameplayTask_StartEditor_TaskStartEditorVox::InLevelEditorManager' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorVox, Priority) == 0x000028, "Member 'GameplayTask_StartEditor_TaskStartEditorVox::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_StartEditor_TaskStartEditorVox, ReturnValue) == 0x000030, "Member 'GameplayTask_StartEditor_TaskStartEditorVox::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_StartEditor.PostNodeLoad
// 0x0020 (0x0020 - 0x0000)
struct GameplayTask_StartEditor_PostNodeLoad final
{
public:
	struct FTYVCNodeMemory                        NodeMemory;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_StartEditor_PostNodeLoad) == 0x000008, "Wrong alignment on GameplayTask_StartEditor_PostNodeLoad");
static_assert(sizeof(GameplayTask_StartEditor_PostNodeLoad) == 0x000020, "Wrong size on GameplayTask_StartEditor_PostNodeLoad");
static_assert(offsetof(GameplayTask_StartEditor_PostNodeLoad, NodeMemory) == 0x000000, "Member 'GameplayTask_StartEditor_PostNodeLoad::NodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.GameplayTask_UnloadNode.TaskUnloadNode_ForCampaign
// 0x0060 (0x0060 - 0x0000)
struct GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign final
{
public:
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NodeNames;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class FName>& UnloadedName)> OnCompleteDel;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FTYVCNodeMemory                        InNodeMemory;                                      // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask_UnloadNode*               ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign) == 0x000008, "Wrong alignment on GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign");
static_assert(sizeof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign) == 0x000060, "Wrong size on GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, TaskOwner) == 0x000000, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::TaskOwner' has a wrong offset!");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, NodeNames) == 0x000010, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::NodeNames' has a wrong offset!");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, OnCompleteDel) == 0x000020, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::OnCompleteDel' has a wrong offset!");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, InNodeMemory) == 0x000030, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::InNodeMemory' has a wrong offset!");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, Priority) == 0x000050, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::Priority' has a wrong offset!");
static_assert(offsetof(GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign, ReturnValue) == 0x000058, "Member 'GameplayTask_UnloadNode_TaskUnloadNode_ForCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.GlassVoxelWorld.DoHole
// 0x0020 (0x0020 - 0x0000)
struct GlassVoxelWorld_DoHole final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoleRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirVec;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoDebris;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlassVoxelWorld_DoHole) == 0x000004, "Wrong alignment on GlassVoxelWorld_DoHole");
static_assert(sizeof(GlassVoxelWorld_DoHole) == 0x000020, "Wrong size on GlassVoxelWorld_DoHole");
static_assert(offsetof(GlassVoxelWorld_DoHole, Location) == 0x000000, "Member 'GlassVoxelWorld_DoHole::Location' has a wrong offset!");
static_assert(offsetof(GlassVoxelWorld_DoHole, HoleRadius) == 0x00000C, "Member 'GlassVoxelWorld_DoHole::HoleRadius' has a wrong offset!");
static_assert(offsetof(GlassVoxelWorld_DoHole, DirVec) == 0x000010, "Member 'GlassVoxelWorld_DoHole::DirVec' has a wrong offset!");
static_assert(offsetof(GlassVoxelWorld_DoHole, bDoDebris) == 0x00001C, "Member 'GlassVoxelWorld_DoHole::bDoDebris' has a wrong offset!");

// Function ThankYouVeryCool.GlassVoxelWorld.EditorModeChanged_Implementation
// 0x0001 (0x0001 - 0x0000)
struct GlassVoxelWorld_EditorModeChanged_Implementation final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlassVoxelWorld_EditorModeChanged_Implementation) == 0x000001, "Wrong alignment on GlassVoxelWorld_EditorModeChanged_Implementation");
static_assert(sizeof(GlassVoxelWorld_EditorModeChanged_Implementation) == 0x000001, "Wrong size on GlassVoxelWorld_EditorModeChanged_Implementation");
static_assert(offsetof(GlassVoxelWorld_EditorModeChanged_Implementation, NewMode) == 0x000000, "Member 'GlassVoxelWorld_EditorModeChanged_Implementation::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.GlassVoxelWorld.MakeDebris
// 0x0020 (0x0020 - 0x0000)
struct GlassVoxelWorld_MakeDebris final
{
public:
	struct FVector                                DirVec;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModifiedVoxelValue>            ModdelVals;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlassVoxelWorld_MakeDebris) == 0x000008, "Wrong alignment on GlassVoxelWorld_MakeDebris");
static_assert(sizeof(GlassVoxelWorld_MakeDebris) == 0x000020, "Wrong size on GlassVoxelWorld_MakeDebris");
static_assert(offsetof(GlassVoxelWorld_MakeDebris, DirVec) == 0x000000, "Member 'GlassVoxelWorld_MakeDebris::DirVec' has a wrong offset!");
static_assert(offsetof(GlassVoxelWorld_MakeDebris, ModdelVals) == 0x000010, "Member 'GlassVoxelWorld_MakeDebris::ModdelVals' has a wrong offset!");

// Function ThankYouVeryCool.GlassVoxelWorld.SetDims
// 0x0008 (0x0008 - 0x0000)
struct GlassVoxelWorld_SetDims final
{
public:
	int32                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlassVoxelWorld_SetDims) == 0x000004, "Wrong alignment on GlassVoxelWorld_SetDims");
static_assert(sizeof(GlassVoxelWorld_SetDims) == 0x000008, "Wrong size on GlassVoxelWorld_SetDims");
static_assert(offsetof(GlassVoxelWorld_SetDims, InLength) == 0x000000, "Member 'GlassVoxelWorld_SetDims::InLength' has a wrong offset!");
static_assert(offsetof(GlassVoxelWorld_SetDims, InHeight) == 0x000004, "Member 'GlassVoxelWorld_SetDims::InHeight' has a wrong offset!");

// Function ThankYouVeryCool.M203_Round.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct M203_Round_AddIgnoredActor final
{
public:
	class AActor*                                 ToIgnore;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(M203_Round_AddIgnoredActor) == 0x000008, "Wrong alignment on M203_Round_AddIgnoredActor");
static_assert(sizeof(M203_Round_AddIgnoredActor) == 0x000008, "Wrong size on M203_Round_AddIgnoredActor");
static_assert(offsetof(M203_Round_AddIgnoredActor, ToIgnore) == 0x000000, "Member 'M203_Round_AddIgnoredActor::ToIgnore' has a wrong offset!");

// Function ThankYouVeryCool.M203_Round.Launch
// 0x0040 (0x0040 - 0x0000)
struct M203_Round_Launch final
{
public:
	struct FTransform                             StartTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInFiredByPlayer;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Launcher;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(M203_Round_Launch) == 0x000010, "Wrong alignment on M203_Round_Launch");
static_assert(sizeof(M203_Round_Launch) == 0x000040, "Wrong size on M203_Round_Launch");
static_assert(offsetof(M203_Round_Launch, StartTransform) == 0x000000, "Member 'M203_Round_Launch::StartTransform' has a wrong offset!");
static_assert(offsetof(M203_Round_Launch, bInFiredByPlayer) == 0x000030, "Member 'M203_Round_Launch::bInFiredByPlayer' has a wrong offset!");
static_assert(offsetof(M203_Round_Launch, Launcher) == 0x000038, "Member 'M203_Round_Launch::Launcher' has a wrong offset!");

// Function ThankYouVeryCool.M203_Round.NadeOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct M203_Round_NadeOverlap final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(M203_Round_NadeOverlap) == 0x000008, "Wrong alignment on M203_Round_NadeOverlap");
static_assert(sizeof(M203_Round_NadeOverlap) == 0x0000A8, "Wrong size on M203_Round_NadeOverlap");
static_assert(offsetof(M203_Round_NadeOverlap, OverlapComponent) == 0x000000, "Member 'M203_Round_NadeOverlap::OverlapComponent' has a wrong offset!");
static_assert(offsetof(M203_Round_NadeOverlap, OtherActor) == 0x000008, "Member 'M203_Round_NadeOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(M203_Round_NadeOverlap, OtherComp) == 0x000010, "Member 'M203_Round_NadeOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(M203_Round_NadeOverlap, OtherBodyIndex) == 0x000018, "Member 'M203_Round_NadeOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(M203_Round_NadeOverlap, bFromSweep) == 0x00001C, "Member 'M203_Round_NadeOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(M203_Round_NadeOverlap, SweepResult) == 0x000020, "Member 'M203_Round_NadeOverlap::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.M203_Round.OnStop
// 0x0088 (0x0088 - 0x0000)
struct M203_Round_OnStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(M203_Round_OnStop) == 0x000004, "Wrong alignment on M203_Round_OnStop");
static_assert(sizeof(M203_Round_OnStop) == 0x000088, "Wrong size on M203_Round_OnStop");
static_assert(offsetof(M203_Round_OnStop, ImpactResult) == 0x000000, "Member 'M203_Round_OnStop::ImpactResult' has a wrong offset!");

// Function ThankYouVeryCool.TextDisplayWidget.SetupForCharacter
// 0x0001 (0x0001 - 0x0000)
struct TextDisplayWidget_SetupForCharacter final
{
public:
	ECharacter                                    InForCharacter;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextDisplayWidget_SetupForCharacter) == 0x000001, "Wrong alignment on TextDisplayWidget_SetupForCharacter");
static_assert(sizeof(TextDisplayWidget_SetupForCharacter) == 0x000001, "Wrong size on TextDisplayWidget_SetupForCharacter");
static_assert(offsetof(TextDisplayWidget_SetupForCharacter, InForCharacter) == 0x000000, "Member 'TextDisplayWidget_SetupForCharacter::InForCharacter' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.GetGamertag
// 0x0010 (0x0010 - 0x0000)
struct TYVCPlayerController_GetGamertag final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_GetGamertag) == 0x000008, "Wrong alignment on TYVCPlayerController_GetGamertag");
static_assert(sizeof(TYVCPlayerController_GetGamertag) == 0x000010, "Wrong size on TYVCPlayerController_GetGamertag");
static_assert(offsetof(TYVCPlayerController_GetGamertag, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_GetGamertag::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.GetGamertagSuffix
// 0x0010 (0x0010 - 0x0000)
struct TYVCPlayerController_GetGamertagSuffix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_GetGamertagSuffix) == 0x000008, "Wrong alignment on TYVCPlayerController_GetGamertagSuffix");
static_assert(sizeof(TYVCPlayerController_GetGamertagSuffix) == 0x000010, "Wrong size on TYVCPlayerController_GetGamertagSuffix");
static_assert(offsetof(TYVCPlayerController_GetGamertagSuffix, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_GetGamertagSuffix::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.GetTYVCHUD
// 0x0008 (0x0008 - 0x0000)
struct TYVCPlayerController_GetTYVCHUD final
{
public:
	class UTYVCHUD*                               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_GetTYVCHUD) == 0x000008, "Wrong alignment on TYVCPlayerController_GetTYVCHUD");
static_assert(sizeof(TYVCPlayerController_GetTYVCHUD) == 0x000008, "Wrong size on TYVCPlayerController_GetTYVCHUD");
static_assert(offsetof(TYVCPlayerController_GetTYVCHUD, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_GetTYVCHUD::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.IsControllerConnected
// 0x0001 (0x0001 - 0x0000)
struct TYVCPlayerController_IsControllerConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_IsControllerConnected) == 0x000001, "Wrong alignment on TYVCPlayerController_IsControllerConnected");
static_assert(sizeof(TYVCPlayerController_IsControllerConnected) == 0x000001, "Wrong size on TYVCPlayerController_IsControllerConnected");
static_assert(offsetof(TYVCPlayerController_IsControllerConnected, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_IsControllerConnected::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.IsSwitchHandheldController
// 0x0001 (0x0001 - 0x0000)
struct TYVCPlayerController_IsSwitchHandheldController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_IsSwitchHandheldController) == 0x000001, "Wrong alignment on TYVCPlayerController_IsSwitchHandheldController");
static_assert(sizeof(TYVCPlayerController_IsSwitchHandheldController) == 0x000001, "Wrong size on TYVCPlayerController_IsSwitchHandheldController");
static_assert(offsetof(TYVCPlayerController_IsSwitchHandheldController, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_IsSwitchHandheldController::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.IsSwitchProController
// 0x0001 (0x0001 - 0x0000)
struct TYVCPlayerController_IsSwitchProController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_IsSwitchProController) == 0x000001, "Wrong alignment on TYVCPlayerController_IsSwitchProController");
static_assert(sizeof(TYVCPlayerController_IsSwitchProController) == 0x000001, "Wrong size on TYVCPlayerController_IsSwitchProController");
static_assert(offsetof(TYVCPlayerController_IsSwitchProController, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_IsSwitchProController::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCPlayerController.RequestEveHUD
// 0x0008 (0x0008 - 0x0000)
struct TYVCPlayerController_RequestEveHUD final
{
public:
	class UGameplayHUD*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCPlayerController_RequestEveHUD) == 0x000008, "Wrong alignment on TYVCPlayerController_RequestEveHUD");
static_assert(sizeof(TYVCPlayerController_RequestEveHUD) == 0x000008, "Wrong size on TYVCPlayerController_RequestEveHUD");
static_assert(offsetof(TYVCPlayerController_RequestEveHUD, ReturnValue) == 0x000000, "Member 'TYVCPlayerController_RequestEveHUD::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.AsyncExplosion
// 0x0014 (0x0014 - 0x0000)
struct ImpactManager_AsyncExplosion final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_AsyncExplosion) == 0x000004, "Wrong alignment on ImpactManager_AsyncExplosion");
static_assert(sizeof(ImpactManager_AsyncExplosion) == 0x000014, "Wrong size on ImpactManager_AsyncExplosion");
static_assert(offsetof(ImpactManager_AsyncExplosion, WorldPosition) == 0x000000, "Member 'ImpactManager_AsyncExplosion::WorldPosition' has a wrong offset!");
static_assert(offsetof(ImpactManager_AsyncExplosion, Radius) == 0x00000C, "Member 'ImpactManager_AsyncExplosion::Radius' has a wrong offset!");
static_assert(offsetof(ImpactManager_AsyncExplosion, Value) == 0x000010, "Member 'ImpactManager_AsyncExplosion::Value' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.CalculateVoxelPhysics
// 0x0028 (0x0028 - 0x0000)
struct ImpactManager_CalculateVoxelPhysics final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Box;                                               // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorlds;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShatter;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpactManager_CalculateVoxelPhysics) == 0x000008, "Wrong alignment on ImpactManager_CalculateVoxelPhysics");
static_assert(sizeof(ImpactManager_CalculateVoxelPhysics) == 0x000028, "Wrong size on ImpactManager_CalculateVoxelPhysics");
static_assert(offsetof(ImpactManager_CalculateVoxelPhysics, VoxelWorld) == 0x000000, "Member 'ImpactManager_CalculateVoxelPhysics::VoxelWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_CalculateVoxelPhysics, Box) == 0x000008, "Member 'ImpactManager_CalculateVoxelPhysics::Box' has a wrong offset!");
static_assert(offsetof(ImpactManager_CalculateVoxelPhysics, MinWorlds) == 0x000020, "Member 'ImpactManager_CalculateVoxelPhysics::MinWorlds' has a wrong offset!");
static_assert(offsetof(ImpactManager_CalculateVoxelPhysics, bCanShatter) == 0x000024, "Member 'ImpactManager_CalculateVoxelPhysics::bCanShatter' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ConfigureFoamWorld
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ConfigureFoamWorld final
{
public:
	class AVoxelWorld*                            InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ConfigureFoamWorld) == 0x000008, "Wrong alignment on ImpactManager_ConfigureFoamWorld");
static_assert(sizeof(ImpactManager_ConfigureFoamWorld) == 0x000008, "Wrong size on ImpactManager_ConfigureFoamWorld");
static_assert(offsetof(ImpactManager_ConfigureFoamWorld, InWorld) == 0x000000, "Member 'ImpactManager_ConfigureFoamWorld::InWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ConfigureGlassChunk
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ConfigureGlassChunk final
{
public:
	class AVoxelWorld*                            InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ConfigureGlassChunk) == 0x000008, "Wrong alignment on ImpactManager_ConfigureGlassChunk");
static_assert(sizeof(ImpactManager_ConfigureGlassChunk) == 0x000008, "Wrong size on ImpactManager_ConfigureGlassChunk");
static_assert(offsetof(ImpactManager_ConfigureGlassChunk, InWorld) == 0x000000, "Member 'ImpactManager_ConfigureGlassChunk::InWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ConfigurePhysicsWorld
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ConfigurePhysicsWorld final
{
public:
	class AVoxelWorld*                            InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ConfigurePhysicsWorld) == 0x000008, "Wrong alignment on ImpactManager_ConfigurePhysicsWorld");
static_assert(sizeof(ImpactManager_ConfigurePhysicsWorld) == 0x000008, "Wrong size on ImpactManager_ConfigurePhysicsWorld");
static_assert(offsetof(ImpactManager_ConfigurePhysicsWorld, InWorld) == 0x000000, "Member 'ImpactManager_ConfigurePhysicsWorld::InWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ConfigureShatterWorld
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ConfigureShatterWorld final
{
public:
	class AVoxelWorld*                            InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ConfigureShatterWorld) == 0x000008, "Wrong alignment on ImpactManager_ConfigureShatterWorld");
static_assert(sizeof(ImpactManager_ConfigureShatterWorld) == 0x000008, "Wrong size on ImpactManager_ConfigureShatterWorld");
static_assert(offsetof(ImpactManager_ConfigureShatterWorld, InWorld) == 0x000000, "Member 'ImpactManager_ConfigureShatterWorld::InWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ConfigureShearChunk
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ConfigureShearChunk final
{
public:
	class AVoxelWorld*                            InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ConfigureShearChunk) == 0x000008, "Wrong alignment on ImpactManager_ConfigureShearChunk");
static_assert(sizeof(ImpactManager_ConfigureShearChunk) == 0x000008, "Wrong size on ImpactManager_ConfigureShearChunk");
static_assert(offsetof(ImpactManager_ConfigureShearChunk, InWorld) == 0x000000, "Member 'ImpactManager_ConfigureShearChunk::InWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.CreateExplosion
// 0x0050 (0x0050 - 0x0000)
struct ImpactManager_CreateExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ShockwaveRadius;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditRadius;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMade;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Async;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ParticleOverride;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundOverride;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoGib;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            OverrideWorld;                                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropCaused;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickedBack;                                       // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGravThrown;                                       // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchCull;                                       // 0x004B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpactManager_CreateExplosion) == 0x000008, "Wrong alignment on ImpactManager_CreateExplosion");
static_assert(sizeof(ImpactManager_CreateExplosion) == 0x000050, "Wrong size on ImpactManager_CreateExplosion");
static_assert(offsetof(ImpactManager_CreateExplosion, Location) == 0x000000, "Member 'ImpactManager_CreateExplosion::Location' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, Rotation) == 0x00000C, "Member 'ImpactManager_CreateExplosion::Rotation' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, ShockwaveRadius) == 0x000018, "Member 'ImpactManager_CreateExplosion::ShockwaveRadius' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, EditRadius) == 0x00001C, "Member 'ImpactManager_CreateExplosion::EditRadius' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bPlayerMade) == 0x000020, "Member 'ImpactManager_CreateExplosion::bPlayerMade' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, Async) == 0x000021, "Member 'ImpactManager_CreateExplosion::Async' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, ParticleOverride) == 0x000028, "Member 'ImpactManager_CreateExplosion::ParticleOverride' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, SoundOverride) == 0x000030, "Member 'ImpactManager_CreateExplosion::SoundOverride' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bNoGib) == 0x000038, "Member 'ImpactManager_CreateExplosion::bNoGib' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, OverrideWorld) == 0x000040, "Member 'ImpactManager_CreateExplosion::OverrideWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bPropCaused) == 0x000048, "Member 'ImpactManager_CreateExplosion::bPropCaused' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bKickedBack) == 0x000049, "Member 'ImpactManager_CreateExplosion::bKickedBack' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bGravThrown) == 0x00004A, "Member 'ImpactManager_CreateExplosion::bGravThrown' has a wrong offset!");
static_assert(offsetof(ImpactManager_CreateExplosion, bSwitchCull) == 0x00004B, "Member 'ImpactManager_CreateExplosion::bSwitchCull' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.DoBulletTrace
// 0x0018 (0x0018 - 0x0000)
struct ImpactManager_DoBulletTrace final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStop;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_DoBulletTrace) == 0x000004, "Wrong alignment on ImpactManager_DoBulletTrace");
static_assert(sizeof(ImpactManager_DoBulletTrace) == 0x000018, "Wrong size on ImpactManager_DoBulletTrace");
static_assert(offsetof(ImpactManager_DoBulletTrace, TraceStart) == 0x000000, "Member 'ImpactManager_DoBulletTrace::TraceStart' has a wrong offset!");
static_assert(offsetof(ImpactManager_DoBulletTrace, TraceStop) == 0x00000C, "Member 'ImpactManager_DoBulletTrace::TraceStop' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.DoExplosionGraph
// 0x0028 (0x0028 - 0x0000)
struct ImpactManager_DoExplosionGraph final
{
public:
	class AVoxelWorld*                            OnWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayerMade;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditRadius;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_DoExplosionGraph) == 0x000008, "Wrong alignment on ImpactManager_DoExplosionGraph");
static_assert(sizeof(ImpactManager_DoExplosionGraph) == 0x000028, "Wrong size on ImpactManager_DoExplosionGraph");
static_assert(offsetof(ImpactManager_DoExplosionGraph, OnWorld) == 0x000000, "Member 'ImpactManager_DoExplosionGraph::OnWorld' has a wrong offset!");
static_assert(offsetof(ImpactManager_DoExplosionGraph, WorldLocation) == 0x000008, "Member 'ImpactManager_DoExplosionGraph::WorldLocation' has a wrong offset!");
static_assert(offsetof(ImpactManager_DoExplosionGraph, Rotation) == 0x000014, "Member 'ImpactManager_DoExplosionGraph::Rotation' has a wrong offset!");
static_assert(offsetof(ImpactManager_DoExplosionGraph, bPlayerMade) == 0x000020, "Member 'ImpactManager_DoExplosionGraph::bPlayerMade' has a wrong offset!");
static_assert(offsetof(ImpactManager_DoExplosionGraph, EditRadius) == 0x000024, "Member 'ImpactManager_DoExplosionGraph::EditRadius' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.GetCurrentTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct ImpactManager_GetCurrentTimeDilation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_GetCurrentTimeDilation) == 0x000004, "Wrong alignment on ImpactManager_GetCurrentTimeDilation");
static_assert(sizeof(ImpactManager_GetCurrentTimeDilation) == 0x000004, "Wrong size on ImpactManager_GetCurrentTimeDilation");
static_assert(offsetof(ImpactManager_GetCurrentTimeDilation, ReturnValue) == 0x000000, "Member 'ImpactManager_GetCurrentTimeDilation::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.NotifyGraphFinishedWithResults
// 0x0028 (0x0028 - 0x0000)
struct ImpactManager_NotifyGraphFinishedWithResults final
{
public:
	TArray<struct FModifiedVoxelValue>            Info;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0010(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_NotifyGraphFinishedWithResults) == 0x000008, "Wrong alignment on ImpactManager_NotifyGraphFinishedWithResults");
static_assert(sizeof(ImpactManager_NotifyGraphFinishedWithResults) == 0x000028, "Wrong size on ImpactManager_NotifyGraphFinishedWithResults");
static_assert(offsetof(ImpactManager_NotifyGraphFinishedWithResults, Info) == 0x000000, "Member 'ImpactManager_NotifyGraphFinishedWithResults::Info' has a wrong offset!");
static_assert(offsetof(ImpactManager_NotifyGraphFinishedWithResults, Bounds) == 0x000010, "Member 'ImpactManager_NotifyGraphFinishedWithResults::Bounds' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.NotifyVoxelPhysicsTaskDone
// 0x0010 (0x0010 - 0x0000)
struct ImpactManager_NotifyVoxelPhysicsTaskDone final
{
public:
	TArray<TScriptInterface<class IVoxelPhysicsPartSpawnerResult>> Results;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_NotifyVoxelPhysicsTaskDone) == 0x000008, "Wrong alignment on ImpactManager_NotifyVoxelPhysicsTaskDone");
static_assert(sizeof(ImpactManager_NotifyVoxelPhysicsTaskDone) == 0x000010, "Wrong size on ImpactManager_NotifyVoxelPhysicsTaskDone");
static_assert(offsetof(ImpactManager_NotifyVoxelPhysicsTaskDone, Results) == 0x000000, "Member 'ImpactManager_NotifyVoxelPhysicsTaskDone::Results' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.OnVoxelChunkHit
// 0x00A8 (0x00A8 - 0x0000)
struct ImpactManager_OnVoxelChunkHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpactManager_OnVoxelChunkHit) == 0x000008, "Wrong alignment on ImpactManager_OnVoxelChunkHit");
static_assert(sizeof(ImpactManager_OnVoxelChunkHit) == 0x0000A8, "Wrong size on ImpactManager_OnVoxelChunkHit");
static_assert(offsetof(ImpactManager_OnVoxelChunkHit, SelfActor) == 0x000000, "Member 'ImpactManager_OnVoxelChunkHit::SelfActor' has a wrong offset!");
static_assert(offsetof(ImpactManager_OnVoxelChunkHit, OtherActor) == 0x000008, "Member 'ImpactManager_OnVoxelChunkHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ImpactManager_OnVoxelChunkHit, NormalImpulse) == 0x000010, "Member 'ImpactManager_OnVoxelChunkHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ImpactManager_OnVoxelChunkHit, Hit) == 0x00001C, "Member 'ImpactManager_OnVoxelChunkHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ReceiveChunkUpdate
// 0x0018 (0x0018 - 0x0000)
struct ImpactManager_ReceiveChunkUpdate final
{
public:
	struct FVoxelIntBox                           InBox;                                             // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ReceiveChunkUpdate) == 0x000004, "Wrong alignment on ImpactManager_ReceiveChunkUpdate");
static_assert(sizeof(ImpactManager_ReceiveChunkUpdate) == 0x000018, "Wrong size on ImpactManager_ReceiveChunkUpdate");
static_assert(offsetof(ImpactManager_ReceiveChunkUpdate, InBox) == 0x000000, "Member 'ImpactManager_ReceiveChunkUpdate::InBox' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ResolveImpact
// 0x00B0 (0x00B0 - 0x0000)
struct ImpactManager_ResolveImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EImpactType                                   Impact;                                            // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FiredByPlayer;                                     // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Shooter;                                           // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceOrigin;                                       // 0x0098(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenetrationModifier;                               // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlreadyKilledNPC;                                 // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpactManager_ResolveImpact) == 0x000008, "Wrong alignment on ImpactManager_ResolveImpact");
static_assert(sizeof(ImpactManager_ResolveImpact) == 0x0000B0, "Wrong size on ImpactManager_ResolveImpact");
static_assert(offsetof(ImpactManager_ResolveImpact, HitResult) == 0x000000, "Member 'ImpactManager_ResolveImpact::HitResult' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, Impact) == 0x000088, "Member 'ImpactManager_ResolveImpact::Impact' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, FiredByPlayer) == 0x000089, "Member 'ImpactManager_ResolveImpact::FiredByPlayer' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, Shooter) == 0x000090, "Member 'ImpactManager_ResolveImpact::Shooter' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, TraceOrigin) == 0x000098, "Member 'ImpactManager_ResolveImpact::TraceOrigin' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, PenetrationModifier) == 0x0000A4, "Member 'ImpactManager_ResolveImpact::PenetrationModifier' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, bAlreadyKilledNPC) == 0x0000A8, "Member 'ImpactManager_ResolveImpact::bAlreadyKilledNPC' has a wrong offset!");
static_assert(offsetof(ImpactManager_ResolveImpact, ReturnValue) == 0x0000A9, "Member 'ImpactManager_ResolveImpact::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.SetSendChapterEdits
// 0x0001 (0x0001 - 0x0000)
struct ImpactManager_SetSendChapterEdits final
{
public:
	bool                                          bSend;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_SetSendChapterEdits) == 0x000001, "Wrong alignment on ImpactManager_SetSendChapterEdits");
static_assert(sizeof(ImpactManager_SetSendChapterEdits) == 0x000001, "Wrong size on ImpactManager_SetSendChapterEdits");
static_assert(offsetof(ImpactManager_SetSendChapterEdits, bSend) == 0x000000, "Member 'ImpactManager_SetSendChapterEdits::bSend' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.ShatterWorldLoaded
// 0x0008 (0x0008 - 0x0000)
struct ImpactManager_ShatterWorldLoaded final
{
public:
	class AVoxelWorld*                            LoadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_ShatterWorldLoaded) == 0x000008, "Wrong alignment on ImpactManager_ShatterWorldLoaded");
static_assert(sizeof(ImpactManager_ShatterWorldLoaded) == 0x000008, "Wrong size on ImpactManager_ShatterWorldLoaded");
static_assert(offsetof(ImpactManager_ShatterWorldLoaded, LoadedWorld) == 0x000000, "Member 'ImpactManager_ShatterWorldLoaded::LoadedWorld' has a wrong offset!");

// Function ThankYouVeryCool.ImpactManager.WorldToggleSlowMo
// 0x0002 (0x0002 - 0x0000)
struct ImpactManager_WorldToggleSlowMo final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpactManager_WorldToggleSlowMo) == 0x000001, "Wrong alignment on ImpactManager_WorldToggleSlowMo");
static_assert(sizeof(ImpactManager_WorldToggleSlowMo) == 0x000002, "Wrong size on ImpactManager_WorldToggleSlowMo");
static_assert(offsetof(ImpactManager_WorldToggleSlowMo, Value) == 0x000000, "Member 'ImpactManager_WorldToggleSlowMo::Value' has a wrong offset!");
static_assert(offsetof(ImpactManager_WorldToggleSlowMo, Force) == 0x000001, "Member 'ImpactManager_WorldToggleSlowMo::Force' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.GetHighlightComponent
// 0x0008 (0x0008 - 0x0000)
struct InteractableInterface_GetHighlightComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_GetHighlightComponent) == 0x000008, "Wrong alignment on InteractableInterface_GetHighlightComponent");
static_assert(sizeof(InteractableInterface_GetHighlightComponent) == 0x000008, "Wrong size on InteractableInterface_GetHighlightComponent");
static_assert(offsetof(InteractableInterface_GetHighlightComponent, ReturnValue) == 0x000000, "Member 'InteractableInterface_GetHighlightComponent::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.GetInteractionText
// 0x0018 (0x0018 - 0x0000)
struct InteractableInterface_GetInteractionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_GetInteractionText) == 0x000008, "Wrong alignment on InteractableInterface_GetInteractionText");
static_assert(sizeof(InteractableInterface_GetInteractionText) == 0x000018, "Wrong size on InteractableInterface_GetInteractionText");
static_assert(offsetof(InteractableInterface_GetInteractionText, ReturnValue) == 0x000000, "Member 'InteractableInterface_GetInteractionText::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct InteractableInterface_IsInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_IsInteractable) == 0x000001, "Wrong alignment on InteractableInterface_IsInteractable");
static_assert(sizeof(InteractableInterface_IsInteractable) == 0x000001, "Wrong size on InteractableInterface_IsInteractable");
static_assert(offsetof(InteractableInterface_IsInteractable, ReturnValue) == 0x000000, "Member 'InteractableInterface_IsInteractable::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.OnHit
// 0x0094 (0x0094 - 0x0000)
struct InteractableInterface_OnHit final
{
public:
	EImpactType                                   ImpactType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Dmg;                                               // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractableInterface_OnHit) == 0x000004, "Wrong alignment on InteractableInterface_OnHit");
static_assert(sizeof(InteractableInterface_OnHit) == 0x000094, "Wrong size on InteractableInterface_OnHit");
static_assert(offsetof(InteractableInterface_OnHit, ImpactType) == 0x000000, "Member 'InteractableInterface_OnHit::ImpactType' has a wrong offset!");
static_assert(offsetof(InteractableInterface_OnHit, HitResult) == 0x000004, "Member 'InteractableInterface_OnHit::HitResult' has a wrong offset!");
static_assert(offsetof(InteractableInterface_OnHit, Dmg) == 0x00008C, "Member 'InteractableInterface_OnHit::Dmg' has a wrong offset!");
static_assert(offsetof(InteractableInterface_OnHit, ReturnValue) == 0x000090, "Member 'InteractableInterface_OnHit::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.OnLookAt
// 0x000C (0x000C - 0x0000)
struct InteractableInterface_OnLookAt final
{
public:
	struct FVector                                LookAtLoc;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_OnLookAt) == 0x000004, "Wrong alignment on InteractableInterface_OnLookAt");
static_assert(sizeof(InteractableInterface_OnLookAt) == 0x00000C, "Wrong size on InteractableInterface_OnLookAt");
static_assert(offsetof(InteractableInterface_OnLookAt, LookAtLoc) == 0x000000, "Member 'InteractableInterface_OnLookAt::LookAtLoc' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.RequestInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractableInterface_RequestInteraction final
{
public:
	class AActor*                                 Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_RequestInteraction) == 0x000008, "Wrong alignment on InteractableInterface_RequestInteraction");
static_assert(sizeof(InteractableInterface_RequestInteraction) == 0x000008, "Wrong size on InteractableInterface_RequestInteraction");
static_assert(offsetof(InteractableInterface_RequestInteraction, Interactor) == 0x000000, "Member 'InteractableInterface_RequestInteraction::Interactor' has a wrong offset!");

// Function ThankYouVeryCool.InteractableInterface.ShouldHighlight
// 0x0001 (0x0001 - 0x0000)
struct InteractableInterface_ShouldHighlight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableInterface_ShouldHighlight) == 0x000001, "Wrong alignment on InteractableInterface_ShouldHighlight");
static_assert(sizeof(InteractableInterface_ShouldHighlight) == 0x000001, "Wrong size on InteractableInterface_ShouldHighlight");
static_assert(offsetof(InteractableInterface_ShouldHighlight, ReturnValue) == 0x000000, "Member 'InteractableInterface_ShouldHighlight::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPickupWidget.SetupForBackpackRecharge
// 0x0008 (0x0008 - 0x0000)
struct WeaponPickupWidget_SetupForBackpackRecharge final
{
public:
	class USceneComponent*                        OnComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPickupWidget_SetupForBackpackRecharge) == 0x000008, "Wrong alignment on WeaponPickupWidget_SetupForBackpackRecharge");
static_assert(sizeof(WeaponPickupWidget_SetupForBackpackRecharge) == 0x000008, "Wrong size on WeaponPickupWidget_SetupForBackpackRecharge");
static_assert(offsetof(WeaponPickupWidget_SetupForBackpackRecharge, OnComponent) == 0x000000, "Member 'WeaponPickupWidget_SetupForBackpackRecharge::OnComponent' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPickupWidget.SetupForInteract
// 0x0020 (0x0020 - 0x0000)
struct WeaponPickupWidget_SetupForInteract final
{
public:
	class USceneComponent*                        OnComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InteractText;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPickupWidget_SetupForInteract) == 0x000008, "Wrong alignment on WeaponPickupWidget_SetupForInteract");
static_assert(sizeof(WeaponPickupWidget_SetupForInteract) == 0x000020, "Wrong size on WeaponPickupWidget_SetupForInteract");
static_assert(offsetof(WeaponPickupWidget_SetupForInteract, OnComponent) == 0x000000, "Member 'WeaponPickupWidget_SetupForInteract::OnComponent' has a wrong offset!");
static_assert(offsetof(WeaponPickupWidget_SetupForInteract, InteractText) == 0x000008, "Member 'WeaponPickupWidget_SetupForInteract::InteractText' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPickupWidget.SetupForThrow
// 0x0008 (0x0008 - 0x0000)
struct WeaponPickupWidget_SetupForThrow final
{
public:
	class AWeaponBase*                            InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPickupWidget_SetupForThrow) == 0x000008, "Wrong alignment on WeaponPickupWidget_SetupForThrow");
static_assert(sizeof(WeaponPickupWidget_SetupForThrow) == 0x000008, "Wrong size on WeaponPickupWidget_SetupForThrow");
static_assert(offsetof(WeaponPickupWidget_SetupForThrow, InWeapon) == 0x000000, "Member 'WeaponPickupWidget_SetupForThrow::InWeapon' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPickupWidget.SetupForWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponPickupWidget_SetupForWeapon final
{
public:
	class AWeaponBase*                            InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPickupWidget_SetupForWeapon) == 0x000008, "Wrong alignment on WeaponPickupWidget_SetupForWeapon");
static_assert(sizeof(WeaponPickupWidget_SetupForWeapon) == 0x000008, "Wrong size on WeaponPickupWidget_SetupForWeapon");
static_assert(offsetof(WeaponPickupWidget_SetupForWeapon, InWeapon) == 0x000000, "Member 'WeaponPickupWidget_SetupForWeapon::InWeapon' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetFoundProps
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetFoundProps final
{
public:
	TArray<class FString>                         OutFound;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetFoundProps) == 0x000008, "Wrong alignment on LevelEditorManager_GetFoundProps");
static_assert(sizeof(LevelEditorManager_GetFoundProps) == 0x000010, "Wrong size on LevelEditorManager_GetFoundProps");
static_assert(offsetof(LevelEditorManager_GetFoundProps, OutFound) == 0x000000, "Member 'LevelEditorManager_GetFoundProps::OutFound' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetFoundVox
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetFoundVox final
{
public:
	TArray<class FString>                         OutFound;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetFoundVox) == 0x000008, "Wrong alignment on LevelEditorManager_GetFoundVox");
static_assert(sizeof(LevelEditorManager_GetFoundVox) == 0x000010, "Wrong size on LevelEditorManager_GetFoundVox");
static_assert(offsetof(LevelEditorManager_GetFoundVox, OutFound) == 0x000000, "Member 'LevelEditorManager_GetFoundVox::OutFound' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.MakeColorFromFloat
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_MakeColorFromFloat final
{
public:
	float                                         R;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_MakeColorFromFloat) == 0x000004, "Wrong alignment on LevelEditorManager_MakeColorFromFloat");
static_assert(sizeof(LevelEditorManager_MakeColorFromFloat) == 0x000010, "Wrong size on LevelEditorManager_MakeColorFromFloat");
static_assert(offsetof(LevelEditorManager_MakeColorFromFloat, R) == 0x000000, "Member 'LevelEditorManager_MakeColorFromFloat::R' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_MakeColorFromFloat, G) == 0x000004, "Member 'LevelEditorManager_MakeColorFromFloat::G' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_MakeColorFromFloat, B) == 0x000008, "Member 'LevelEditorManager_MakeColorFromFloat::B' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_MakeColorFromFloat, ReturnValue) == 0x00000C, "Member 'LevelEditorManager_MakeColorFromFloat::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.AddPropToLibrary
// 0x0090 (0x0090 - 0x0000)
struct LevelEditorManager_AddPropToLibrary final
{
public:
	struct FCustomPropData                        InProp;                                            // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_AddPropToLibrary) == 0x000008, "Wrong alignment on LevelEditorManager_AddPropToLibrary");
static_assert(sizeof(LevelEditorManager_AddPropToLibrary) == 0x000090, "Wrong size on LevelEditorManager_AddPropToLibrary");
static_assert(offsetof(LevelEditorManager_AddPropToLibrary, InProp) == 0x000000, "Member 'LevelEditorManager_AddPropToLibrary::InProp' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.DoSpecialAction
// 0x0002 (0x0002 - 0x0000)
struct LevelEditorManager_DoSpecialAction final
{
public:
	EActionType                                   OfType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulated;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_DoSpecialAction) == 0x000001, "Wrong alignment on LevelEditorManager_DoSpecialAction");
static_assert(sizeof(LevelEditorManager_DoSpecialAction) == 0x000002, "Wrong size on LevelEditorManager_DoSpecialAction");
static_assert(offsetof(LevelEditorManager_DoSpecialAction, OfType) == 0x000000, "Member 'LevelEditorManager_DoSpecialAction::OfType' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_DoSpecialAction, bSimulated) == 0x000001, "Member 'LevelEditorManager_DoSpecialAction::bSimulated' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.EnsureDirLight
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_EnsureDirLight final
{
public:
	bool                                          bShouldBe;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_EnsureDirLight) == 0x000004, "Wrong alignment on LevelEditorManager_EnsureDirLight");
static_assert(sizeof(LevelEditorManager_EnsureDirLight) == 0x000008, "Wrong size on LevelEditorManager_EnsureDirLight");
static_assert(offsetof(LevelEditorManager_EnsureDirLight, bShouldBe) == 0x000000, "Member 'LevelEditorManager_EnsureDirLight::bShouldBe' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_EnsureDirLight, Strength) == 0x000004, "Member 'LevelEditorManager_EnsureDirLight::Strength' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.EnsureSkyActor
// 0x0002 (0x0002 - 0x0000)
struct LevelEditorManager_EnsureSkyActor final
{
public:
	bool                                          bShouldBe;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAmbient;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_EnsureSkyActor) == 0x000001, "Wrong alignment on LevelEditorManager_EnsureSkyActor");
static_assert(sizeof(LevelEditorManager_EnsureSkyActor) == 0x000002, "Wrong size on LevelEditorManager_EnsureSkyActor");
static_assert(offsetof(LevelEditorManager_EnsureSkyActor, bShouldBe) == 0x000000, "Member 'LevelEditorManager_EnsureSkyActor::bShouldBe' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_EnsureSkyActor, bAllowAmbient) == 0x000001, "Member 'LevelEditorManager_EnsureSkyActor::bAllowAmbient' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetActionsFromID
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetActionsFromID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EActionType>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetActionsFromID) == 0x000008, "Wrong alignment on LevelEditorManager_GetActionsFromID");
static_assert(sizeof(LevelEditorManager_GetActionsFromID) == 0x000018, "Wrong size on LevelEditorManager_GetActionsFromID");
static_assert(offsetof(LevelEditorManager_GetActionsFromID, InID) == 0x000000, "Member 'LevelEditorManager_GetActionsFromID::InID' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetActionsFromID, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetActionsFromID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetAlphabeticIDs
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetAlphabeticIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetAlphabeticIDs) == 0x000008, "Wrong alignment on LevelEditorManager_GetAlphabeticIDs");
static_assert(sizeof(LevelEditorManager_GetAlphabeticIDs) == 0x000010, "Wrong size on LevelEditorManager_GetAlphabeticIDs");
static_assert(offsetof(LevelEditorManager_GetAlphabeticIDs, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetAlphabeticIDs::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetAlphabeticPropCategories
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetAlphabeticPropCategories final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetAlphabeticPropCategories) == 0x000008, "Wrong alignment on LevelEditorManager_GetAlphabeticPropCategories");
static_assert(sizeof(LevelEditorManager_GetAlphabeticPropCategories) == 0x000010, "Wrong size on LevelEditorManager_GetAlphabeticPropCategories");
static_assert(offsetof(LevelEditorManager_GetAlphabeticPropCategories, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetAlphabeticPropCategories::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetAlphabeticPropKeys
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetAlphabeticPropKeys final
{
public:
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetAlphabeticPropKeys) == 0x000008, "Wrong alignment on LevelEditorManager_GetAlphabeticPropKeys");
static_assert(sizeof(LevelEditorManager_GetAlphabeticPropKeys) == 0x000010, "Wrong size on LevelEditorManager_GetAlphabeticPropKeys");
static_assert(offsetof(LevelEditorManager_GetAlphabeticPropKeys, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetAlphabeticPropKeys::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetAlphabeticPropKeysForCategory
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_GetAlphabeticPropKeysForCategory final
{
public:
	class FString                                 CategoryIn;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetAlphabeticPropKeysForCategory) == 0x000008, "Wrong alignment on LevelEditorManager_GetAlphabeticPropKeysForCategory");
static_assert(sizeof(LevelEditorManager_GetAlphabeticPropKeysForCategory) == 0x000020, "Wrong size on LevelEditorManager_GetAlphabeticPropKeysForCategory");
static_assert(offsetof(LevelEditorManager_GetAlphabeticPropKeysForCategory, CategoryIn) == 0x000000, "Member 'LevelEditorManager_GetAlphabeticPropKeysForCategory::CategoryIn' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetAlphabeticPropKeysForCategory, ReturnValue) == 0x000010, "Member 'LevelEditorManager_GetAlphabeticPropKeysForCategory::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetCatSave
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetCatSave final
{
public:
	class FString                                 ForCat;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomPropCatSave*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetCatSave) == 0x000008, "Wrong alignment on LevelEditorManager_GetCatSave");
static_assert(sizeof(LevelEditorManager_GetCatSave) == 0x000018, "Wrong size on LevelEditorManager_GetCatSave");
static_assert(offsetof(LevelEditorManager_GetCatSave, ForCat) == 0x000000, "Member 'LevelEditorManager_GetCatSave::ForCat' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetCatSave, ReturnValue) == 0x000010, "Member 'LevelEditorManager_GetCatSave::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetCurrentCampaignDirLocal
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetCurrentCampaignDirLocal final
{
public:
	bool                                          bFull;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetCurrentCampaignDirLocal) == 0x000008, "Wrong alignment on LevelEditorManager_GetCurrentCampaignDirLocal");
static_assert(sizeof(LevelEditorManager_GetCurrentCampaignDirLocal) == 0x000018, "Wrong size on LevelEditorManager_GetCurrentCampaignDirLocal");
static_assert(offsetof(LevelEditorManager_GetCurrentCampaignDirLocal, bFull) == 0x000000, "Member 'LevelEditorManager_GetCurrentCampaignDirLocal::bFull' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetCurrentCampaignDirLocal, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetCurrentCampaignDirLocal::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetCurrentLevelDir
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetCurrentLevelDir final
{
public:
	bool                                          bFull;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetCurrentLevelDir) == 0x000008, "Wrong alignment on LevelEditorManager_GetCurrentLevelDir");
static_assert(sizeof(LevelEditorManager_GetCurrentLevelDir) == 0x000018, "Wrong size on LevelEditorManager_GetCurrentLevelDir");
static_assert(offsetof(LevelEditorManager_GetCurrentLevelDir, bFull) == 0x000000, "Member 'LevelEditorManager_GetCurrentLevelDir::bFull' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetCurrentLevelDir, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetCurrentLevelDir::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetCurrentLevelWorkshopInfo
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetCurrentLevelWorkshopInfo final
{
public:
	class FString                                 OutID;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_GetCurrentLevelWorkshopInfo) == 0x000008, "Wrong alignment on LevelEditorManager_GetCurrentLevelWorkshopInfo");
static_assert(sizeof(LevelEditorManager_GetCurrentLevelWorkshopInfo) == 0x000018, "Wrong size on LevelEditorManager_GetCurrentLevelWorkshopInfo");
static_assert(offsetof(LevelEditorManager_GetCurrentLevelWorkshopInfo, OutID) == 0x000000, "Member 'LevelEditorManager_GetCurrentLevelWorkshopInfo::OutID' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetCurrentLevelWorkshopInfo, ReturnValue) == 0x000010, "Member 'LevelEditorManager_GetCurrentLevelWorkshopInfo::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetFoundCampaigns
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetFoundCampaigns final
{
public:
	bool                                          bForConsoles;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomCampaign*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetFoundCampaigns) == 0x000008, "Wrong alignment on LevelEditorManager_GetFoundCampaigns");
static_assert(sizeof(LevelEditorManager_GetFoundCampaigns) == 0x000018, "Wrong size on LevelEditorManager_GetFoundCampaigns");
static_assert(offsetof(LevelEditorManager_GetFoundCampaigns, bForConsoles) == 0x000000, "Member 'LevelEditorManager_GetFoundCampaigns::bForConsoles' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetFoundCampaigns, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetFoundCampaigns::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetFoundEditorLevels
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetFoundEditorLevels final
{
public:
	bool                                          bForConsoles;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UArcadeLevelAssetWorkshop*>      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetFoundEditorLevels) == 0x000008, "Wrong alignment on LevelEditorManager_GetFoundEditorLevels");
static_assert(sizeof(LevelEditorManager_GetFoundEditorLevels) == 0x000018, "Wrong size on LevelEditorManager_GetFoundEditorLevels");
static_assert(offsetof(LevelEditorManager_GetFoundEditorLevels, bForConsoles) == 0x000000, "Member 'LevelEditorManager_GetFoundEditorLevels::bForConsoles' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetFoundEditorLevels, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetFoundEditorLevels::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetGoalsFromID
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_GetGoalsFromID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGoalType>                             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetGoalsFromID) == 0x000008, "Wrong alignment on LevelEditorManager_GetGoalsFromID");
static_assert(sizeof(LevelEditorManager_GetGoalsFromID) == 0x000018, "Wrong size on LevelEditorManager_GetGoalsFromID");
static_assert(offsetof(LevelEditorManager_GetGoalsFromID, InID) == 0x000000, "Member 'LevelEditorManager_GetGoalsFromID::InID' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetGoalsFromID, ReturnValue) == 0x000008, "Member 'LevelEditorManager_GetGoalsFromID::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetIDsWithActions
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetIDsWithActions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetIDsWithActions) == 0x000008, "Wrong alignment on LevelEditorManager_GetIDsWithActions");
static_assert(sizeof(LevelEditorManager_GetIDsWithActions) == 0x000010, "Wrong size on LevelEditorManager_GetIDsWithActions");
static_assert(offsetof(LevelEditorManager_GetIDsWithActions, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetIDsWithActions::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetIDsWithGoals
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetIDsWithGoals final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetIDsWithGoals) == 0x000008, "Wrong alignment on LevelEditorManager_GetIDsWithGoals");
static_assert(sizeof(LevelEditorManager_GetIDsWithGoals) == 0x000010, "Wrong size on LevelEditorManager_GetIDsWithGoals");
static_assert(offsetof(LevelEditorManager_GetIDsWithGoals, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetIDsWithGoals::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetLevelFromCampaign
// 0x0028 (0x0028 - 0x0000)
struct LevelEditorManager_GetLevelFromCampaign final
{
public:
	class UCustomCampaign*                        Campaign;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLevelName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetSource;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArcadeLevelAssetWorkshop*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetLevelFromCampaign) == 0x000008, "Wrong alignment on LevelEditorManager_GetLevelFromCampaign");
static_assert(sizeof(LevelEditorManager_GetLevelFromCampaign) == 0x000028, "Wrong size on LevelEditorManager_GetLevelFromCampaign");
static_assert(offsetof(LevelEditorManager_GetLevelFromCampaign, Campaign) == 0x000000, "Member 'LevelEditorManager_GetLevelFromCampaign::Campaign' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetLevelFromCampaign, InLevelName) == 0x000008, "Member 'LevelEditorManager_GetLevelFromCampaign::InLevelName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetLevelFromCampaign, bGetSource) == 0x000018, "Member 'LevelEditorManager_GetLevelFromCampaign::bGetSource' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetLevelFromCampaign, ReturnValue) == 0x000020, "Member 'LevelEditorManager_GetLevelFromCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetLocalLevelAssets
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetLocalLevelAssets final
{
public:
	TArray<class UArcadeLevelAssetWorkshop*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetLocalLevelAssets) == 0x000008, "Wrong alignment on LevelEditorManager_GetLocalLevelAssets");
static_assert(sizeof(LevelEditorManager_GetLocalLevelAssets) == 0x000010, "Wrong size on LevelEditorManager_GetLocalLevelAssets");
static_assert(offsetof(LevelEditorManager_GetLocalLevelAssets, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetLocalLevelAssets::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetPropCat
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_GetPropCat final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetPropCat) == 0x000008, "Wrong alignment on LevelEditorManager_GetPropCat");
static_assert(sizeof(LevelEditorManager_GetPropCat) == 0x000020, "Wrong size on LevelEditorManager_GetPropCat");
static_assert(offsetof(LevelEditorManager_GetPropCat, inString) == 0x000000, "Member 'LevelEditorManager_GetPropCat::inString' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetPropCat, ReturnValue) == 0x000010, "Member 'LevelEditorManager_GetPropCat::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetScreenshotFromCampaign
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_GetScreenshotFromCampaign final
{
public:
	class UCustomCampaign*                        Campaign;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLevelName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetScreenshotFromCampaign) == 0x000008, "Wrong alignment on LevelEditorManager_GetScreenshotFromCampaign");
static_assert(sizeof(LevelEditorManager_GetScreenshotFromCampaign) == 0x000020, "Wrong size on LevelEditorManager_GetScreenshotFromCampaign");
static_assert(offsetof(LevelEditorManager_GetScreenshotFromCampaign, Campaign) == 0x000000, "Member 'LevelEditorManager_GetScreenshotFromCampaign::Campaign' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetScreenshotFromCampaign, InLevelName) == 0x000008, "Member 'LevelEditorManager_GetScreenshotFromCampaign::InLevelName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetScreenshotFromCampaign, ReturnValue) == 0x000018, "Member 'LevelEditorManager_GetScreenshotFromCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetSpawnTransform
// 0x0040 (0x0040 - 0x0000)
struct LevelEditorManager_GetSpawnTransform final
{
public:
	bool                                          bYawOnly;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetSpawnTransform) == 0x000010, "Wrong alignment on LevelEditorManager_GetSpawnTransform");
static_assert(sizeof(LevelEditorManager_GetSpawnTransform) == 0x000040, "Wrong size on LevelEditorManager_GetSpawnTransform");
static_assert(offsetof(LevelEditorManager_GetSpawnTransform, bYawOnly) == 0x000000, "Member 'LevelEditorManager_GetSpawnTransform::bYawOnly' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_GetSpawnTransform, ReturnValue) == 0x000010, "Member 'LevelEditorManager_GetSpawnTransform::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetWorkshopCampaignAssets
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetWorkshopCampaignAssets final
{
public:
	TArray<class UCustomCampaign*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetWorkshopCampaignAssets) == 0x000008, "Wrong alignment on LevelEditorManager_GetWorkshopCampaignAssets");
static_assert(sizeof(LevelEditorManager_GetWorkshopCampaignAssets) == 0x000010, "Wrong size on LevelEditorManager_GetWorkshopCampaignAssets");
static_assert(offsetof(LevelEditorManager_GetWorkshopCampaignAssets, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetWorkshopCampaignAssets::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.GetWorkshopLevelAssets
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_GetWorkshopLevelAssets final
{
public:
	TArray<class UArcadeLevelAssetWorkshop*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_GetWorkshopLevelAssets) == 0x000008, "Wrong alignment on LevelEditorManager_GetWorkshopLevelAssets");
static_assert(sizeof(LevelEditorManager_GetWorkshopLevelAssets) == 0x000010, "Wrong size on LevelEditorManager_GetWorkshopLevelAssets");
static_assert(offsetof(LevelEditorManager_GetWorkshopLevelAssets, ReturnValue) == 0x000000, "Member 'LevelEditorManager_GetWorkshopLevelAssets::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.IsLevelNameValid
// 0x0030 (0x0030 - 0x0000)
struct LevelEditorManager_IsLevelNameValid final
{
public:
	class FString                                 ToCheck;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutMsg;                                            // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_IsLevelNameValid) == 0x000008, "Wrong alignment on LevelEditorManager_IsLevelNameValid");
static_assert(sizeof(LevelEditorManager_IsLevelNameValid) == 0x000030, "Wrong size on LevelEditorManager_IsLevelNameValid");
static_assert(offsetof(LevelEditorManager_IsLevelNameValid, ToCheck) == 0x000000, "Member 'LevelEditorManager_IsLevelNameValid::ToCheck' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_IsLevelNameValid, OutMsg) == 0x000010, "Member 'LevelEditorManager_IsLevelNameValid::OutMsg' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_IsLevelNameValid, ReturnValue) == 0x000028, "Member 'LevelEditorManager_IsLevelNameValid::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.MakeCatSave
// 0x0048 (0x0048 - 0x0000)
struct LevelEditorManager_MakeCatSave final
{
public:
	class FString                                 ForCat;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPropCatUploadInfo                     InInfo;                                            // 0x0010(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UCustomPropCatSave*                     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_MakeCatSave) == 0x000008, "Wrong alignment on LevelEditorManager_MakeCatSave");
static_assert(sizeof(LevelEditorManager_MakeCatSave) == 0x000048, "Wrong size on LevelEditorManager_MakeCatSave");
static_assert(offsetof(LevelEditorManager_MakeCatSave, ForCat) == 0x000000, "Member 'LevelEditorManager_MakeCatSave::ForCat' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_MakeCatSave, InInfo) == 0x000010, "Member 'LevelEditorManager_MakeCatSave::InInfo' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_MakeCatSave, ReturnValue) == 0x000040, "Member 'LevelEditorManager_MakeCatSave::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.OpenWorkshopFor
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_OpenWorkshopFor final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_OpenWorkshopFor) == 0x000008, "Wrong alignment on LevelEditorManager_OpenWorkshopFor");
static_assert(sizeof(LevelEditorManager_OpenWorkshopFor) == 0x000010, "Wrong size on LevelEditorManager_OpenWorkshopFor");
static_assert(offsetof(LevelEditorManager_OpenWorkshopFor, ID) == 0x000000, "Member 'LevelEditorManager_OpenWorkshopFor::ID' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.RefreshPreviewProp
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_RefreshPreviewProp final
{
public:
	class APropVoxelWorld*                        ToRefresh;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_RefreshPreviewProp) == 0x000008, "Wrong alignment on LevelEditorManager_RefreshPreviewProp");
static_assert(sizeof(LevelEditorManager_RefreshPreviewProp) == 0x000008, "Wrong size on LevelEditorManager_RefreshPreviewProp");
static_assert(offsetof(LevelEditorManager_RefreshPreviewProp, ToRefresh) == 0x000000, "Member 'LevelEditorManager_RefreshPreviewProp::ToRefresh' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.RemovePropFromLibrary
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_RemovePropFromLibrary final
{
public:
	struct FGuid                                  ForGUID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_RemovePropFromLibrary) == 0x000004, "Wrong alignment on LevelEditorManager_RemovePropFromLibrary");
static_assert(sizeof(LevelEditorManager_RemovePropFromLibrary) == 0x000010, "Wrong size on LevelEditorManager_RemovePropFromLibrary");
static_assert(offsetof(LevelEditorManager_RemovePropFromLibrary, ForGUID) == 0x000000, "Member 'LevelEditorManager_RemovePropFromLibrary::ForGUID' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.RequestMove
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_RequestMove final
{
public:
	bool                                          bShouldCut;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_RequestMove) == 0x000001, "Wrong alignment on LevelEditorManager_RequestMove");
static_assert(sizeof(LevelEditorManager_RequestMove) == 0x000001, "Wrong size on LevelEditorManager_RequestMove");
static_assert(offsetof(LevelEditorManager_RequestMove, bShouldCut) == 0x000000, "Member 'LevelEditorManager_RequestMove::bShouldCut' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.RotateSelection
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_RotateSelection final
{
public:
	bool                                          Counter;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_RotateSelection) == 0x000001, "Wrong alignment on LevelEditorManager_RotateSelection");
static_assert(sizeof(LevelEditorManager_RotateSelection) == 0x000001, "Wrong size on LevelEditorManager_RotateSelection");
static_assert(offsetof(LevelEditorManager_RotateSelection, Counter) == 0x000000, "Member 'LevelEditorManager_RotateSelection::Counter' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SaveCustomCampaign
// 0x00A0 (0x00A0 - 0x0000)
struct LevelEditorManager_SaveCustomCampaign final
{
public:
	struct FCustomCampaignStruct                  InCampaign;                                        // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SaveCustomCampaign) == 0x000008, "Wrong alignment on LevelEditorManager_SaveCustomCampaign");
static_assert(sizeof(LevelEditorManager_SaveCustomCampaign) == 0x0000A0, "Wrong size on LevelEditorManager_SaveCustomCampaign");
static_assert(offsetof(LevelEditorManager_SaveCustomCampaign, InCampaign) == 0x000000, "Member 'LevelEditorManager_SaveCustomCampaign::InCampaign' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SaveCustomCampaign, SlotName) == 0x000088, "Member 'LevelEditorManager_SaveCustomCampaign::SlotName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SaveCustomCampaign, ReturnValue) == 0x000098, "Member 'LevelEditorManager_SaveCustomCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SaveEditor
// 0x0002 (0x0002 - 0x0000)
struct LevelEditorManager_SaveEditor final
{
public:
	bool                                          bCacheOnly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SaveEditor) == 0x000001, "Wrong alignment on LevelEditorManager_SaveEditor");
static_assert(sizeof(LevelEditorManager_SaveEditor) == 0x000002, "Wrong size on LevelEditorManager_SaveEditor");
static_assert(offsetof(LevelEditorManager_SaveEditor, bCacheOnly) == 0x000000, "Member 'LevelEditorManager_SaveEditor::bCacheOnly' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SaveEditor, ReturnValue) == 0x000001, "Member 'LevelEditorManager_SaveEditor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetAmbientLight
// 0x000C (0x000C - 0x0000)
struct LevelEditorManager_SetAmbientLight final
{
public:
	float                                         InStrength;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimpleMod;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDirLight;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetAmbientLight) == 0x000004, "Wrong alignment on LevelEditorManager_SetAmbientLight");
static_assert(sizeof(LevelEditorManager_SetAmbientLight) == 0x00000C, "Wrong size on LevelEditorManager_SetAmbientLight");
static_assert(offsetof(LevelEditorManager_SetAmbientLight, InStrength) == 0x000000, "Member 'LevelEditorManager_SetAmbientLight::InStrength' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetAmbientLight, SimpleMod) == 0x000004, "Member 'LevelEditorManager_SetAmbientLight::SimpleMod' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetAmbientLight, InDirLight) == 0x000008, "Member 'LevelEditorManager_SetAmbientLight::InDirLight' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetBorder
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_SetBorder final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Dims;                                              // 0x0004(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadWorld;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSky;                                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SetBorder) == 0x000004, "Wrong alignment on LevelEditorManager_SetBorder");
static_assert(sizeof(LevelEditorManager_SetBorder) == 0x000020, "Wrong size on LevelEditorManager_SetBorder");
static_assert(offsetof(LevelEditorManager_SetBorder, Index_0) == 0x000000, "Member 'LevelEditorManager_SetBorder::Index_0' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetBorder, Dims) == 0x000004, "Member 'LevelEditorManager_SetBorder::Dims' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetBorder, bReloadWorld) == 0x00001C, "Member 'LevelEditorManager_SetBorder::bReloadWorld' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetBorder, bHasSky) == 0x00001D, "Member 'LevelEditorManager_SetBorder::bHasSky' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetBorderViz
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetBorderViz final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetBorderViz) == 0x000001, "Wrong alignment on LevelEditorManager_SetBorderViz");
static_assert(sizeof(LevelEditorManager_SetBorderViz) == 0x000001, "Wrong size on LevelEditorManager_SetBorderViz");
static_assert(offsetof(LevelEditorManager_SetBorderViz, bViz) == 0x000000, "Member 'LevelEditorManager_SetBorderViz::bViz' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetCurrentLevelWorkshopInfo
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_SetCurrentLevelWorkshopInfo final
{
public:
	class FString                                 InID;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetCurrentLevelWorkshopInfo) == 0x000008, "Wrong alignment on LevelEditorManager_SetCurrentLevelWorkshopInfo");
static_assert(sizeof(LevelEditorManager_SetCurrentLevelWorkshopInfo) == 0x000010, "Wrong size on LevelEditorManager_SetCurrentLevelWorkshopInfo");
static_assert(offsetof(LevelEditorManager_SetCurrentLevelWorkshopInfo, InID) == 0x000000, "Member 'LevelEditorManager_SetCurrentLevelWorkshopInfo::InID' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetDescription
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_SetDescription final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SetDescription) == 0x000008, "Wrong alignment on LevelEditorManager_SetDescription");
static_assert(sizeof(LevelEditorManager_SetDescription) == 0x000020, "Wrong size on LevelEditorManager_SetDescription");
static_assert(offsetof(LevelEditorManager_SetDescription, InDescription) == 0x000000, "Member 'LevelEditorManager_SetDescription::InDescription' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetDescription, ReturnValue) == 0x000018, "Member 'LevelEditorManager_SetDescription::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_SetDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SetDisplayName) == 0x000008, "Wrong alignment on LevelEditorManager_SetDisplayName");
static_assert(sizeof(LevelEditorManager_SetDisplayName) == 0x000020, "Wrong size on LevelEditorManager_SetDisplayName");
static_assert(offsetof(LevelEditorManager_SetDisplayName, DisplayName) == 0x000000, "Member 'LevelEditorManager_SetDisplayName::DisplayName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetDisplayName, ReturnValue) == 0x000018, "Member 'LevelEditorManager_SetDisplayName::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetEditMode
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetEditMode final
{
public:
	EEditMode                                     InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetEditMode) == 0x000001, "Wrong alignment on LevelEditorManager_SetEditMode");
static_assert(sizeof(LevelEditorManager_SetEditMode) == 0x000001, "Wrong size on LevelEditorManager_SetEditMode");
static_assert(offsetof(LevelEditorManager_SetEditMode, InMode) == 0x000000, "Member 'LevelEditorManager_SetEditMode::InMode' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetEditType
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetEditType final
{
public:
	EEditType                                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetEditType) == 0x000001, "Wrong alignment on LevelEditorManager_SetEditType");
static_assert(sizeof(LevelEditorManager_SetEditType) == 0x000001, "Wrong size on LevelEditorManager_SetEditType");
static_assert(offsetof(LevelEditorManager_SetEditType, InType) == 0x000000, "Member 'LevelEditorManager_SetEditType::InType' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetFogEnabled
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetFogEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetFogEnabled) == 0x000001, "Wrong alignment on LevelEditorManager_SetFogEnabled");
static_assert(sizeof(LevelEditorManager_SetFogEnabled) == 0x000001, "Wrong size on LevelEditorManager_SetFogEnabled");
static_assert(offsetof(LevelEditorManager_SetFogEnabled, bEnabled) == 0x000000, "Member 'LevelEditorManager_SetFogEnabled::bEnabled' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetLUT
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SetLUT final
{
public:
	int32                                         LUTIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LUTStrength;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetLUT) == 0x000004, "Wrong alignment on LevelEditorManager_SetLUT");
static_assert(sizeof(LevelEditorManager_SetLUT) == 0x000008, "Wrong size on LevelEditorManager_SetLUT");
static_assert(offsetof(LevelEditorManager_SetLUT, LUTIndex) == 0x000000, "Member 'LevelEditorManager_SetLUT::LUTIndex' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetLUT, LUTStrength) == 0x000004, "Member 'LevelEditorManager_SetLUT::LUTStrength' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetMaskActive
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetMaskActive final
{
public:
	bool                                          bStatus;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetMaskActive) == 0x000001, "Wrong alignment on LevelEditorManager_SetMaskActive");
static_assert(sizeof(LevelEditorManager_SetMaskActive) == 0x000001, "Wrong size on LevelEditorManager_SetMaskActive");
static_assert(offsetof(LevelEditorManager_SetMaskActive, bStatus) == 0x000000, "Member 'LevelEditorManager_SetMaskActive::bStatus' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetMaterialIndex
// 0x0004 (0x0004 - 0x0000)
struct LevelEditorManager_SetMaterialIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetMaterialIndex) == 0x000004, "Wrong alignment on LevelEditorManager_SetMaterialIndex");
static_assert(sizeof(LevelEditorManager_SetMaterialIndex) == 0x000004, "Wrong size on LevelEditorManager_SetMaterialIndex");
static_assert(offsetof(LevelEditorManager_SetMaterialIndex, InIndex) == 0x000000, "Member 'LevelEditorManager_SetMaterialIndex::InIndex' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetNoFriction
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetNoFriction final
{
public:
	bool                                          bNo;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetNoFriction) == 0x000001, "Wrong alignment on LevelEditorManager_SetNoFriction");
static_assert(sizeof(LevelEditorManager_SetNoFriction) == 0x000001, "Wrong size on LevelEditorManager_SetNoFriction");
static_assert(offsetof(LevelEditorManager_SetNoFriction, bNo) == 0x000000, "Member 'LevelEditorManager_SetNoFriction::bNo' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetShouldSnap
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SetShouldSnap final
{
public:
	bool                                          bShouldSnap;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetShouldSnap) == 0x000001, "Wrong alignment on LevelEditorManager_SetShouldSnap");
static_assert(sizeof(LevelEditorManager_SetShouldSnap) == 0x000001, "Wrong size on LevelEditorManager_SetShouldSnap");
static_assert(offsetof(LevelEditorManager_SetShouldSnap, bShouldSnap) == 0x000000, "Member 'LevelEditorManager_SetShouldSnap::bShouldSnap' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetSkylightTexture
// 0x0004 (0x0004 - 0x0000)
struct LevelEditorManager_SetSkylightTexture final
{
public:
	int32                                         TextureIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetSkylightTexture) == 0x000004, "Wrong alignment on LevelEditorManager_SetSkylightTexture");
static_assert(sizeof(LevelEditorManager_SetSkylightTexture) == 0x000004, "Wrong size on LevelEditorManager_SetSkylightTexture");
static_assert(offsetof(LevelEditorManager_SetSkylightTexture, TextureIndex) == 0x000000, "Member 'LevelEditorManager_SetSkylightTexture::TextureIndex' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetSkyTime
// 0x0004 (0x0004 - 0x0000)
struct LevelEditorManager_SetSkyTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetSkyTime) == 0x000004, "Wrong alignment on LevelEditorManager_SetSkyTime");
static_assert(sizeof(LevelEditorManager_SetSkyTime) == 0x000004, "Wrong size on LevelEditorManager_SetSkyTime");
static_assert(offsetof(LevelEditorManager_SetSkyTime, InTime) == 0x000000, "Member 'LevelEditorManager_SetSkyTime::InTime' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetupWorldBoundsDisplay
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorManager_SetupWorldBoundsDisplay final
{
public:
	struct FVoxelIntBox                           InBounds;                                          // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SetupWorldBoundsDisplay) == 0x000004, "Wrong alignment on LevelEditorManager_SetupWorldBoundsDisplay");
static_assert(sizeof(LevelEditorManager_SetupWorldBoundsDisplay) == 0x000018, "Wrong size on LevelEditorManager_SetupWorldBoundsDisplay");
static_assert(offsetof(LevelEditorManager_SetupWorldBoundsDisplay, InBounds) == 0x000000, "Member 'LevelEditorManager_SetupWorldBoundsDisplay::InBounds' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetWorkshopAuthor
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_SetWorkshopAuthor final
{
public:
	class FText                                   Author;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SetWorkshopAuthor) == 0x000008, "Wrong alignment on LevelEditorManager_SetWorkshopAuthor");
static_assert(sizeof(LevelEditorManager_SetWorkshopAuthor) == 0x000020, "Wrong size on LevelEditorManager_SetWorkshopAuthor");
static_assert(offsetof(LevelEditorManager_SetWorkshopAuthor, Author) == 0x000000, "Member 'LevelEditorManager_SetWorkshopAuthor::Author' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetWorkshopAuthor, ReturnValue) == 0x000018, "Member 'LevelEditorManager_SetWorkshopAuthor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SetWorkshopName
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorManager_SetWorkshopName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SetWorkshopName) == 0x000008, "Wrong alignment on LevelEditorManager_SetWorkshopName");
static_assert(sizeof(LevelEditorManager_SetWorkshopName) == 0x000020, "Wrong size on LevelEditorManager_SetWorkshopName");
static_assert(offsetof(LevelEditorManager_SetWorkshopName, DisplayName) == 0x000000, "Member 'LevelEditorManager_SetWorkshopName::DisplayName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SetWorkshopName, ReturnValue) == 0x000018, "Member 'LevelEditorManager_SetWorkshopName::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnCampaignMarker
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnCampaignMarker final
{
public:
	TSubclassOf<class ACampaignMarker>            MarkerClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnCampaignMarker) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnCampaignMarker");
static_assert(sizeof(LevelEditorManager_SpawnCampaignMarker) == 0x000008, "Wrong size on LevelEditorManager_SpawnCampaignMarker");
static_assert(offsetof(LevelEditorManager_SpawnCampaignMarker, MarkerClass) == 0x000000, "Member 'LevelEditorManager_SpawnCampaignMarker::MarkerClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnChargeStation
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnChargeStation final
{
public:
	TSubclassOf<class ARechargeStation>           InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnChargeStation) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnChargeStation");
static_assert(sizeof(LevelEditorManager_SpawnChargeStation) == 0x000008, "Wrong size on LevelEditorManager_SpawnChargeStation");
static_assert(offsetof(LevelEditorManager_SpawnChargeStation, InClass) == 0x000000, "Member 'LevelEditorManager_SpawnChargeStation::InClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnCustomPropFromData
// 0x00D0 (0x00D0 - 0x0000)
struct LevelEditorManager_SpawnCustomPropFromData final
{
public:
	struct FCustomPropData                        InData;                                            // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
	struct FTransform                             AtTransform;                                       // 0x0090(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APropVoxelWorld*                        ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelEditorManager_SpawnCustomPropFromData) == 0x000010, "Wrong alignment on LevelEditorManager_SpawnCustomPropFromData");
static_assert(sizeof(LevelEditorManager_SpawnCustomPropFromData) == 0x0000D0, "Wrong size on LevelEditorManager_SpawnCustomPropFromData");
static_assert(offsetof(LevelEditorManager_SpawnCustomPropFromData, InData) == 0x000000, "Member 'LevelEditorManager_SpawnCustomPropFromData::InData' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SpawnCustomPropFromData, AtTransform) == 0x000090, "Member 'LevelEditorManager_SpawnCustomPropFromData::AtTransform' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_SpawnCustomPropFromData, ReturnValue) == 0x0000C0, "Member 'LevelEditorManager_SpawnCustomPropFromData::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnGenericProp
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnGenericProp final
{
public:
	TSubclassOf<class APropVoxelWorld>            ClassToSpawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnGenericProp) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnGenericProp");
static_assert(sizeof(LevelEditorManager_SpawnGenericProp) == 0x000008, "Wrong size on LevelEditorManager_SpawnGenericProp");
static_assert(offsetof(LevelEditorManager_SpawnGenericProp, ClassToSpawn) == 0x000000, "Member 'LevelEditorManager_SpawnGenericProp::ClassToSpawn' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnGlass
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnGlass final
{
public:
	TSubclassOf<class AGlassVoxelWorld>           GlassClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnGlass) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnGlass");
static_assert(sizeof(LevelEditorManager_SpawnGlass) == 0x000008, "Wrong size on LevelEditorManager_SpawnGlass");
static_assert(offsetof(LevelEditorManager_SpawnGlass, GlassClass) == 0x000000, "Member 'LevelEditorManager_SpawnGlass::GlassClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnGun
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnGun final
{
public:
	TSubclassOf<class AWeaponBase>                WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnGun) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnGun");
static_assert(sizeof(LevelEditorManager_SpawnGun) == 0x000008, "Wrong size on LevelEditorManager_SpawnGun");
static_assert(offsetof(LevelEditorManager_SpawnGun, WeaponClass) == 0x000000, "Member 'LevelEditorManager_SpawnGun::WeaponClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnMech
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnMech final
{
public:
	TSubclassOf<class AMech>                      MechClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnMech) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnMech");
static_assert(sizeof(LevelEditorManager_SpawnMech) == 0x000008, "Wrong size on LevelEditorManager_SpawnMech");
static_assert(offsetof(LevelEditorManager_SpawnMech, MechClass) == 0x000000, "Member 'LevelEditorManager_SpawnMech::MechClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnNPC
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorManager_SpawnNPC final
{
public:
	ENPCType                                      OfType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnNPC) == 0x000001, "Wrong alignment on LevelEditorManager_SpawnNPC");
static_assert(sizeof(LevelEditorManager_SpawnNPC) == 0x000001, "Wrong size on LevelEditorManager_SpawnNPC");
static_assert(offsetof(LevelEditorManager_SpawnNPC, OfType) == 0x000000, "Member 'LevelEditorManager_SpawnNPC::OfType' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnProp
// 0x0004 (0x0004 - 0x0000)
struct LevelEditorManager_SpawnProp final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnProp) == 0x000004, "Wrong alignment on LevelEditorManager_SpawnProp");
static_assert(sizeof(LevelEditorManager_SpawnProp) == 0x000004, "Wrong size on LevelEditorManager_SpawnProp");
static_assert(offsetof(LevelEditorManager_SpawnProp, Index_0) == 0x000000, "Member 'LevelEditorManager_SpawnProp::Index_0' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnTurret
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnTurret final
{
public:
	class ATurret*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnTurret) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnTurret");
static_assert(sizeof(LevelEditorManager_SpawnTurret) == 0x000008, "Wrong size on LevelEditorManager_SpawnTurret");
static_assert(offsetof(LevelEditorManager_SpawnTurret, ReturnValue) == 0x000000, "Member 'LevelEditorManager_SpawnTurret::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnVoid
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_SpawnVoid final
{
public:
	TSubclassOf<class ARechargeStation>           VoidClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnVoid) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnVoid");
static_assert(sizeof(LevelEditorManager_SpawnVoid) == 0x000008, "Wrong size on LevelEditorManager_SpawnVoid");
static_assert(offsetof(LevelEditorManager_SpawnVoid, VoidClass) == 0x000000, "Member 'LevelEditorManager_SpawnVoid::VoidClass' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.SpawnVoxProp
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_SpawnVoxProp final
{
public:
	class FString                                 PropName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_SpawnVoxProp) == 0x000008, "Wrong alignment on LevelEditorManager_SpawnVoxProp");
static_assert(sizeof(LevelEditorManager_SpawnVoxProp) == 0x000010, "Wrong size on LevelEditorManager_SpawnVoxProp");
static_assert(offsetof(LevelEditorManager_SpawnVoxProp, PropName) == 0x000000, "Member 'LevelEditorManager_SpawnVoxProp::PropName' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.StampPropToWorld
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorManager_StampPropToWorld final
{
public:
	class APropVoxelWorld*                        InProp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_StampPropToWorld) == 0x000008, "Wrong alignment on LevelEditorManager_StampPropToWorld");
static_assert(sizeof(LevelEditorManager_StampPropToWorld) == 0x000008, "Wrong size on LevelEditorManager_StampPropToWorld");
static_assert(offsetof(LevelEditorManager_StampPropToWorld, InProp) == 0x000000, "Member 'LevelEditorManager_StampPropToWorld::InProp' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.UploadCampaignToSteam
// 0x0098 (0x0098 - 0x0000)
struct LevelEditorManager_UploadCampaignToSteam final
{
public:
	struct FCustomCampaignStruct                  ToUpload;                                          // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 WhenDone;                                          // 0x0088(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_UploadCampaignToSteam) == 0x000008, "Wrong alignment on LevelEditorManager_UploadCampaignToSteam");
static_assert(sizeof(LevelEditorManager_UploadCampaignToSteam) == 0x000098, "Wrong size on LevelEditorManager_UploadCampaignToSteam");
static_assert(offsetof(LevelEditorManager_UploadCampaignToSteam, ToUpload) == 0x000000, "Member 'LevelEditorManager_UploadCampaignToSteam::ToUpload' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_UploadCampaignToSteam, WhenDone) == 0x000088, "Member 'LevelEditorManager_UploadCampaignToSteam::WhenDone' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.UploadPropToSteam
// 0x0060 (0x0060 - 0x0000)
struct LevelEditorManager_UploadPropToSteam final
{
public:
	class FString                                 CatName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomPropData>                ToUpload;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPropCatUploadInfo                     InInfo;                                            // 0x0020(0x0030)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 WhenDone;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_UploadPropToSteam) == 0x000008, "Wrong alignment on LevelEditorManager_UploadPropToSteam");
static_assert(sizeof(LevelEditorManager_UploadPropToSteam) == 0x000060, "Wrong size on LevelEditorManager_UploadPropToSteam");
static_assert(offsetof(LevelEditorManager_UploadPropToSteam, CatName) == 0x000000, "Member 'LevelEditorManager_UploadPropToSteam::CatName' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_UploadPropToSteam, ToUpload) == 0x000010, "Member 'LevelEditorManager_UploadPropToSteam::ToUpload' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_UploadPropToSteam, InInfo) == 0x000020, "Member 'LevelEditorManager_UploadPropToSteam::InInfo' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_UploadPropToSteam, WhenDone) == 0x000050, "Member 'LevelEditorManager_UploadPropToSteam::WhenDone' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.UploadToSteam
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_UploadToSteam final
{
public:
	TDelegate<void(bool Success)>                 WhenDone;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_UploadToSteam) == 0x000004, "Wrong alignment on LevelEditorManager_UploadToSteam");
static_assert(sizeof(LevelEditorManager_UploadToSteam) == 0x000010, "Wrong size on LevelEditorManager_UploadToSteam");
static_assert(offsetof(LevelEditorManager_UploadToSteam, WhenDone) == 0x000000, "Member 'LevelEditorManager_UploadToSteam::WhenDone' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorManager.UserRequestedAttachment
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorManager_UserRequestedAttachment final
{
public:
	class AActor*                                 ToAttach;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ToAttachTo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorManager_UserRequestedAttachment) == 0x000008, "Wrong alignment on LevelEditorManager_UserRequestedAttachment");
static_assert(sizeof(LevelEditorManager_UserRequestedAttachment) == 0x000010, "Wrong size on LevelEditorManager_UserRequestedAttachment");
static_assert(offsetof(LevelEditorManager_UserRequestedAttachment, ToAttach) == 0x000000, "Member 'LevelEditorManager_UserRequestedAttachment::ToAttach' has a wrong offset!");
static_assert(offsetof(LevelEditorManager_UserRequestedAttachment, ToAttachTo) == 0x000008, "Member 'LevelEditorManager_UserRequestedAttachment::ToAttachTo' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.ConvertSelectionToProp
// 0x0010 (0x0010 - 0x0000)
struct LevelEditorPawn_ConvertSelectionToProp final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_ConvertSelectionToProp) == 0x000008, "Wrong alignment on LevelEditorPawn_ConvertSelectionToProp");
static_assert(sizeof(LevelEditorPawn_ConvertSelectionToProp) == 0x000010, "Wrong size on LevelEditorPawn_ConvertSelectionToProp");
static_assert(offsetof(LevelEditorPawn_ConvertSelectionToProp, InName) == 0x000000, "Member 'LevelEditorPawn_ConvertSelectionToProp::InName' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.GetCurrentEditMode
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorPawn_GetCurrentEditMode final
{
public:
	EEditMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_GetCurrentEditMode) == 0x000001, "Wrong alignment on LevelEditorPawn_GetCurrentEditMode");
static_assert(sizeof(LevelEditorPawn_GetCurrentEditMode) == 0x000001, "Wrong size on LevelEditorPawn_GetCurrentEditMode");
static_assert(offsetof(LevelEditorPawn_GetCurrentEditMode, ReturnValue) == 0x000000, "Member 'LevelEditorPawn_GetCurrentEditMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.GetCurrentEditType
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorPawn_GetCurrentEditType final
{
public:
	EEditType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_GetCurrentEditType) == 0x000001, "Wrong alignment on LevelEditorPawn_GetCurrentEditType");
static_assert(sizeof(LevelEditorPawn_GetCurrentEditType) == 0x000001, "Wrong size on LevelEditorPawn_GetCurrentEditType");
static_assert(offsetof(LevelEditorPawn_GetCurrentEditType, ReturnValue) == 0x000000, "Member 'LevelEditorPawn_GetCurrentEditType::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.GetScreenshot
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorPawn_GetScreenshot final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_GetScreenshot) == 0x000008, "Wrong alignment on LevelEditorPawn_GetScreenshot");
static_assert(sizeof(LevelEditorPawn_GetScreenshot) == 0x000008, "Wrong size on LevelEditorPawn_GetScreenshot");
static_assert(offsetof(LevelEditorPawn_GetScreenshot, ReturnValue) == 0x000000, "Member 'LevelEditorPawn_GetScreenshot::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.GetScreenshotForPropCat
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorPawn_GetScreenshotForPropCat final
{
public:
	class FString                                 CatName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_GetScreenshotForPropCat) == 0x000008, "Wrong alignment on LevelEditorPawn_GetScreenshotForPropCat");
static_assert(sizeof(LevelEditorPawn_GetScreenshotForPropCat) == 0x000018, "Wrong size on LevelEditorPawn_GetScreenshotForPropCat");
static_assert(offsetof(LevelEditorPawn_GetScreenshotForPropCat, CatName) == 0x000000, "Member 'LevelEditorPawn_GetScreenshotForPropCat::CatName' has a wrong offset!");
static_assert(offsetof(LevelEditorPawn_GetScreenshotForPropCat, ReturnValue) == 0x000010, "Member 'LevelEditorPawn_GetScreenshotForPropCat::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.LoadScreenshotForPropCat
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorPawn_LoadScreenshotForPropCat final
{
public:
	class FString                                 CatName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_LoadScreenshotForPropCat) == 0x000008, "Wrong alignment on LevelEditorPawn_LoadScreenshotForPropCat");
static_assert(sizeof(LevelEditorPawn_LoadScreenshotForPropCat) == 0x000018, "Wrong size on LevelEditorPawn_LoadScreenshotForPropCat");
static_assert(offsetof(LevelEditorPawn_LoadScreenshotForPropCat, CatName) == 0x000000, "Member 'LevelEditorPawn_LoadScreenshotForPropCat::CatName' has a wrong offset!");
static_assert(offsetof(LevelEditorPawn_LoadScreenshotForPropCat, ReturnValue) == 0x000010, "Member 'LevelEditorPawn_LoadScreenshotForPropCat::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorPawn.UpdateFaceEdit
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorPawn_UpdateFaceEdit final
{
public:
	EFaceDirection                                ForceDirection;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorPawn_UpdateFaceEdit) == 0x000001, "Wrong alignment on LevelEditorPawn_UpdateFaceEdit");
static_assert(sizeof(LevelEditorPawn_UpdateFaceEdit) == 0x000001, "Wrong size on LevelEditorPawn_UpdateFaceEdit");
static_assert(offsetof(LevelEditorPawn_UpdateFaceEdit, ForceDirection) == 0x000000, "Member 'LevelEditorPawn_UpdateFaceEdit::ForceDirection' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.DisplayPropertiesFor
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorWidget_DisplayPropertiesFor final
{
public:
	class AActor*                                 ForActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_DisplayPropertiesFor) == 0x000008, "Wrong alignment on LevelEditorWidget_DisplayPropertiesFor");
static_assert(sizeof(LevelEditorWidget_DisplayPropertiesFor) == 0x000008, "Wrong size on LevelEditorWidget_DisplayPropertiesFor");
static_assert(offsetof(LevelEditorWidget_DisplayPropertiesFor, ForActor) == 0x000000, "Member 'LevelEditorWidget_DisplayPropertiesFor::ForActor' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.DisplaySavedValues
// 0x0008 (0x0008 - 0x0000)
struct LevelEditorWidget_DisplaySavedValues final
{
public:
	class ULevelEditorSave*                       SaveInfo;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_DisplaySavedValues) == 0x000008, "Wrong alignment on LevelEditorWidget_DisplaySavedValues");
static_assert(sizeof(LevelEditorWidget_DisplaySavedValues) == 0x000008, "Wrong size on LevelEditorWidget_DisplaySavedValues");
static_assert(offsetof(LevelEditorWidget_DisplaySavedValues, SaveInfo) == 0x000000, "Member 'LevelEditorWidget_DisplaySavedValues::SaveInfo' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.DisplayToolDimensions
// 0x000C (0x000C - 0x0000)
struct LevelEditorWidget_DisplayToolDimensions final
{
public:
	struct FIntVector                             InDims;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_DisplayToolDimensions) == 0x000004, "Wrong alignment on LevelEditorWidget_DisplayToolDimensions");
static_assert(sizeof(LevelEditorWidget_DisplayToolDimensions) == 0x00000C, "Wrong size on LevelEditorWidget_DisplayToolDimensions");
static_assert(offsetof(LevelEditorWidget_DisplayToolDimensions, InDims) == 0x000000, "Member 'LevelEditorWidget_DisplayToolDimensions::InDims' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.GetChapterData
// 0x0020 (0x0020 - 0x0000)
struct LevelEditorWidget_GetChapterData final
{
public:
	struct FWorkshopChapterData                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_GetChapterData) == 0x000008, "Wrong alignment on LevelEditorWidget_GetChapterData");
static_assert(sizeof(LevelEditorWidget_GetChapterData) == 0x000020, "Wrong size on LevelEditorWidget_GetChapterData");
static_assert(offsetof(LevelEditorWidget_GetChapterData, ReturnValue) == 0x000000, "Member 'LevelEditorWidget_GetChapterData::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.GetSimSettings
// 0x0002 (0x0002 - 0x0000)
struct LevelEditorWidget_GetSimSettings final
{
public:
	bool                                          bEnableAI;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnAtCamera;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_GetSimSettings) == 0x000001, "Wrong alignment on LevelEditorWidget_GetSimSettings");
static_assert(sizeof(LevelEditorWidget_GetSimSettings) == 0x000002, "Wrong size on LevelEditorWidget_GetSimSettings");
static_assert(offsetof(LevelEditorWidget_GetSimSettings, bEnableAI) == 0x000000, "Member 'LevelEditorWidget_GetSimSettings::bEnableAI' has a wrong offset!");
static_assert(offsetof(LevelEditorWidget_GetSimSettings, bSpawnAtCamera) == 0x000001, "Member 'LevelEditorWidget_GetSimSettings::bSpawnAtCamera' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.HotKeyModePressed
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorWidget_HotKeyModePressed final
{
public:
	EEditMode                                     InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_HotKeyModePressed) == 0x000001, "Wrong alignment on LevelEditorWidget_HotKeyModePressed");
static_assert(sizeof(LevelEditorWidget_HotKeyModePressed) == 0x000001, "Wrong size on LevelEditorWidget_HotKeyModePressed");
static_assert(offsetof(LevelEditorWidget_HotKeyModePressed, InMode) == 0x000000, "Member 'LevelEditorWidget_HotKeyModePressed::InMode' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.HotKeyTypePressed
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorWidget_HotKeyTypePressed final
{
public:
	EEditType                                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_HotKeyTypePressed) == 0x000001, "Wrong alignment on LevelEditorWidget_HotKeyTypePressed");
static_assert(sizeof(LevelEditorWidget_HotKeyTypePressed) == 0x000001, "Wrong size on LevelEditorWidget_HotKeyTypePressed");
static_assert(offsetof(LevelEditorWidget_HotKeyTypePressed, InType) == 0x000000, "Member 'LevelEditorWidget_HotKeyTypePressed::InType' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.SetSelectedMaterial
// 0x0004 (0x0004 - 0x0000)
struct LevelEditorWidget_SetSelectedMaterial final
{
public:
	int32                                         Mat;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_SetSelectedMaterial) == 0x000004, "Wrong alignment on LevelEditorWidget_SetSelectedMaterial");
static_assert(sizeof(LevelEditorWidget_SetSelectedMaterial) == 0x000004, "Wrong size on LevelEditorWidget_SetSelectedMaterial");
static_assert(offsetof(LevelEditorWidget_SetSelectedMaterial, Mat) == 0x000000, "Member 'LevelEditorWidget_SetSelectedMaterial::Mat' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.SetWorldSizeDisplay
// 0x0018 (0x0018 - 0x0000)
struct LevelEditorWidget_SetWorldSizeDisplay final
{
public:
	struct FVoxelIntBox                           InValue;                                           // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_SetWorldSizeDisplay) == 0x000004, "Wrong alignment on LevelEditorWidget_SetWorldSizeDisplay");
static_assert(sizeof(LevelEditorWidget_SetWorldSizeDisplay) == 0x000018, "Wrong size on LevelEditorWidget_SetWorldSizeDisplay");
static_assert(offsetof(LevelEditorWidget_SetWorldSizeDisplay, InValue) == 0x000000, "Member 'LevelEditorWidget_SetWorldSizeDisplay::InValue' has a wrong offset!");

// Function ThankYouVeryCool.LevelEditorWidget.ShowSelectControls
// 0x0001 (0x0001 - 0x0000)
struct LevelEditorWidget_ShowSelectControls final
{
public:
	ESelectStage                                  InStage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelEditorWidget_ShowSelectControls) == 0x000001, "Wrong alignment on LevelEditorWidget_ShowSelectControls");
static_assert(sizeof(LevelEditorWidget_ShowSelectControls) == 0x000001, "Wrong size on LevelEditorWidget_ShowSelectControls");
static_assert(offsetof(LevelEditorWidget_ShowSelectControls, InStage) == 0x000000, "Member 'LevelEditorWidget_ShowSelectControls::InStage' has a wrong offset!");

// Function ThankYouVeryCool.LuckDisplay.Reset
// 0x0004 (0x0004 - 0x0000)
struct LuckDisplay_Reset final
{
public:
	int32                                         MaxAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckDisplay_Reset) == 0x000004, "Wrong alignment on LuckDisplay_Reset");
static_assert(sizeof(LuckDisplay_Reset) == 0x000004, "Wrong size on LuckDisplay_Reset");
static_assert(offsetof(LuckDisplay_Reset, MaxAmount) == 0x000000, "Member 'LuckDisplay_Reset::MaxAmount' has a wrong offset!");

// Function ThankYouVeryCool.LuckDisplay.SetLuck
// 0x0008 (0x0008 - 0x0000)
struct LuckDisplay_SetLuck final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestore;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LuckDisplay_SetLuck) == 0x000004, "Wrong alignment on LuckDisplay_SetLuck");
static_assert(sizeof(LuckDisplay_SetLuck) == 0x000008, "Wrong size on LuckDisplay_SetLuck");
static_assert(offsetof(LuckDisplay_SetLuck, Amount) == 0x000000, "Member 'LuckDisplay_SetLuck::Amount' has a wrong offset!");
static_assert(offsetof(LuckDisplay_SetLuck, bRestore) == 0x000004, "Member 'LuckDisplay_SetLuck::bRestore' has a wrong offset!");

// Function ThankYouVeryCool.LuosProjectile.OverlappedSomething
// 0x0090 (0x0090 - 0x0000)
struct LuosProjectile_OverlappedSomething final
{
public:
	class AActor*                                 Overlapped;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuosProjectile_OverlappedSomething) == 0x000008, "Wrong alignment on LuosProjectile_OverlappedSomething");
static_assert(sizeof(LuosProjectile_OverlappedSomething) == 0x000090, "Wrong size on LuosProjectile_OverlappedSomething");
static_assert(offsetof(LuosProjectile_OverlappedSomething, Overlapped) == 0x000000, "Member 'LuosProjectile_OverlappedSomething::Overlapped' has a wrong offset!");
static_assert(offsetof(LuosProjectile_OverlappedSomething, HitResult) == 0x000008, "Member 'LuosProjectile_OverlappedSomething::HitResult' has a wrong offset!");

// Function ThankYouVeryCool.Mech.DoDestructionGraph
// 0x0018 (0x0018 - 0x0000)
struct Mech_DoDestructionGraph final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            OnWorld;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_DoDestructionGraph) == 0x000008, "Wrong alignment on Mech_DoDestructionGraph");
static_assert(sizeof(Mech_DoDestructionGraph) == 0x000018, "Wrong size on Mech_DoDestructionGraph");
static_assert(offsetof(Mech_DoDestructionGraph, WorldLocation) == 0x000000, "Member 'Mech_DoDestructionGraph::WorldLocation' has a wrong offset!");
static_assert(offsetof(Mech_DoDestructionGraph, OnWorld) == 0x000010, "Member 'Mech_DoDestructionGraph::OnWorld' has a wrong offset!");

// Function ThankYouVeryCool.Mech.DoHitLogic
// 0x0088 (0x0088 - 0x0000)
struct Mech_DoHitLogic final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_DoHitLogic) == 0x000004, "Wrong alignment on Mech_DoHitLogic");
static_assert(sizeof(Mech_DoHitLogic) == 0x000088, "Wrong size on Mech_DoHitLogic");
static_assert(offsetof(Mech_DoHitLogic, HitResult) == 0x000000, "Member 'Mech_DoHitLogic::HitResult' has a wrong offset!");

// Function ThankYouVeryCool.Mech.GetInterpolatedLookAt
// 0x001C (0x001C - 0x0000)
struct Mech_GetInterpolatedLookAt final
{
public:
	struct FVector                                GoalLookAt;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_GetInterpolatedLookAt) == 0x000004, "Wrong alignment on Mech_GetInterpolatedLookAt");
static_assert(sizeof(Mech_GetInterpolatedLookAt) == 0x00001C, "Wrong size on Mech_GetInterpolatedLookAt");
static_assert(offsetof(Mech_GetInterpolatedLookAt, GoalLookAt) == 0x000000, "Member 'Mech_GetInterpolatedLookAt::GoalLookAt' has a wrong offset!");
static_assert(offsetof(Mech_GetInterpolatedLookAt, DeltaTime) == 0x00000C, "Member 'Mech_GetInterpolatedLookAt::DeltaTime' has a wrong offset!");
static_assert(offsetof(Mech_GetInterpolatedLookAt, ReturnValue) == 0x000010, "Member 'Mech_GetInterpolatedLookAt::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Mech.GetShootOrigin
// 0x0030 (0x0030 - 0x0000)
struct Mech_GetShootOrigin final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_GetShootOrigin) == 0x000010, "Wrong alignment on Mech_GetShootOrigin");
static_assert(sizeof(Mech_GetShootOrigin) == 0x000030, "Wrong size on Mech_GetShootOrigin");
static_assert(offsetof(Mech_GetShootOrigin, ReturnValue) == 0x000000, "Member 'Mech_GetShootOrigin::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Mech.NotifyMechHit
// 0x008C (0x008C - 0x0000)
struct Mech_NotifyMechHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Dmg;                                               // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_NotifyMechHit) == 0x000004, "Wrong alignment on Mech_NotifyMechHit");
static_assert(sizeof(Mech_NotifyMechHit) == 0x00008C, "Wrong size on Mech_NotifyMechHit");
static_assert(offsetof(Mech_NotifyMechHit, HitResult) == 0x000000, "Member 'Mech_NotifyMechHit::HitResult' has a wrong offset!");
static_assert(offsetof(Mech_NotifyMechHit, Dmg) == 0x000088, "Member 'Mech_NotifyMechHit::Dmg' has a wrong offset!");

// Function ThankYouVeryCool.Mech.SetShieldActive
// 0x0002 (0x0002 - 0x0000)
struct Mech_SetShieldActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_SetShieldActive) == 0x000001, "Wrong alignment on Mech_SetShieldActive");
static_assert(sizeof(Mech_SetShieldActive) == 0x000002, "Wrong size on Mech_SetShieldActive");
static_assert(offsetof(Mech_SetShieldActive, bActive) == 0x000000, "Member 'Mech_SetShieldActive::bActive' has a wrong offset!");
static_assert(offsetof(Mech_SetShieldActive, bInstant) == 0x000001, "Member 'Mech_SetShieldActive::bInstant' has a wrong offset!");

// Function ThankYouVeryCool.Mech.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct Mech_SetSpeed final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mech_SetSpeed) == 0x000004, "Wrong alignment on Mech_SetSpeed");
static_assert(sizeof(Mech_SetSpeed) == 0x000004, "Wrong size on Mech_SetSpeed");
static_assert(offsetof(Mech_SetSpeed, InSpeed) == 0x000000, "Member 'Mech_SetSpeed::InSpeed' has a wrong offset!");

// Function ThankYouVeryCool.MechController.UpdateTargetPerception
// 0x0048 (0x0048 - 0x0000)
struct MechController_UpdateTargetPerception final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MechController_UpdateTargetPerception) == 0x000008, "Wrong alignment on MechController_UpdateTargetPerception");
static_assert(sizeof(MechController_UpdateTargetPerception) == 0x000048, "Wrong size on MechController_UpdateTargetPerception");
static_assert(offsetof(MechController_UpdateTargetPerception, Actor) == 0x000000, "Member 'MechController_UpdateTargetPerception::Actor' has a wrong offset!");
static_assert(offsetof(MechController_UpdateTargetPerception, Stimulus) == 0x000008, "Member 'MechController_UpdateTargetPerception::Stimulus' has a wrong offset!");

// Function ThankYouVeryCool.MenuPawn.LerpTransform
// 0x0030 (0x0030 - 0x0000)
struct MenuPawn_LerpTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuPawn_LerpTransform) == 0x000010, "Wrong alignment on MenuPawn_LerpTransform");
static_assert(sizeof(MenuPawn_LerpTransform) == 0x000030, "Wrong size on MenuPawn_LerpTransform");
static_assert(offsetof(MenuPawn_LerpTransform, Transform) == 0x000000, "Member 'MenuPawn_LerpTransform::Transform' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.CacheTrack
// 0x0028 (0x0028 - 0x0000)
struct MusicPlayer_CacheTrack final
{
public:
	TSoftObjectPtr<class USoundBase>              ToCache;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_CacheTrack) == 0x000008, "Wrong alignment on MusicPlayer_CacheTrack");
static_assert(sizeof(MusicPlayer_CacheTrack) == 0x000028, "Wrong size on MusicPlayer_CacheTrack");
static_assert(offsetof(MusicPlayer_CacheTrack, ToCache) == 0x000000, "Member 'MusicPlayer_CacheTrack::ToCache' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.CustomTrackLoaded
// 0x0018 (0x0018 - 0x0000)
struct MusicPlayer_CustomTrackLoaded final
{
public:
	class URuntimeAudioImporterLibrary*           Importer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeImportStatus                          Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayer_CustomTrackLoaded) == 0x000008, "Wrong alignment on MusicPlayer_CustomTrackLoaded");
static_assert(sizeof(MusicPlayer_CustomTrackLoaded) == 0x000018, "Wrong size on MusicPlayer_CustomTrackLoaded");
static_assert(offsetof(MusicPlayer_CustomTrackLoaded, Importer) == 0x000000, "Member 'MusicPlayer_CustomTrackLoaded::Importer' has a wrong offset!");
static_assert(offsetof(MusicPlayer_CustomTrackLoaded, ImportedSoundWave) == 0x000008, "Member 'MusicPlayer_CustomTrackLoaded::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(MusicPlayer_CustomTrackLoaded, Status) == 0x000010, "Member 'MusicPlayer_CustomTrackLoaded::Status' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.FadeTrack
// 0x0030 (0x0030 - 0x0000)
struct MusicPlayer_FadeTrack final
{
public:
	TSoftObjectPtr<class USoundBase>              WhiteList;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayer_FadeTrack) == 0x000008, "Wrong alignment on MusicPlayer_FadeTrack");
static_assert(sizeof(MusicPlayer_FadeTrack) == 0x000030, "Wrong size on MusicPlayer_FadeTrack");
static_assert(offsetof(MusicPlayer_FadeTrack, WhiteList) == 0x000000, "Member 'MusicPlayer_FadeTrack::WhiteList' has a wrong offset!");
static_assert(offsetof(MusicPlayer_FadeTrack, Time) == 0x000028, "Member 'MusicPlayer_FadeTrack::Time' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.GetCurrentTrackTitle
// 0x0018 (0x0018 - 0x0000)
struct MusicPlayer_GetCurrentTrackTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_GetCurrentTrackTitle) == 0x000008, "Wrong alignment on MusicPlayer_GetCurrentTrackTitle");
static_assert(sizeof(MusicPlayer_GetCurrentTrackTitle) == 0x000018, "Wrong size on MusicPlayer_GetCurrentTrackTitle");
static_assert(offsetof(MusicPlayer_GetCurrentTrackTitle, ReturnValue) == 0x000000, "Member 'MusicPlayer_GetCurrentTrackTitle::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.GetCustomTrackCount
// 0x0004 (0x0004 - 0x0000)
struct MusicPlayer_GetCustomTrackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_GetCustomTrackCount) == 0x000004, "Wrong alignment on MusicPlayer_GetCustomTrackCount");
static_assert(sizeof(MusicPlayer_GetCustomTrackCount) == 0x000004, "Wrong size on MusicPlayer_GetCustomTrackCount");
static_assert(offsetof(MusicPlayer_GetCustomTrackCount, ReturnValue) == 0x000000, "Member 'MusicPlayer_GetCustomTrackCount::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.GetCustomTrackPath
// 0x0010 (0x0010 - 0x0000)
struct MusicPlayer_GetCustomTrackPath final
{
public:
	class FString                                 OutPath;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_GetCustomTrackPath) == 0x000008, "Wrong alignment on MusicPlayer_GetCustomTrackPath");
static_assert(sizeof(MusicPlayer_GetCustomTrackPath) == 0x000010, "Wrong size on MusicPlayer_GetCustomTrackPath");
static_assert(offsetof(MusicPlayer_GetCustomTrackPath, OutPath) == 0x000000, "Member 'MusicPlayer_GetCustomTrackPath::OutPath' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.GetPCMData
// 0x0010 (0x0010 - 0x0000)
struct MusicPlayer_GetPCMData final
{
public:
	TArray<float>                                 PCMData;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_GetPCMData) == 0x000008, "Wrong alignment on MusicPlayer_GetPCMData");
static_assert(sizeof(MusicPlayer_GetPCMData) == 0x000010, "Wrong size on MusicPlayer_GetPCMData");
static_assert(offsetof(MusicPlayer_GetPCMData, PCMData) == 0x000000, "Member 'MusicPlayer_GetPCMData::PCMData' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.GetTitleOfTrack
// 0x0040 (0x0040 - 0x0000)
struct MusicPlayer_GetTitleOfTrack final
{
public:
	TSoftObjectPtr<class USoundBase>              track;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_GetTitleOfTrack) == 0x000008, "Wrong alignment on MusicPlayer_GetTitleOfTrack");
static_assert(sizeof(MusicPlayer_GetTitleOfTrack) == 0x000040, "Wrong size on MusicPlayer_GetTitleOfTrack");
static_assert(offsetof(MusicPlayer_GetTitleOfTrack, track) == 0x000000, "Member 'MusicPlayer_GetTitleOfTrack::track' has a wrong offset!");
static_assert(offsetof(MusicPlayer_GetTitleOfTrack, ReturnValue) == 0x000028, "Member 'MusicPlayer_GetTitleOfTrack::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.IsAnyTrackPlaying
// 0x0001 (0x0001 - 0x0000)
struct MusicPlayer_IsAnyTrackPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_IsAnyTrackPlaying) == 0x000001, "Wrong alignment on MusicPlayer_IsAnyTrackPlaying");
static_assert(sizeof(MusicPlayer_IsAnyTrackPlaying) == 0x000001, "Wrong size on MusicPlayer_IsAnyTrackPlaying");
static_assert(offsetof(MusicPlayer_IsAnyTrackPlaying, ReturnValue) == 0x000000, "Member 'MusicPlayer_IsAnyTrackPlaying::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.IsAnyTrackPlayingBesidesTitle
// 0x0001 (0x0001 - 0x0000)
struct MusicPlayer_IsAnyTrackPlayingBesidesTitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_IsAnyTrackPlayingBesidesTitle) == 0x000001, "Wrong alignment on MusicPlayer_IsAnyTrackPlayingBesidesTitle");
static_assert(sizeof(MusicPlayer_IsAnyTrackPlayingBesidesTitle) == 0x000001, "Wrong size on MusicPlayer_IsAnyTrackPlayingBesidesTitle");
static_assert(offsetof(MusicPlayer_IsAnyTrackPlayingBesidesTitle, ReturnValue) == 0x000000, "Member 'MusicPlayer_IsAnyTrackPlayingBesidesTitle::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.IsTrackPlaying
// 0x0030 (0x0030 - 0x0000)
struct MusicPlayer_IsTrackPlaying final
{
public:
	TSoftObjectPtr<class USoundBase>              ToCheck;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayer_IsTrackPlaying) == 0x000008, "Wrong alignment on MusicPlayer_IsTrackPlaying");
static_assert(sizeof(MusicPlayer_IsTrackPlaying) == 0x000030, "Wrong size on MusicPlayer_IsTrackPlaying");
static_assert(offsetof(MusicPlayer_IsTrackPlaying, ToCheck) == 0x000000, "Member 'MusicPlayer_IsTrackPlaying::ToCheck' has a wrong offset!");
static_assert(offsetof(MusicPlayer_IsTrackPlaying, ReturnValue) == 0x000028, "Member 'MusicPlayer_IsTrackPlaying::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.OnPaused
// 0x0001 (0x0001 - 0x0000)
struct MusicPlayer_OnPaused final
{
public:
	bool                                          bPaused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_OnPaused) == 0x000001, "Wrong alignment on MusicPlayer_OnPaused");
static_assert(sizeof(MusicPlayer_OnPaused) == 0x000001, "Wrong size on MusicPlayer_OnPaused");
static_assert(offsetof(MusicPlayer_OnPaused, bPaused) == 0x000000, "Member 'MusicPlayer_OnPaused::bPaused' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.PlayIfNotPlaying
// 0x0028 (0x0028 - 0x0000)
struct MusicPlayer_PlayIfNotPlaying final
{
public:
	TSoftObjectPtr<class USoundBase>              ToPlay;                                            // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_PlayIfNotPlaying) == 0x000008, "Wrong alignment on MusicPlayer_PlayIfNotPlaying");
static_assert(sizeof(MusicPlayer_PlayIfNotPlaying) == 0x000028, "Wrong size on MusicPlayer_PlayIfNotPlaying");
static_assert(offsetof(MusicPlayer_PlayIfNotPlaying, ToPlay) == 0x000000, "Member 'MusicPlayer_PlayIfNotPlaying::ToPlay' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.PlayTrack
// 0x0030 (0x0030 - 0x0000)
struct MusicPlayer_PlayTrack final
{
public:
	TSoftObjectPtr<class USoundBase>              InTrack;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontStoreAsLast;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCustom;                                         // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicPlayer_PlayTrack) == 0x000008, "Wrong alignment on MusicPlayer_PlayTrack");
static_assert(sizeof(MusicPlayer_PlayTrack) == 0x000030, "Wrong size on MusicPlayer_PlayTrack");
static_assert(offsetof(MusicPlayer_PlayTrack, InTrack) == 0x000000, "Member 'MusicPlayer_PlayTrack::InTrack' has a wrong offset!");
static_assert(offsetof(MusicPlayer_PlayTrack, bDontStoreAsLast) == 0x000028, "Member 'MusicPlayer_PlayTrack::bDontStoreAsLast' has a wrong offset!");
static_assert(offsetof(MusicPlayer_PlayTrack, bIsCustom) == 0x000029, "Member 'MusicPlayer_PlayTrack::bIsCustom' has a wrong offset!");

// Function ThankYouVeryCool.MusicPlayer.StopTrack
// 0x0030 (0x0030 - 0x0000)
struct MusicPlayer_StopTrack final
{
public:
	TSoftObjectPtr<class USoundBase>              WhiteList;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutTime;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicPlayer_StopTrack) == 0x000008, "Wrong alignment on MusicPlayer_StopTrack");
static_assert(sizeof(MusicPlayer_StopTrack) == 0x000030, "Wrong size on MusicPlayer_StopTrack");
static_assert(offsetof(MusicPlayer_StopTrack, WhiteList) == 0x000000, "Member 'MusicPlayer_StopTrack::WhiteList' has a wrong offset!");
static_assert(offsetof(MusicPlayer_StopTrack, bInstant) == 0x000028, "Member 'MusicPlayer_StopTrack::bInstant' has a wrong offset!");
static_assert(offsetof(MusicPlayer_StopTrack, FadeOutTime) == 0x00002C, "Member 'MusicPlayer_StopTrack::FadeOutTime' has a wrong offset!");

// Function ThankYouVeryCool.NavLinkProxy_Jump.ReceiveSmartLinkReached_Internal
// 0x0018 (0x0018 - 0x0000)
struct NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal) == 0x000008, "Wrong alignment on NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal");
static_assert(sizeof(NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal) == 0x000018, "Wrong size on NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal");
static_assert(offsetof(NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal, Agent) == 0x000000, "Member 'NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal::Agent' has a wrong offset!");
static_assert(offsetof(NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal, Destination) == 0x000008, "Member 'NavLinkProxy_Jump_ReceiveSmartLinkReached_Internal::Destination' has a wrong offset!");

// Function ThankYouVeryCool.NdocRingWidget.UpdateInnerRing
// 0x0004 (0x0004 - 0x0000)
struct NdocRingWidget_UpdateInnerRing final
{
public:
	float                                         UpdateAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NdocRingWidget_UpdateInnerRing) == 0x000004, "Wrong alignment on NdocRingWidget_UpdateInnerRing");
static_assert(sizeof(NdocRingWidget_UpdateInnerRing) == 0x000004, "Wrong size on NdocRingWidget_UpdateInnerRing");
static_assert(offsetof(NdocRingWidget_UpdateInnerRing, UpdateAmount) == 0x000000, "Member 'NdocRingWidget_UpdateInnerRing::UpdateAmount' has a wrong offset!");

// Function ThankYouVeryCool.NPC.ApplyHitForce
// 0x0020 (0x0020 - 0x0000)
struct NPC_ApplyHitForce final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ApplyHitForce) == 0x000004, "Wrong alignment on NPC_ApplyHitForce");
static_assert(sizeof(NPC_ApplyHitForce) == 0x000020, "Wrong size on NPC_ApplyHitForce");
static_assert(offsetof(NPC_ApplyHitForce, Impulse) == 0x000000, "Member 'NPC_ApplyHitForce::Impulse' has a wrong offset!");
static_assert(offsetof(NPC_ApplyHitForce, BoneName) == 0x00000C, "Member 'NPC_ApplyHitForce::BoneName' has a wrong offset!");
static_assert(offsetof(NPC_ApplyHitForce, Location) == 0x000014, "Member 'NPC_ApplyHitForce::Location' has a wrong offset!");

// Function ThankYouVeryCool.NPC.CapsuleHit
// 0x00B0 (0x00B0 - 0x0000)
struct NPC_CapsuleHit final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepResult;                                       // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_CapsuleHit) == 0x000008, "Wrong alignment on NPC_CapsuleHit");
static_assert(sizeof(NPC_CapsuleHit) == 0x0000B0, "Wrong size on NPC_CapsuleHit");
static_assert(offsetof(NPC_CapsuleHit, OverlappedComp) == 0x000000, "Member 'NPC_CapsuleHit::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleHit, Other) == 0x000008, "Member 'NPC_CapsuleHit::Other' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleHit, OtherComp) == 0x000010, "Member 'NPC_CapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleHit, NormalImpulse) == 0x000018, "Member 'NPC_CapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleHit, SweepResult) == 0x000024, "Member 'NPC_CapsuleHit::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.NPC.CapsuleTouched
// 0x00A8 (0x00A8 - 0x0000)
struct NPC_CapsuleTouched final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_CapsuleTouched) == 0x000008, "Wrong alignment on NPC_CapsuleTouched");
static_assert(sizeof(NPC_CapsuleTouched) == 0x0000A8, "Wrong size on NPC_CapsuleTouched");
static_assert(offsetof(NPC_CapsuleTouched, OverlappedComp) == 0x000000, "Member 'NPC_CapsuleTouched::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleTouched, Other) == 0x000008, "Member 'NPC_CapsuleTouched::Other' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleTouched, OtherComp) == 0x000010, "Member 'NPC_CapsuleTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleTouched, OtherBodyIndex) == 0x000018, "Member 'NPC_CapsuleTouched::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleTouched, bFromSweep) == 0x00001C, "Member 'NPC_CapsuleTouched::bFromSweep' has a wrong offset!");
static_assert(offsetof(NPC_CapsuleTouched, SweepResult) == 0x000020, "Member 'NPC_CapsuleTouched::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.NPC.Detonate
// 0x0001 (0x0001 - 0x0000)
struct NPC_Detonate final
{
public:
	bool                                          bGivePlayerCredit;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_Detonate) == 0x000001, "Wrong alignment on NPC_Detonate");
static_assert(sizeof(NPC_Detonate) == 0x000001, "Wrong size on NPC_Detonate");
static_assert(offsetof(NPC_Detonate, bGivePlayerCredit) == 0x000000, "Member 'NPC_Detonate::bGivePlayerCredit' has a wrong offset!");

// Function ThankYouVeryCool.NPC.ForceSetFocus
// 0x0008 (0x0008 - 0x0000)
struct NPC_ForceSetFocus final
{
public:
	class AActor*                                 ActorToFocus;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ForceSetFocus) == 0x000008, "Wrong alignment on NPC_ForceSetFocus");
static_assert(sizeof(NPC_ForceSetFocus) == 0x000008, "Wrong size on NPC_ForceSetFocus");
static_assert(offsetof(NPC_ForceSetFocus, ActorToFocus) == 0x000000, "Member 'NPC_ForceSetFocus::ActorToFocus' has a wrong offset!");

// Function ThankYouVeryCool.NPC.GetRecoil
// 0x0004 (0x0004 - 0x0000)
struct NPC_GetRecoil final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_GetRecoil) == 0x000004, "Wrong alignment on NPC_GetRecoil");
static_assert(sizeof(NPC_GetRecoil) == 0x000004, "Wrong size on NPC_GetRecoil");
static_assert(offsetof(NPC_GetRecoil, ReturnValue) == 0x000000, "Member 'NPC_GetRecoil::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.GetSquad
// 0x0008 (0x0008 - 0x0000)
struct NPC_GetSquad final
{
public:
	class ASquad*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_GetSquad) == 0x000008, "Wrong alignment on NPC_GetSquad");
static_assert(sizeof(NPC_GetSquad) == 0x000008, "Wrong size on NPC_GetSquad");
static_assert(offsetof(NPC_GetSquad, ReturnValue) == 0x000000, "Member 'NPC_GetSquad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.Gib
// 0x0014 (0x0014 - 0x0000)
struct NPC_Gib final
{
public:
	bool                                          bGivePlayerCredit;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldDir;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_Gib) == 0x000004, "Wrong alignment on NPC_Gib");
static_assert(sizeof(NPC_Gib) == 0x000014, "Wrong size on NPC_Gib");
static_assert(offsetof(NPC_Gib, bGivePlayerCredit) == 0x000000, "Member 'NPC_Gib::bGivePlayerCredit' has a wrong offset!");
static_assert(offsetof(NPC_Gib, bForce) == 0x000001, "Member 'NPC_Gib::bForce' has a wrong offset!");
static_assert(offsetof(NPC_Gib, WorldDir) == 0x000004, "Member 'NPC_Gib::WorldDir' has a wrong offset!");
static_assert(offsetof(NPC_Gib, ReturnValue) == 0x000010, "Member 'NPC_Gib::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.GrabWeaponOnGround
// 0x0008 (0x0008 - 0x0000)
struct NPC_GrabWeaponOnGround final
{
public:
	class AWeaponBase*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_GrabWeaponOnGround) == 0x000008, "Wrong alignment on NPC_GrabWeaponOnGround");
static_assert(sizeof(NPC_GrabWeaponOnGround) == 0x000008, "Wrong size on NPC_GrabWeaponOnGround");
static_assert(offsetof(NPC_GrabWeaponOnGround, Weapon) == 0x000000, "Member 'NPC_GrabWeaponOnGround::Weapon' has a wrong offset!");

// Function ThankYouVeryCool.NPC.HasSidearm
// 0x0001 (0x0001 - 0x0000)
struct NPC_HasSidearm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_HasSidearm) == 0x000001, "Wrong alignment on NPC_HasSidearm");
static_assert(sizeof(NPC_HasSidearm) == 0x000001, "Wrong size on NPC_HasSidearm");
static_assert(offsetof(NPC_HasSidearm, ReturnValue) == 0x000000, "Member 'NPC_HasSidearm::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.HitReactionOver
// 0x0018 (0x0018 - 0x0000)
struct NPC_HitReactionOver final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EffetedBoneName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_HitReactionOver) == 0x000008, "Wrong alignment on NPC_HitReactionOver");
static_assert(sizeof(NPC_HitReactionOver) == 0x000018, "Wrong size on NPC_HitReactionOver");
static_assert(offsetof(NPC_HitReactionOver, AnimMontage) == 0x000000, "Member 'NPC_HitReactionOver::AnimMontage' has a wrong offset!");
static_assert(offsetof(NPC_HitReactionOver, bInterrupted) == 0x000008, "Member 'NPC_HitReactionOver::bInterrupted' has a wrong offset!");
static_assert(offsetof(NPC_HitReactionOver, EffetedBoneName) == 0x00000C, "Member 'NPC_HitReactionOver::EffetedBoneName' has a wrong offset!");

// Function ThankYouVeryCool.NPC.IsArmed
// 0x0001 (0x0001 - 0x0000)
struct NPC_IsArmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_IsArmed) == 0x000001, "Wrong alignment on NPC_IsArmed");
static_assert(sizeof(NPC_IsArmed) == 0x000001, "Wrong size on NPC_IsArmed");
static_assert(offsetof(NPC_IsArmed, ReturnValue) == 0x000000, "Member 'NPC_IsArmed::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.NotifyBPTargetSighted
// 0x0002 (0x0002 - 0x0000)
struct NPC_NotifyBPTargetSighted final
{
public:
	bool                                          bSighted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_NotifyBPTargetSighted) == 0x000001, "Wrong alignment on NPC_NotifyBPTargetSighted");
static_assert(sizeof(NPC_NotifyBPTargetSighted) == 0x000002, "Wrong size on NPC_NotifyBPTargetSighted");
static_assert(offsetof(NPC_NotifyBPTargetSighted, bSighted) == 0x000000, "Member 'NPC_NotifyBPTargetSighted::bSighted' has a wrong offset!");
static_assert(offsetof(NPC_NotifyBPTargetSighted, ReturnValue) == 0x000001, "Member 'NPC_NotifyBPTargetSighted::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.OnBackpackOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct NPC_OnBackpackOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_OnBackpackOverlapBegin) == 0x000008, "Wrong alignment on NPC_OnBackpackOverlapBegin");
static_assert(sizeof(NPC_OnBackpackOverlapBegin) == 0x0000A8, "Wrong size on NPC_OnBackpackOverlapBegin");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, OverlapComponent) == 0x000000, "Member 'NPC_OnBackpackOverlapBegin::OverlapComponent' has a wrong offset!");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, OtherActor) == 0x000008, "Member 'NPC_OnBackpackOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, OtherComp) == 0x000010, "Member 'NPC_OnBackpackOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'NPC_OnBackpackOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, bFromSweep) == 0x00001C, "Member 'NPC_OnBackpackOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(NPC_OnBackpackOverlapBegin, SweepResult) == 0x000020, "Member 'NPC_OnBackpackOverlapBegin::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.NPC.OnJetpackCrash
// 0x00B0 (0x00B0 - 0x0000)
struct NPC_OnJetpackCrash final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepResult;                                       // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_OnJetpackCrash) == 0x000008, "Wrong alignment on NPC_OnJetpackCrash");
static_assert(sizeof(NPC_OnJetpackCrash) == 0x0000B0, "Wrong size on NPC_OnJetpackCrash");
static_assert(offsetof(NPC_OnJetpackCrash, OverlappedComp) == 0x000000, "Member 'NPC_OnJetpackCrash::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NPC_OnJetpackCrash, Other) == 0x000008, "Member 'NPC_OnJetpackCrash::Other' has a wrong offset!");
static_assert(offsetof(NPC_OnJetpackCrash, OtherComp) == 0x000010, "Member 'NPC_OnJetpackCrash::OtherComp' has a wrong offset!");
static_assert(offsetof(NPC_OnJetpackCrash, NormalImpulse) == 0x000018, "Member 'NPC_OnJetpackCrash::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NPC_OnJetpackCrash, SweepResult) == 0x000024, "Member 'NPC_OnJetpackCrash::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.NPC.ReactToBulletHit
// 0x0094 (0x0094 - 0x0000)
struct NPC_ReactToBulletHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Joules;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPdmg;                                             // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImpactType                                   ImpactType;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitArmor;                                         // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldContinue;                                   // 0x0092(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0093(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ReactToBulletHit) == 0x000004, "Wrong alignment on NPC_ReactToBulletHit");
static_assert(sizeof(NPC_ReactToBulletHit) == 0x000094, "Wrong size on NPC_ReactToBulletHit");
static_assert(offsetof(NPC_ReactToBulletHit, HitResult) == 0x000000, "Member 'NPC_ReactToBulletHit::HitResult' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, Joules) == 0x000088, "Member 'NPC_ReactToBulletHit::Joules' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, HPdmg) == 0x00008C, "Member 'NPC_ReactToBulletHit::HPdmg' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, ImpactType) == 0x000090, "Member 'NPC_ReactToBulletHit::ImpactType' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, bHitArmor) == 0x000091, "Member 'NPC_ReactToBulletHit::bHitArmor' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, bShouldContinue) == 0x000092, "Member 'NPC_ReactToBulletHit::bShouldContinue' has a wrong offset!");
static_assert(offsetof(NPC_ReactToBulletHit, ReturnValue) == 0x000093, "Member 'NPC_ReactToBulletHit::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.Say
// 0x000C (0x000C - 0x0000)
struct NPC_Say final
{
public:
	class FName                                   Line;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTimer;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_Say) == 0x000004, "Wrong alignment on NPC_Say");
static_assert(sizeof(NPC_Say) == 0x00000C, "Wrong size on NPC_Say");
static_assert(offsetof(NPC_Say, Line) == 0x000000, "Member 'NPC_Say::Line' has a wrong offset!");
static_assert(offsetof(NPC_Say, bOverrideTimer) == 0x000008, "Member 'NPC_Say::bOverrideTimer' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SayWithCallback
// 0x0028 (0x0028 - 0x0000)
struct NPC_SayWithCallback final
{
public:
	TArray<class FName>                           Line;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasInterrupted)>         Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideTimer;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_SayWithCallback) == 0x000008, "Wrong alignment on NPC_SayWithCallback");
static_assert(sizeof(NPC_SayWithCallback) == 0x000028, "Wrong size on NPC_SayWithCallback");
static_assert(offsetof(NPC_SayWithCallback, Line) == 0x000000, "Member 'NPC_SayWithCallback::Line' has a wrong offset!");
static_assert(offsetof(NPC_SayWithCallback, Callback) == 0x000010, "Member 'NPC_SayWithCallback::Callback' has a wrong offset!");
static_assert(offsetof(NPC_SayWithCallback, bOverrideTimer) == 0x000020, "Member 'NPC_SayWithCallback::bOverrideTimer' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SayWithResponse
// 0x0030 (0x0030 - 0x0000)
struct NPC_SayWithResponse final
{
public:
	TArray<class FName>                           MyLine;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class ANPC*                                   Responder;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResponderLine;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideTimer;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_SayWithResponse) == 0x000008, "Wrong alignment on NPC_SayWithResponse");
static_assert(sizeof(NPC_SayWithResponse) == 0x000030, "Wrong size on NPC_SayWithResponse");
static_assert(offsetof(NPC_SayWithResponse, MyLine) == 0x000000, "Member 'NPC_SayWithResponse::MyLine' has a wrong offset!");
static_assert(offsetof(NPC_SayWithResponse, Responder) == 0x000010, "Member 'NPC_SayWithResponse::Responder' has a wrong offset!");
static_assert(offsetof(NPC_SayWithResponse, ResponderLine) == 0x000018, "Member 'NPC_SayWithResponse::ResponderLine' has a wrong offset!");
static_assert(offsetof(NPC_SayWithResponse, bOverrideTimer) == 0x000028, "Member 'NPC_SayWithResponse::bOverrideTimer' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SetBackpackLights
// 0x0001 (0x0001 - 0x0000)
struct NPC_SetBackpackLights final
{
public:
	bool                                          bViz;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_SetBackpackLights) == 0x000001, "Wrong alignment on NPC_SetBackpackLights");
static_assert(sizeof(NPC_SetBackpackLights) == 0x000001, "Wrong size on NPC_SetBackpackLights");
static_assert(offsetof(NPC_SetBackpackLights, bViz) == 0x000000, "Member 'NPC_SetBackpackLights::bViz' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SetCloakActive
// 0x0002 (0x0002 - 0x0000)
struct NPC_SetCloakActive final
{
public:
	bool                                          bShouldBeActive;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_SetCloakActive) == 0x000001, "Wrong alignment on NPC_SetCloakActive");
static_assert(sizeof(NPC_SetCloakActive) == 0x000002, "Wrong size on NPC_SetCloakActive");
static_assert(offsetof(NPC_SetCloakActive, bShouldBeActive) == 0x000000, "Member 'NPC_SetCloakActive::bShouldBeActive' has a wrong offset!");
static_assert(offsetof(NPC_SetCloakActive, bShouldAnimate) == 0x000001, "Member 'NPC_SetCloakActive::bShouldAnimate' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SetLean
// 0x0001 (0x0001 - 0x0000)
struct NPC_SetLean final
{
public:
	ELeanState                                    NewLean;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_SetLean) == 0x000001, "Wrong alignment on NPC_SetLean");
static_assert(sizeof(NPC_SetLean) == 0x000001, "Wrong size on NPC_SetLean");
static_assert(offsetof(NPC_SetLean, NewLean) == 0x000000, "Member 'NPC_SetLean::NewLean' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SetWeaponPosition
// 0x0001 (0x0001 - 0x0000)
struct NPC_SetWeaponPosition final
{
public:
	EWeaponPosition                               NewPosition;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_SetWeaponPosition) == 0x000001, "Wrong alignment on NPC_SetWeaponPosition");
static_assert(sizeof(NPC_SetWeaponPosition) == 0x000001, "Wrong size on NPC_SetWeaponPosition");
static_assert(offsetof(NPC_SetWeaponPosition, NewPosition) == 0x000000, "Member 'NPC_SetWeaponPosition::NewPosition' has a wrong offset!");

// Function ThankYouVeryCool.NPC.ShootAtFocalPoint
// 0x0008 (0x0008 - 0x0000)
struct NPC_ShootAtFocalPoint final
{
public:
	int32                                         OutPoints;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeKillingShot;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPC_ShootAtFocalPoint) == 0x000004, "Wrong alignment on NPC_ShootAtFocalPoint");
static_assert(sizeof(NPC_ShootAtFocalPoint) == 0x000008, "Wrong size on NPC_ShootAtFocalPoint");
static_assert(offsetof(NPC_ShootAtFocalPoint, OutPoints) == 0x000000, "Member 'NPC_ShootAtFocalPoint::OutPoints' has a wrong offset!");
static_assert(offsetof(NPC_ShootAtFocalPoint, bCanBeKillingShot) == 0x000004, "Member 'NPC_ShootAtFocalPoint::bCanBeKillingShot' has a wrong offset!");
static_assert(offsetof(NPC_ShootAtFocalPoint, ReturnValue) == 0x000005, "Member 'NPC_ShootAtFocalPoint::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPC.SpawnGibFX
// 0x000C (0x000C - 0x0000)
struct NPC_SpawnGibFX final
{
public:
	struct FVector                                WorldDir;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_SpawnGibFX) == 0x000004, "Wrong alignment on NPC_SpawnGibFX");
static_assert(sizeof(NPC_SpawnGibFX) == 0x00000C, "Wrong size on NPC_SpawnGibFX");
static_assert(offsetof(NPC_SpawnGibFX, WorldDir) == 0x000000, "Member 'NPC_SpawnGibFX::WorldDir' has a wrong offset!");

// Function ThankYouVeryCool.NPC.UpdateCoverState
// 0x0001 (0x0001 - 0x0000)
struct NPC_UpdateCoverState final
{
public:
	ECoverState                                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_UpdateCoverState) == 0x000001, "Wrong alignment on NPC_UpdateCoverState");
static_assert(sizeof(NPC_UpdateCoverState) == 0x000001, "Wrong size on NPC_UpdateCoverState");
static_assert(offsetof(NPC_UpdateCoverState, NewState) == 0x000000, "Member 'NPC_UpdateCoverState::NewState' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.CanSeeActor
// 0x0010 (0x0010 - 0x0000)
struct NPCController_CanSeeActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCController_CanSeeActor) == 0x000008, "Wrong alignment on NPCController_CanSeeActor");
static_assert(sizeof(NPCController_CanSeeActor) == 0x000010, "Wrong size on NPCController_CanSeeActor");
static_assert(offsetof(NPCController_CanSeeActor, Actor) == 0x000000, "Member 'NPCController_CanSeeActor::Actor' has a wrong offset!");
static_assert(offsetof(NPCController_CanSeeActor, ReturnValue) == 0x000008, "Member 'NPCController_CanSeeActor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.GetNPC
// 0x0008 (0x0008 - 0x0000)
struct NPCController_GetNPC final
{
public:
	class ANPC*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCController_GetNPC) == 0x000008, "Wrong alignment on NPCController_GetNPC");
static_assert(sizeof(NPCController_GetNPC) == 0x000008, "Wrong size on NPCController_GetNPC");
static_assert(offsetof(NPCController_GetNPC, ReturnValue) == 0x000000, "Member 'NPCController_GetNPC::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.GetSquad
// 0x0008 (0x0008 - 0x0000)
struct NPCController_GetSquad final
{
public:
	class ASquad*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCController_GetSquad) == 0x000008, "Wrong alignment on NPCController_GetSquad");
static_assert(sizeof(NPCController_GetSquad) == 0x000008, "Wrong size on NPCController_GetSquad");
static_assert(offsetof(NPCController_GetSquad, ReturnValue) == 0x000000, "Member 'NPCController_GetSquad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.InjectTree
// 0x0010 (0x0010 - 0x0000)
struct NPCController_InjectTree final
{
public:
	class UBehaviorTree*                          Order;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OrderTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCController_InjectTree) == 0x000008, "Wrong alignment on NPCController_InjectTree");
static_assert(sizeof(NPCController_InjectTree) == 0x000010, "Wrong size on NPCController_InjectTree");
static_assert(offsetof(NPCController_InjectTree, Order) == 0x000000, "Member 'NPCController_InjectTree::Order' has a wrong offset!");
static_assert(offsetof(NPCController_InjectTree, OrderTag) == 0x000008, "Member 'NPCController_InjectTree::OrderTag' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.IsPassive
// 0x0001 (0x0001 - 0x0000)
struct NPCController_IsPassive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCController_IsPassive) == 0x000001, "Wrong alignment on NPCController_IsPassive");
static_assert(sizeof(NPCController_IsPassive) == 0x000001, "Wrong size on NPCController_IsPassive");
static_assert(offsetof(NPCController_IsPassive, ReturnValue) == 0x000000, "Member 'NPCController_IsPassive::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.UpdatedPerception
// 0x0010 (0x0010 - 0x0000)
struct NPCController_UpdatedPerception final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCController_UpdatedPerception) == 0x000008, "Wrong alignment on NPCController_UpdatedPerception");
static_assert(sizeof(NPCController_UpdatedPerception) == 0x000010, "Wrong size on NPCController_UpdatedPerception");
static_assert(offsetof(NPCController_UpdatedPerception, Actors) == 0x000000, "Member 'NPCController_UpdatedPerception::Actors' has a wrong offset!");

// Function ThankYouVeryCool.NPCController.UpdateTargetPerception
// 0x0048 (0x0048 - 0x0000)
struct NPCController_UpdateTargetPerception final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCController_UpdateTargetPerception) == 0x000008, "Wrong alignment on NPCController_UpdateTargetPerception");
static_assert(sizeof(NPCController_UpdateTargetPerception) == 0x000048, "Wrong size on NPCController_UpdateTargetPerception");
static_assert(offsetof(NPCController_UpdateTargetPerception, Actor) == 0x000000, "Member 'NPCController_UpdateTargetPerception::Actor' has a wrong offset!");
static_assert(offsetof(NPCController_UpdateTargetPerception, Stimulus) == 0x000008, "Member 'NPCController_UpdateTargetPerception::Stimulus' has a wrong offset!");

// Function ThankYouVeryCool.OverclockWidget.SetOverclockPercent
// 0x0004 (0x0004 - 0x0000)
struct OverclockWidget_SetOverclockPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverclockWidget_SetOverclockPercent) == 0x000004, "Wrong alignment on OverclockWidget_SetOverclockPercent");
static_assert(sizeof(OverclockWidget_SetOverclockPercent) == 0x000004, "Wrong size on OverclockWidget_SetOverclockPercent");
static_assert(offsetof(OverclockWidget_SetOverclockPercent, InPercent) == 0x000000, "Member 'OverclockWidget_SetOverclockPercent::InPercent' has a wrong offset!");

// Function ThankYouVeryCool.PickupWidget.OverrideText
// 0x0010 (0x0010 - 0x0000)
struct PickupWidget_OverrideText final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupWidget_OverrideText) == 0x000008, "Wrong alignment on PickupWidget_OverrideText");
static_assert(sizeof(PickupWidget_OverrideText) == 0x000010, "Wrong size on PickupWidget_OverrideText");
static_assert(offsetof(PickupWidget_OverrideText, inString) == 0x000000, "Member 'PickupWidget_OverrideText::inString' has a wrong offset!");

// Function ThankYouVeryCool.PickupWidget.SetMode
// 0x0002 (0x0002 - 0x0000)
struct PickupWidget_SetMode final
{
public:
	bool                                          bController;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowThrow;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupWidget_SetMode) == 0x000001, "Wrong alignment on PickupWidget_SetMode");
static_assert(sizeof(PickupWidget_SetMode) == 0x000002, "Wrong size on PickupWidget_SetMode");
static_assert(offsetof(PickupWidget_SetMode, bController) == 0x000000, "Member 'PickupWidget_SetMode::bController' has a wrong offset!");
static_assert(offsetof(PickupWidget_SetMode, bShowThrow) == 0x000001, "Member 'PickupWidget_SetMode::bShowThrow' has a wrong offset!");

// Function ThankYouVeryCool.PickupWidget.ShowPrompt
// 0x0001 (0x0001 - 0x0000)
struct PickupWidget_ShowPrompt final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupWidget_ShowPrompt) == 0x000001, "Wrong alignment on PickupWidget_ShowPrompt");
static_assert(sizeof(PickupWidget_ShowPrompt) == 0x000001, "Wrong size on PickupWidget_ShowPrompt");
static_assert(offsetof(PickupWidget_ShowPrompt, bShouldShow) == 0x000000, "Member 'PickupWidget_ShowPrompt::bShouldShow' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetActionInfo
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_GetActionInfo final
{
public:
	EPlayerAction                                 ForAction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForController;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutName;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsAxis;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_GetActionInfo) == 0x000004, "Wrong alignment on PlayerCharacter_GetActionInfo");
static_assert(sizeof(PlayerCharacter_GetActionInfo) == 0x000010, "Wrong size on PlayerCharacter_GetActionInfo");
static_assert(offsetof(PlayerCharacter_GetActionInfo, ForAction) == 0x000000, "Member 'PlayerCharacter_GetActionInfo::ForAction' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_GetActionInfo, bForController) == 0x000001, "Member 'PlayerCharacter_GetActionInfo::bForController' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_GetActionInfo, OutName) == 0x000004, "Member 'PlayerCharacter_GetActionInfo::OutName' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_GetActionInfo, OutIsAxis) == 0x00000C, "Member 'PlayerCharacter_GetActionInfo::OutIsAxis' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.AllowInstantAcceleration
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_AllowInstantAcceleration final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_AllowInstantAcceleration) == 0x000004, "Wrong alignment on PlayerCharacter_AllowInstantAcceleration");
static_assert(sizeof(PlayerCharacter_AllowInstantAcceleration) == 0x000004, "Wrong size on PlayerCharacter_AllowInstantAcceleration");
static_assert(offsetof(PlayerCharacter_AllowInstantAcceleration, Time) == 0x000000, "Member 'PlayerCharacter_AllowInstantAcceleration::Time' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.CapsuleHit
// 0x00B0 (0x00B0 - 0x0000)
struct PlayerCharacter_CapsuleHit final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepResult;                                       // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_CapsuleHit) == 0x000008, "Wrong alignment on PlayerCharacter_CapsuleHit");
static_assert(sizeof(PlayerCharacter_CapsuleHit) == 0x0000B0, "Wrong size on PlayerCharacter_CapsuleHit");
static_assert(offsetof(PlayerCharacter_CapsuleHit, OverlappedComp) == 0x000000, "Member 'PlayerCharacter_CapsuleHit::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleHit, Other) == 0x000008, "Member 'PlayerCharacter_CapsuleHit::Other' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleHit, OtherComp) == 0x000010, "Member 'PlayerCharacter_CapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleHit, NormalImpulse) == 0x000018, "Member 'PlayerCharacter_CapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleHit, SweepResult) == 0x000024, "Member 'PlayerCharacter_CapsuleHit::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.CapsuleTouched
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerCharacter_CapsuleTouched final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_CapsuleTouched) == 0x000008, "Wrong alignment on PlayerCharacter_CapsuleTouched");
static_assert(sizeof(PlayerCharacter_CapsuleTouched) == 0x0000A8, "Wrong size on PlayerCharacter_CapsuleTouched");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, OverlappedComp) == 0x000000, "Member 'PlayerCharacter_CapsuleTouched::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, Other) == 0x000008, "Member 'PlayerCharacter_CapsuleTouched::Other' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, OtherComp) == 0x000010, "Member 'PlayerCharacter_CapsuleTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, OtherBodyIndex) == 0x000018, "Member 'PlayerCharacter_CapsuleTouched::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, bFromSweep) == 0x00001C, "Member 'PlayerCharacter_CapsuleTouched::bFromSweep' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_CapsuleTouched, SweepResult) == 0x000020, "Member 'PlayerCharacter_CapsuleTouched::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.DisableAirControl
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_DisableAirControl final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_DisableAirControl) == 0x000004, "Wrong alignment on PlayerCharacter_DisableAirControl");
static_assert(sizeof(PlayerCharacter_DisableAirControl) == 0x000004, "Wrong size on PlayerCharacter_DisableAirControl");
static_assert(offsetof(PlayerCharacter_DisableAirControl, Time) == 0x000000, "Member 'PlayerCharacter_DisableAirControl::Time' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.DoLeftShoulderSlide
// 0x0002 (0x0002 - 0x0000)
struct PlayerCharacter_DoLeftShoulderSlide final
{
public:
	bool                                          bInSlide;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_DoLeftShoulderSlide) == 0x000001, "Wrong alignment on PlayerCharacter_DoLeftShoulderSlide");
static_assert(sizeof(PlayerCharacter_DoLeftShoulderSlide) == 0x000002, "Wrong size on PlayerCharacter_DoLeftShoulderSlide");
static_assert(offsetof(PlayerCharacter_DoLeftShoulderSlide, bInSlide) == 0x000000, "Member 'PlayerCharacter_DoLeftShoulderSlide::bInSlide' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_DoLeftShoulderSlide, bInstant) == 0x000001, "Member 'PlayerCharacter_DoLeftShoulderSlide::bInstant' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.EnsureStandValid
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_EnsureStandValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_EnsureStandValid) == 0x000001, "Wrong alignment on PlayerCharacter_EnsureStandValid");
static_assert(sizeof(PlayerCharacter_EnsureStandValid) == 0x000001, "Wrong size on PlayerCharacter_EnsureStandValid");
static_assert(offsetof(PlayerCharacter_EnsureStandValid, ReturnValue) == 0x000000, "Member 'PlayerCharacter_EnsureStandValid::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.FinishedKickAnim
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_FinishedKickAnim final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_FinishedKickAnim) == 0x000008, "Wrong alignment on PlayerCharacter_FinishedKickAnim");
static_assert(sizeof(PlayerCharacter_FinishedKickAnim) == 0x000010, "Wrong size on PlayerCharacter_FinishedKickAnim");
static_assert(offsetof(PlayerCharacter_FinishedKickAnim, AnimMontage) == 0x000000, "Member 'PlayerCharacter_FinishedKickAnim::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_FinishedKickAnim, bInterrupted) == 0x000008, "Member 'PlayerCharacter_FinishedKickAnim::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.FinishedPunch
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_FinishedPunch final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_FinishedPunch) == 0x000008, "Wrong alignment on PlayerCharacter_FinishedPunch");
static_assert(sizeof(PlayerCharacter_FinishedPunch) == 0x000010, "Wrong size on PlayerCharacter_FinishedPunch");
static_assert(offsetof(PlayerCharacter_FinishedPunch, AnimMontage) == 0x000000, "Member 'PlayerCharacter_FinishedPunch::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_FinishedPunch, bInterrupted) == 0x000008, "Member 'PlayerCharacter_FinishedPunch::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.FinishKickSlide
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_FinishKickSlide final
{
public:
	bool                                          bToCrouch;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_FinishKickSlide) == 0x000001, "Wrong alignment on PlayerCharacter_FinishKickSlide");
static_assert(sizeof(PlayerCharacter_FinishKickSlide) == 0x000001, "Wrong size on PlayerCharacter_FinishKickSlide");
static_assert(offsetof(PlayerCharacter_FinishKickSlide, bToCrouch) == 0x000000, "Member 'PlayerCharacter_FinishKickSlide::bToCrouch' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ForceEquip
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_ForceEquip final
{
public:
	class AWeaponBase*                            ToEquip;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ForceEquip) == 0x000008, "Wrong alignment on PlayerCharacter_ForceEquip");
static_assert(sizeof(PlayerCharacter_ForceEquip) == 0x000008, "Wrong size on PlayerCharacter_ForceEquip");
static_assert(offsetof(PlayerCharacter_ForceEquip, ToEquip) == 0x000000, "Member 'PlayerCharacter_ForceEquip::ToEquip' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_GetEquippedWeapon final
{
public:
	class AWeaponBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetEquippedWeapon) == 0x000008, "Wrong alignment on PlayerCharacter_GetEquippedWeapon");
static_assert(sizeof(PlayerCharacter_GetEquippedWeapon) == 0x000008, "Wrong size on PlayerCharacter_GetEquippedWeapon");
static_assert(offsetof(PlayerCharacter_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetFirstPersonCamera
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_GetFirstPersonCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetFirstPersonCamera) == 0x000008, "Wrong alignment on PlayerCharacter_GetFirstPersonCamera");
static_assert(sizeof(PlayerCharacter_GetFirstPersonCamera) == 0x000008, "Wrong size on PlayerCharacter_GetFirstPersonCamera");
static_assert(offsetof(PlayerCharacter_GetFirstPersonCamera, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetIsDead) == 0x000001, "Wrong alignment on PlayerCharacter_GetIsDead");
static_assert(sizeof(PlayerCharacter_GetIsDead) == 0x000001, "Wrong size on PlayerCharacter_GetIsDead");
static_assert(offsetof(PlayerCharacter_GetIsDead, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetIsDead::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetIsInDamageCooldown
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_GetIsInDamageCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetIsInDamageCooldown) == 0x000001, "Wrong alignment on PlayerCharacter_GetIsInDamageCooldown");
static_assert(sizeof(PlayerCharacter_GetIsInDamageCooldown) == 0x000001, "Wrong size on PlayerCharacter_GetIsInDamageCooldown");
static_assert(offsetof(PlayerCharacter_GetIsInDamageCooldown, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetIsInDamageCooldown::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetIsReady
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_GetIsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetIsReady) == 0x000001, "Wrong alignment on PlayerCharacter_GetIsReady");
static_assert(sizeof(PlayerCharacter_GetIsReady) == 0x000001, "Wrong size on PlayerCharacter_GetIsReady");
static_assert(offsetof(PlayerCharacter_GetIsReady, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetIsReady::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.GetMovementMode
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_GetMovementMode final
{
public:
	EMovementMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetMovementMode) == 0x000001, "Wrong alignment on PlayerCharacter_GetMovementMode");
static_assert(sizeof(PlayerCharacter_GetMovementMode) == 0x000001, "Wrong size on PlayerCharacter_GetMovementMode");
static_assert(offsetof(PlayerCharacter_GetMovementMode, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetMovementMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.IsInStunt
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_IsInStunt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_IsInStunt) == 0x000001, "Wrong alignment on PlayerCharacter_IsInStunt");
static_assert(sizeof(PlayerCharacter_IsInStunt) == 0x000001, "Wrong size on PlayerCharacter_IsInStunt");
static_assert(offsetof(PlayerCharacter_IsInStunt, ReturnValue) == 0x000000, "Member 'PlayerCharacter_IsInStunt::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.LerpRightShoulderTo
// 0x000C (0x000C - 0x0000)
struct PlayerCharacter_LerpRightShoulderTo final
{
public:
	struct FVector                                ToLerpTo;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_LerpRightShoulderTo) == 0x000004, "Wrong alignment on PlayerCharacter_LerpRightShoulderTo");
static_assert(sizeof(PlayerCharacter_LerpRightShoulderTo) == 0x00000C, "Wrong size on PlayerCharacter_LerpRightShoulderTo");
static_assert(offsetof(PlayerCharacter_LerpRightShoulderTo, ToLerpTo) == 0x000000, "Member 'PlayerCharacter_LerpRightShoulderTo::ToLerpTo' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.LoadJacket
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_LoadJacket final
{
public:
	class FName                                   InJacket;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_LoadJacket) == 0x000004, "Wrong alignment on PlayerCharacter_LoadJacket");
static_assert(sizeof(PlayerCharacter_LoadJacket) == 0x000008, "Wrong size on PlayerCharacter_LoadJacket");
static_assert(offsetof(PlayerCharacter_LoadJacket, InJacket) == 0x000000, "Member 'PlayerCharacter_LoadJacket::InJacket' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.LookUp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_LookUp final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_LookUp) == 0x000004, "Wrong alignment on PlayerCharacter_LookUp");
static_assert(sizeof(PlayerCharacter_LookUp) == 0x000004, "Wrong size on PlayerCharacter_LookUp");
static_assert(offsetof(PlayerCharacter_LookUp, AxisValue) == 0x000000, "Member 'PlayerCharacter_LookUp::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.LookUpController
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_LookUpController final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_LookUpController) == 0x000004, "Wrong alignment on PlayerCharacter_LookUpController");
static_assert(sizeof(PlayerCharacter_LookUpController) == 0x000004, "Wrong size on PlayerCharacter_LookUpController");
static_assert(offsetof(PlayerCharacter_LookUpController, AxisValue) == 0x000000, "Member 'PlayerCharacter_LookUpController::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.LookUpImp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_LookUpImp final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_LookUpImp) == 0x000004, "Wrong alignment on PlayerCharacter_LookUpImp");
static_assert(sizeof(PlayerCharacter_LookUpImp) == 0x000004, "Wrong size on PlayerCharacter_LookUpImp");
static_assert(offsetof(PlayerCharacter_LookUpImp, AxisValue) == 0x000000, "Member 'PlayerCharacter_LookUpImp::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.MoveKickSlide
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_MoveKickSlide final
{
public:
	float                                         Velocity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_MoveKickSlide) == 0x000004, "Wrong alignment on PlayerCharacter_MoveKickSlide");
static_assert(sizeof(PlayerCharacter_MoveKickSlide) == 0x000004, "Wrong size on PlayerCharacter_MoveKickSlide");
static_assert(offsetof(PlayerCharacter_MoveKickSlide, Velocity) == 0x000000, "Member 'PlayerCharacter_MoveKickSlide::Velocity' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.NotifyFanStatus
// 0x0020 (0x0020 - 0x0000)
struct PlayerCharacter_NotifyFanStatus final
{
public:
	bool                                          bFanStatus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InFanLocation;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InFanVector;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FanLength;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_NotifyFanStatus) == 0x000004, "Wrong alignment on PlayerCharacter_NotifyFanStatus");
static_assert(sizeof(PlayerCharacter_NotifyFanStatus) == 0x000020, "Wrong size on PlayerCharacter_NotifyFanStatus");
static_assert(offsetof(PlayerCharacter_NotifyFanStatus, bFanStatus) == 0x000000, "Member 'PlayerCharacter_NotifyFanStatus::bFanStatus' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_NotifyFanStatus, InFanLocation) == 0x000004, "Member 'PlayerCharacter_NotifyFanStatus::InFanLocation' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_NotifyFanStatus, InFanVector) == 0x000010, "Member 'PlayerCharacter_NotifyFanStatus::InFanVector' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_NotifyFanStatus, FanLength) == 0x00001C, "Member 'PlayerCharacter_NotifyFanStatus::FanLength' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnDebugMontageComplete
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_OnDebugMontageComplete final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_OnDebugMontageComplete) == 0x000008, "Wrong alignment on PlayerCharacter_OnDebugMontageComplete");
static_assert(sizeof(PlayerCharacter_OnDebugMontageComplete) == 0x000010, "Wrong size on PlayerCharacter_OnDebugMontageComplete");
static_assert(offsetof(PlayerCharacter_OnDebugMontageComplete, AnimMontage) == 0x000000, "Member 'PlayerCharacter_OnDebugMontageComplete::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnDebugMontageComplete, bInterrupted) == 0x000008, "Member 'PlayerCharacter_OnDebugMontageComplete::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnGetUpFinished
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_OnGetUpFinished final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_OnGetUpFinished) == 0x000008, "Wrong alignment on PlayerCharacter_OnGetUpFinished");
static_assert(sizeof(PlayerCharacter_OnGetUpFinished) == 0x000010, "Wrong size on PlayerCharacter_OnGetUpFinished");
static_assert(offsetof(PlayerCharacter_OnGetUpFinished, AnimMontage) == 0x000000, "Member 'PlayerCharacter_OnGetUpFinished::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnGetUpFinished, bInterrupted) == 0x000008, "Member 'PlayerCharacter_OnGetUpFinished::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnKickHit
// 0x00B0 (0x00B0 - 0x0000)
struct PlayerCharacter_OnKickHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_OnKickHit) == 0x000008, "Wrong alignment on PlayerCharacter_OnKickHit");
static_assert(sizeof(PlayerCharacter_OnKickHit) == 0x0000B0, "Wrong size on PlayerCharacter_OnKickHit");
static_assert(offsetof(PlayerCharacter_OnKickHit, HitComp) == 0x000000, "Member 'PlayerCharacter_OnKickHit::HitComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHit, OtherActor) == 0x000008, "Member 'PlayerCharacter_OnKickHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHit, OtherComp) == 0x000010, "Member 'PlayerCharacter_OnKickHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHit, NormalImpulse) == 0x000018, "Member 'PlayerCharacter_OnKickHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHit, Hit) == 0x000024, "Member 'PlayerCharacter_OnKickHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnKickHitOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerCharacter_OnKickHitOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnKickHitOverlap) == 0x000008, "Wrong alignment on PlayerCharacter_OnKickHitOverlap");
static_assert(sizeof(PlayerCharacter_OnKickHitOverlap) == 0x0000A8, "Wrong size on PlayerCharacter_OnKickHitOverlap");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, OverlappedComp) == 0x000000, "Member 'PlayerCharacter_OnKickHitOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, OtherActor) == 0x000008, "Member 'PlayerCharacter_OnKickHitOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, OtherComp) == 0x000010, "Member 'PlayerCharacter_OnKickHitOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, OtherBodyIndex) == 0x000018, "Member 'PlayerCharacter_OnKickHitOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, bFromSweep) == 0x00001C, "Member 'PlayerCharacter_OnKickHitOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnKickHitOverlap, SweepResult) == 0x000020, "Member 'PlayerCharacter_OnKickHitOverlap::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnRollFinished
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_OnRollFinished final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_OnRollFinished) == 0x000008, "Wrong alignment on PlayerCharacter_OnRollFinished");
static_assert(sizeof(PlayerCharacter_OnRollFinished) == 0x000010, "Wrong size on PlayerCharacter_OnRollFinished");
static_assert(offsetof(PlayerCharacter_OnRollFinished, AnimMontage) == 0x000000, "Member 'PlayerCharacter_OnRollFinished::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnRollFinished, bInterrupted) == 0x000008, "Member 'PlayerCharacter_OnRollFinished::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.OnRollInterrupted
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_OnRollInterrupted final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_OnRollInterrupted) == 0x000008, "Wrong alignment on PlayerCharacter_OnRollInterrupted");
static_assert(sizeof(PlayerCharacter_OnRollInterrupted) == 0x000010, "Wrong size on PlayerCharacter_OnRollInterrupted");
static_assert(offsetof(PlayerCharacter_OnRollInterrupted, AnimMontage) == 0x000000, "Member 'PlayerCharacter_OnRollInterrupted::AnimMontage' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnRollInterrupted, bInterrupted) == 0x000008, "Member 'PlayerCharacter_OnRollInterrupted::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.PickupLookedAtWeaponImp
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_PickupLookedAtWeaponImp final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_PickupLookedAtWeaponImp) == 0x000001, "Wrong alignment on PlayerCharacter_PickupLookedAtWeaponImp");
static_assert(sizeof(PlayerCharacter_PickupLookedAtWeaponImp) == 0x000001, "Wrong size on PlayerCharacter_PickupLookedAtWeaponImp");
static_assert(offsetof(PlayerCharacter_PickupLookedAtWeaponImp, bForced) == 0x000000, "Member 'PlayerCharacter_PickupLookedAtWeaponImp::bForced' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessForwardInput
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessForwardInput final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessForwardInput) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessForwardInput");
static_assert(sizeof(PlayerCharacter_ProcessForwardInput) == 0x000004, "Wrong size on PlayerCharacter_ProcessForwardInput");
static_assert(offsetof(PlayerCharacter_ProcessForwardInput, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessForwardInput::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessForwardInputController
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessForwardInputController final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessForwardInputController) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessForwardInputController");
static_assert(sizeof(PlayerCharacter_ProcessForwardInputController) == 0x000004, "Wrong size on PlayerCharacter_ProcessForwardInputController");
static_assert(offsetof(PlayerCharacter_ProcessForwardInputController, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessForwardInputController::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessForwardInputImp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessForwardInputImp final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessForwardInputImp) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessForwardInputImp");
static_assert(sizeof(PlayerCharacter_ProcessForwardInputImp) == 0x000004, "Wrong size on PlayerCharacter_ProcessForwardInputImp");
static_assert(offsetof(PlayerCharacter_ProcessForwardInputImp, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessForwardInputImp::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessGyroAcceleration
// 0x000C (0x000C - 0x0000)
struct PlayerCharacter_ProcessGyroAcceleration final
{
public:
	struct FVector                                AxisValue;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessGyroAcceleration) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessGyroAcceleration");
static_assert(sizeof(PlayerCharacter_ProcessGyroAcceleration) == 0x00000C, "Wrong size on PlayerCharacter_ProcessGyroAcceleration");
static_assert(offsetof(PlayerCharacter_ProcessGyroAcceleration, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessGyroAcceleration::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessGyroRotationRate
// 0x000C (0x000C - 0x0000)
struct PlayerCharacter_ProcessGyroRotationRate final
{
public:
	struct FVector                                AxisValue;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessGyroRotationRate) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessGyroRotationRate");
static_assert(sizeof(PlayerCharacter_ProcessGyroRotationRate) == 0x00000C, "Wrong size on PlayerCharacter_ProcessGyroRotationRate");
static_assert(offsetof(PlayerCharacter_ProcessGyroRotationRate, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessGyroRotationRate::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessRightInput
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessRightInput final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessRightInput) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessRightInput");
static_assert(sizeof(PlayerCharacter_ProcessRightInput) == 0x000004, "Wrong size on PlayerCharacter_ProcessRightInput");
static_assert(offsetof(PlayerCharacter_ProcessRightInput, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessRightInput::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessRightInputController
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessRightInputController final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessRightInputController) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessRightInputController");
static_assert(sizeof(PlayerCharacter_ProcessRightInputController) == 0x000004, "Wrong size on PlayerCharacter_ProcessRightInputController");
static_assert(offsetof(PlayerCharacter_ProcessRightInputController, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessRightInputController::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ProcessRightInputImp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_ProcessRightInputImp final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ProcessRightInputImp) == 0x000004, "Wrong alignment on PlayerCharacter_ProcessRightInputImp");
static_assert(sizeof(PlayerCharacter_ProcessRightInputImp) == 0x000004, "Wrong size on PlayerCharacter_ProcessRightInputImp");
static_assert(offsetof(PlayerCharacter_ProcessRightInputImp, AxisValue) == 0x000000, "Member 'PlayerCharacter_ProcessRightInputImp::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ReactToSlowMoChange
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_ReactToSlowMoChange final
{
public:
	bool                                          bNewStatus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ReactToSlowMoChange) == 0x000001, "Wrong alignment on PlayerCharacter_ReactToSlowMoChange");
static_assert(sizeof(PlayerCharacter_ReactToSlowMoChange) == 0x000001, "Wrong size on PlayerCharacter_ReactToSlowMoChange");
static_assert(offsetof(PlayerCharacter_ReactToSlowMoChange, bNewStatus) == 0x000000, "Member 'PlayerCharacter_ReactToSlowMoChange::bNewStatus' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetControllerLookSensitivity
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_SetControllerLookSensitivity final
{
public:
	float                                         InSens;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetControllerLookSensitivity) == 0x000004, "Wrong alignment on PlayerCharacter_SetControllerLookSensitivity");
static_assert(sizeof(PlayerCharacter_SetControllerLookSensitivity) == 0x000004, "Wrong size on PlayerCharacter_SetControllerLookSensitivity");
static_assert(offsetof(PlayerCharacter_SetControllerLookSensitivity, InSens) == 0x000000, "Member 'PlayerCharacter_SetControllerLookSensitivity::InSens' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetGamepadAcceleration
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_SetGamepadAcceleration final
{
public:
	bool                                          bAccel;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetGamepadAcceleration) == 0x000001, "Wrong alignment on PlayerCharacter_SetGamepadAcceleration");
static_assert(sizeof(PlayerCharacter_SetGamepadAcceleration) == 0x000001, "Wrong size on PlayerCharacter_SetGamepadAcceleration");
static_assert(offsetof(PlayerCharacter_SetGamepadAcceleration, bAccel) == 0x000000, "Member 'PlayerCharacter_SetGamepadAcceleration::bAccel' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetLeftArmNoise
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_SetLeftArmNoise final
{
public:
	bool                                          bShouldNoise;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetLeftArmNoise) == 0x000001, "Wrong alignment on PlayerCharacter_SetLeftArmNoise");
static_assert(sizeof(PlayerCharacter_SetLeftArmNoise) == 0x000001, "Wrong size on PlayerCharacter_SetLeftArmNoise");
static_assert(offsetof(PlayerCharacter_SetLeftArmNoise, bShouldNoise) == 0x000000, "Member 'PlayerCharacter_SetLeftArmNoise::bShouldNoise' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetLookSpeedBP
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_SetLookSpeedBP final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetLookSpeedBP) == 0x000004, "Wrong alignment on PlayerCharacter_SetLookSpeedBP");
static_assert(sizeof(PlayerCharacter_SetLookSpeedBP) == 0x000004, "Wrong size on PlayerCharacter_SetLookSpeedBP");
static_assert(offsetof(PlayerCharacter_SetLookSpeedBP, InSpeed) == 0x000000, "Member 'PlayerCharacter_SetLookSpeedBP::InSpeed' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetTerminalVelocity
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_SetTerminalVelocity final
{
public:
	float                                         InV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetTerminalVelocity) == 0x000004, "Wrong alignment on PlayerCharacter_SetTerminalVelocity");
static_assert(sizeof(PlayerCharacter_SetTerminalVelocity) == 0x000004, "Wrong size on PlayerCharacter_SetTerminalVelocity");
static_assert(offsetof(PlayerCharacter_SetTerminalVelocity, InV) == 0x000000, "Member 'PlayerCharacter_SetTerminalVelocity::InV' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SetWallRunningViz
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_SetWallRunningViz final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetWallRunningViz) == 0x000001, "Wrong alignment on PlayerCharacter_SetWallRunningViz");
static_assert(sizeof(PlayerCharacter_SetWallRunningViz) == 0x000001, "Wrong size on PlayerCharacter_SetWallRunningViz");
static_assert(offsetof(PlayerCharacter_SetWallRunningViz, bIsActive) == 0x000000, "Member 'PlayerCharacter_SetWallRunningViz::bIsActive' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ShowDamage
// 0x000C (0x000C - 0x0000)
struct PlayerCharacter_ShowDamage final
{
public:
	struct FVector                                DamageOrigin;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ShowDamage) == 0x000004, "Wrong alignment on PlayerCharacter_ShowDamage");
static_assert(sizeof(PlayerCharacter_ShowDamage) == 0x00000C, "Wrong size on PlayerCharacter_ShowDamage");
static_assert(offsetof(PlayerCharacter_ShowDamage, DamageOrigin) == 0x000000, "Member 'PlayerCharacter_ShowDamage::DamageOrigin' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.ShowWeaponPickupUI
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_ShowWeaponPickupUI final
{
public:
	class AWeaponBase*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ShowWeaponPickupUI) == 0x000008, "Wrong alignment on PlayerCharacter_ShowWeaponPickupUI");
static_assert(sizeof(PlayerCharacter_ShowWeaponPickupUI) == 0x000008, "Wrong size on PlayerCharacter_ShowWeaponPickupUI");
static_assert(offsetof(PlayerCharacter_ShowWeaponPickupUI, Weapon) == 0x000000, "Member 'PlayerCharacter_ShowWeaponPickupUI::Weapon' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SmoothControllerAxis
// 0x0014 (0x0014 - 0x0000)
struct PlayerCharacter_SmoothControllerAxis final
{
public:
	float                                         Xin;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yin;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Xout;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yout;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForTurning;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_SmoothControllerAxis) == 0x000004, "Wrong alignment on PlayerCharacter_SmoothControllerAxis");
static_assert(sizeof(PlayerCharacter_SmoothControllerAxis) == 0x000014, "Wrong size on PlayerCharacter_SmoothControllerAxis");
static_assert(offsetof(PlayerCharacter_SmoothControllerAxis, Xin) == 0x000000, "Member 'PlayerCharacter_SmoothControllerAxis::Xin' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SmoothControllerAxis, Yin) == 0x000004, "Member 'PlayerCharacter_SmoothControllerAxis::Yin' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SmoothControllerAxis, Xout) == 0x000008, "Member 'PlayerCharacter_SmoothControllerAxis::Xout' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SmoothControllerAxis, Yout) == 0x00000C, "Member 'PlayerCharacter_SmoothControllerAxis::Yout' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SmoothControllerAxis, bForTurning) == 0x000010, "Member 'PlayerCharacter_SmoothControllerAxis::bForTurning' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.SpendLuck
// 0x0020 (0x0020 - 0x0000)
struct PlayerCharacter_SpendLuck final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDir;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitOrigin;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_SpendLuck) == 0x000004, "Wrong alignment on PlayerCharacter_SpendLuck");
static_assert(sizeof(PlayerCharacter_SpendLuck) == 0x000020, "Wrong size on PlayerCharacter_SpendLuck");
static_assert(offsetof(PlayerCharacter_SpendLuck, Amount) == 0x000000, "Member 'PlayerCharacter_SpendLuck::Amount' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SpendLuck, HitDir) == 0x000004, "Member 'PlayerCharacter_SpendLuck::HitDir' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SpendLuck, HitOrigin) == 0x000010, "Member 'PlayerCharacter_SpendLuck::HitOrigin' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_SpendLuck, ReturnValue) == 0x00001C, "Member 'PlayerCharacter_SpendLuck::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.TickCapsuleLerp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_TickCapsuleLerp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_TickCapsuleLerp) == 0x000004, "Wrong alignment on PlayerCharacter_TickCapsuleLerp");
static_assert(sizeof(PlayerCharacter_TickCapsuleLerp) == 0x000004, "Wrong size on PlayerCharacter_TickCapsuleLerp");
static_assert(offsetof(PlayerCharacter_TickCapsuleLerp, Value) == 0x000000, "Member 'PlayerCharacter_TickCapsuleLerp::Value' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.TickClimbForward
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_TickClimbForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_TickClimbForward) == 0x000004, "Wrong alignment on PlayerCharacter_TickClimbForward");
static_assert(sizeof(PlayerCharacter_TickClimbForward) == 0x000004, "Wrong size on PlayerCharacter_TickClimbForward");
static_assert(offsetof(PlayerCharacter_TickClimbForward, Value) == 0x000000, "Member 'PlayerCharacter_TickClimbForward::Value' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.TickClimbUp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_TickClimbUp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_TickClimbUp) == 0x000004, "Wrong alignment on PlayerCharacter_TickClimbUp");
static_assert(sizeof(PlayerCharacter_TickClimbUp) == 0x000004, "Wrong size on PlayerCharacter_TickClimbUp");
static_assert(offsetof(PlayerCharacter_TickClimbUp, Value) == 0x000000, "Member 'PlayerCharacter_TickClimbUp::Value' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.Turn
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_Turn final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_Turn) == 0x000004, "Wrong alignment on PlayerCharacter_Turn");
static_assert(sizeof(PlayerCharacter_Turn) == 0x000004, "Wrong size on PlayerCharacter_Turn");
static_assert(offsetof(PlayerCharacter_Turn, AxisValue) == 0x000000, "Member 'PlayerCharacter_Turn::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.TurnController
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_TurnController final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_TurnController) == 0x000004, "Wrong alignment on PlayerCharacter_TurnController");
static_assert(sizeof(PlayerCharacter_TurnController) == 0x000004, "Wrong size on PlayerCharacter_TurnController");
static_assert(offsetof(PlayerCharacter_TurnController, AxisValue) == 0x000000, "Member 'PlayerCharacter_TurnController::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.TurnImp
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_TurnImp final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_TurnImp) == 0x000004, "Wrong alignment on PlayerCharacter_TurnImp");
static_assert(sizeof(PlayerCharacter_TurnImp) == 0x000004, "Wrong size on PlayerCharacter_TurnImp");
static_assert(offsetof(PlayerCharacter_TurnImp, AxisValue) == 0x000000, "Member 'PlayerCharacter_TurnImp::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.UpdateTriggerPull
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_UpdateTriggerPull final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_UpdateTriggerPull) == 0x000004, "Wrong alignment on PlayerCharacter_UpdateTriggerPull");
static_assert(sizeof(PlayerCharacter_UpdateTriggerPull) == 0x000004, "Wrong size on PlayerCharacter_UpdateTriggerPull");
static_assert(offsetof(PlayerCharacter_UpdateTriggerPull, AxisValue) == 0x000000, "Member 'PlayerCharacter_UpdateTriggerPull::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PlayerCharacter.UpdateTriggerPullController
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_UpdateTriggerPullController final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_UpdateTriggerPullController) == 0x000004, "Wrong alignment on PlayerCharacter_UpdateTriggerPullController");
static_assert(sizeof(PlayerCharacter_UpdateTriggerPullController) == 0x000004, "Wrong size on PlayerCharacter_UpdateTriggerPullController");
static_assert(offsetof(PlayerCharacter_UpdateTriggerPullController, AxisValue) == 0x000000, "Member 'PlayerCharacter_UpdateTriggerPullController::AxisValue' has a wrong offset!");

// Function ThankYouVeryCool.PoolableGlass.OnGlassSleep
// 0x0010 (0x0010 - 0x0000)
struct PoolableGlass_OnGlassSleep final
{
public:
	class UPrimitiveComponent*                    SleepingComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolableGlass_OnGlassSleep) == 0x000008, "Wrong alignment on PoolableGlass_OnGlassSleep");
static_assert(sizeof(PoolableGlass_OnGlassSleep) == 0x000010, "Wrong size on PoolableGlass_OnGlassSleep");
static_assert(offsetof(PoolableGlass_OnGlassSleep, SleepingComponent) == 0x000000, "Member 'PoolableGlass_OnGlassSleep::SleepingComponent' has a wrong offset!");
static_assert(offsetof(PoolableGlass_OnGlassSleep, BoneName) == 0x000008, "Member 'PoolableGlass_OnGlassSleep::BoneName' has a wrong offset!");

// Function ThankYouVeryCool.PoolableGlass.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct PoolableGlass_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoolableGlass_OnHit) == 0x000008, "Wrong alignment on PoolableGlass_OnHit");
static_assert(sizeof(PoolableGlass_OnHit) == 0x0000B0, "Wrong size on PoolableGlass_OnHit");
static_assert(offsetof(PoolableGlass_OnHit, HitComponent) == 0x000000, "Member 'PoolableGlass_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(PoolableGlass_OnHit, OtherActor) == 0x000008, "Member 'PoolableGlass_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PoolableGlass_OnHit, OtherComp) == 0x000010, "Member 'PoolableGlass_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PoolableGlass_OnHit, NormalImpulse) == 0x000018, "Member 'PoolableGlass_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PoolableGlass_OnHit, Hit) == 0x000024, "Member 'PoolableGlass_OnHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.PoolManager.GetPooledActorBP
// 0x0010 (0x0010 - 0x0000)
struct PoolManager_GetPooledActorBP final
{
public:
	TSubclassOf<class APoolableActor>             InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolManager_GetPooledActorBP) == 0x000008, "Wrong alignment on PoolManager_GetPooledActorBP");
static_assert(sizeof(PoolManager_GetPooledActorBP) == 0x000010, "Wrong size on PoolManager_GetPooledActorBP");
static_assert(offsetof(PoolManager_GetPooledActorBP, InClass) == 0x000000, "Member 'PoolManager_GetPooledActorBP::InClass' has a wrong offset!");
static_assert(offsetof(PoolManager_GetPooledActorBP, ReturnValue) == 0x000008, "Member 'PoolManager_GetPooledActorBP::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.Bounced
// 0x0094 (0x0094 - 0x0000)
struct PropVoxelWorld_Bounced final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_Bounced) == 0x000004, "Wrong alignment on PropVoxelWorld_Bounced");
static_assert(sizeof(PropVoxelWorld_Bounced) == 0x000094, "Wrong size on PropVoxelWorld_Bounced");
static_assert(offsetof(PropVoxelWorld_Bounced, ImpactResult) == 0x000000, "Member 'PropVoxelWorld_Bounced::ImpactResult' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Bounced, ImpactVelocity) == 0x000088, "Member 'PropVoxelWorld_Bounced::ImpactVelocity' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.CanCannonEdit
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_CanCannonEdit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_CanCannonEdit) == 0x000001, "Wrong alignment on PropVoxelWorld_CanCannonEdit");
static_assert(sizeof(PropVoxelWorld_CanCannonEdit) == 0x000001, "Wrong size on PropVoxelWorld_CanCannonEdit");
static_assert(offsetof(PropVoxelWorld_CanCannonEdit, ReturnValue) == 0x000000, "Member 'PropVoxelWorld_CanCannonEdit::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.DoMove
// 0x0010 (0x0010 - 0x0000)
struct PropVoxelWorld_DoMove final
{
public:
	struct FVector                                RelativeMove;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_DoMove) == 0x000004, "Wrong alignment on PropVoxelWorld_DoMove");
static_assert(sizeof(PropVoxelWorld_DoMove) == 0x000010, "Wrong size on PropVoxelWorld_DoMove");
static_assert(offsetof(PropVoxelWorld_DoMove, RelativeMove) == 0x000000, "Member 'PropVoxelWorld_DoMove::RelativeMove' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_DoMove, TimeToMove) == 0x00000C, "Member 'PropVoxelWorld_DoMove::TimeToMove' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.DoShatter
// 0x000C (0x000C - 0x0000)
struct PropVoxelWorld_DoShatter final
{
public:
	struct FVector                                ShatterOrigin;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_DoShatter) == 0x000004, "Wrong alignment on PropVoxelWorld_DoShatter");
static_assert(sizeof(PropVoxelWorld_DoShatter) == 0x00000C, "Wrong size on PropVoxelWorld_DoShatter");
static_assert(offsetof(PropVoxelWorld_DoShatter, ShatterOrigin) == 0x000000, "Member 'PropVoxelWorld_DoShatter::ShatterOrigin' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.EditorModeChanged_Implementation
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_EditorModeChanged_Implementation final
{
public:
	EEditMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_EditorModeChanged_Implementation) == 0x000001, "Wrong alignment on PropVoxelWorld_EditorModeChanged_Implementation");
static_assert(sizeof(PropVoxelWorld_EditorModeChanged_Implementation) == 0x000001, "Wrong size on PropVoxelWorld_EditorModeChanged_Implementation");
static_assert(offsetof(PropVoxelWorld_EditorModeChanged_Implementation, NewMode) == 0x000000, "Member 'PropVoxelWorld_EditorModeChanged_Implementation::NewMode' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.HomeOnTarget
// 0x0008 (0x0008 - 0x0000)
struct PropVoxelWorld_HomeOnTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_HomeOnTarget) == 0x000008, "Wrong alignment on PropVoxelWorld_HomeOnTarget");
static_assert(sizeof(PropVoxelWorld_HomeOnTarget) == 0x000008, "Wrong size on PropVoxelWorld_HomeOnTarget");
static_assert(offsetof(PropVoxelWorld_HomeOnTarget, Target) == 0x000000, "Member 'PropVoxelWorld_HomeOnTarget::Target' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.ImpulseIfPossible
// 0x000C (0x000C - 0x0000)
struct PropVoxelWorld_ImpulseIfPossible final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_ImpulseIfPossible) == 0x000004, "Wrong alignment on PropVoxelWorld_ImpulseIfPossible");
static_assert(sizeof(PropVoxelWorld_ImpulseIfPossible) == 0x00000C, "Wrong size on PropVoxelWorld_ImpulseIfPossible");
static_assert(offsetof(PropVoxelWorld_ImpulseIfPossible, Impulse) == 0x000000, "Member 'PropVoxelWorld_ImpulseIfPossible::Impulse' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.InterpRelative
// 0x0020 (0x0020 - 0x0000)
struct PropVoxelWorld_InterpRelative final
{
public:
	struct FVector                                RelativeMove;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             WhenDone;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_InterpRelative) == 0x000004, "Wrong alignment on PropVoxelWorld_InterpRelative");
static_assert(sizeof(PropVoxelWorld_InterpRelative) == 0x000020, "Wrong size on PropVoxelWorld_InterpRelative");
static_assert(offsetof(PropVoxelWorld_InterpRelative, RelativeMove) == 0x000000, "Member 'PropVoxelWorld_InterpRelative::RelativeMove' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_InterpRelative, TimeToMove) == 0x00000C, "Member 'PropVoxelWorld_InterpRelative::TimeToMove' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_InterpRelative, WhenDone) == 0x000010, "Member 'PropVoxelWorld_InterpRelative::WhenDone' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.Olap
// 0x00A8 (0x00A8 - 0x0000)
struct PropVoxelWorld_Olap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_Olap) == 0x000008, "Wrong alignment on PropVoxelWorld_Olap");
static_assert(sizeof(PropVoxelWorld_Olap) == 0x0000A8, "Wrong size on PropVoxelWorld_Olap");
static_assert(offsetof(PropVoxelWorld_Olap, OverlappedComp) == 0x000000, "Member 'PropVoxelWorld_Olap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Olap, Other) == 0x000008, "Member 'PropVoxelWorld_Olap::Other' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Olap, OtherComp) == 0x000010, "Member 'PropVoxelWorld_Olap::OtherComp' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Olap, OtherBodyIndex) == 0x000018, "Member 'PropVoxelWorld_Olap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Olap, bFromSweep) == 0x00001C, "Member 'PropVoxelWorld_Olap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_Olap, SweepResult) == 0x000020, "Member 'PropVoxelWorld_Olap::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.OnThrownHit
// 0x00B0 (0x00B0 - 0x0000)
struct PropVoxelWorld_OnThrownHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PropVoxelWorld_OnThrownHit) == 0x000008, "Wrong alignment on PropVoxelWorld_OnThrownHit");
static_assert(sizeof(PropVoxelWorld_OnThrownHit) == 0x0000B0, "Wrong size on PropVoxelWorld_OnThrownHit");
static_assert(offsetof(PropVoxelWorld_OnThrownHit, HitComp) == 0x000000, "Member 'PropVoxelWorld_OnThrownHit::HitComp' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_OnThrownHit, OtherActor) == 0x000008, "Member 'PropVoxelWorld_OnThrownHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_OnThrownHit, OtherComp) == 0x000010, "Member 'PropVoxelWorld_OnThrownHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_OnThrownHit, NormalImpulse) == 0x000018, "Member 'PropVoxelWorld_OnThrownHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_OnThrownHit, Hit) == 0x000024, "Member 'PropVoxelWorld_OnThrownHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.OnThrownStop
// 0x0088 (0x0088 - 0x0000)
struct PropVoxelWorld_OnThrownStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_OnThrownStop) == 0x000004, "Wrong alignment on PropVoxelWorld_OnThrownStop");
static_assert(sizeof(PropVoxelWorld_OnThrownStop) == 0x000088, "Wrong size on PropVoxelWorld_OnThrownStop");
static_assert(offsetof(PropVoxelWorld_OnThrownStop, ImpactResult) == 0x000000, "Member 'PropVoxelWorld_OnThrownStop::ImpactResult' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetCanTip
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetCanTip final
{
public:
	bool                                          bInCanTip;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetCanTip) == 0x000001, "Wrong alignment on PropVoxelWorld_SetCanTip");
static_assert(sizeof(PropVoxelWorld_SetCanTip) == 0x000001, "Wrong size on PropVoxelWorld_SetCanTip");
static_assert(offsetof(PropVoxelWorld_SetCanTip, bInCanTip) == 0x000000, "Member 'PropVoxelWorld_SetCanTip::bInCanTip' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetExplosionInfo
// 0x0008 (0x0008 - 0x0000)
struct PropVoxelWorld_SetExplosionInfo final
{
public:
	float                                         EditRadius;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShockwaveRadius;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetExplosionInfo) == 0x000004, "Wrong alignment on PropVoxelWorld_SetExplosionInfo");
static_assert(sizeof(PropVoxelWorld_SetExplosionInfo) == 0x000008, "Wrong size on PropVoxelWorld_SetExplosionInfo");
static_assert(offsetof(PropVoxelWorld_SetExplosionInfo, EditRadius) == 0x000000, "Member 'PropVoxelWorld_SetExplosionInfo::EditRadius' has a wrong offset!");
static_assert(offsetof(PropVoxelWorld_SetExplosionInfo, ShockwaveRadius) == 0x000004, "Member 'PropVoxelWorld_SetExplosionInfo::ShockwaveRadius' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetHighlightedGrav
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetHighlightedGrav final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetHighlightedGrav) == 0x000001, "Wrong alignment on PropVoxelWorld_SetHighlightedGrav");
static_assert(sizeof(PropVoxelWorld_SetHighlightedGrav) == 0x000001, "Wrong size on PropVoxelWorld_SetHighlightedGrav");
static_assert(offsetof(PropVoxelWorld_SetHighlightedGrav, bHighlighted) == 0x000000, "Member 'PropVoxelWorld_SetHighlightedGrav::bHighlighted' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetHighlightedHUD
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetHighlightedHUD final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetHighlightedHUD) == 0x000001, "Wrong alignment on PropVoxelWorld_SetHighlightedHUD");
static_assert(sizeof(PropVoxelWorld_SetHighlightedHUD) == 0x000001, "Wrong size on PropVoxelWorld_SetHighlightedHUD");
static_assert(offsetof(PropVoxelWorld_SetHighlightedHUD, bHighlighted) == 0x000000, "Member 'PropVoxelWorld_SetHighlightedHUD::bHighlighted' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetHighRez
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetHighRez final
{
public:
	bool                                          bIsHiRez;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetHighRez) == 0x000001, "Wrong alignment on PropVoxelWorld_SetHighRez");
static_assert(sizeof(PropVoxelWorld_SetHighRez) == 0x000001, "Wrong size on PropVoxelWorld_SetHighRez");
static_assert(offsetof(PropVoxelWorld_SetHighRez, bIsHiRez) == 0x000000, "Member 'PropVoxelWorld_SetHighRez::bIsHiRez' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetLODEnabled
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetLODEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetLODEnabled) == 0x000001, "Wrong alignment on PropVoxelWorld_SetLODEnabled");
static_assert(sizeof(PropVoxelWorld_SetLODEnabled) == 0x000001, "Wrong size on PropVoxelWorld_SetLODEnabled");
static_assert(offsetof(PropVoxelWorld_SetLODEnabled, bInEnabled) == 0x000000, "Member 'PropVoxelWorld_SetLODEnabled::bInEnabled' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetPlayerInteractionType
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetPlayerInteractionType final
{
public:
	EPlayerInteractionType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetPlayerInteractionType) == 0x000001, "Wrong alignment on PropVoxelWorld_SetPlayerInteractionType");
static_assert(sizeof(PropVoxelWorld_SetPlayerInteractionType) == 0x000001, "Wrong size on PropVoxelWorld_SetPlayerInteractionType");
static_assert(offsetof(PropVoxelWorld_SetPlayerInteractionType, InType) == 0x000000, "Member 'PropVoxelWorld_SetPlayerInteractionType::InType' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetShake
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetShake final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetShake) == 0x000001, "Wrong alignment on PropVoxelWorld_SetShake");
static_assert(sizeof(PropVoxelWorld_SetShake) == 0x000001, "Wrong size on PropVoxelWorld_SetShake");
static_assert(offsetof(PropVoxelWorld_SetShake, bSet) == 0x000000, "Member 'PropVoxelWorld_SetShake::bSet' has a wrong offset!");

// Function ThankYouVeryCool.PropVoxelWorld.SetShouldMove
// 0x0001 (0x0001 - 0x0000)
struct PropVoxelWorld_SetShouldMove final
{
public:
	bool                                          bInShouldMove;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropVoxelWorld_SetShouldMove) == 0x000001, "Wrong alignment on PropVoxelWorld_SetShouldMove");
static_assert(sizeof(PropVoxelWorld_SetShouldMove) == 0x000001, "Wrong size on PropVoxelWorld_SetShouldMove");
static_assert(offsetof(PropVoxelWorld_SetShouldMove, bInShouldMove) == 0x000000, "Member 'PropVoxelWorld_SetShouldMove::bInShouldMove' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.CardSelected
// 0x0008 (0x0008 - 0x0000)
struct RogueManager_CardSelected final
{
public:
	class UCardData*                              InCard;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_CardSelected) == 0x000008, "Wrong alignment on RogueManager_CardSelected");
static_assert(sizeof(RogueManager_CardSelected) == 0x000008, "Wrong size on RogueManager_CardSelected");
static_assert(offsetof(RogueManager_CardSelected, InCard) == 0x000000, "Member 'RogueManager_CardSelected::InCard' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.CheckNewCannon
// 0x0010 (0x0010 - 0x0000)
struct RogueManager_CheckNewCannon final
{
public:
	int32                                         OldScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewScore;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundNew;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TilNext;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_CheckNewCannon) == 0x000004, "Wrong alignment on RogueManager_CheckNewCannon");
static_assert(sizeof(RogueManager_CheckNewCannon) == 0x000010, "Wrong size on RogueManager_CheckNewCannon");
static_assert(offsetof(RogueManager_CheckNewCannon, OldScore) == 0x000000, "Member 'RogueManager_CheckNewCannon::OldScore' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewCannon, NewScore) == 0x000004, "Member 'RogueManager_CheckNewCannon::NewScore' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewCannon, bFoundNew) == 0x000008, "Member 'RogueManager_CheckNewCannon::bFoundNew' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewCannon, TilNext) == 0x00000C, "Member 'RogueManager_CheckNewCannon::TilNext' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.CheckNewJacket
// 0x0010 (0x0010 - 0x0000)
struct RogueManager_CheckNewJacket final
{
public:
	int32                                         OldScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewScore;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundNew;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TilNext;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_CheckNewJacket) == 0x000004, "Wrong alignment on RogueManager_CheckNewJacket");
static_assert(sizeof(RogueManager_CheckNewJacket) == 0x000010, "Wrong size on RogueManager_CheckNewJacket");
static_assert(offsetof(RogueManager_CheckNewJacket, OldScore) == 0x000000, "Member 'RogueManager_CheckNewJacket::OldScore' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewJacket, NewScore) == 0x000004, "Member 'RogueManager_CheckNewJacket::NewScore' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewJacket, bFoundNew) == 0x000008, "Member 'RogueManager_CheckNewJacket::bFoundNew' has a wrong offset!");
static_assert(offsetof(RogueManager_CheckNewJacket, TilNext) == 0x00000C, "Member 'RogueManager_CheckNewJacket::TilNext' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.DrawCards
// 0x0018 (0x0018 - 0x0000)
struct RogueManager_DrawCards final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCardData*>                      ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_DrawCards) == 0x000008, "Wrong alignment on RogueManager_DrawCards");
static_assert(sizeof(RogueManager_DrawCards) == 0x000018, "Wrong size on RogueManager_DrawCards");
static_assert(offsetof(RogueManager_DrawCards, Count) == 0x000000, "Member 'RogueManager_DrawCards::Count' has a wrong offset!");
static_assert(offsetof(RogueManager_DrawCards, Tier) == 0x000004, "Member 'RogueManager_DrawCards::Tier' has a wrong offset!");
static_assert(offsetof(RogueManager_DrawCards, ReturnValue) == 0x000008, "Member 'RogueManager_DrawCards::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.DrawEdensysCard
// 0x0008 (0x0008 - 0x0000)
struct RogueManager_DrawEdensysCard final
{
public:
	class UCardData*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_DrawEdensysCard) == 0x000008, "Wrong alignment on RogueManager_DrawEdensysCard");
static_assert(sizeof(RogueManager_DrawEdensysCard) == 0x000008, "Wrong size on RogueManager_DrawEdensysCard");
static_assert(offsetof(RogueManager_DrawEdensysCard, ReturnValue) == 0x000000, "Member 'RogueManager_DrawEdensysCard::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.GetCachedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct RogueManager_GetCachedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_GetCachedMultiplier) == 0x000004, "Wrong alignment on RogueManager_GetCachedMultiplier");
static_assert(sizeof(RogueManager_GetCachedMultiplier) == 0x000004, "Wrong size on RogueManager_GetCachedMultiplier");
static_assert(offsetof(RogueManager_GetCachedMultiplier, ReturnValue) == 0x000000, "Member 'RogueManager_GetCachedMultiplier::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.GetCurrentCardsTier
// 0x0004 (0x0004 - 0x0000)
struct RogueManager_GetCurrentCardsTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_GetCurrentCardsTier) == 0x000004, "Wrong alignment on RogueManager_GetCurrentCardsTier");
static_assert(sizeof(RogueManager_GetCurrentCardsTier) == 0x000004, "Wrong size on RogueManager_GetCurrentCardsTier");
static_assert(offsetof(RogueManager_GetCurrentCardsTier, ReturnValue) == 0x000000, "Member 'RogueManager_GetCurrentCardsTier::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.GetNextLevelInfo
// 0x0048 (0x0048 - 0x0000)
struct RogueManager_GetNextLevelInfo final
{
public:
	TSoftObjectPtr<class UTexture>                LevelScreen;                                       // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIsArcade;                                         // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RogueManager_GetNextLevelInfo) == 0x000008, "Wrong alignment on RogueManager_GetNextLevelInfo");
static_assert(sizeof(RogueManager_GetNextLevelInfo) == 0x000048, "Wrong size on RogueManager_GetNextLevelInfo");
static_assert(offsetof(RogueManager_GetNextLevelInfo, LevelScreen) == 0x000000, "Member 'RogueManager_GetNextLevelInfo::LevelScreen' has a wrong offset!");
static_assert(offsetof(RogueManager_GetNextLevelInfo, Name_0) == 0x000028, "Member 'RogueManager_GetNextLevelInfo::Name_0' has a wrong offset!");
static_assert(offsetof(RogueManager_GetNextLevelInfo, bIsArcade) == 0x000040, "Member 'RogueManager_GetNextLevelInfo::bIsArcade' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.HasCardBeenCollected
// 0x0010 (0x0010 - 0x0000)
struct RogueManager_HasCardBeenCollected final
{
public:
	class UCardData*                              Card;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RogueManager_HasCardBeenCollected) == 0x000008, "Wrong alignment on RogueManager_HasCardBeenCollected");
static_assert(sizeof(RogueManager_HasCardBeenCollected) == 0x000010, "Wrong size on RogueManager_HasCardBeenCollected");
static_assert(offsetof(RogueManager_HasCardBeenCollected, Card) == 0x000000, "Member 'RogueManager_HasCardBeenCollected::Card' has a wrong offset!");
static_assert(offsetof(RogueManager_HasCardBeenCollected, ReturnValue) == 0x000008, "Member 'RogueManager_HasCardBeenCollected::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.HasSoftCardBeenCollected
// 0x0030 (0x0030 - 0x0000)
struct RogueManager_HasSoftCardBeenCollected final
{
public:
	TSoftClassPtr<class UClass>                   Card;                                              // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RogueManager_HasSoftCardBeenCollected) == 0x000008, "Wrong alignment on RogueManager_HasSoftCardBeenCollected");
static_assert(sizeof(RogueManager_HasSoftCardBeenCollected) == 0x000030, "Wrong size on RogueManager_HasSoftCardBeenCollected");
static_assert(offsetof(RogueManager_HasSoftCardBeenCollected, Card) == 0x000000, "Member 'RogueManager_HasSoftCardBeenCollected::Card' has a wrong offset!");
static_assert(offsetof(RogueManager_HasSoftCardBeenCollected, ReturnValue) == 0x000028, "Member 'RogueManager_HasSoftCardBeenCollected::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.IsCannonUnlocked
// 0x0014 (0x0014 - 0x0000)
struct RogueManager_IsCannonUnlocked final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForScore;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutScore;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RogueManager_IsCannonUnlocked) == 0x000004, "Wrong alignment on RogueManager_IsCannonUnlocked");
static_assert(sizeof(RogueManager_IsCannonUnlocked) == 0x000014, "Wrong size on RogueManager_IsCannonUnlocked");
static_assert(offsetof(RogueManager_IsCannonUnlocked, RowName) == 0x000000, "Member 'RogueManager_IsCannonUnlocked::RowName' has a wrong offset!");
static_assert(offsetof(RogueManager_IsCannonUnlocked, ForScore) == 0x000008, "Member 'RogueManager_IsCannonUnlocked::ForScore' has a wrong offset!");
static_assert(offsetof(RogueManager_IsCannonUnlocked, OutScore) == 0x00000C, "Member 'RogueManager_IsCannonUnlocked::OutScore' has a wrong offset!");
static_assert(offsetof(RogueManager_IsCannonUnlocked, ReturnValue) == 0x000010, "Member 'RogueManager_IsCannonUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.IsJacketUnlocked
// 0x0014 (0x0014 - 0x0000)
struct RogueManager_IsJacketUnlocked final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForScore;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAtLevel;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RogueManager_IsJacketUnlocked) == 0x000004, "Wrong alignment on RogueManager_IsJacketUnlocked");
static_assert(sizeof(RogueManager_IsJacketUnlocked) == 0x000014, "Wrong size on RogueManager_IsJacketUnlocked");
static_assert(offsetof(RogueManager_IsJacketUnlocked, RowName) == 0x000000, "Member 'RogueManager_IsJacketUnlocked::RowName' has a wrong offset!");
static_assert(offsetof(RogueManager_IsJacketUnlocked, ForScore) == 0x000008, "Member 'RogueManager_IsJacketUnlocked::ForScore' has a wrong offset!");
static_assert(offsetof(RogueManager_IsJacketUnlocked, OutAtLevel) == 0x00000C, "Member 'RogueManager_IsJacketUnlocked::OutAtLevel' has a wrong offset!");
static_assert(offsetof(RogueManager_IsJacketUnlocked, ReturnValue) == 0x000010, "Member 'RogueManager_IsJacketUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.Play
// 0x0008 (0x0008 - 0x0000)
struct RogueManager_Play final
{
public:
	class UCardData*                              StartingCard;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_Play) == 0x000008, "Wrong alignment on RogueManager_Play");
static_assert(sizeof(RogueManager_Play) == 0x000008, "Wrong size on RogueManager_Play");
static_assert(offsetof(RogueManager_Play, StartingCard) == 0x000000, "Member 'RogueManager_Play::StartingCard' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.StupidAsyncCallback
// 0x0010 (0x0010 - 0x0000)
struct RogueManager_StupidAsyncCallback final
{
public:
	struct FRogueLevel                            MP;                                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_StupidAsyncCallback) == 0x000008, "Wrong alignment on RogueManager_StupidAsyncCallback");
static_assert(sizeof(RogueManager_StupidAsyncCallback) == 0x000010, "Wrong size on RogueManager_StupidAsyncCallback");
static_assert(offsetof(RogueManager_StupidAsyncCallback, MP) == 0x000000, "Member 'RogueManager_StupidAsyncCallback::MP' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.StupidAsyncCallbackForFF
// 0x0020 (0x0020 - 0x0000)
struct RogueManager_StupidAsyncCallbackForFF final
{
public:
	TSubclassOf<class UArcadeLevelAsset>          ClassIn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChapter*                               InC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCampaignDataAsset*                     CDA;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelEditorSave*                       LoadedSave;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_StupidAsyncCallbackForFF) == 0x000008, "Wrong alignment on RogueManager_StupidAsyncCallbackForFF");
static_assert(sizeof(RogueManager_StupidAsyncCallbackForFF) == 0x000020, "Wrong size on RogueManager_StupidAsyncCallbackForFF");
static_assert(offsetof(RogueManager_StupidAsyncCallbackForFF, ClassIn) == 0x000000, "Member 'RogueManager_StupidAsyncCallbackForFF::ClassIn' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncCallbackForFF, InC) == 0x000008, "Member 'RogueManager_StupidAsyncCallbackForFF::InC' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncCallbackForFF, CDA) == 0x000010, "Member 'RogueManager_StupidAsyncCallbackForFF::CDA' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncCallbackForFF, LoadedSave) == 0x000018, "Member 'RogueManager_StupidAsyncCallbackForFF::LoadedSave' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.StupidAsyncLoadHack
// 0x0038 (0x0038 - 0x0000)
struct RogueManager_StupidAsyncLoadHack final
{
public:
	TSoftClassPtr<class UClass>                   ClassIn;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRogueLevel                            MP;                                                // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_StupidAsyncLoadHack) == 0x000008, "Wrong alignment on RogueManager_StupidAsyncLoadHack");
static_assert(sizeof(RogueManager_StupidAsyncLoadHack) == 0x000038, "Wrong size on RogueManager_StupidAsyncLoadHack");
static_assert(offsetof(RogueManager_StupidAsyncLoadHack, ClassIn) == 0x000000, "Member 'RogueManager_StupidAsyncLoadHack::ClassIn' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncLoadHack, MP) == 0x000028, "Member 'RogueManager_StupidAsyncLoadHack::MP' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.StupidAsyncLoadHackForFirefight
// 0x0018 (0x0018 - 0x0000)
struct RogueManager_StupidAsyncLoadHackForFirefight final
{
public:
	TSubclassOf<class UArcadeLevelAsset>          ClassIn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChapter*                               InC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCampaignDataAsset*                     CDA;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_StupidAsyncLoadHackForFirefight) == 0x000008, "Wrong alignment on RogueManager_StupidAsyncLoadHackForFirefight");
static_assert(sizeof(RogueManager_StupidAsyncLoadHackForFirefight) == 0x000018, "Wrong size on RogueManager_StupidAsyncLoadHackForFirefight");
static_assert(offsetof(RogueManager_StupidAsyncLoadHackForFirefight, ClassIn) == 0x000000, "Member 'RogueManager_StupidAsyncLoadHackForFirefight::ClassIn' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncLoadHackForFirefight, InC) == 0x000008, "Member 'RogueManager_StupidAsyncLoadHackForFirefight::InC' has a wrong offset!");
static_assert(offsetof(RogueManager_StupidAsyncLoadHackForFirefight, CDA) == 0x000010, "Member 'RogueManager_StupidAsyncLoadHackForFirefight::CDA' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.GetCollectedCards
// 0x0004 (0x0004 - 0x0000)
struct RogueManager_GetCollectedCards final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_GetCollectedCards) == 0x000004, "Wrong alignment on RogueManager_GetCollectedCards");
static_assert(sizeof(RogueManager_GetCollectedCards) == 0x000004, "Wrong size on RogueManager_GetCollectedCards");
static_assert(offsetof(RogueManager_GetCollectedCards, ReturnValue) == 0x000000, "Member 'RogueManager_GetCollectedCards::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.RogueManager.GetTotalCards
// 0x0004 (0x0004 - 0x0000)
struct RogueManager_GetTotalCards final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RogueManager_GetTotalCards) == 0x000004, "Wrong alignment on RogueManager_GetTotalCards");
static_assert(sizeof(RogueManager_GetTotalCards) == 0x000004, "Wrong size on RogueManager_GetTotalCards");
static_assert(offsetof(RogueManager_GetTotalCards, ReturnValue) == 0x000000, "Member 'RogueManager_GetTotalCards::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.SlowMoProjectile.ResolveImpact
// 0x0088 (0x0088 - 0x0000)
struct SlowMoProjectile_ResolveImpact final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlowMoProjectile_ResolveImpact) == 0x000004, "Wrong alignment on SlowMoProjectile_ResolveImpact");
static_assert(sizeof(SlowMoProjectile_ResolveImpact) == 0x000088, "Wrong size on SlowMoProjectile_ResolveImpact");
static_assert(offsetof(SlowMoProjectile_ResolveImpact, ImpactResult) == 0x000000, "Member 'SlowMoProjectile_ResolveImpact::ImpactResult' has a wrong offset!");

// Function ThankYouVeryCool.SpeechBubbleComponent.CallSay
// 0x0010 (0x0010 - 0x0000)
struct SpeechBubbleComponent_CallSay final
{
public:
	class FString                                 Dialogue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeechBubbleComponent_CallSay) == 0x000008, "Wrong alignment on SpeechBubbleComponent_CallSay");
static_assert(sizeof(SpeechBubbleComponent_CallSay) == 0x000010, "Wrong size on SpeechBubbleComponent_CallSay");
static_assert(offsetof(SpeechBubbleComponent_CallSay, Dialogue) == 0x000000, "Member 'SpeechBubbleComponent_CallSay::Dialogue' has a wrong offset!");

// Function ThankYouVeryCool.SpeedrunOverlay.UpdateDisplayedGoal
// 0x0008 (0x0008 - 0x0000)
struct SpeedrunOverlay_UpdateDisplayedGoal final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDifficulty                                   Goal;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpeedrunOverlay_UpdateDisplayedGoal) == 0x000004, "Wrong alignment on SpeedrunOverlay_UpdateDisplayedGoal");
static_assert(sizeof(SpeedrunOverlay_UpdateDisplayedGoal) == 0x000008, "Wrong size on SpeedrunOverlay_UpdateDisplayedGoal");
static_assert(offsetof(SpeedrunOverlay_UpdateDisplayedGoal, Time) == 0x000000, "Member 'SpeedrunOverlay_UpdateDisplayedGoal::Time' has a wrong offset!");
static_assert(offsetof(SpeedrunOverlay_UpdateDisplayedGoal, Goal) == 0x000004, "Member 'SpeedrunOverlay_UpdateDisplayedGoal::Goal' has a wrong offset!");

// Function ThankYouVeryCool.SpentShell.OnBounce
// 0x0094 (0x0094 - 0x0000)
struct SpentShell_OnBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpentShell_OnBounce) == 0x000004, "Wrong alignment on SpentShell_OnBounce");
static_assert(sizeof(SpentShell_OnBounce) == 0x000094, "Wrong size on SpentShell_OnBounce");
static_assert(offsetof(SpentShell_OnBounce, ImpactResult) == 0x000000, "Member 'SpentShell_OnBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(SpentShell_OnBounce, ImpactVelocity) == 0x000088, "Member 'SpentShell_OnBounce::ImpactVelocity' has a wrong offset!");

// Function ThankYouVeryCool.SpentShell.OnStop
// 0x0088 (0x0088 - 0x0000)
struct SpentShell_OnStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpentShell_OnStop) == 0x000004, "Wrong alignment on SpentShell_OnStop");
static_assert(sizeof(SpentShell_OnStop) == 0x000088, "Wrong size on SpentShell_OnStop");
static_assert(offsetof(SpentShell_OnStop, ImpactResult) == 0x000000, "Member 'SpentShell_OnStop::ImpactResult' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetRandomMember
// 0x0038 (0x0038 - 0x0000)
struct Squad_GetRandomMember final
{
public:
	TArray<class ANPCController*>                 InList;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ANPCController*>                 ToIgnore;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ESituationContext>                     SitRepsToIgnore;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ANPCController*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetRandomMember) == 0x000008, "Wrong alignment on Squad_GetRandomMember");
static_assert(sizeof(Squad_GetRandomMember) == 0x000038, "Wrong size on Squad_GetRandomMember");
static_assert(offsetof(Squad_GetRandomMember, InList) == 0x000000, "Member 'Squad_GetRandomMember::InList' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMember, ToIgnore) == 0x000010, "Member 'Squad_GetRandomMember::ToIgnore' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMember, SitRepsToIgnore) == 0x000020, "Member 'Squad_GetRandomMember::SitRepsToIgnore' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMember, ReturnValue) == 0x000030, "Member 'Squad_GetRandomMember::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetClosestToPlayer
// 0x0008 (0x0008 - 0x0000)
struct Squad_GetClosestToPlayer final
{
public:
	class ANPC*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetClosestToPlayer) == 0x000008, "Wrong alignment on Squad_GetClosestToPlayer");
static_assert(sizeof(Squad_GetClosestToPlayer) == 0x000008, "Wrong size on Squad_GetClosestToPlayer");
static_assert(offsetof(Squad_GetClosestToPlayer, ReturnValue) == 0x000000, "Member 'Squad_GetClosestToPlayer::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetClosestToPlayerWhoCanSee
// 0x0008 (0x0008 - 0x0000)
struct Squad_GetClosestToPlayerWhoCanSee final
{
public:
	class ANPC*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetClosestToPlayerWhoCanSee) == 0x000008, "Wrong alignment on Squad_GetClosestToPlayerWhoCanSee");
static_assert(sizeof(Squad_GetClosestToPlayerWhoCanSee) == 0x000008, "Wrong size on Squad_GetClosestToPlayerWhoCanSee");
static_assert(offsetof(Squad_GetClosestToPlayerWhoCanSee, ReturnValue) == 0x000000, "Member 'Squad_GetClosestToPlayerWhoCanSee::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetLivingCount
// 0x0004 (0x0004 - 0x0000)
struct Squad_GetLivingCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetLivingCount) == 0x000004, "Wrong alignment on Squad_GetLivingCount");
static_assert(sizeof(Squad_GetLivingCount) == 0x000004, "Wrong size on Squad_GetLivingCount");
static_assert(offsetof(Squad_GetLivingCount, ReturnValue) == 0x000000, "Member 'Squad_GetLivingCount::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetMembers
// 0x0010 (0x0010 - 0x0000)
struct Squad_GetMembers final
{
public:
	TArray<class ANPCController*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetMembers) == 0x000008, "Wrong alignment on Squad_GetMembers");
static_assert(sizeof(Squad_GetMembers) == 0x000010, "Wrong size on Squad_GetMembers");
static_assert(offsetof(Squad_GetMembers, ReturnValue) == 0x000000, "Member 'Squad_GetMembers::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetMembersInRange
// 0x0030 (0x0030 - 0x0000)
struct Squad_GetMembersInRange final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ANPCController*>                 ListOfNPCs;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ANPCController*>                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetMembersInRange) == 0x000008, "Wrong alignment on Squad_GetMembersInRange");
static_assert(sizeof(Squad_GetMembersInRange) == 0x000030, "Wrong size on Squad_GetMembersInRange");
static_assert(offsetof(Squad_GetMembersInRange, Location) == 0x000000, "Member 'Squad_GetMembersInRange::Location' has a wrong offset!");
static_assert(offsetof(Squad_GetMembersInRange, Range) == 0x00000C, "Member 'Squad_GetMembersInRange::Range' has a wrong offset!");
static_assert(offsetof(Squad_GetMembersInRange, ListOfNPCs) == 0x000010, "Member 'Squad_GetMembersInRange::ListOfNPCs' has a wrong offset!");
static_assert(offsetof(Squad_GetMembersInRange, ReturnValue) == 0x000020, "Member 'Squad_GetMembersInRange::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetPlayerPositionModel
// 0x0008 (0x0008 - 0x0000)
struct Squad_GetPlayerPositionModel final
{
public:
	class APlayerPositionModel*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_GetPlayerPositionModel) == 0x000008, "Wrong alignment on Squad_GetPlayerPositionModel");
static_assert(sizeof(Squad_GetPlayerPositionModel) == 0x000008, "Wrong size on Squad_GetPlayerPositionModel");
static_assert(offsetof(Squad_GetPlayerPositionModel, ReturnValue) == 0x000000, "Member 'Squad_GetPlayerPositionModel::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetRandomMembers
// 0x0028 (0x0028 - 0x0000)
struct Squad_GetRandomMembers final
{
public:
	TArray<class ANPCController*>                 OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANPCController*>                 ToIgnore;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Squad_GetRandomMembers) == 0x000008, "Wrong alignment on Squad_GetRandomMembers");
static_assert(sizeof(Squad_GetRandomMembers) == 0x000028, "Wrong size on Squad_GetRandomMembers");
static_assert(offsetof(Squad_GetRandomMembers, OutList) == 0x000000, "Member 'Squad_GetRandomMembers::OutList' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembers, ToIgnore) == 0x000010, "Member 'Squad_GetRandomMembers::ToIgnore' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembers, Count) == 0x000020, "Member 'Squad_GetRandomMembers::Count' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembers, ReturnValue) == 0x000024, "Member 'Squad_GetRandomMembers::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.GetRandomMembersClosestTo
// 0x0038 (0x0038 - 0x0000)
struct Squad_GetRandomMembersClosestTo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ANPCController*>                 OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANPCController*>                 ToIgnore;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Squad_GetRandomMembersClosestTo) == 0x000008, "Wrong alignment on Squad_GetRandomMembersClosestTo");
static_assert(sizeof(Squad_GetRandomMembersClosestTo) == 0x000038, "Wrong size on Squad_GetRandomMembersClosestTo");
static_assert(offsetof(Squad_GetRandomMembersClosestTo, Location) == 0x000000, "Member 'Squad_GetRandomMembersClosestTo::Location' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembersClosestTo, OutList) == 0x000010, "Member 'Squad_GetRandomMembersClosestTo::OutList' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembersClosestTo, ToIgnore) == 0x000020, "Member 'Squad_GetRandomMembersClosestTo::ToIgnore' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembersClosestTo, Count) == 0x000030, "Member 'Squad_GetRandomMembersClosestTo::Count' has a wrong offset!");
static_assert(offsetof(Squad_GetRandomMembersClosestTo, ReturnValue) == 0x000034, "Member 'Squad_GetRandomMembersClosestTo::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.HaveClosestMemberSay
// 0x0008 (0x0008 - 0x0000)
struct Squad_HaveClosestMemberSay final
{
public:
	class FName                                   ToSay;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_HaveClosestMemberSay) == 0x000004, "Wrong alignment on Squad_HaveClosestMemberSay");
static_assert(sizeof(Squad_HaveClosestMemberSay) == 0x000008, "Wrong size on Squad_HaveClosestMemberSay");
static_assert(offsetof(Squad_HaveClosestMemberSay, ToSay) == 0x000000, "Member 'Squad_HaveClosestMemberSay::ToSay' has a wrong offset!");

// Function ThankYouVeryCool.Squad.HaveClosestMemberWhoCanSeeSay
// 0x0008 (0x0008 - 0x0000)
struct Squad_HaveClosestMemberWhoCanSeeSay final
{
public:
	class FName                                   ToSay;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_HaveClosestMemberWhoCanSeeSay) == 0x000004, "Wrong alignment on Squad_HaveClosestMemberWhoCanSeeSay");
static_assert(sizeof(Squad_HaveClosestMemberWhoCanSeeSay) == 0x000008, "Wrong size on Squad_HaveClosestMemberWhoCanSeeSay");
static_assert(offsetof(Squad_HaveClosestMemberWhoCanSeeSay, ToSay) == 0x000000, "Member 'Squad_HaveClosestMemberWhoCanSeeSay::ToSay' has a wrong offset!");

// Function ThankYouVeryCool.Squad.IsPointInZone
// 0x0010 (0x0010 - 0x0000)
struct Squad_IsPointInZone final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Squad_IsPointInZone) == 0x000004, "Wrong alignment on Squad_IsPointInZone");
static_assert(sizeof(Squad_IsPointInZone) == 0x000010, "Wrong size on Squad_IsPointInZone");
static_assert(offsetof(Squad_IsPointInZone, Location) == 0x000000, "Member 'Squad_IsPointInZone::Location' has a wrong offset!");
static_assert(offsetof(Squad_IsPointInZone, ReturnValue) == 0x00000C, "Member 'Squad_IsPointInZone::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.Squad.OnSleepBoundsBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Squad_OnSleepBoundsBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_OnSleepBoundsBeginOverlap) == 0x000008, "Wrong alignment on Squad_OnSleepBoundsBeginOverlap");
static_assert(sizeof(Squad_OnSleepBoundsBeginOverlap) == 0x0000A8, "Wrong size on Squad_OnSleepBoundsBeginOverlap");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Squad_OnSleepBoundsBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, OtherActor) == 0x000008, "Member 'Squad_OnSleepBoundsBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, OtherComp) == 0x000010, "Member 'Squad_OnSleepBoundsBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Squad_OnSleepBoundsBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, bFromSweep) == 0x00001C, "Member 'Squad_OnSleepBoundsBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsBeginOverlap, SweepResult) == 0x000020, "Member 'Squad_OnSleepBoundsBeginOverlap::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.Squad.OnSleepBoundsEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Squad_OnSleepBoundsEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Squad_OnSleepBoundsEndOverlap) == 0x000008, "Wrong alignment on Squad_OnSleepBoundsEndOverlap");
static_assert(sizeof(Squad_OnSleepBoundsEndOverlap) == 0x000020, "Wrong size on Squad_OnSleepBoundsEndOverlap");
static_assert(offsetof(Squad_OnSleepBoundsEndOverlap, OverlappedComponent) == 0x000000, "Member 'Squad_OnSleepBoundsEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsEndOverlap, OtherActor) == 0x000008, "Member 'Squad_OnSleepBoundsEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsEndOverlap, OtherComp) == 0x000010, "Member 'Squad_OnSleepBoundsEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Squad_OnSleepBoundsEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Squad_OnSleepBoundsEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function ThankYouVeryCool.Squad.SetPositionModelValidity
// 0x0001 (0x0001 - 0x0000)
struct Squad_SetPositionModelValidity final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Squad_SetPositionModelValidity) == 0x000001, "Wrong alignment on Squad_SetPositionModelValidity");
static_assert(sizeof(Squad_SetPositionModelValidity) == 0x000001, "Wrong size on Squad_SetPositionModelValidity");
static_assert(offsetof(Squad_SetPositionModelValidity, bIsValid) == 0x000000, "Member 'Squad_SetPositionModelValidity::bIsValid' has a wrong offset!");

// Function ThankYouVeryCool.Teleporter.UpdateLinkID
// 0x0008 (0x0008 - 0x0000)
struct Teleporter_UpdateLinkID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Teleporter_UpdateLinkID) == 0x000004, "Wrong alignment on Teleporter_UpdateLinkID");
static_assert(sizeof(Teleporter_UpdateLinkID) == 0x000008, "Wrong size on Teleporter_UpdateLinkID");
static_assert(offsetof(Teleporter_UpdateLinkID, InID) == 0x000000, "Member 'Teleporter_UpdateLinkID::InID' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ExtractDataClass
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_ExtractDataClass final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ExtractDataClass) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ExtractDataClass");
static_assert(sizeof(ThankYouVeryCoolGameMode_ExtractDataClass) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_ExtractDataClass");
static_assert(offsetof(ThankYouVeryCoolGameMode_ExtractDataClass, InObject) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ExtractDataClass::InObject' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ExtractDataClass, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_ExtractDataClass::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetBaseNPCScore
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_SetBaseNPCScore final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetBaseNPCScore) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_SetBaseNPCScore");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetBaseNPCScore) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_SetBaseNPCScore");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetBaseNPCScore, InObject) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetBaseNPCScore::InObject' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ApplyAudioSettings
// 0x0040 (0x0040 - 0x0000)
struct ThankYouVeryCoolGameMode_ApplyAudioSettings final
{
public:
	struct FTYVCAudioSettings                     InSettings;                                        // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_ApplyAudioSettings) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ApplyAudioSettings");
static_assert(sizeof(ThankYouVeryCoolGameMode_ApplyAudioSettings) == 0x000040, "Wrong size on ThankYouVeryCoolGameMode_ApplyAudioSettings");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyAudioSettings, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ApplyAudioSettings::InSettings' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyAudioSettings, Save) == 0x000038, "Member 'ThankYouVeryCoolGameMode_ApplyAudioSettings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ApplyControlSettings
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_ApplyControlSettings final
{
public:
	struct FControlSettings                       InSettings;                                        // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_ApplyControlSettings) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_ApplyControlSettings");
static_assert(sizeof(ThankYouVeryCoolGameMode_ApplyControlSettings) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_ApplyControlSettings");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyControlSettings, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ApplyControlSettings::InSettings' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyControlSettings, Save) == 0x00000C, "Member 'ThankYouVeryCoolGameMode_ApplyControlSettings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ApplyControlSettingsGamepad
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad final
{
public:
	struct FControlSettingsGamepad                InSettings;                                        // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad");
static_assert(sizeof(ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad::InSettings' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad, Save) == 0x00001C, "Member 'ThankYouVeryCoolGameMode_ApplyControlSettingsGamepad::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ApplyGameSettings
// 0x0098 (0x0098 - 0x0000)
struct ThankYouVeryCoolGameMode_ApplyGameSettings final
{
public:
	struct FGameSettings                          InSettings;                                        // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_ApplyGameSettings) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ApplyGameSettings");
static_assert(sizeof(ThankYouVeryCoolGameMode_ApplyGameSettings) == 0x000098, "Wrong size on ThankYouVeryCoolGameMode_ApplyGameSettings");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyGameSettings, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ApplyGameSettings::InSettings' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyGameSettings, Save) == 0x000090, "Member 'ThankYouVeryCoolGameMode_ApplyGameSettings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ApplyVisualSettings
// 0x0060 (0x0060 - 0x0000)
struct ThankYouVeryCoolGameMode_ApplyVisualSettings final
{
public:
	struct FVisualSettings                        InSettings;                                        // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_ApplyVisualSettings) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ApplyVisualSettings");
static_assert(sizeof(ThankYouVeryCoolGameMode_ApplyVisualSettings) == 0x000060, "Wrong size on ThankYouVeryCoolGameMode_ApplyVisualSettings");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyVisualSettings, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ApplyVisualSettings::InSettings' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_ApplyVisualSettings, Save) == 0x000058, "Member 'ThankYouVeryCoolGameMode_ApplyVisualSettings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ArcadeResetComplete
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_ArcadeResetComplete final
{
public:
	struct FTYVCNodeMemory                        NodeMemory;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ArcadeResetComplete) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ArcadeResetComplete");
static_assert(sizeof(ThankYouVeryCoolGameMode_ArcadeResetComplete) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_ArcadeResetComplete");
static_assert(offsetof(ThankYouVeryCoolGameMode_ArcadeResetComplete, NodeMemory) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ArcadeResetComplete::NodeMemory' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.bShouldShowNVStuff
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_bShouldShowNVStuff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_bShouldShowNVStuff) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_bShouldShowNVStuff");
static_assert(sizeof(ThankYouVeryCoolGameMode_bShouldShowNVStuff) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_bShouldShowNVStuff");
static_assert(offsetof(ThankYouVeryCoolGameMode_bShouldShowNVStuff, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_bShouldShowNVStuff::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CacheUncompressedWorld
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_CacheUncompressedWorld final
{
public:
	bool                                          bSholdCache;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CacheUncompressedWorld) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_CacheUncompressedWorld");
static_assert(sizeof(ThankYouVeryCoolGameMode_CacheUncompressedWorld) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_CacheUncompressedWorld");
static_assert(offsetof(ThankYouVeryCoolGameMode_CacheUncompressedWorld, bSholdCache) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CacheUncompressedWorld::bSholdCache' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CalcRankThreshold
// 0x000C (0x000C - 0x0000)
struct ThankYouVeryCoolGameMode_CalcRankThreshold final
{
public:
	int32                                         BaseScore;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERank                                         ForRank;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CalcRankThreshold) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_CalcRankThreshold");
static_assert(sizeof(ThankYouVeryCoolGameMode_CalcRankThreshold) == 0x00000C, "Wrong size on ThankYouVeryCoolGameMode_CalcRankThreshold");
static_assert(offsetof(ThankYouVeryCoolGameMode_CalcRankThreshold, BaseScore) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CalcRankThreshold::BaseScore' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CalcRankThreshold, ForRank) == 0x000004, "Member 'ThankYouVeryCoolGameMode_CalcRankThreshold::ForRank' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CalcRankThreshold, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_CalcRankThreshold::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CalculateCurrentRank
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_CalculateCurrentRank final
{
public:
	int32                                         ForScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERank                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_CalculateCurrentRank) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_CalculateCurrentRank");
static_assert(sizeof(ThankYouVeryCoolGameMode_CalculateCurrentRank) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_CalculateCurrentRank");
static_assert(offsetof(ThankYouVeryCoolGameMode_CalculateCurrentRank, ForScore) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CalculateCurrentRank::ForScore' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CalculateCurrentRank, ReturnValue) == 0x000004, "Member 'ThankYouVeryCoolGameMode_CalculateCurrentRank::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CampaignRequestedFadeOut
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_CampaignRequestedFadeOut final
{
public:
	float                                         SpeedModifier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CampaignRequestedFadeOut) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_CampaignRequestedFadeOut");
static_assert(sizeof(ThankYouVeryCoolGameMode_CampaignRequestedFadeOut) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_CampaignRequestedFadeOut");
static_assert(offsetof(ThankYouVeryCoolGameMode_CampaignRequestedFadeOut, SpeedModifier) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CampaignRequestedFadeOut::SpeedModifier' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CanDoLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_CanDoLeaderboard final
{
public:
	class FText                                   ReasonWhyNo;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_CanDoLeaderboard) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CanDoLeaderboard");
static_assert(sizeof(ThankYouVeryCoolGameMode_CanDoLeaderboard) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_CanDoLeaderboard");
static_assert(offsetof(ThankYouVeryCoolGameMode_CanDoLeaderboard, ReasonWhyNo) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CanDoLeaderboard::ReasonWhyNo' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CanDoLeaderboard, ReturnValue) == 0x000018, "Member 'ThankYouVeryCoolGameMode_CanDoLeaderboard::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CanSaveRank
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_CanSaveRank final
{
public:
	class FText                                   ReasonWhyNo;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_CanSaveRank) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CanSaveRank");
static_assert(sizeof(ThankYouVeryCoolGameMode_CanSaveRank) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_CanSaveRank");
static_assert(offsetof(ThankYouVeryCoolGameMode_CanSaveRank, ReasonWhyNo) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CanSaveRank::ReasonWhyNo' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CanSaveRank, ReturnValue) == 0x000018, "Member 'ThankYouVeryCoolGameMode_CanSaveRank::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CopyLevel
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_CopyLevel final
{
public:
	class UArcadeLevelAssetWorkshop*              LevelAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DesiredName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArcadeLevelAssetWorkshop*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CopyLevel) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CopyLevel");
static_assert(sizeof(ThankYouVeryCoolGameMode_CopyLevel) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_CopyLevel");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevel, LevelAsset) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CopyLevel::LevelAsset' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevel, DesiredName) == 0x000008, "Member 'ThankYouVeryCoolGameMode_CopyLevel::DesiredName' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevel, ReturnValue) == 0x000018, "Member 'ThankYouVeryCoolGameMode_CopyLevel::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CopyLevelToCampaign
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_CopyLevelToCampaign final
{
public:
	class UArcadeLevelAssetWorkshop*              LevelAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CampaignName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_CopyLevelToCampaign) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CopyLevelToCampaign");
static_assert(sizeof(ThankYouVeryCoolGameMode_CopyLevelToCampaign) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_CopyLevelToCampaign");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevelToCampaign, LevelAsset) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CopyLevelToCampaign::LevelAsset' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevelToCampaign, CampaignName) == 0x000008, "Member 'ThankYouVeryCoolGameMode_CopyLevelToCampaign::CampaignName' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_CopyLevelToCampaign, ReturnValue) == 0x000018, "Member 'ThankYouVeryCoolGameMode_CopyLevelToCampaign::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CorsairForceEvent
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_CorsairForceEvent final
{
public:
	class FString                                 Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CorsairForceEvent) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CorsairForceEvent");
static_assert(sizeof(ThankYouVeryCoolGameMode_CorsairForceEvent) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_CorsairForceEvent");
static_assert(offsetof(ThankYouVeryCoolGameMode_CorsairForceEvent, Event) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CorsairForceEvent::Event' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.CorsairForceState
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_CorsairForceState final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_CorsairForceState) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_CorsairForceState");
static_assert(sizeof(ThankYouVeryCoolGameMode_CorsairForceState) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_CorsairForceState");
static_assert(offsetof(ThankYouVeryCoolGameMode_CorsairForceState, State) == 0x000000, "Member 'ThankYouVeryCoolGameMode_CorsairForceState::State' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ExploitCheck
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_ExploitCheck final
{
public:
	int32                                         In;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ExploitCheck) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_ExploitCheck");
static_assert(sizeof(ThankYouVeryCoolGameMode_ExploitCheck) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_ExploitCheck");
static_assert(offsetof(ThankYouVeryCoolGameMode_ExploitCheck, In) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ExploitCheck::In' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.FlushCompassMarkers
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_FlushCompassMarkers final
{
public:
	bool                                          bOnlyInvalidTargets;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_FlushCompassMarkers) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_FlushCompassMarkers");
static_assert(sizeof(ThankYouVeryCoolGameMode_FlushCompassMarkers) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_FlushCompassMarkers");
static_assert(offsetof(ThankYouVeryCoolGameMode_FlushCompassMarkers, bOnlyInvalidTargets) == 0x000000, "Member 'ThankYouVeryCoolGameMode_FlushCompassMarkers::bOnlyInvalidTargets' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ForceVictory
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_ForceVictory final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ForceVictory) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_ForceVictory");
static_assert(sizeof(ThankYouVeryCoolGameMode_ForceVictory) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_ForceVictory");
static_assert(offsetof(ThankYouVeryCoolGameMode_ForceVictory, Score) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ForceVictory::Score' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GatherAndSaveInputMappings
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GatherAndSaveInputMappings final
{
public:
	bool                                          Save;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GatherAndSaveInputMappings) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GatherAndSaveInputMappings");
static_assert(sizeof(ThankYouVeryCoolGameMode_GatherAndSaveInputMappings) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GatherAndSaveInputMappings");
static_assert(offsetof(ThankYouVeryCoolGameMode_GatherAndSaveInputMappings, Save) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GatherAndSaveInputMappings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetCachedSteamdeckValue
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetCachedSteamdeckValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetCachedSteamdeckValue) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetCachedSteamdeckValue");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetCachedSteamdeckValue) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetCachedSteamdeckValue");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetCachedSteamdeckValue, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetCachedSteamdeckValue::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetCampaignAssetFromPath
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_GetCampaignAssetFromPath final
{
public:
	struct FSoftClassPath                         InPath;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCampaignDataAsset*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetCampaignAssetFromPath) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetCampaignAssetFromPath");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetCampaignAssetFromPath) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_GetCampaignAssetFromPath");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetCampaignAssetFromPath, InPath) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetCampaignAssetFromPath::InPath' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetCampaignAssetFromPath, ReturnValue) == 0x000018, "Member 'ThankYouVeryCoolGameMode_GetCampaignAssetFromPath::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetCompletedChallenges
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_GetCompletedChallenges final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetCompletedChallenges) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetCompletedChallenges");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetCompletedChallenges) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_GetCompletedChallenges");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetCompletedChallenges, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetCompletedChallenges::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetConsoleCheatsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetConsoleCheatsEnabled::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetCurrentVoxelWorldManager
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager final
{
public:
	class AVoxelWorldManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetCurrentVoxelWorldManager::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetD3DApiLevel
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetD3DApiLevel final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetD3DApiLevel) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetD3DApiLevel");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetD3DApiLevel) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetD3DApiLevel");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetD3DApiLevel, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetD3DApiLevel::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetDataForRecord
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_GetDataForRecord final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetDataForRecord) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetDataForRecord");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetDataForRecord) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_GetDataForRecord");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDataForRecord, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetDataForRecord::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetDataForShine
// 0x0030 (0x0030 - 0x0000)
struct ThankYouVeryCoolGameMode_GetDataForShine final
{
public:
	EShineLevel                                   InShine;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShinyData                             ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetDataForShine) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetDataForShine");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetDataForShine) == 0x000030, "Wrong size on ThankYouVeryCoolGameMode_GetDataForShine");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDataForShine, InShine) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetDataForShine::InShine' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDataForShine, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_GetDataForShine::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetDesiredShiny
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetDesiredShiny final
{
public:
	EShineLevel                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetDesiredShiny) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetDesiredShiny");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetDesiredShiny) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetDesiredShiny");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDesiredShiny, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetDesiredShiny::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetDifficulty final
{
public:
	EDifficulty                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetDifficulty) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetDifficulty");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetDifficulty) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetDifficulty");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDifficulty, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetDifficulty::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetDistroName
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetDistroName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetDistroName) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetDistroName");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetDistroName) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetDistroName");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetDistroName, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetDistroName::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetFriendPersonaName
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_GetFriendPersonaName final
{
public:
	class FString                                 FromID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetFriendPersonaName) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetFriendPersonaName");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetFriendPersonaName) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_GetFriendPersonaName");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetFriendPersonaName, FromID) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetFriendPersonaName::FromID' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetFriendPersonaName, ReturnValue) == 0x000010, "Member 'ThankYouVeryCoolGameMode_GetFriendPersonaName::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetGameMenu
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetGameMenu final
{
public:
	class UGameMenuWidget*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetGameMenu) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetGameMenu");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetGameMenu) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetGameMenu");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetGameMenu, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetGameMenu::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetGameState
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetGameState final
{
public:
	EGameState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetGameState) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetGameState");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetGameState) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetGameState");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetGameState, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetGameState::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetHDRAllowed
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetHDRAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetHDRAllowed) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetHDRAllowed");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetHDRAllowed) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetHDRAllowed");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetHDRAllowed, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetHDRAllowed::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetHUD final
{
public:
	class UTYVCHUD*                               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetHUD) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetHUD");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetHUD) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetHUD");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetHUD, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetHUD::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetImpactManager
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetImpactManager final
{
public:
	class AImpactManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetImpactManager) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetImpactManager");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetImpactManager) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetImpactManager");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetImpactManager, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetImpactManager::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetInfoForUser
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_GetInfoForUser final
{
public:
	class FString                                 InID;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFetched;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetInfoForUser) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetInfoForUser");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetInfoForUser) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_GetInfoForUser");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetInfoForUser, InID) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetInfoForUser::InID' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetInfoForUser, OnFetched) == 0x000010, "Member 'ThankYouVeryCoolGameMode_GetInfoForUser::OnFetched' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetIsFading
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetIsFading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetIsFading) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetIsFading");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetIsFading) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetIsFading");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetIsFading, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetIsFading::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetIsInVictoryScreen
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetIsInVictoryScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetIsInVictoryScreen) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetIsInVictoryScreen");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetIsInVictoryScreen) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetIsInVictoryScreen");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetIsInVictoryScreen, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetIsInVictoryScreen::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetIsLoadingWidgetVisible
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetIsLoadingWidgetVisible::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetIsPaused
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetIsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetIsPaused) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetIsPaused");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetIsPaused) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetIsPaused");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetIsPaused, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetIsPaused::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetLeaderboardFor
// 0x0028 (0x0028 - 0x0000)
struct ThankYouVeryCoolGameMode_GetLeaderboardFor final
{
public:
	class FString                                 BoardName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(ELeaderboardResult LeaderboardResult, TArray<struct FTYVCSteamLeaderboardEntry>& EntryList, const struct FTYVCSteamLeaderboardEntry& User, const struct FTYVCLBReadQueryParams& LBReadQueryParams)> OnDone;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFriendsOnly;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetLeaderboardFor) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetLeaderboardFor");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetLeaderboardFor) == 0x000028, "Wrong size on ThankYouVeryCoolGameMode_GetLeaderboardFor");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetLeaderboardFor, BoardName) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetLeaderboardFor::BoardName' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetLeaderboardFor, OnDone) == 0x000010, "Member 'ThankYouVeryCoolGameMode_GetLeaderboardFor::OnDone' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetLeaderboardFor, bFriendsOnly) == 0x000020, "Member 'ThankYouVeryCoolGameMode_GetLeaderboardFor::bFriendsOnly' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetLevelForXP
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetLevelForXP final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetLevelForXP) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetLevelForXP");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetLevelForXP) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetLevelForXP");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetLevelForXP, InLevel) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetLevelForXP::InLevel' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetLevelForXP, ReturnValue) == 0x000004, "Member 'ThankYouVeryCoolGameMode_GetLevelForXP::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetMultiplierForMutator
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetMultiplierForMutator final
{
public:
	EGameModifier                                 InMut;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetMultiplierForMutator) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetMultiplierForMutator");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetMultiplierForMutator) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetMultiplierForMutator");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetMultiplierForMutator, InMut) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetMultiplierForMutator::InMut' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetMultiplierForMutator, ReturnValue) == 0x000004, "Member 'ThankYouVeryCoolGameMode_GetMultiplierForMutator::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetNameForMutator
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_GetNameForMutator final
{
public:
	EGameModifier                                 InMut;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetNameForMutator) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetNameForMutator");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetNameForMutator) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_GetNameForMutator");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetNameForMutator, InMut) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetNameForMutator::InMut' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetNameForMutator, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_GetNameForMutator::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetPlayerGodMode
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GetPlayerGodMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetPlayerGodMode) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GetPlayerGodMode");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetPlayerGodMode) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GetPlayerGodMode");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetPlayerGodMode, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetPlayerGodMode::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetPrimaryVoxelWorld
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld final
{
public:
	class APrimaryVoxelWorld*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetPrimaryVoxelWorld::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetRankingMultiplier
// 0x0018 (0x0018 - 0x0000)
struct ThankYouVeryCoolGameMode_GetRankingMultiplier final
{
public:
	TArray<EGameModifier>                         Modifiers;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetRankingMultiplier) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetRankingMultiplier");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetRankingMultiplier) == 0x000018, "Wrong size on ThankYouVeryCoolGameMode_GetRankingMultiplier");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRankingMultiplier, Modifiers) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetRankingMultiplier::Modifiers' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRankingMultiplier, ReturnValue) == 0x000010, "Member 'ThankYouVeryCoolGameMode_GetRankingMultiplier::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetRecordFromData
// 0x0030 (0x0030 - 0x0000)
struct ThankYouVeryCoolGameMode_GetRecordFromData final
{
public:
	TArray<int32>                                 InData;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FArcadeRecord                          ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetRecordFromData) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetRecordFromData");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetRecordFromData) == 0x000030, "Wrong size on ThankYouVeryCoolGameMode_GetRecordFromData");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRecordFromData, InData) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetRecordFromData::InData' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRecordFromData, ReturnValue) == 0x000010, "Member 'ThankYouVeryCoolGameMode_GetRecordFromData::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetRowForMutator
// 0x0088 (0x0088 - 0x0000)
struct ThankYouVeryCoolGameMode_GetRowForMutator final
{
public:
	EGameModifier                                 InMut;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMutatorData                           ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetRowForMutator) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetRowForMutator");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetRowForMutator) == 0x000088, "Wrong size on ThankYouVeryCoolGameMode_GetRowForMutator");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRowForMutator, InMut) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetRowForMutator::InMut' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetRowForMutator, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_GetRowForMutator::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetTheSquad
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetTheSquad final
{
public:
	class ASquad*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetTheSquad) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetTheSquad");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetTheSquad) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetTheSquad");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTheSquad, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetTheSquad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetTotalMultiplier
// 0x0028 (0x0028 - 0x0000)
struct ThankYouVeryCoolGameMode_GetTotalMultiplier final
{
public:
	EDifficulty                                   ForDiff;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGameModifier>                         Modifiers;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponBase>                WeaponClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetTotalMultiplier) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetTotalMultiplier");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetTotalMultiplier) == 0x000028, "Wrong size on ThankYouVeryCoolGameMode_GetTotalMultiplier");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTotalMultiplier, ForDiff) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetTotalMultiplier::ForDiff' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTotalMultiplier, Modifiers) == 0x000008, "Member 'ThankYouVeryCoolGameMode_GetTotalMultiplier::Modifiers' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTotalMultiplier, WeaponClass) == 0x000018, "Member 'ThankYouVeryCoolGameMode_GetTotalMultiplier::WeaponClass' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTotalMultiplier, ReturnValue) == 0x000020, "Member 'ThankYouVeryCoolGameMode_GetTotalMultiplier::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetTotalSRanks
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_GetTotalSRanks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetTotalSRanks) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetTotalSRanks");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetTotalSRanks) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_GetTotalSRanks");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetTotalSRanks, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetTotalSRanks::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetUnlocksForLevel
// 0x0018 (0x0018 - 0x0000)
struct ThankYouVeryCoolGameMode_GetUnlocksForLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUnlockData>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetUnlocksForLevel) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetUnlocksForLevel");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetUnlocksForLevel) == 0x000018, "Wrong size on ThankYouVeryCoolGameMode_GetUnlocksForLevel");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetUnlocksForLevel, Level) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetUnlocksForLevel::Level' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetUnlocksForLevel, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_GetUnlocksForLevel::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetVictoryWidget
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetVictoryWidget final
{
public:
	class UVictoryWidget*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetVictoryWidget) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetVictoryWidget");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetVictoryWidget) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetVictoryWidget");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetVictoryWidget, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetVictoryWidget::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetVideoCutscene
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_GetVideoCutscene final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetVideoCutscene) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_GetVideoCutscene");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetVideoCutscene) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_GetVideoCutscene");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetVideoCutscene, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetVideoCutscene::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GetXPForLevel
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_GetXPForLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GetXPForLevel) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_GetXPForLevel");
static_assert(sizeof(ThankYouVeryCoolGameMode_GetXPForLevel) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_GetXPForLevel");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetXPForLevel, InLevel) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GetXPForLevel::InLevel' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_GetXPForLevel, ReturnValue) == 0x000004, "Member 'ThankYouVeryCoolGameMode_GetXPForLevel::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.GodMode
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_GodMode final
{
public:
	bool                                          bEnableGodMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_GodMode) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_GodMode");
static_assert(sizeof(ThankYouVeryCoolGameMode_GodMode) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_GodMode");
static_assert(offsetof(ThankYouVeryCoolGameMode_GodMode, bEnableGodMode) == 0x000000, "Member 'ThankYouVeryCoolGameMode_GodMode::bEnableGodMode' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsGenericKeyUnlocked
// 0x0040 (0x0040 - 0x0000)
struct ThankYouVeryCoolGameMode_IsGenericKeyUnlocked final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnlockInfo;                                        // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   HowToUnlockInfo;                                   // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_IsGenericKeyUnlocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked) == 0x000040, "Wrong size on ThankYouVeryCoolGameMode_IsGenericKeyUnlocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked, InKey) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsGenericKeyUnlocked::InKey' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked, UnlockInfo) == 0x000008, "Member 'ThankYouVeryCoolGameMode_IsGenericKeyUnlocked::UnlockInfo' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked, HowToUnlockInfo) == 0x000020, "Member 'ThankYouVeryCoolGameMode_IsGenericKeyUnlocked::HowToUnlockInfo' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsGenericKeyUnlocked, ReturnValue) == 0x000038, "Member 'ThankYouVeryCoolGameMode_IsGenericKeyUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsKeyUnlocked
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_IsKeyUnlocked final
{
public:
	class FName                                   InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLevel;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsKeyUnlocked) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_IsKeyUnlocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsKeyUnlocked) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_IsKeyUnlocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsKeyUnlocked, InKey) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsKeyUnlocked::InKey' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsKeyUnlocked, OutLevel) == 0x000008, "Member 'ThankYouVeryCoolGameMode_IsKeyUnlocked::OutLevel' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsKeyUnlocked, ReturnValue) == 0x00000C, "Member 'ThankYouVeryCoolGameMode_IsKeyUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsMutUnlocked
// 0x000C (0x000C - 0x0000)
struct ThankYouVeryCoolGameMode_IsMutUnlocked final
{
public:
	EGameModifier                                 InKey;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutLevel;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsMutUnlocked) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_IsMutUnlocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsMutUnlocked) == 0x00000C, "Wrong size on ThankYouVeryCoolGameMode_IsMutUnlocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsMutUnlocked, InKey) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsMutUnlocked::InKey' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsMutUnlocked, OutLevel) == 0x000004, "Member 'ThankYouVeryCoolGameMode_IsMutUnlocked::OutLevel' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsMutUnlocked, ReturnValue) == 0x000008, "Member 'ThankYouVeryCoolGameMode_IsMutUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsRunningCheats
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_IsRunningCheats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsRunningCheats) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_IsRunningCheats");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsRunningCheats) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_IsRunningCheats");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsRunningCheats, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsRunningCheats::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsShineUnlocked
// 0x0002 (0x0002 - 0x0000)
struct ThankYouVeryCoolGameMode_IsShineUnlocked final
{
public:
	EShineLevel                                   Shine;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsShineUnlocked) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_IsShineUnlocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsShineUnlocked) == 0x000002, "Wrong size on ThankYouVeryCoolGameMode_IsShineUnlocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsShineUnlocked, Shine) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsShineUnlocked::Shine' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsShineUnlocked, ReturnValue) == 0x000001, "Member 'ThankYouVeryCoolGameMode_IsShineUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsSpawningActive
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_IsSpawningActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsSpawningActive) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_IsSpawningActive");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsSpawningActive) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_IsSpawningActive");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsSpawningActive, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsSpawningActive::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.IsSteamLoggedOn
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_IsSteamLoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_IsSteamLoggedOn) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_IsSteamLoggedOn");
static_assert(sizeof(ThankYouVeryCoolGameMode_IsSteamLoggedOn) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_IsSteamLoggedOn");
static_assert(offsetof(ThankYouVeryCoolGameMode_IsSteamLoggedOn, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_IsSteamLoggedOn::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.KnockdownAll
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_KnockdownAll final
{
public:
	float                                         WithForce;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_KnockdownAll) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_KnockdownAll");
static_assert(sizeof(ThankYouVeryCoolGameMode_KnockdownAll) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_KnockdownAll");
static_assert(offsetof(ThankYouVeryCoolGameMode_KnockdownAll, WithForce) == 0x000000, "Member 'ThankYouVeryCoolGameMode_KnockdownAll::WithForce' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.LoginEpic
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_LoginEpic final
{
public:
	TDelegate<void()>                             OnDone;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_LoginEpic) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_LoginEpic");
static_assert(sizeof(ThankYouVeryCoolGameMode_LoginEpic) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_LoginEpic");
static_assert(offsetof(ThankYouVeryCoolGameMode_LoginEpic, OnDone) == 0x000000, "Member 'ThankYouVeryCoolGameMode_LoginEpic::OnDone' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.MovePawnAlongLoadingSpline
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline");
static_assert(sizeof(ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline");
static_assert(offsetof(ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline, DeltaTime) == 0x000000, "Member 'ThankYouVeryCoolGameMode_MovePawnAlongLoadingSpline::DeltaTime' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.NewGamePlusUnlocked
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_NewGamePlusUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_NewGamePlusUnlocked) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_NewGamePlusUnlocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_NewGamePlusUnlocked) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_NewGamePlusUnlocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_NewGamePlusUnlocked, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_NewGamePlusUnlocked::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.NotifyLocChanged
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_NotifyLocChanged final
{
public:
	class FString                                 NewLoc;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_NotifyLocChanged) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_NotifyLocChanged");
static_assert(sizeof(ThankYouVeryCoolGameMode_NotifyLocChanged) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_NotifyLocChanged");
static_assert(offsetof(ThankYouVeryCoolGameMode_NotifyLocChanged, NewLoc) == 0x000000, "Member 'ThankYouVeryCoolGameMode_NotifyLocChanged::NewLoc' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.NotifyPropExploded
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_NotifyPropExploded final
{
public:
	class APropVoxelWorld*                        Exploded;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_NotifyPropExploded) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_NotifyPropExploded");
static_assert(sizeof(ThankYouVeryCoolGameMode_NotifyPropExploded) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_NotifyPropExploded");
static_assert(offsetof(ThankYouVeryCoolGameMode_NotifyPropExploded, Exploded) == 0x000000, "Member 'ThankYouVeryCoolGameMode_NotifyPropExploded::Exploded' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.PreCacheVoxelWorlds
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_PreCacheVoxelWorlds final
{
public:
	bool                                          bShouldCache;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_PreCacheVoxelWorlds) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_PreCacheVoxelWorlds");
static_assert(sizeof(ThankYouVeryCoolGameMode_PreCacheVoxelWorlds) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_PreCacheVoxelWorlds");
static_assert(offsetof(ThankYouVeryCoolGameMode_PreCacheVoxelWorlds, bShouldCache) == 0x000000, "Member 'ThankYouVeryCoolGameMode_PreCacheVoxelWorlds::bShouldCache' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ResetInputMappings
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_ResetInputMappings final
{
public:
	bool                                          Save;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ResetInputMappings) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_ResetInputMappings");
static_assert(sizeof(ThankYouVeryCoolGameMode_ResetInputMappings) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_ResetInputMappings");
static_assert(offsetof(ThankYouVeryCoolGameMode_ResetInputMappings, Save) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ResetInputMappings::Save' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ResetLevelQuick
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_ResetLevelQuick final
{
public:
	bool                                          bForEditor;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ResetLevelQuick) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_ResetLevelQuick");
static_assert(sizeof(ThankYouVeryCoolGameMode_ResetLevelQuick) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_ResetLevelQuick");
static_assert(offsetof(ThankYouVeryCoolGameMode_ResetLevelQuick, bForEditor) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ResetLevelQuick::bForEditor' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SaveArcadeProgress
// 0x0028 (0x0028 - 0x0000)
struct ThankYouVeryCoolGameMode_SaveArcadeProgress final
{
public:
	int32                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelEditorSave*                       ForLevel;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreThisRound;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThisRound;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldScore;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldTime;                                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERank                                         RankThisRound;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_SaveArcadeProgress) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_SaveArcadeProgress");
static_assert(sizeof(ThankYouVeryCoolGameMode_SaveArcadeProgress) == 0x000028, "Wrong size on ThankYouVeryCoolGameMode_SaveArcadeProgress");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, NewScore) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::NewScore' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, ForLevel) == 0x000008, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::ForLevel' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, ScoreThisRound) == 0x000010, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::ScoreThisRound' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, TimeThisRound) == 0x000014, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::TimeThisRound' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, OldScore) == 0x000018, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::OldScore' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, OldTime) == 0x00001C, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::OldTime' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, RankThisRound) == 0x000020, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::RankThisRound' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeProgress, ReturnValue) == 0x000021, "Member 'ThankYouVeryCoolGameMode_SaveArcadeProgress::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SaveArcadeSetup
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SaveArcadeSetup final
{
public:
	bool                                          bForCampaign;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SaveArcadeSetup) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SaveArcadeSetup");
static_assert(sizeof(ThankYouVeryCoolGameMode_SaveArcadeSetup) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SaveArcadeSetup");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveArcadeSetup, bForCampaign) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SaveArcadeSetup::bForCampaign' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SaveGameSettings
// 0x0090 (0x0090 - 0x0000)
struct ThankYouVeryCoolGameMode_SaveGameSettings final
{
public:
	struct FGameSettings                          InSettings;                                        // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SaveGameSettings) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_SaveGameSettings");
static_assert(sizeof(ThankYouVeryCoolGameMode_SaveGameSettings) == 0x000090, "Wrong size on ThankYouVeryCoolGameMode_SaveGameSettings");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveGameSettings, InSettings) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SaveGameSettings::InSettings' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SaveJacketAndCannon
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_SaveJacketAndCannon final
{
public:
	class FName                                   JacketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CannonName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SaveJacketAndCannon) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_SaveJacketAndCannon");
static_assert(sizeof(ThankYouVeryCoolGameMode_SaveJacketAndCannon) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_SaveJacketAndCannon");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveJacketAndCannon, JacketName) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SaveJacketAndCannon::JacketName' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveJacketAndCannon, CannonName) == 0x000008, "Member 'ThankYouVeryCoolGameMode_SaveJacketAndCannon::CannonName' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SaveRogueConfig
// 0x0009 (0x0009 - 0x0000)
struct ThankYouVeryCoolGameMode_SaveRogueConfig final
{
public:
	struct FRogueConfig                           InConfig;                                          // 0x0000(0x0009)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SaveRogueConfig) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SaveRogueConfig");
static_assert(sizeof(ThankYouVeryCoolGameMode_SaveRogueConfig) == 0x000009, "Wrong size on ThankYouVeryCoolGameMode_SaveRogueConfig");
static_assert(offsetof(ThankYouVeryCoolGameMode_SaveRogueConfig, InConfig) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SaveRogueConfig::InConfig' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetAllowGameplaySound
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetAllowGameplaySound final
{
public:
	bool                                          bAllow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetAllowGameplaySound) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetAllowGameplaySound");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetAllowGameplaySound) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetAllowGameplaySound");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetAllowGameplaySound, bAllow) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetAllowGameplaySound::bAllow' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetDifficult
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetDifficult final
{
public:
	EDifficulty                                   InDiff;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetDifficult) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetDifficult");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetDifficult) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetDifficult");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetDifficult, InDiff) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetDifficult::InDiff' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetGameNoise
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetGameNoise final
{
public:
	bool                                          bCanHear;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetGameNoise) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetGameNoise");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetGameNoise) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetGameNoise");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetGameNoise, bCanHear) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetGameNoise::bCanHear' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetGameType
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetGameType final
{
public:
	EGameType                                     InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetGameType) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetGameType");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetGameType) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetGameType");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetGameType, InType) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetGameType::InType' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetHighesLevel
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_SetHighesLevel final
{
public:
	int32                                         KeyName;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetHighesLevel) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_SetHighesLevel");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetHighesLevel) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_SetHighesLevel");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetHighesLevel, KeyName) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetHighesLevel::KeyName' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetIsInVictoryScreen
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetIsInVictoryScreen final
{
public:
	bool                                          IsInVictoryScreen;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetIsInVictoryScreen) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetIsInVictoryScreen");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetIsInVictoryScreen) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetIsInVictoryScreen");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetIsInVictoryScreen, IsInVictoryScreen) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetIsInVictoryScreen::IsInVictoryScreen' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetIsPaused
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetIsPaused final
{
public:
	bool                                          IsPaused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetIsPaused) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetIsPaused");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetIsPaused) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetIsPaused");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetIsPaused, IsPaused) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetIsPaused::IsPaused' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetKeepNPCsStocked
// 0x0028 (0x0028 - 0x0000)
struct ThankYouVeryCoolGameMode_SetKeepNPCsStocked final
{
public:
	struct FRespawnConfig                         InConfig;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetKeepNPCsStocked) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_SetKeepNPCsStocked");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetKeepNPCsStocked) == 0x000028, "Wrong size on ThankYouVeryCoolGameMode_SetKeepNPCsStocked");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetKeepNPCsStocked, InConfig) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetKeepNPCsStocked::InConfig' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_SetMouseSensitivity final
{
public:
	float                                         NewSens;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetMouseSensitivity) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_SetMouseSensitivity");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetMouseSensitivity) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_SetMouseSensitivity");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetMouseSensitivity, NewSens) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetMouseSensitivity::NewSens' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetNPCsToSpawnRed
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetNPCsToSpawnRed final
{
public:
	bool                                          bShouldDo;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetNPCsToSpawnRed) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetNPCsToSpawnRed");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetNPCsToSpawnRed) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetNPCsToSpawnRed");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetNPCsToSpawnRed, bShouldDo) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetNPCsToSpawnRed::bShouldDo' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetPlayerGodMode
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_SetPlayerGodMode final
{
public:
	bool                                          bEnableGodMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetPlayerGodMode) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_SetPlayerGodMode");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetPlayerGodMode) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_SetPlayerGodMode");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetPlayerGodMode, bEnableGodMode) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetPlayerGodMode::bEnableGodMode' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.SetVideoCutscene
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_SetVideoCutscene final
{
public:
	class FString                                 videoName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_SetVideoCutscene) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_SetVideoCutscene");
static_assert(sizeof(ThankYouVeryCoolGameMode_SetVideoCutscene) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_SetVideoCutscene");
static_assert(offsetof(ThankYouVeryCoolGameMode_SetVideoCutscene, videoName) == 0x000000, "Member 'ThankYouVeryCoolGameMode_SetVideoCutscene::videoName' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ShouldRemovePatch2BigLevels
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels");
static_assert(sizeof(ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels");
static_assert(offsetof(ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels, ReturnValue) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ShouldRemovePatch2BigLevels::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ShowUserProfile
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_ShowUserProfile final
{
public:
	class FString                                 InPlatformOnlineID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ShowUserProfile) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_ShowUserProfile");
static_assert(sizeof(ThankYouVeryCoolGameMode_ShowUserProfile) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_ShowUserProfile");
static_assert(offsetof(ThankYouVeryCoolGameMode_ShowUserProfile, InPlatformOnlineID) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ShowUserProfile::InPlatformOnlineID' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.ShowVictoryData
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_ShowVictoryData final
{
public:
	bool                                          bForCampaign;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_ShowVictoryData) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_ShowVictoryData");
static_assert(sizeof(ThankYouVeryCoolGameMode_ShowVictoryData) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_ShowVictoryData");
static_assert(offsetof(ThankYouVeryCoolGameMode_ShowVictoryData, bForCampaign) == 0x000000, "Member 'ThankYouVeryCoolGameMode_ShowVictoryData::bForCampaign' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.TeleportInNPC
// 0x0050 (0x0050 - 0x0000)
struct ThankYouVeryCoolGameMode_TeleportInNPC final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ANPC>                       ClassToSpawn;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACampaignMarker*                        MySpawnMarker;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFX;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolGameMode_TeleportInNPC) == 0x000010, "Wrong alignment on ThankYouVeryCoolGameMode_TeleportInNPC");
static_assert(sizeof(ThankYouVeryCoolGameMode_TeleportInNPC) == 0x000050, "Wrong size on ThankYouVeryCoolGameMode_TeleportInNPC");
static_assert(offsetof(ThankYouVeryCoolGameMode_TeleportInNPC, Transform) == 0x000000, "Member 'ThankYouVeryCoolGameMode_TeleportInNPC::Transform' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_TeleportInNPC, ClassToSpawn) == 0x000030, "Member 'ThankYouVeryCoolGameMode_TeleportInNPC::ClassToSpawn' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_TeleportInNPC, MySpawnMarker) == 0x000038, "Member 'ThankYouVeryCoolGameMode_TeleportInNPC::MySpawnMarker' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_TeleportInNPC, bSkipFX) == 0x000040, "Member 'ThankYouVeryCoolGameMode_TeleportInNPC::bSkipFX' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.TYVCDeadZone
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_TYVCDeadZone final
{
public:
	float                                         InZone;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_TYVCDeadZone) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_TYVCDeadZone");
static_assert(sizeof(ThankYouVeryCoolGameMode_TYVCDeadZone) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_TYVCDeadZone");
static_assert(offsetof(ThankYouVeryCoolGameMode_TYVCDeadZone, InZone) == 0x000000, "Member 'ThankYouVeryCoolGameMode_TYVCDeadZone::InZone' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.TYVCJumpTime
// 0x0004 (0x0004 - 0x0000)
struct ThankYouVeryCoolGameMode_TYVCJumpTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_TYVCJumpTime) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_TYVCJumpTime");
static_assert(sizeof(ThankYouVeryCoolGameMode_TYVCJumpTime) == 0x000004, "Wrong size on ThankYouVeryCoolGameMode_TYVCJumpTime");
static_assert(offsetof(ThankYouVeryCoolGameMode_TYVCJumpTime, InTime) == 0x000000, "Member 'ThankYouVeryCoolGameMode_TYVCJumpTime::InTime' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.UnlockCheev
// 0x0010 (0x0010 - 0x0000)
struct ThankYouVeryCoolGameMode_UnlockCheev final
{
public:
	class FString                                 ToUnlock;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_UnlockCheev) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_UnlockCheev");
static_assert(sizeof(ThankYouVeryCoolGameMode_UnlockCheev) == 0x000010, "Wrong size on ThankYouVeryCoolGameMode_UnlockCheev");
static_assert(offsetof(ThankYouVeryCoolGameMode_UnlockCheev, ToUnlock) == 0x000000, "Member 'ThankYouVeryCoolGameMode_UnlockCheev::ToUnlock' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.UnlockKeyAndSave
// 0x0008 (0x0008 - 0x0000)
struct ThankYouVeryCoolGameMode_UnlockKeyAndSave final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_UnlockKeyAndSave) == 0x000004, "Wrong alignment on ThankYouVeryCoolGameMode_UnlockKeyAndSave");
static_assert(sizeof(ThankYouVeryCoolGameMode_UnlockKeyAndSave) == 0x000008, "Wrong size on ThankYouVeryCoolGameMode_UnlockKeyAndSave");
static_assert(offsetof(ThankYouVeryCoolGameMode_UnlockKeyAndSave, KeyName) == 0x000000, "Member 'ThankYouVeryCoolGameMode_UnlockKeyAndSave::KeyName' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.UserChooseShiny
// 0x0001 (0x0001 - 0x0000)
struct ThankYouVeryCoolGameMode_UserChooseShiny final
{
public:
	EShineLevel                                   InLvl;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_UserChooseShiny) == 0x000001, "Wrong alignment on ThankYouVeryCoolGameMode_UserChooseShiny");
static_assert(sizeof(ThankYouVeryCoolGameMode_UserChooseShiny) == 0x000001, "Wrong size on ThankYouVeryCoolGameMode_UserChooseShiny");
static_assert(offsetof(ThankYouVeryCoolGameMode_UserChooseShiny, InLvl) == 0x000000, "Member 'ThankYouVeryCoolGameMode_UserChooseShiny::InLvl' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.WriteToLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_WriteToLeaderboard final
{
public:
	class UArcadeLevelAsset*                      ForAsset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RecordData;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_WriteToLeaderboard) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_WriteToLeaderboard");
static_assert(sizeof(ThankYouVeryCoolGameMode_WriteToLeaderboard) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_WriteToLeaderboard");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboard, ForAsset) == 0x000000, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboard::ForAsset' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboard, Score) == 0x000008, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboard::Score' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboard, Time) == 0x00000C, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboard::Time' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboard, RecordData) == 0x000010, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboard::RecordData' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolGameMode.WriteToLeaderboardC
// 0x0020 (0x0020 - 0x0000)
struct ThankYouVeryCoolGameMode_WriteToLeaderboardC final
{
public:
	class UArcadeLevelAsset*                      ForAsset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RecordData;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThankYouVeryCoolGameMode_WriteToLeaderboardC) == 0x000008, "Wrong alignment on ThankYouVeryCoolGameMode_WriteToLeaderboardC");
static_assert(sizeof(ThankYouVeryCoolGameMode_WriteToLeaderboardC) == 0x000020, "Wrong size on ThankYouVeryCoolGameMode_WriteToLeaderboardC");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboardC, ForAsset) == 0x000000, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboardC::ForAsset' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboardC, Score) == 0x000008, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboardC::Score' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboardC, Time) == 0x00000C, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboardC::Time' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolGameMode_WriteToLeaderboardC, RecordData) == 0x000010, "Member 'ThankYouVeryCoolGameMode_WriteToLeaderboardC::RecordData' has a wrong offset!");

// Function ThankYouVeryCool.ThankYouVeryCoolProjectile.OnHit
// 0x00B0 (0x00B0 - 0x0000)
struct ThankYouVeryCoolProjectile_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThankYouVeryCoolProjectile_OnHit) == 0x000008, "Wrong alignment on ThankYouVeryCoolProjectile_OnHit");
static_assert(sizeof(ThankYouVeryCoolProjectile_OnHit) == 0x0000B0, "Wrong size on ThankYouVeryCoolProjectile_OnHit");
static_assert(offsetof(ThankYouVeryCoolProjectile_OnHit, HitComp) == 0x000000, "Member 'ThankYouVeryCoolProjectile_OnHit::HitComp' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolProjectile_OnHit, OtherActor) == 0x000008, "Member 'ThankYouVeryCoolProjectile_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolProjectile_OnHit, OtherComp) == 0x000010, "Member 'ThankYouVeryCoolProjectile_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolProjectile_OnHit, NormalImpulse) == 0x000018, "Member 'ThankYouVeryCoolProjectile_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ThankYouVeryCoolProjectile_OnHit, Hit) == 0x000024, "Member 'ThankYouVeryCoolProjectile_OnHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.TurretHead.Shoot
// 0x0018 (0x0018 - 0x0000)
struct TurretHead_Shoot final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TurretHead_Shoot) == 0x000008, "Wrong alignment on TurretHead_Shoot");
static_assert(sizeof(TurretHead_Shoot) == 0x000018, "Wrong size on TurretHead_Shoot");
static_assert(offsetof(TurretHead_Shoot, Target) == 0x000000, "Member 'TurretHead_Shoot::Target' has a wrong offset!");
static_assert(offsetof(TurretHead_Shoot, Origin) == 0x000008, "Member 'TurretHead_Shoot::Origin' has a wrong offset!");

// Function ThankYouVeryCool.TutorialWidget.SetCompleted
// 0x0004 (0x0004 - 0x0000)
struct TutorialWidget_SetCompleted final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialWidget_SetCompleted) == 0x000004, "Wrong alignment on TutorialWidget_SetCompleted");
static_assert(sizeof(TutorialWidget_SetCompleted) == 0x000004, "Wrong size on TutorialWidget_SetCompleted");
static_assert(offsetof(TutorialWidget_SetCompleted, Num) == 0x000000, "Member 'TutorialWidget_SetCompleted::Num' has a wrong offset!");

// Function ThankYouVeryCool.TutorialWidget.SetTotal
// 0x0004 (0x0004 - 0x0000)
struct TutorialWidget_SetTotal final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialWidget_SetTotal) == 0x000004, "Wrong alignment on TutorialWidget_SetTotal");
static_assert(sizeof(TutorialWidget_SetTotal) == 0x000004, "Wrong size on TutorialWidget_SetTotal");
static_assert(offsetof(TutorialWidget_SetTotal, Total) == 0x000000, "Member 'TutorialWidget_SetTotal::Total' has a wrong offset!");

// Function ThankYouVeryCool.TYVCAnimInstance.SetALSMovementModeC
// 0x0001 (0x0001 - 0x0000)
struct TYVCAnimInstance_SetALSMovementModeC final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCAnimInstance_SetALSMovementModeC) == 0x000001, "Wrong alignment on TYVCAnimInstance_SetALSMovementModeC");
static_assert(sizeof(TYVCAnimInstance_SetALSMovementModeC) == 0x000001, "Wrong size on TYVCAnimInstance_SetALSMovementModeC");
static_assert(offsetof(TYVCAnimInstance_SetALSMovementModeC, MovementMode) == 0x000000, "Member 'TYVCAnimInstance_SetALSMovementModeC::MovementMode' has a wrong offset!");

// Function ThankYouVeryCool.TYVCAnimInstance.SetWeaponReadyOnMesh
// 0x0001 (0x0001 - 0x0000)
struct TYVCAnimInstance_SetWeaponReadyOnMesh final
{
public:
	bool                                          bIsReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCAnimInstance_SetWeaponReadyOnMesh) == 0x000001, "Wrong alignment on TYVCAnimInstance_SetWeaponReadyOnMesh");
static_assert(sizeof(TYVCAnimInstance_SetWeaponReadyOnMesh) == 0x000001, "Wrong size on TYVCAnimInstance_SetWeaponReadyOnMesh");
static_assert(offsetof(TYVCAnimInstance_SetWeaponReadyOnMesh, bIsReady) == 0x000000, "Member 'TYVCAnimInstance_SetWeaponReadyOnMesh::bIsReady' has a wrong offset!");

// Function ThankYouVeryCool.TYVCAnimInstance.UpdateAnimationProperties
// 0x0004 (0x0004 - 0x0000)
struct TYVCAnimInstance_UpdateAnimationProperties final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCAnimInstance_UpdateAnimationProperties) == 0x000004, "Wrong alignment on TYVCAnimInstance_UpdateAnimationProperties");
static_assert(sizeof(TYVCAnimInstance_UpdateAnimationProperties) == 0x000004, "Wrong size on TYVCAnimInstance_UpdateAnimationProperties");
static_assert(offsetof(TYVCAnimInstance_UpdateAnimationProperties, DeltaTime) == 0x000000, "Member 'TYVCAnimInstance_UpdateAnimationProperties::DeltaTime' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.GetCurrentPlatform
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_GetCurrentPlatform final
{
public:
	EPlatformName                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_GetCurrentPlatform) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_GetCurrentPlatform");
static_assert(sizeof(TYVCConsoleFunctionLibrary_GetCurrentPlatform) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_GetCurrentPlatform");
static_assert(offsetof(TYVCConsoleFunctionLibrary_GetCurrentPlatform, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_GetCurrentPlatform::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.GetCurrentPlatformRegion
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion final
{
public:
	EPlatformRegion                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion");
static_assert(sizeof(TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion");
static_assert(offsetof(TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_GetCurrentPlatformRegion::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.GetGamepadButtonIcon
// 0x0028 (0x0028 - 0x0000)
struct TYVCConsoleFunctionLibrary_GetGamepadButtonIcon final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_GetGamepadButtonIcon) == 0x000008, "Wrong alignment on TYVCConsoleFunctionLibrary_GetGamepadButtonIcon");
static_assert(sizeof(TYVCConsoleFunctionLibrary_GetGamepadButtonIcon) == 0x000028, "Wrong size on TYVCConsoleFunctionLibrary_GetGamepadButtonIcon");
static_assert(offsetof(TYVCConsoleFunctionLibrary_GetGamepadButtonIcon, WorldContextObject) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_GetGamepadButtonIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_GetGamepadButtonIcon, Key) == 0x000008, "Member 'TYVCConsoleFunctionLibrary_GetGamepadButtonIcon::Key' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_GetGamepadButtonIcon, ReturnValue) == 0x000020, "Member 'TYVCConsoleFunctionLibrary_GetGamepadButtonIcon::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsDemo
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsDemo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsDemo) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsDemo");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsDemo) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_IsDemo");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsDemo, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsDemo::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsEnterButtonSwapped
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsEnterButtonSwapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsEnterButtonSwapped) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsEnterButtonSwapped");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsEnterButtonSwapped) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_IsEnterButtonSwapped");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsEnterButtonSwapped, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsEnterButtonSwapped::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsPlatform
// 0x0002 (0x0002 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsPlatform final
{
public:
	EPlatformName                                 PlatformName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsPlatform) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsPlatform");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsPlatform) == 0x000002, "Wrong size on TYVCConsoleFunctionLibrary_IsPlatform");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsPlatform, PlatformName) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsPlatform::PlatformName' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsPlatform, ReturnValue) == 0x000001, "Member 'TYVCConsoleFunctionLibrary_IsPlatform::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsPlatformRegion
// 0x0002 (0x0002 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsPlatformRegion final
{
public:
	EPlatformRegion                               PlatformRegion;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsPlatformRegion) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsPlatformRegion");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsPlatformRegion) == 0x000002, "Wrong size on TYVCConsoleFunctionLibrary_IsPlatformRegion");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsPlatformRegion, PlatformRegion) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsPlatformRegion::PlatformRegion' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsPlatformRegion, ReturnValue) == 0x000001, "Member 'TYVCConsoleFunctionLibrary_IsPlatformRegion::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsSwitchPortable
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsSwitchPortable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsSwitchPortable) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsSwitchPortable");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsSwitchPortable) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_IsSwitchPortable");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsSwitchPortable, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsSwitchPortable::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.IsXboxSeriesS
// 0x0001 (0x0001 - 0x0000)
struct TYVCConsoleFunctionLibrary_IsXboxSeriesS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_IsXboxSeriesS) == 0x000001, "Wrong alignment on TYVCConsoleFunctionLibrary_IsXboxSeriesS");
static_assert(sizeof(TYVCConsoleFunctionLibrary_IsXboxSeriesS) == 0x000001, "Wrong size on TYVCConsoleFunctionLibrary_IsXboxSeriesS");
static_assert(offsetof(TYVCConsoleFunctionLibrary_IsXboxSeriesS, ReturnValue) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_IsXboxSeriesS::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.PlatformNameFromString
// 0x0018 (0x0018 - 0x0000)
struct TYVCConsoleFunctionLibrary_PlatformNameFromString final
{
public:
	class FString                                 PlatformNameString;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformName                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCConsoleFunctionLibrary_PlatformNameFromString) == 0x000008, "Wrong alignment on TYVCConsoleFunctionLibrary_PlatformNameFromString");
static_assert(sizeof(TYVCConsoleFunctionLibrary_PlatformNameFromString) == 0x000018, "Wrong size on TYVCConsoleFunctionLibrary_PlatformNameFromString");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformNameFromString, PlatformNameString) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_PlatformNameFromString::PlatformNameString' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformNameFromString, ReturnValue) == 0x000010, "Member 'TYVCConsoleFunctionLibrary_PlatformNameFromString::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.PlatformNameToString
// 0x0018 (0x0018 - 0x0000)
struct TYVCConsoleFunctionLibrary_PlatformNameToString final
{
public:
	EPlatformName                                 PlatformName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_PlatformNameToString) == 0x000008, "Wrong alignment on TYVCConsoleFunctionLibrary_PlatformNameToString");
static_assert(sizeof(TYVCConsoleFunctionLibrary_PlatformNameToString) == 0x000018, "Wrong size on TYVCConsoleFunctionLibrary_PlatformNameToString");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformNameToString, PlatformName) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_PlatformNameToString::PlatformName' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformNameToString, ReturnValue) == 0x000008, "Member 'TYVCConsoleFunctionLibrary_PlatformNameToString::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.PlatformRegionFromString
// 0x0018 (0x0018 - 0x0000)
struct TYVCConsoleFunctionLibrary_PlatformRegionFromString final
{
public:
	class FString                                 PlatformRegionString;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformRegion                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCConsoleFunctionLibrary_PlatformRegionFromString) == 0x000008, "Wrong alignment on TYVCConsoleFunctionLibrary_PlatformRegionFromString");
static_assert(sizeof(TYVCConsoleFunctionLibrary_PlatformRegionFromString) == 0x000018, "Wrong size on TYVCConsoleFunctionLibrary_PlatformRegionFromString");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformRegionFromString, PlatformRegionString) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_PlatformRegionFromString::PlatformRegionString' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformRegionFromString, ReturnValue) == 0x000010, "Member 'TYVCConsoleFunctionLibrary_PlatformRegionFromString::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCConsoleFunctionLibrary.PlatformRegionToString
// 0x0018 (0x0018 - 0x0000)
struct TYVCConsoleFunctionLibrary_PlatformRegionToString final
{
public:
	EPlatformRegion                               PlatformRegion;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCConsoleFunctionLibrary_PlatformRegionToString) == 0x000008, "Wrong alignment on TYVCConsoleFunctionLibrary_PlatformRegionToString");
static_assert(sizeof(TYVCConsoleFunctionLibrary_PlatformRegionToString) == 0x000018, "Wrong size on TYVCConsoleFunctionLibrary_PlatformRegionToString");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformRegionToString, PlatformRegion) == 0x000000, "Member 'TYVCConsoleFunctionLibrary_PlatformRegionToString::PlatformRegion' has a wrong offset!");
static_assert(offsetof(TYVCConsoleFunctionLibrary_PlatformRegionToString, ReturnValue) == 0x000008, "Member 'TYVCConsoleFunctionLibrary_PlatformRegionToString::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCProbeLight.UpdateLight
// 0x0014 (0x0014 - 0x0000)
struct TYVCProbeLight_UpdateLight final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCProbeLight_UpdateLight) == 0x000004, "Wrong alignment on TYVCProbeLight_UpdateLight");
static_assert(sizeof(TYVCProbeLight_UpdateLight) == 0x000014, "Wrong size on TYVCProbeLight_UpdateLight");
static_assert(offsetof(TYVCProbeLight_UpdateLight, Color) == 0x000000, "Member 'TYVCProbeLight_UpdateLight::Color' has a wrong offset!");
static_assert(offsetof(TYVCProbeLight_UpdateLight, Brightness) == 0x000010, "Member 'TYVCProbeLight_UpdateLight::Brightness' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.DoInitialLoad
// 0x0018 (0x0018 - 0x0000)
struct TYVCSaveController_DoInitialLoad final
{
public:
	TArray<class FString>                         SlotsToLoad;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_DoInitialLoad) == 0x000008, "Wrong alignment on TYVCSaveController_DoInitialLoad");
static_assert(sizeof(TYVCSaveController_DoInitialLoad) == 0x000018, "Wrong size on TYVCSaveController_DoInitialLoad");
static_assert(offsetof(TYVCSaveController_DoInitialLoad, SlotsToLoad) == 0x000000, "Member 'TYVCSaveController_DoInitialLoad::SlotsToLoad' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_DoInitialLoad, ReturnValue) == 0x000010, "Member 'TYVCSaveController_DoInitialLoad::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.GetAnySaveInProgress
// 0x0001 (0x0001 - 0x0000)
struct TYVCSaveController_GetAnySaveInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSaveController_GetAnySaveInProgress) == 0x000001, "Wrong alignment on TYVCSaveController_GetAnySaveInProgress");
static_assert(sizeof(TYVCSaveController_GetAnySaveInProgress) == 0x000001, "Wrong size on TYVCSaveController_GetAnySaveInProgress");
static_assert(offsetof(TYVCSaveController_GetAnySaveInProgress, ReturnValue) == 0x000000, "Member 'TYVCSaveController_GetAnySaveInProgress::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.GetInitialLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct TYVCSaveController_GetInitialLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSaveController_GetInitialLoadComplete) == 0x000001, "Wrong alignment on TYVCSaveController_GetInitialLoadComplete");
static_assert(sizeof(TYVCSaveController_GetInitialLoadComplete) == 0x000001, "Wrong size on TYVCSaveController_GetInitialLoadComplete");
static_assert(offsetof(TYVCSaveController_GetInitialLoadComplete, ReturnValue) == 0x000000, "Member 'TYVCSaveController_GetInitialLoadComplete::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.GetSaveExists
// 0x0018 (0x0018 - 0x0000)
struct TYVCSaveController_GetSaveExists final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_GetSaveExists) == 0x000008, "Wrong alignment on TYVCSaveController_GetSaveExists");
static_assert(sizeof(TYVCSaveController_GetSaveExists) == 0x000018, "Wrong size on TYVCSaveController_GetSaveExists");
static_assert(offsetof(TYVCSaveController_GetSaveExists, SlotName) == 0x000000, "Member 'TYVCSaveController_GetSaveExists::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_GetSaveExists, ReturnValue) == 0x000010, "Member 'TYVCSaveController_GetSaveExists::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.GetSaveInProgress
// 0x0018 (0x0018 - 0x0000)
struct TYVCSaveController_GetSaveInProgress final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_GetSaveInProgress) == 0x000008, "Wrong alignment on TYVCSaveController_GetSaveInProgress");
static_assert(sizeof(TYVCSaveController_GetSaveInProgress) == 0x000018, "Wrong size on TYVCSaveController_GetSaveInProgress");
static_assert(offsetof(TYVCSaveController_GetSaveInProgress, SlotName) == 0x000000, "Member 'TYVCSaveController_GetSaveInProgress::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_GetSaveInProgress, ReturnValue) == 0x000010, "Member 'TYVCSaveController_GetSaveInProgress::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.GetSaveLoaded
// 0x0018 (0x0018 - 0x0000)
struct TYVCSaveController_GetSaveLoaded final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_GetSaveLoaded) == 0x000008, "Wrong alignment on TYVCSaveController_GetSaveLoaded");
static_assert(sizeof(TYVCSaveController_GetSaveLoaded) == 0x000018, "Wrong size on TYVCSaveController_GetSaveLoaded");
static_assert(offsetof(TYVCSaveController_GetSaveLoaded, SlotName) == 0x000000, "Member 'TYVCSaveController_GetSaveLoaded::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_GetSaveLoaded, ReturnValue) == 0x000010, "Member 'TYVCSaveController_GetSaveLoaded::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.Load
// 0x0018 (0x0018 - 0x0000)
struct TYVCSaveController_Load final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSaveController_Load) == 0x000008, "Wrong alignment on TYVCSaveController_Load");
static_assert(sizeof(TYVCSaveController_Load) == 0x000018, "Wrong size on TYVCSaveController_Load");
static_assert(offsetof(TYVCSaveController_Load, SlotName) == 0x000000, "Member 'TYVCSaveController_Load::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_Load, ReturnValue) == 0x000010, "Member 'TYVCSaveController_Load::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.Preload
// 0x0010 (0x0010 - 0x0000)
struct TYVCSaveController_Preload final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSaveController_Preload) == 0x000008, "Wrong alignment on TYVCSaveController_Preload");
static_assert(sizeof(TYVCSaveController_Preload) == 0x000010, "Wrong size on TYVCSaveController_Preload");
static_assert(offsetof(TYVCSaveController_Preload, SlotName) == 0x000000, "Member 'TYVCSaveController_Preload::SlotName' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.ResetSaveController
// 0x0001 (0x0001 - 0x0000)
struct TYVCSaveController_ResetSaveController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSaveController_ResetSaveController) == 0x000001, "Wrong alignment on TYVCSaveController_ResetSaveController");
static_assert(sizeof(TYVCSaveController_ResetSaveController) == 0x000001, "Wrong size on TYVCSaveController_ResetSaveController");
static_assert(offsetof(TYVCSaveController_ResetSaveController, ReturnValue) == 0x000000, "Member 'TYVCSaveController_ResetSaveController::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.Save
// 0x0020 (0x0020 - 0x0000)
struct TYVCSaveController_Save final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_Save) == 0x000008, "Wrong alignment on TYVCSaveController_Save");
static_assert(sizeof(TYVCSaveController_Save) == 0x000020, "Wrong size on TYVCSaveController_Save");
static_assert(offsetof(TYVCSaveController_Save, SlotName) == 0x000000, "Member 'TYVCSaveController_Save::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_Save, SaveGame) == 0x000010, "Member 'TYVCSaveController_Save::SaveGame' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_Save, ReturnValue) == 0x000018, "Member 'TYVCSaveController_Save::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.SaveWithMetaData
// 0x0078 (0x0078 - 0x0000)
struct TYVCSaveController_SaveWithMetaData final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplaySubtitle;                                   // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplayDescription;                                // 0x0048(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBytes;                                          // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepMetaData;                                      // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0075(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_SaveWithMetaData) == 0x000008, "Wrong alignment on TYVCSaveController_SaveWithMetaData");
static_assert(sizeof(TYVCSaveController_SaveWithMetaData) == 0x000078, "Wrong size on TYVCSaveController_SaveWithMetaData");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, SlotName) == 0x000000, "Member 'TYVCSaveController_SaveWithMetaData::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, SaveGame) == 0x000010, "Member 'TYVCSaveController_SaveWithMetaData::SaveGame' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, DisplayName) == 0x000018, "Member 'TYVCSaveController_SaveWithMetaData::DisplayName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, DisplaySubtitle) == 0x000030, "Member 'TYVCSaveController_SaveWithMetaData::DisplaySubtitle' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, DisplayDescription) == 0x000048, "Member 'TYVCSaveController_SaveWithMetaData::DisplayDescription' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, IconPath) == 0x000060, "Member 'TYVCSaveController_SaveWithMetaData::IconPath' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, MaxBytes) == 0x000070, "Member 'TYVCSaveController_SaveWithMetaData::MaxBytes' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, KeepMetaData) == 0x000074, "Member 'TYVCSaveController_SaveWithMetaData::KeepMetaData' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SaveWithMetaData, ReturnValue) == 0x000075, "Member 'TYVCSaveController_SaveWithMetaData::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSaveController.SetSaveMetadata
// 0x0070 (0x0070 - 0x0000)
struct TYVCSaveController_SetSaveMetadata final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplaySubtitle;                                   // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplayDescription;                                // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBytes;                                          // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TYVCSaveController_SetSaveMetadata) == 0x000008, "Wrong alignment on TYVCSaveController_SetSaveMetadata");
static_assert(sizeof(TYVCSaveController_SetSaveMetadata) == 0x000070, "Wrong size on TYVCSaveController_SetSaveMetadata");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, SlotName) == 0x000000, "Member 'TYVCSaveController_SetSaveMetadata::SlotName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, DisplayName) == 0x000010, "Member 'TYVCSaveController_SetSaveMetadata::DisplayName' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, DisplaySubtitle) == 0x000028, "Member 'TYVCSaveController_SetSaveMetadata::DisplaySubtitle' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, DisplayDescription) == 0x000040, "Member 'TYVCSaveController_SetSaveMetadata::DisplayDescription' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, IconPath) == 0x000058, "Member 'TYVCSaveController_SetSaveMetadata::IconPath' has a wrong offset!");
static_assert(offsetof(TYVCSaveController_SetSaveMetadata, MaxBytes) == 0x000068, "Member 'TYVCSaveController_SetSaveMetadata::MaxBytes' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSky.GetTime
// 0x0004 (0x0004 - 0x0000)
struct TYVCSky_GetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSky_GetTime) == 0x000004, "Wrong alignment on TYVCSky_GetTime");
static_assert(sizeof(TYVCSky_GetTime) == 0x000004, "Wrong size on TYVCSky_GetTime");
static_assert(offsetof(TYVCSky_GetTime, ReturnValue) == 0x000000, "Member 'TYVCSky_GetTime::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSky.SetTime
// 0x0008 (0x0008 - 0x0000)
struct TYVCSky_SetTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSky_SetTime) == 0x000004, "Wrong alignment on TYVCSky_SetTime");
static_assert(sizeof(TYVCSky_SetTime) == 0x000008, "Wrong size on TYVCSky_SetTime");
static_assert(offsetof(TYVCSky_SetTime, InTime) == 0x000000, "Member 'TYVCSky_SetTime::InTime' has a wrong offset!");
static_assert(offsetof(TYVCSky_SetTime, ReturnValue) == 0x000004, "Member 'TYVCSky_SetTime::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSky.SetUseSkylight
// 0x0001 (0x0001 - 0x0000)
struct TYVCSky_SetUseSkylight final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSky_SetUseSkylight) == 0x000001, "Wrong alignment on TYVCSky_SetUseSkylight");
static_assert(sizeof(TYVCSky_SetUseSkylight) == 0x000001, "Wrong size on TYVCSky_SetUseSkylight");
static_assert(offsetof(TYVCSky_SetUseSkylight, bUse) == 0x000000, "Member 'TYVCSky_SetUseSkylight::bUse' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSonyPrivilegeManager.GetAllowedOnline
// 0x0001 (0x0001 - 0x0000)
struct TYVCSonyPrivilegeManager_GetAllowedOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSonyPrivilegeManager_GetAllowedOnline) == 0x000001, "Wrong alignment on TYVCSonyPrivilegeManager_GetAllowedOnline");
static_assert(sizeof(TYVCSonyPrivilegeManager_GetAllowedOnline) == 0x000001, "Wrong size on TYVCSonyPrivilegeManager_GetAllowedOnline");
static_assert(offsetof(TYVCSonyPrivilegeManager_GetAllowedOnline, ReturnValue) == 0x000000, "Member 'TYVCSonyPrivilegeManager_GetAllowedOnline::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.TYVCSonyPrivilegeManager.GetNeedsOnlineCheck
// 0x0001 (0x0001 - 0x0000)
struct TYVCSonyPrivilegeManager_GetNeedsOnlineCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TYVCSonyPrivilegeManager_GetNeedsOnlineCheck) == 0x000001, "Wrong alignment on TYVCSonyPrivilegeManager_GetNeedsOnlineCheck");
static_assert(sizeof(TYVCSonyPrivilegeManager_GetNeedsOnlineCheck) == 0x000001, "Wrong size on TYVCSonyPrivilegeManager_GetNeedsOnlineCheck");
static_assert(offsetof(TYVCSonyPrivilegeManager_GetNeedsOnlineCheck, ReturnValue) == 0x000000, "Member 'TYVCSonyPrivilegeManager_GetNeedsOnlineCheck::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.UIKeyListener.SetActive
// 0x0001 (0x0001 - 0x0000)
struct UIKeyListener_SetActive final
{
public:
	bool                                          bInIsActive;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIKeyListener_SetActive) == 0x000001, "Wrong alignment on UIKeyListener_SetActive");
static_assert(sizeof(UIKeyListener_SetActive) == 0x000001, "Wrong size on UIKeyListener_SetActive");
static_assert(offsetof(UIKeyListener_SetActive, bInIsActive) == 0x000000, "Member 'UIKeyListener_SetActive::bInIsActive' has a wrong offset!");

// Function ThankYouVeryCool.VictoryWidget.DoArcadeVictory
// 0x0020 (0x0020 - 0x0000)
struct VictoryWidget_DoArcadeVictory final
{
public:
	int32                                         StartingPoints;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndPoints;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreThisRound;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThisRound;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeatOldScore;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OldScore;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeatOldTime;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldTime;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryWidget_DoArcadeVictory) == 0x000004, "Wrong alignment on VictoryWidget_DoArcadeVictory");
static_assert(sizeof(VictoryWidget_DoArcadeVictory) == 0x000020, "Wrong size on VictoryWidget_DoArcadeVictory");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, StartingPoints) == 0x000000, "Member 'VictoryWidget_DoArcadeVictory::StartingPoints' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, EndPoints) == 0x000004, "Member 'VictoryWidget_DoArcadeVictory::EndPoints' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, ScoreThisRound) == 0x000008, "Member 'VictoryWidget_DoArcadeVictory::ScoreThisRound' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, TimeThisRound) == 0x00000C, "Member 'VictoryWidget_DoArcadeVictory::TimeThisRound' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, bBeatOldScore) == 0x000010, "Member 'VictoryWidget_DoArcadeVictory::bBeatOldScore' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, OldScore) == 0x000014, "Member 'VictoryWidget_DoArcadeVictory::OldScore' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, bBeatOldTime) == 0x000018, "Member 'VictoryWidget_DoArcadeVictory::bBeatOldTime' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoArcadeVictory, OldTime) == 0x00001C, "Member 'VictoryWidget_DoArcadeVictory::OldTime' has a wrong offset!");

// Function ThankYouVeryCool.VictoryWidget.DoCampaignVictory
// 0x0008 (0x0008 - 0x0000)
struct VictoryWidget_DoCampaignVictory final
{
public:
	float                                         TimeThisRound;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryWidget_DoCampaignVictory) == 0x000004, "Wrong alignment on VictoryWidget_DoCampaignVictory");
static_assert(sizeof(VictoryWidget_DoCampaignVictory) == 0x000008, "Wrong size on VictoryWidget_DoCampaignVictory");
static_assert(offsetof(VictoryWidget_DoCampaignVictory, TimeThisRound) == 0x000000, "Member 'VictoryWidget_DoCampaignVictory::TimeThisRound' has a wrong offset!");
static_assert(offsetof(VictoryWidget_DoCampaignVictory, OldTime) == 0x000004, "Member 'VictoryWidget_DoCampaignVictory::OldTime' has a wrong offset!");

// Function ThankYouVeryCool.VictoryWidget.MattsSuperSpecialLeaderboardComplete
// 0x0001 (0x0001 - 0x0000)
struct VictoryWidget_MattsSuperSpecialLeaderboardComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryWidget_MattsSuperSpecialLeaderboardComplete) == 0x000001, "Wrong alignment on VictoryWidget_MattsSuperSpecialLeaderboardComplete");
static_assert(sizeof(VictoryWidget_MattsSuperSpecialLeaderboardComplete) == 0x000001, "Wrong size on VictoryWidget_MattsSuperSpecialLeaderboardComplete");
static_assert(offsetof(VictoryWidget_MattsSuperSpecialLeaderboardComplete, bSuccess) == 0x000000, "Member 'VictoryWidget_MattsSuperSpecialLeaderboardComplete::bSuccess' has a wrong offset!");

// Function ThankYouVeryCool.VictoryWidget.ShowUploadResult
// 0x0002 (0x0002 - 0x0000)
struct VictoryWidget_ShowUploadResult final
{
public:
	ELeaderboardResult                            LeaderboardResult;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteLeaderboardEnabled;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryWidget_ShowUploadResult) == 0x000001, "Wrong alignment on VictoryWidget_ShowUploadResult");
static_assert(sizeof(VictoryWidget_ShowUploadResult) == 0x000002, "Wrong size on VictoryWidget_ShowUploadResult");
static_assert(offsetof(VictoryWidget_ShowUploadResult, LeaderboardResult) == 0x000000, "Member 'VictoryWidget_ShowUploadResult::LeaderboardResult' has a wrong offset!");
static_assert(offsetof(VictoryWidget_ShowUploadResult, bWriteLeaderboardEnabled) == 0x000001, "Member 'VictoryWidget_ShowUploadResult::bWriteLeaderboardEnabled' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.GetNPCHit
// 0x00B8 (0x00B8 - 0x0000)
struct WeaponBase_GetNPCHit final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BulletOrigin;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVector;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAccuracy;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRange;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustMissPlayer;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ReturnValue;                                       // 0x002C(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponBase_GetNPCHit) == 0x000008, "Wrong alignment on WeaponBase_GetNPCHit");
static_assert(sizeof(WeaponBase_GetNPCHit) == 0x0000B8, "Wrong size on WeaponBase_GetNPCHit");
static_assert(offsetof(WeaponBase_GetNPCHit, Context) == 0x000000, "Member 'WeaponBase_GetNPCHit::Context' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, BulletOrigin) == 0x000008, "Member 'WeaponBase_GetNPCHit::BulletOrigin' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, InVector) == 0x000014, "Member 'WeaponBase_GetNPCHit::InVector' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, InAccuracy) == 0x000020, "Member 'WeaponBase_GetNPCHit::InAccuracy' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, InRange) == 0x000024, "Member 'WeaponBase_GetNPCHit::InRange' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, bMustMissPlayer) == 0x000028, "Member 'WeaponBase_GetNPCHit::bMustMissPlayer' has a wrong offset!");
static_assert(offsetof(WeaponBase_GetNPCHit, ReturnValue) == 0x00002C, "Member 'WeaponBase_GetNPCHit::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.ActorRequestPickUp
// 0x0010 (0x0010 - 0x0000)
struct WeaponBase_ActorRequestPickUp final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AsSideArm;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponBase_ActorRequestPickUp) == 0x000008, "Wrong alignment on WeaponBase_ActorRequestPickUp");
static_assert(sizeof(WeaponBase_ActorRequestPickUp) == 0x000010, "Wrong size on WeaponBase_ActorRequestPickUp");
static_assert(offsetof(WeaponBase_ActorRequestPickUp, Actor) == 0x000000, "Member 'WeaponBase_ActorRequestPickUp::Actor' has a wrong offset!");
static_assert(offsetof(WeaponBase_ActorRequestPickUp, AsSideArm) == 0x000008, "Member 'WeaponBase_ActorRequestPickUp::AsSideArm' has a wrong offset!");
static_assert(offsetof(WeaponBase_ActorRequestPickUp, ReturnValue) == 0x000009, "Member 'WeaponBase_ActorRequestPickUp::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.GetCaliber
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_GetCaliber final
{
public:
	EImpactType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_GetCaliber) == 0x000001, "Wrong alignment on WeaponBase_GetCaliber");
static_assert(sizeof(WeaponBase_GetCaliber) == 0x000001, "Wrong size on WeaponBase_GetCaliber");
static_assert(offsetof(WeaponBase_GetCaliber, ReturnValue) == 0x000000, "Member 'WeaponBase_GetCaliber::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.GetFireModeType
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_GetFireModeType final
{
public:
	EFireModeType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_GetFireModeType) == 0x000001, "Wrong alignment on WeaponBase_GetFireModeType");
static_assert(sizeof(WeaponBase_GetFireModeType) == 0x000001, "Wrong size on WeaponBase_GetFireModeType");
static_assert(offsetof(WeaponBase_GetFireModeType, ReturnValue) == 0x000000, "Member 'WeaponBase_GetFireModeType::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.GetHolder
// 0x0008 (0x0008 - 0x0000)
struct WeaponBase_GetHolder final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_GetHolder) == 0x000008, "Wrong alignment on WeaponBase_GetHolder");
static_assert(sizeof(WeaponBase_GetHolder) == 0x000008, "Wrong size on WeaponBase_GetHolder");
static_assert(offsetof(WeaponBase_GetHolder, ReturnValue) == 0x000000, "Member 'WeaponBase_GetHolder::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.GetIndicatorColor
// 0x0010 (0x0010 - 0x0000)
struct WeaponBase_GetIndicatorColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_GetIndicatorColor) == 0x000004, "Wrong alignment on WeaponBase_GetIndicatorColor");
static_assert(sizeof(WeaponBase_GetIndicatorColor) == 0x000010, "Wrong size on WeaponBase_GetIndicatorColor");
static_assert(offsetof(WeaponBase_GetIndicatorColor, ReturnValue) == 0x000000, "Member 'WeaponBase_GetIndicatorColor::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.IsHeld
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_IsHeld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_IsHeld) == 0x000001, "Wrong alignment on WeaponBase_IsHeld");
static_assert(sizeof(WeaponBase_IsHeld) == 0x000001, "Wrong size on WeaponBase_IsHeld");
static_assert(offsetof(WeaponBase_IsHeld, ReturnValue) == 0x000000, "Member 'WeaponBase_IsHeld::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.OnThrownHit
// 0x00B0 (0x00B0 - 0x0000)
struct WeaponBase_OnThrownHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponBase_OnThrownHit) == 0x000008, "Wrong alignment on WeaponBase_OnThrownHit");
static_assert(sizeof(WeaponBase_OnThrownHit) == 0x0000B0, "Wrong size on WeaponBase_OnThrownHit");
static_assert(offsetof(WeaponBase_OnThrownHit, HitComp) == 0x000000, "Member 'WeaponBase_OnThrownHit::HitComp' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownHit, OtherActor) == 0x000008, "Member 'WeaponBase_OnThrownHit::OtherActor' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownHit, OtherComp) == 0x000010, "Member 'WeaponBase_OnThrownHit::OtherComp' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownHit, NormalImpulse) == 0x000018, "Member 'WeaponBase_OnThrownHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownHit, Hit) == 0x000024, "Member 'WeaponBase_OnThrownHit::Hit' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.OnThrownOverlappedSomething
// 0x00A8 (0x00A8 - 0x0000)
struct WeaponBase_OnThrownOverlappedSomething final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_OnThrownOverlappedSomething) == 0x000008, "Wrong alignment on WeaponBase_OnThrownOverlappedSomething");
static_assert(sizeof(WeaponBase_OnThrownOverlappedSomething) == 0x0000A8, "Wrong size on WeaponBase_OnThrownOverlappedSomething");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, OverlapComponent) == 0x000000, "Member 'WeaponBase_OnThrownOverlappedSomething::OverlapComponent' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, OtherActor) == 0x000008, "Member 'WeaponBase_OnThrownOverlappedSomething::OtherActor' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, OtherComp) == 0x000010, "Member 'WeaponBase_OnThrownOverlappedSomething::OtherComp' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, OtherBodyIndex) == 0x000018, "Member 'WeaponBase_OnThrownOverlappedSomething::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, bFromSweep) == 0x00001C, "Member 'WeaponBase_OnThrownOverlappedSomething::bFromSweep' has a wrong offset!");
static_assert(offsetof(WeaponBase_OnThrownOverlappedSomething, SweepResult) == 0x000020, "Member 'WeaponBase_OnThrownOverlappedSomething::SweepResult' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.OnThrownStop
// 0x0088 (0x0088 - 0x0000)
struct WeaponBase_OnThrownStop final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_OnThrownStop) == 0x000004, "Wrong alignment on WeaponBase_OnThrownStop");
static_assert(sizeof(WeaponBase_OnThrownStop) == 0x000088, "Wrong size on WeaponBase_OnThrownStop");
static_assert(offsetof(WeaponBase_OnThrownStop, ImpactResult) == 0x000000, "Member 'WeaponBase_OnThrownStop::ImpactResult' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.ReloadFinished
// 0x0010 (0x0010 - 0x0000)
struct WeaponBase_ReloadFinished final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponBase_ReloadFinished) == 0x000008, "Wrong alignment on WeaponBase_ReloadFinished");
static_assert(sizeof(WeaponBase_ReloadFinished) == 0x000010, "Wrong size on WeaponBase_ReloadFinished");
static_assert(offsetof(WeaponBase_ReloadFinished, AnimMontage) == 0x000000, "Member 'WeaponBase_ReloadFinished::AnimMontage' has a wrong offset!");
static_assert(offsetof(WeaponBase_ReloadFinished, bInterrupted) == 0x000008, "Member 'WeaponBase_ReloadFinished::bInterrupted' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.SetAsCloaked
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_SetAsCloaked final
{
public:
	bool                                          bCloaked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_SetAsCloaked) == 0x000001, "Wrong alignment on WeaponBase_SetAsCloaked");
static_assert(sizeof(WeaponBase_SetAsCloaked) == 0x000001, "Wrong size on WeaponBase_SetAsCloaked");
static_assert(offsetof(WeaponBase_SetAsCloaked, bCloaked) == 0x000000, "Member 'WeaponBase_SetAsCloaked::bCloaked' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.SetAsShiny
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_SetAsShiny final
{
public:
	EShineLevel                                   ForShineLevel;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_SetAsShiny) == 0x000001, "Wrong alignment on WeaponBase_SetAsShiny");
static_assert(sizeof(WeaponBase_SetAsShiny) == 0x000001, "Wrong size on WeaponBase_SetAsShiny");
static_assert(offsetof(WeaponBase_SetAsShiny, ForShineLevel) == 0x000000, "Member 'WeaponBase_SetAsShiny::ForShineLevel' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.SetupAsSuppressed
// 0x0001 (0x0001 - 0x0000)
struct WeaponBase_SetupAsSuppressed final
{
public:
	bool                                          bSuppressed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_SetupAsSuppressed) == 0x000001, "Wrong alignment on WeaponBase_SetupAsSuppressed");
static_assert(sizeof(WeaponBase_SetupAsSuppressed) == 0x000001, "Wrong size on WeaponBase_SetupAsSuppressed");
static_assert(offsetof(WeaponBase_SetupAsSuppressed, bSuppressed) == 0x000000, "Member 'WeaponBase_SetupAsSuppressed::bSuppressed' has a wrong offset!");

// Function ThankYouVeryCool.WeaponBase.TickMuzzleFlash
// 0x0004 (0x0004 - 0x0000)
struct WeaponBase_TickMuzzleFlash final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponBase_TickMuzzleFlash) == 0x000004, "Wrong alignment on WeaponBase_TickMuzzleFlash");
static_assert(sizeof(WeaponBase_TickMuzzleFlash) == 0x000004, "Wrong size on WeaponBase_TickMuzzleFlash");
static_assert(offsetof(WeaponBase_TickMuzzleFlash, Value) == 0x000000, "Member 'WeaponBase_TickMuzzleFlash::Value' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.GetCurrentShown
// 0x0008 (0x0008 - 0x0000)
struct WeaponPreview_GetCurrentShown final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_GetCurrentShown) == 0x000008, "Wrong alignment on WeaponPreview_GetCurrentShown");
static_assert(sizeof(WeaponPreview_GetCurrentShown) == 0x000008, "Wrong size on WeaponPreview_GetCurrentShown");
static_assert(offsetof(WeaponPreview_GetCurrentShown, ReturnValue) == 0x000000, "Member 'WeaponPreview_GetCurrentShown::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.GetYawOffset
// 0x0004 (0x0004 - 0x0000)
struct WeaponPreview_GetYawOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_GetYawOffset) == 0x000004, "Wrong alignment on WeaponPreview_GetYawOffset");
static_assert(sizeof(WeaponPreview_GetYawOffset) == 0x000004, "Wrong size on WeaponPreview_GetYawOffset");
static_assert(offsetof(WeaponPreview_GetYawOffset, ReturnValue) == 0x000000, "Member 'WeaponPreview_GetYawOffset::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.Preview
// 0x0008 (0x0008 - 0x0000)
struct WeaponPreview_Preview final
{
public:
	TSubclassOf<class AActor>                     ToPreview;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_Preview) == 0x000008, "Wrong alignment on WeaponPreview_Preview");
static_assert(sizeof(WeaponPreview_Preview) == 0x000008, "Wrong size on WeaponPreview_Preview");
static_assert(offsetof(WeaponPreview_Preview, ToPreview) == 0x000000, "Member 'WeaponPreview_Preview::ToPreview' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.PreviewCannon
// 0x0001 (0x0001 - 0x0000)
struct WeaponPreview_PreviewCannon final
{
public:
	ECannonMode                                   ForMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_PreviewCannon) == 0x000001, "Wrong alignment on WeaponPreview_PreviewCannon");
static_assert(sizeof(WeaponPreview_PreviewCannon) == 0x000001, "Wrong size on WeaponPreview_PreviewCannon");
static_assert(offsetof(WeaponPreview_PreviewCannon, ForMode) == 0x000000, "Member 'WeaponPreview_PreviewCannon::ForMode' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.SetLivePreview
// 0x0001 (0x0001 - 0x0000)
struct WeaponPreview_SetLivePreview final
{
public:
	bool                                          bin;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_SetLivePreview) == 0x000001, "Wrong alignment on WeaponPreview_SetLivePreview");
static_assert(sizeof(WeaponPreview_SetLivePreview) == 0x000001, "Wrong size on WeaponPreview_SetLivePreview");
static_assert(offsetof(WeaponPreview_SetLivePreview, bin) == 0x000000, "Member 'WeaponPreview_SetLivePreview::bin' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.SetRenderActive
// 0x0001 (0x0001 - 0x0000)
struct WeaponPreview_SetRenderActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_SetRenderActive) == 0x000001, "Wrong alignment on WeaponPreview_SetRenderActive");
static_assert(sizeof(WeaponPreview_SetRenderActive) == 0x000001, "Wrong size on WeaponPreview_SetRenderActive");
static_assert(offsetof(WeaponPreview_SetRenderActive, bActive) == 0x000000, "Member 'WeaponPreview_SetRenderActive::bActive' has a wrong offset!");

// Function ThankYouVeryCool.WeaponPreview.SetYawOffset
// 0x0004 (0x0004 - 0x0000)
struct WeaponPreview_SetYawOffset final
{
public:
	float                                         In;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPreview_SetYawOffset) == 0x000004, "Wrong alignment on WeaponPreview_SetYawOffset");
static_assert(sizeof(WeaponPreview_SetYawOffset) == 0x000004, "Wrong size on WeaponPreview_SetYawOffset");
static_assert(offsetof(WeaponPreview_SetYawOffset, In) == 0x000000, "Member 'WeaponPreview_SetYawOffset::In' has a wrong offset!");

// Function ThankYouVeryCool.WorkshopChapter.DoAction
// 0x0014 (0x0014 - 0x0000)
struct WorkshopChapter_DoAction final
{
public:
	struct FAction                                InAction;                                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSimulated;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopChapter_DoAction) == 0x000004, "Wrong alignment on WorkshopChapter_DoAction");
static_assert(sizeof(WorkshopChapter_DoAction) == 0x000014, "Wrong size on WorkshopChapter_DoAction");
static_assert(offsetof(WorkshopChapter_DoAction, InAction) == 0x000000, "Member 'WorkshopChapter_DoAction::InAction' has a wrong offset!");
static_assert(offsetof(WorkshopChapter_DoAction, bSimulated) == 0x000010, "Member 'WorkshopChapter_DoAction::bSimulated' has a wrong offset!");

// Function ThankYouVeryCool.WorkshopChapter.DoActionsForStage
// 0x0008 (0x0008 - 0x0000)
struct WorkshopChapter_DoActionsForStage final
{
public:
	int32                                         ForStage;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulated;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopChapter_DoActionsForStage) == 0x000004, "Wrong alignment on WorkshopChapter_DoActionsForStage");
static_assert(sizeof(WorkshopChapter_DoActionsForStage) == 0x000008, "Wrong size on WorkshopChapter_DoActionsForStage");
static_assert(offsetof(WorkshopChapter_DoActionsForStage, ForStage) == 0x000000, "Member 'WorkshopChapter_DoActionsForStage::ForStage' has a wrong offset!");
static_assert(offsetof(WorkshopChapter_DoActionsForStage, bSimulated) == 0x000004, "Member 'WorkshopChapter_DoActionsForStage::bSimulated' has a wrong offset!");

// Function ThankYouVeryCool.WorkshopChapter.NotifyGoalComplete
// 0x000C (0x000C - 0x0000)
struct WorkshopChapter_NotifyGoalComplete final
{
public:
	class FName                                   ForID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoalType                                     ForGoal;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopChapter_NotifyGoalComplete) == 0x000004, "Wrong alignment on WorkshopChapter_NotifyGoalComplete");
static_assert(sizeof(WorkshopChapter_NotifyGoalComplete) == 0x00000C, "Wrong size on WorkshopChapter_NotifyGoalComplete");
static_assert(offsetof(WorkshopChapter_NotifyGoalComplete, ForID) == 0x000000, "Member 'WorkshopChapter_NotifyGoalComplete::ForID' has a wrong offset!");
static_assert(offsetof(WorkshopChapter_NotifyGoalComplete, ForGoal) == 0x000008, "Member 'WorkshopChapter_NotifyGoalComplete::ForGoal' has a wrong offset!");
static_assert(offsetof(WorkshopChapter_NotifyGoalComplete, ReturnValue) == 0x000009, "Member 'WorkshopChapter_NotifyGoalComplete::ReturnValue' has a wrong offset!");

// Function ThankYouVeryCool.WorkshopChapter.SimulateGoalComplete
// 0x000C (0x000C - 0x0000)
struct WorkshopChapter_SimulateGoalComplete final
{
public:
	class FName                                   ForID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoalType                                     ForGoal;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorkshopChapter_SimulateGoalComplete) == 0x000004, "Wrong alignment on WorkshopChapter_SimulateGoalComplete");
static_assert(sizeof(WorkshopChapter_SimulateGoalComplete) == 0x00000C, "Wrong size on WorkshopChapter_SimulateGoalComplete");
static_assert(offsetof(WorkshopChapter_SimulateGoalComplete, ForID) == 0x000000, "Member 'WorkshopChapter_SimulateGoalComplete::ForID' has a wrong offset!");
static_assert(offsetof(WorkshopChapter_SimulateGoalComplete, ForGoal) == 0x000008, "Member 'WorkshopChapter_SimulateGoalComplete::ForGoal' has a wrong offset!");

}

