#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Difficulty

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"


namespace SDK::Params
{

// Function WBP_Difficulty.WBP_Difficulty_C.ExecuteUbergraph_WBP_Difficulty
// 0x0004 (0x0004 - 0x0000)
struct WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty) == 0x000004, "Wrong alignment on WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty");
static_assert(sizeof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty) == 0x000004, "Wrong size on WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty");
static_assert(offsetof(WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty, EntryPoint) == 0x000000, "Member 'WBP_Difficulty_C_ExecuteUbergraph_WBP_Difficulty::EntryPoint' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.ShowDiffDesc
// 0x0170 (0x0170 - 0x0000)
struct WBP_Difficulty_C_ShowDiffDesc final
{
public:
	EDifficulty                                   InDiff;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0088(0x0018)()
	EDifficulty                                   Temp_byte_Variable_1;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   Temp_byte_Variable_2;                              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_3;             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00F0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0140(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0158(0x0018)()
};
static_assert(alignof(WBP_Difficulty_C_ShowDiffDesc) == 0x000008, "Wrong alignment on WBP_Difficulty_C_ShowDiffDesc");
static_assert(sizeof(WBP_Difficulty_C_ShowDiffDesc) == 0x000170, "Wrong size on WBP_Difficulty_C_ShowDiffDesc");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, InDiff) == 0x000000, "Member 'WBP_Difficulty_C_ShowDiffDesc::InDiff' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_int_Variable) == 0x000004, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_int_Variable_1) == 0x000008, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_byte_Variable) == 0x00000C, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable) == 0x000010, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_1) == 0x000028, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_2) == 0x000040, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_3) == 0x000058, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_4) == 0x000070, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_5) == 0x000088, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_byte_Variable_1) == 0x0000A0, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, K2Node_Select_Default) == 0x0000A8, "Member 'WBP_Difficulty_C_ShowDiffDesc::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_text_Variable_6) == 0x0000C0, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000D8, "Member 'WBP_Difficulty_C_ShowDiffDesc::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, Temp_byte_Variable_2) == 0x0000DC, "Member 'WBP_Difficulty_C_ShowDiffDesc::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x0000E0, "Member 'WBP_Difficulty_C_ShowDiffDesc::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x0000E4, "Member 'WBP_Difficulty_C_ShowDiffDesc::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, CallFunc_MakeLiteralInt_ReturnValue_3) == 0x0000E8, "Member 'WBP_Difficulty_C_ShowDiffDesc::CallFunc_MakeLiteralInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, K2Node_Select_Default_1) == 0x0000EC, "Member 'WBP_Difficulty_C_ShowDiffDesc::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, K2Node_MakeStruct_FormatArgumentData) == 0x0000F0, "Member 'WBP_Difficulty_C_ShowDiffDesc::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, K2Node_MakeArray_Array) == 0x000130, "Member 'WBP_Difficulty_C_ShowDiffDesc::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, CallFunc_Format_ReturnValue) == 0x000140, "Member 'WBP_Difficulty_C_ShowDiffDesc::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_ShowDiffDesc, K2Node_Select_Default_2) == 0x000158, "Member 'WBP_Difficulty_C_ShowDiffDesc::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.Setup and Give Focus
// 0x0020 (0x0020 - 0x0000)
struct WBP_Difficulty_C_Setup_and_Give_Focus final
{
public:
	EDifficulty                                   Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NewParam;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_Setup_and_Give_Focus) == 0x000008, "Wrong alignment on WBP_Difficulty_C_Setup_and_Give_Focus");
static_assert(sizeof(WBP_Difficulty_C_Setup_and_Give_Focus) == 0x000020, "Wrong size on WBP_Difficulty_C_Setup_and_Give_Focus");
static_assert(offsetof(WBP_Difficulty_C_Setup_and_Give_Focus, Difficulty) == 0x000000, "Member 'WBP_Difficulty_C_Setup_and_Give_Focus::Difficulty' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_Setup_and_Give_Focus, NewParam) == 0x000008, "Member 'WBP_Difficulty_C_Setup_and_Give_Focus::NewParam' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_Setup_and_Give_Focus, Temp_byte_Variable) == 0x000010, "Member 'WBP_Difficulty_C_Setup_and_Give_Focus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_Setup_and_Give_Focus, K2Node_Select_Default) == 0x000018, "Member 'WBP_Difficulty_C_Setup_and_Give_Focus::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Difficulty.WBP_Difficulty_C.SetSelected
// 0x0018 (0x0018 - 0x0000)
struct WBP_Difficulty_C_SetSelected final
{
public:
	EDifficulty                                   ToSelect;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_AdamButton_C*                      Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_AdamButton_C*                      K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Difficulty_C_SetSelected) == 0x000008, "Wrong alignment on WBP_Difficulty_C_SetSelected");
static_assert(sizeof(WBP_Difficulty_C_SetSelected) == 0x000018, "Wrong size on WBP_Difficulty_C_SetSelected");
static_assert(offsetof(WBP_Difficulty_C_SetSelected, ToSelect) == 0x000000, "Member 'WBP_Difficulty_C_SetSelected::ToSelect' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_SetSelected, Temp_byte_Variable) == 0x000001, "Member 'WBP_Difficulty_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_SetSelected, Temp_object_Variable) == 0x000008, "Member 'WBP_Difficulty_C_SetSelected::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Difficulty_C_SetSelected, K2Node_Select_Default) == 0x000010, "Member 'WBP_Difficulty_C_SetSelected::K2Node_Select_Default' has a wrong offset!");

}

