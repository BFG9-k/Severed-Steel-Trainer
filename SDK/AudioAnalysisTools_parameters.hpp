#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioAnalysisTools

#include "Basic.hpp"

#include "AudioAnalysisTools_structs.hpp"


namespace SDK::Params
{

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.CreateAudioAnalysisTools
// 0x0018 (0x0018 - 0x0000)
struct AudioAnalysisToolsLibrary_CreateAudioAnalysisTools final
{
public:
	int64                                         FrameSize;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnalysisWindowType                           WindowType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioAnalysisToolsLibrary*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_CreateAudioAnalysisTools) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_CreateAudioAnalysisTools");
static_assert(sizeof(AudioAnalysisToolsLibrary_CreateAudioAnalysisTools) == 0x000018, "Wrong size on AudioAnalysisToolsLibrary_CreateAudioAnalysisTools");
static_assert(offsetof(AudioAnalysisToolsLibrary_CreateAudioAnalysisTools, FrameSize) == 0x000000, "Member 'AudioAnalysisToolsLibrary_CreateAudioAnalysisTools::FrameSize' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_CreateAudioAnalysisTools, WindowType) == 0x000008, "Member 'AudioAnalysisToolsLibrary_CreateAudioAnalysisTools::WindowType' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_CreateAudioAnalysisTools, ReturnValue) == 0x000010, "Member 'AudioAnalysisToolsLibrary_CreateAudioAnalysisTools::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByCurrentTime
// 0x0020 (0x0020 - 0x0000)
struct AudioAnalysisToolsLibrary_GetAudioByCurrentTime final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AudioFrames;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetAudioByCurrentTime) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetAudioByCurrentTime");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetAudioByCurrentTime) == 0x000020, "Wrong size on AudioAnalysisToolsLibrary_GetAudioByCurrentTime");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByCurrentTime, ImportedSoundWave) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetAudioByCurrentTime::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByCurrentTime, AudioFrames) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetAudioByCurrentTime::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByCurrentTime, ReturnValue) == 0x000018, "Member 'AudioAnalysisToolsLibrary_GetAudioByCurrentTime::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByFrameRange
// 0x0030 (0x0030 - 0x0000)
struct AudioAnalysisToolsLibrary_GetAudioByFrameRange final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StartFrame;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndFrame;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AudioFrames;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetAudioByFrameRange) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetAudioByFrameRange");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetAudioByFrameRange) == 0x000030, "Wrong size on AudioAnalysisToolsLibrary_GetAudioByFrameRange");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameRange, ImportedSoundWave) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameRange::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameRange, StartFrame) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameRange::StartFrame' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameRange, EndFrame) == 0x000010, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameRange::EndFrame' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameRange, AudioFrames) == 0x000018, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameRange::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameRange, ReturnValue) == 0x000028, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameRange::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByFrameSize
// 0x0028 (0x0028 - 0x0000)
struct AudioAnalysisToolsLibrary_GetAudioByFrameSize final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FrameSize;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AudioFrames;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetAudioByFrameSize) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetAudioByFrameSize");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetAudioByFrameSize) == 0x000028, "Wrong size on AudioAnalysisToolsLibrary_GetAudioByFrameSize");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameSize, ImportedSoundWave) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameSize::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameSize, FrameSize) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameSize::FrameSize' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameSize, AudioFrames) == 0x000010, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameSize::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByFrameSize, ReturnValue) == 0x000020, "Member 'AudioAnalysisToolsLibrary_GetAudioByFrameSize::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByTimeLength
// 0x0028 (0x0028 - 0x0000)
struct AudioAnalysisToolsLibrary_GetAudioByTimeLength final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLength;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AudioFrames;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetAudioByTimeLength) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetAudioByTimeLength");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetAudioByTimeLength) == 0x000028, "Wrong size on AudioAnalysisToolsLibrary_GetAudioByTimeLength");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeLength, ImportedSoundWave) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeLength::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeLength, TimeLength) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeLength::TimeLength' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeLength, AudioFrames) == 0x000010, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeLength::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeLength, ReturnValue) == 0x000020, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeLength::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByTimeRange
// 0x0028 (0x0028 - 0x0000)
struct AudioAnalysisToolsLibrary_GetAudioByTimeRange final
{
public:
	class UImportedSoundWave*                     ImportedSoundWave;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AudioFrames;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetAudioByTimeRange) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetAudioByTimeRange");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetAudioByTimeRange) == 0x000028, "Wrong size on AudioAnalysisToolsLibrary_GetAudioByTimeRange");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeRange, ImportedSoundWave) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeRange::ImportedSoundWave' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeRange, StartTime) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeRange::StartTime' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeRange, EndTime) == 0x00000C, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeRange::EndTime' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeRange, AudioFrames) == 0x000010, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeRange::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetAudioByTimeRange, ReturnValue) == 0x000020, "Member 'AudioAnalysisToolsLibrary_GetAudioByTimeRange::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetComplexSpectralDifference
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetComplexSpectralDifference final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetComplexSpectralDifference) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetComplexSpectralDifference");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetComplexSpectralDifference) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetComplexSpectralDifference");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetComplexSpectralDifference, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetComplexSpectralDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetEnergyDifference
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetEnergyDifference final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetEnergyDifference) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetEnergyDifference");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetEnergyDifference) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetEnergyDifference");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetEnergyDifference, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetEnergyDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetHighFrequencyContent
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetHighFrequencyContent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetHighFrequencyContent) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetHighFrequencyContent");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetHighFrequencyContent) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetHighFrequencyContent");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetHighFrequencyContent, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetHighFrequencyContent::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetPeakEnergy
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetPeakEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetPeakEnergy) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetPeakEnergy");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetPeakEnergy) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetPeakEnergy");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetPeakEnergy, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetPeakEnergy::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetRootMeanSquare
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetRootMeanSquare final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetRootMeanSquare) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetRootMeanSquare");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetRootMeanSquare) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetRootMeanSquare");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetRootMeanSquare, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetRootMeanSquare::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralCentroid
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralCentroid final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralCentroid) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralCentroid");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralCentroid) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralCentroid");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralCentroid, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralCentroid::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralCrest
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralCrest final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralCrest) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralCrest");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralCrest) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralCrest");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralCrest, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralCrest::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralDifference
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralDifference final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralDifference) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralDifference");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralDifference) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralDifference");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralDifference, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralDifferenceHWR
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralFlatness
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralFlatness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralFlatness) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralFlatness");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralFlatness) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralFlatness");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralFlatness, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralFlatness::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralKurtosis
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralKurtosis final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralKurtosis) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralKurtosis");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralKurtosis) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralKurtosis");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralKurtosis, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralKurtosis::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralRolloff
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetSpectralRolloff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetSpectralRolloff) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetSpectralRolloff");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetSpectralRolloff) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetSpectralRolloff");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetSpectralRolloff, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetSpectralRolloff::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetZeroCrossingRate
// 0x0004 (0x0004 - 0x0000)
struct AudioAnalysisToolsLibrary_GetZeroCrossingRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetZeroCrossingRate) == 0x000004, "Wrong alignment on AudioAnalysisToolsLibrary_GetZeroCrossingRate");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetZeroCrossingRate) == 0x000004, "Wrong size on AudioAnalysisToolsLibrary_GetZeroCrossingRate");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetZeroCrossingRate, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetZeroCrossingRate::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.ProcessAudioFrames
// 0x0018 (0x0018 - 0x0000)
struct AudioAnalysisToolsLibrary_ProcessAudioFrames final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bProcessToBeatDetection;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_ProcessAudioFrames) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_ProcessAudioFrames");
static_assert(sizeof(AudioAnalysisToolsLibrary_ProcessAudioFrames) == 0x000018, "Wrong size on AudioAnalysisToolsLibrary_ProcessAudioFrames");
static_assert(offsetof(AudioAnalysisToolsLibrary_ProcessAudioFrames, AudioFrames) == 0x000000, "Member 'AudioAnalysisToolsLibrary_ProcessAudioFrames::AudioFrames' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_ProcessAudioFrames, bProcessToBeatDetection) == 0x000010, "Member 'AudioAnalysisToolsLibrary_ProcessAudioFrames::bProcessToBeatDetection' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.UpdateFrameSize
// 0x0008 (0x0008 - 0x0000)
struct AudioAnalysisToolsLibrary_UpdateFrameSize final
{
public:
	int64                                         FrameSize;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_UpdateFrameSize) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_UpdateFrameSize");
static_assert(sizeof(AudioAnalysisToolsLibrary_UpdateFrameSize) == 0x000008, "Wrong size on AudioAnalysisToolsLibrary_UpdateFrameSize");
static_assert(offsetof(AudioAnalysisToolsLibrary_UpdateFrameSize, FrameSize) == 0x000000, "Member 'AudioAnalysisToolsLibrary_UpdateFrameSize::FrameSize' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetBand
// 0x0010 (0x0010 - 0x0000)
struct AudioAnalysisToolsLibrary_GetBand final
{
public:
	int64                                         Subband;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetBand) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetBand");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetBand) == 0x000010, "Wrong size on AudioAnalysisToolsLibrary_GetBand");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetBand, Subband) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetBand::Subband' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetBand, ReturnValue) == 0x000008, "Member 'AudioAnalysisToolsLibrary_GetBand::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetFFTImaginary
// 0x0010 (0x0010 - 0x0000)
struct AudioAnalysisToolsLibrary_GetFFTImaginary final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetFFTImaginary) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetFFTImaginary");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetFFTImaginary) == 0x000010, "Wrong size on AudioAnalysisToolsLibrary_GetFFTImaginary");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetFFTImaginary, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetFFTImaginary::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetFFTReal
// 0x0010 (0x0010 - 0x0000)
struct AudioAnalysisToolsLibrary_GetFFTReal final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetFFTReal) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetFFTReal");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetFFTReal) == 0x000010, "Wrong size on AudioAnalysisToolsLibrary_GetFFTReal");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetFFTReal, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetFFTReal::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetMagnitudeSpectrum
// 0x0010 (0x0010 - 0x0000)
struct AudioAnalysisToolsLibrary_GetMagnitudeSpectrum final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_GetMagnitudeSpectrum) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_GetMagnitudeSpectrum");
static_assert(sizeof(AudioAnalysisToolsLibrary_GetMagnitudeSpectrum) == 0x000010, "Wrong size on AudioAnalysisToolsLibrary_GetMagnitudeSpectrum");
static_assert(offsetof(AudioAnalysisToolsLibrary_GetMagnitudeSpectrum, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_GetMagnitudeSpectrum::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsBeat
// 0x0010 (0x0010 - 0x0000)
struct AudioAnalysisToolsLibrary_IsBeat final
{
public:
	int64                                         Subband;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_IsBeat) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_IsBeat");
static_assert(sizeof(AudioAnalysisToolsLibrary_IsBeat) == 0x000010, "Wrong size on AudioAnalysisToolsLibrary_IsBeat");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeat, Subband) == 0x000000, "Member 'AudioAnalysisToolsLibrary_IsBeat::Subband' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeat, ReturnValue) == 0x000008, "Member 'AudioAnalysisToolsLibrary_IsBeat::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsBeatRange
// 0x0020 (0x0020 - 0x0000)
struct AudioAnalysisToolsLibrary_IsBeatRange final
{
public:
	int64                                         Low;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         High;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Threshold;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioAnalysisToolsLibrary_IsBeatRange) == 0x000008, "Wrong alignment on AudioAnalysisToolsLibrary_IsBeatRange");
static_assert(sizeof(AudioAnalysisToolsLibrary_IsBeatRange) == 0x000020, "Wrong size on AudioAnalysisToolsLibrary_IsBeatRange");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeatRange, Low) == 0x000000, "Member 'AudioAnalysisToolsLibrary_IsBeatRange::Low' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeatRange, High) == 0x000008, "Member 'AudioAnalysisToolsLibrary_IsBeatRange::High' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeatRange, Threshold) == 0x000010, "Member 'AudioAnalysisToolsLibrary_IsBeatRange::Threshold' has a wrong offset!");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsBeatRange, ReturnValue) == 0x000018, "Member 'AudioAnalysisToolsLibrary_IsBeatRange::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsHiHat
// 0x0001 (0x0001 - 0x0000)
struct AudioAnalysisToolsLibrary_IsHiHat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_IsHiHat) == 0x000001, "Wrong alignment on AudioAnalysisToolsLibrary_IsHiHat");
static_assert(sizeof(AudioAnalysisToolsLibrary_IsHiHat) == 0x000001, "Wrong size on AudioAnalysisToolsLibrary_IsHiHat");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsHiHat, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_IsHiHat::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsKick
// 0x0001 (0x0001 - 0x0000)
struct AudioAnalysisToolsLibrary_IsKick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_IsKick) == 0x000001, "Wrong alignment on AudioAnalysisToolsLibrary_IsKick");
static_assert(sizeof(AudioAnalysisToolsLibrary_IsKick) == 0x000001, "Wrong size on AudioAnalysisToolsLibrary_IsKick");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsKick, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_IsKick::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsSnare
// 0x0001 (0x0001 - 0x0000)
struct AudioAnalysisToolsLibrary_IsSnare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioAnalysisToolsLibrary_IsSnare) == 0x000001, "Wrong alignment on AudioAnalysisToolsLibrary_IsSnare");
static_assert(sizeof(AudioAnalysisToolsLibrary_IsSnare) == 0x000001, "Wrong size on AudioAnalysisToolsLibrary_IsSnare");
static_assert(offsetof(AudioAnalysisToolsLibrary_IsSnare, ReturnValue) == 0x000000, "Member 'AudioAnalysisToolsLibrary_IsSnare::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.CreateBeatDetection
// 0x0018 (0x0018 - 0x0000)
struct BeatDetection_CreateBeatDetection final
{
public:
	int64                                         FFTSubbandSize;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EnergyHistorySize;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBeatDetection*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_CreateBeatDetection) == 0x000008, "Wrong alignment on BeatDetection_CreateBeatDetection");
static_assert(sizeof(BeatDetection_CreateBeatDetection) == 0x000018, "Wrong size on BeatDetection_CreateBeatDetection");
static_assert(offsetof(BeatDetection_CreateBeatDetection, FFTSubbandSize) == 0x000000, "Member 'BeatDetection_CreateBeatDetection::FFTSubbandSize' has a wrong offset!");
static_assert(offsetof(BeatDetection_CreateBeatDetection, EnergyHistorySize) == 0x000008, "Member 'BeatDetection_CreateBeatDetection::EnergyHistorySize' has a wrong offset!");
static_assert(offsetof(BeatDetection_CreateBeatDetection, ReturnValue) == 0x000010, "Member 'BeatDetection_CreateBeatDetection::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.ProcessMagnitude
// 0x0010 (0x0010 - 0x0000)
struct BeatDetection_ProcessMagnitude final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_ProcessMagnitude) == 0x000008, "Wrong alignment on BeatDetection_ProcessMagnitude");
static_assert(sizeof(BeatDetection_ProcessMagnitude) == 0x000010, "Wrong size on BeatDetection_ProcessMagnitude");
static_assert(offsetof(BeatDetection_ProcessMagnitude, MagnitudeSpectrum) == 0x000000, "Member 'BeatDetection_ProcessMagnitude::MagnitudeSpectrum' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.UpdateEnergyHistorySize
// 0x0008 (0x0008 - 0x0000)
struct BeatDetection_UpdateEnergyHistorySize final
{
public:
	int64                                         EnergyHistorySize;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_UpdateEnergyHistorySize) == 0x000008, "Wrong alignment on BeatDetection_UpdateEnergyHistorySize");
static_assert(sizeof(BeatDetection_UpdateEnergyHistorySize) == 0x000008, "Wrong size on BeatDetection_UpdateEnergyHistorySize");
static_assert(offsetof(BeatDetection_UpdateEnergyHistorySize, EnergyHistorySize) == 0x000000, "Member 'BeatDetection_UpdateEnergyHistorySize::EnergyHistorySize' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.UpdateFFTSubbandSize
// 0x0008 (0x0008 - 0x0000)
struct BeatDetection_UpdateFFTSubbandSize final
{
public:
	int64                                         FFTSubbandSize;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_UpdateFFTSubbandSize) == 0x000008, "Wrong alignment on BeatDetection_UpdateFFTSubbandSize");
static_assert(sizeof(BeatDetection_UpdateFFTSubbandSize) == 0x000008, "Wrong size on BeatDetection_UpdateFFTSubbandSize");
static_assert(offsetof(BeatDetection_UpdateFFTSubbandSize, FFTSubbandSize) == 0x000000, "Member 'BeatDetection_UpdateFFTSubbandSize::FFTSubbandSize' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.GetBand
// 0x0010 (0x0010 - 0x0000)
struct BeatDetection_GetBand final
{
public:
	int64                                         Subband;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeatDetection_GetBand) == 0x000008, "Wrong alignment on BeatDetection_GetBand");
static_assert(sizeof(BeatDetection_GetBand) == 0x000010, "Wrong size on BeatDetection_GetBand");
static_assert(offsetof(BeatDetection_GetBand, Subband) == 0x000000, "Member 'BeatDetection_GetBand::Subband' has a wrong offset!");
static_assert(offsetof(BeatDetection_GetBand, ReturnValue) == 0x000008, "Member 'BeatDetection_GetBand::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.IsBeat
// 0x0010 (0x0010 - 0x0000)
struct BeatDetection_IsBeat final
{
public:
	int64                                         Subband;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeatDetection_IsBeat) == 0x000008, "Wrong alignment on BeatDetection_IsBeat");
static_assert(sizeof(BeatDetection_IsBeat) == 0x000010, "Wrong size on BeatDetection_IsBeat");
static_assert(offsetof(BeatDetection_IsBeat, Subband) == 0x000000, "Member 'BeatDetection_IsBeat::Subband' has a wrong offset!");
static_assert(offsetof(BeatDetection_IsBeat, ReturnValue) == 0x000008, "Member 'BeatDetection_IsBeat::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.IsBeatRange
// 0x0020 (0x0020 - 0x0000)
struct BeatDetection_IsBeatRange final
{
public:
	int64                                         Low;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         High;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Threshold;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeatDetection_IsBeatRange) == 0x000008, "Wrong alignment on BeatDetection_IsBeatRange");
static_assert(sizeof(BeatDetection_IsBeatRange) == 0x000020, "Wrong size on BeatDetection_IsBeatRange");
static_assert(offsetof(BeatDetection_IsBeatRange, Low) == 0x000000, "Member 'BeatDetection_IsBeatRange::Low' has a wrong offset!");
static_assert(offsetof(BeatDetection_IsBeatRange, High) == 0x000008, "Member 'BeatDetection_IsBeatRange::High' has a wrong offset!");
static_assert(offsetof(BeatDetection_IsBeatRange, Threshold) == 0x000010, "Member 'BeatDetection_IsBeatRange::Threshold' has a wrong offset!");
static_assert(offsetof(BeatDetection_IsBeatRange, ReturnValue) == 0x000018, "Member 'BeatDetection_IsBeatRange::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.IsHiHat
// 0x0001 (0x0001 - 0x0000)
struct BeatDetection_IsHiHat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_IsHiHat) == 0x000001, "Wrong alignment on BeatDetection_IsHiHat");
static_assert(sizeof(BeatDetection_IsHiHat) == 0x000001, "Wrong size on BeatDetection_IsHiHat");
static_assert(offsetof(BeatDetection_IsHiHat, ReturnValue) == 0x000000, "Member 'BeatDetection_IsHiHat::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.IsKick
// 0x0001 (0x0001 - 0x0000)
struct BeatDetection_IsKick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_IsKick) == 0x000001, "Wrong alignment on BeatDetection_IsKick");
static_assert(sizeof(BeatDetection_IsKick) == 0x000001, "Wrong size on BeatDetection_IsKick");
static_assert(offsetof(BeatDetection_IsKick, ReturnValue) == 0x000000, "Member 'BeatDetection_IsKick::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.BeatDetection.IsSnare
// 0x0001 (0x0001 - 0x0000)
struct BeatDetection_IsSnare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatDetection_IsSnare) == 0x000001, "Wrong alignment on BeatDetection_IsSnare");
static_assert(sizeof(BeatDetection_IsSnare) == 0x000001, "Wrong size on BeatDetection_IsSnare");
static_assert(offsetof(BeatDetection_IsSnare, ReturnValue) == 0x000000, "Member 'BeatDetection_IsSnare::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralCentroid
// 0x0018 (0x0018 - 0x0000)
struct CoreFrequencyDomainFeatures_GetSpectralCentroid final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFrequencyDomainFeatures_GetSpectralCentroid) == 0x000008, "Wrong alignment on CoreFrequencyDomainFeatures_GetSpectralCentroid");
static_assert(sizeof(CoreFrequencyDomainFeatures_GetSpectralCentroid) == 0x000018, "Wrong size on CoreFrequencyDomainFeatures_GetSpectralCentroid");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralCentroid, MagnitudeSpectrum) == 0x000000, "Member 'CoreFrequencyDomainFeatures_GetSpectralCentroid::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralCentroid, ReturnValue) == 0x000010, "Member 'CoreFrequencyDomainFeatures_GetSpectralCentroid::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralCrest
// 0x0018 (0x0018 - 0x0000)
struct CoreFrequencyDomainFeatures_GetSpectralCrest final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFrequencyDomainFeatures_GetSpectralCrest) == 0x000008, "Wrong alignment on CoreFrequencyDomainFeatures_GetSpectralCrest");
static_assert(sizeof(CoreFrequencyDomainFeatures_GetSpectralCrest) == 0x000018, "Wrong size on CoreFrequencyDomainFeatures_GetSpectralCrest");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralCrest, MagnitudeSpectrum) == 0x000000, "Member 'CoreFrequencyDomainFeatures_GetSpectralCrest::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralCrest, ReturnValue) == 0x000010, "Member 'CoreFrequencyDomainFeatures_GetSpectralCrest::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralFlatness
// 0x0018 (0x0018 - 0x0000)
struct CoreFrequencyDomainFeatures_GetSpectralFlatness final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFrequencyDomainFeatures_GetSpectralFlatness) == 0x000008, "Wrong alignment on CoreFrequencyDomainFeatures_GetSpectralFlatness");
static_assert(sizeof(CoreFrequencyDomainFeatures_GetSpectralFlatness) == 0x000018, "Wrong size on CoreFrequencyDomainFeatures_GetSpectralFlatness");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralFlatness, MagnitudeSpectrum) == 0x000000, "Member 'CoreFrequencyDomainFeatures_GetSpectralFlatness::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralFlatness, ReturnValue) == 0x000010, "Member 'CoreFrequencyDomainFeatures_GetSpectralFlatness::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralKurtosis
// 0x0018 (0x0018 - 0x0000)
struct CoreFrequencyDomainFeatures_GetSpectralKurtosis final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreFrequencyDomainFeatures_GetSpectralKurtosis) == 0x000008, "Wrong alignment on CoreFrequencyDomainFeatures_GetSpectralKurtosis");
static_assert(sizeof(CoreFrequencyDomainFeatures_GetSpectralKurtosis) == 0x000018, "Wrong size on CoreFrequencyDomainFeatures_GetSpectralKurtosis");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralKurtosis, MagnitudeSpectrum) == 0x000000, "Member 'CoreFrequencyDomainFeatures_GetSpectralKurtosis::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralKurtosis, ReturnValue) == 0x000010, "Member 'CoreFrequencyDomainFeatures_GetSpectralKurtosis::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralRolloff
// 0x0018 (0x0018 - 0x0000)
struct CoreFrequencyDomainFeatures_GetSpectralRolloff final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Percentile;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFrequencyDomainFeatures_GetSpectralRolloff) == 0x000008, "Wrong alignment on CoreFrequencyDomainFeatures_GetSpectralRolloff");
static_assert(sizeof(CoreFrequencyDomainFeatures_GetSpectralRolloff) == 0x000018, "Wrong size on CoreFrequencyDomainFeatures_GetSpectralRolloff");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralRolloff, MagnitudeSpectrum) == 0x000000, "Member 'CoreFrequencyDomainFeatures_GetSpectralRolloff::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralRolloff, Percentile) == 0x000010, "Member 'CoreFrequencyDomainFeatures_GetSpectralRolloff::Percentile' has a wrong offset!");
static_assert(offsetof(CoreFrequencyDomainFeatures_GetSpectralRolloff, ReturnValue) == 0x000014, "Member 'CoreFrequencyDomainFeatures_GetSpectralRolloff::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetPeakEnergy
// 0x0018 (0x0018 - 0x0000)
struct CoreTimeDomainFeatures_GetPeakEnergy final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTimeDomainFeatures_GetPeakEnergy) == 0x000008, "Wrong alignment on CoreTimeDomainFeatures_GetPeakEnergy");
static_assert(sizeof(CoreTimeDomainFeatures_GetPeakEnergy) == 0x000018, "Wrong size on CoreTimeDomainFeatures_GetPeakEnergy");
static_assert(offsetof(CoreTimeDomainFeatures_GetPeakEnergy, AudioFrames) == 0x000000, "Member 'CoreTimeDomainFeatures_GetPeakEnergy::AudioFrames' has a wrong offset!");
static_assert(offsetof(CoreTimeDomainFeatures_GetPeakEnergy, ReturnValue) == 0x000010, "Member 'CoreTimeDomainFeatures_GetPeakEnergy::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetRootMeanSquare
// 0x0018 (0x0018 - 0x0000)
struct CoreTimeDomainFeatures_GetRootMeanSquare final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTimeDomainFeatures_GetRootMeanSquare) == 0x000008, "Wrong alignment on CoreTimeDomainFeatures_GetRootMeanSquare");
static_assert(sizeof(CoreTimeDomainFeatures_GetRootMeanSquare) == 0x000018, "Wrong size on CoreTimeDomainFeatures_GetRootMeanSquare");
static_assert(offsetof(CoreTimeDomainFeatures_GetRootMeanSquare, AudioFrames) == 0x000000, "Member 'CoreTimeDomainFeatures_GetRootMeanSquare::AudioFrames' has a wrong offset!");
static_assert(offsetof(CoreTimeDomainFeatures_GetRootMeanSquare, ReturnValue) == 0x000010, "Member 'CoreTimeDomainFeatures_GetRootMeanSquare::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetZeroCrossingRate
// 0x0018 (0x0018 - 0x0000)
struct CoreTimeDomainFeatures_GetZeroCrossingRate final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTimeDomainFeatures_GetZeroCrossingRate) == 0x000008, "Wrong alignment on CoreTimeDomainFeatures_GetZeroCrossingRate");
static_assert(sizeof(CoreTimeDomainFeatures_GetZeroCrossingRate) == 0x000018, "Wrong size on CoreTimeDomainFeatures_GetZeroCrossingRate");
static_assert(offsetof(CoreTimeDomainFeatures_GetZeroCrossingRate, AudioFrames) == 0x000000, "Member 'CoreTimeDomainFeatures_GetZeroCrossingRate::AudioFrames' has a wrong offset!");
static_assert(offsetof(CoreTimeDomainFeatures_GetZeroCrossingRate, ReturnValue) == 0x000010, "Member 'CoreTimeDomainFeatures_GetZeroCrossingRate::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.CreateOnsetDetection
// 0x0010 (0x0010 - 0x0000)
struct OnsetDetection_CreateOnsetDetection final
{
public:
	int64                                         FrameSize;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOnsetDetection*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnsetDetection_CreateOnsetDetection) == 0x000008, "Wrong alignment on OnsetDetection_CreateOnsetDetection");
static_assert(sizeof(OnsetDetection_CreateOnsetDetection) == 0x000010, "Wrong size on OnsetDetection_CreateOnsetDetection");
static_assert(offsetof(OnsetDetection_CreateOnsetDetection, FrameSize) == 0x000000, "Member 'OnsetDetection_CreateOnsetDetection::FrameSize' has a wrong offset!");
static_assert(offsetof(OnsetDetection_CreateOnsetDetection, ReturnValue) == 0x000008, "Member 'OnsetDetection_CreateOnsetDetection::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetHighFrequencyContent
// 0x0018 (0x0018 - 0x0000)
struct OnsetDetection_GetHighFrequencyContent final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetHighFrequencyContent) == 0x000008, "Wrong alignment on OnsetDetection_GetHighFrequencyContent");
static_assert(sizeof(OnsetDetection_GetHighFrequencyContent) == 0x000018, "Wrong size on OnsetDetection_GetHighFrequencyContent");
static_assert(offsetof(OnsetDetection_GetHighFrequencyContent, MagnitudeSpectrum) == 0x000000, "Member 'OnsetDetection_GetHighFrequencyContent::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetHighFrequencyContent, ReturnValue) == 0x000010, "Member 'OnsetDetection_GetHighFrequencyContent::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetComplexSpectralDifference
// 0x0028 (0x0028 - 0x0000)
struct OnsetDetection_GetComplexSpectralDifference final
{
public:
	TArray<float>                                 FFTReal;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 FFTImaginary;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetComplexSpectralDifference) == 0x000008, "Wrong alignment on OnsetDetection_GetComplexSpectralDifference");
static_assert(sizeof(OnsetDetection_GetComplexSpectralDifference) == 0x000028, "Wrong size on OnsetDetection_GetComplexSpectralDifference");
static_assert(offsetof(OnsetDetection_GetComplexSpectralDifference, FFTReal) == 0x000000, "Member 'OnsetDetection_GetComplexSpectralDifference::FFTReal' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetComplexSpectralDifference, FFTImaginary) == 0x000010, "Member 'OnsetDetection_GetComplexSpectralDifference::FFTImaginary' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetComplexSpectralDifference, ReturnValue) == 0x000020, "Member 'OnsetDetection_GetComplexSpectralDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetEnergyDifference
// 0x0018 (0x0018 - 0x0000)
struct OnsetDetection_GetEnergyDifference final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetEnergyDifference) == 0x000008, "Wrong alignment on OnsetDetection_GetEnergyDifference");
static_assert(sizeof(OnsetDetection_GetEnergyDifference) == 0x000018, "Wrong size on OnsetDetection_GetEnergyDifference");
static_assert(offsetof(OnsetDetection_GetEnergyDifference, AudioFrames) == 0x000000, "Member 'OnsetDetection_GetEnergyDifference::AudioFrames' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetEnergyDifference, ReturnValue) == 0x000010, "Member 'OnsetDetection_GetEnergyDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetEnergyEnvelope
// 0x0018 (0x0018 - 0x0000)
struct OnsetDetection_GetEnergyEnvelope final
{
public:
	TArray<float>                                 AudioFrames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetEnergyEnvelope) == 0x000008, "Wrong alignment on OnsetDetection_GetEnergyEnvelope");
static_assert(sizeof(OnsetDetection_GetEnergyEnvelope) == 0x000018, "Wrong size on OnsetDetection_GetEnergyEnvelope");
static_assert(offsetof(OnsetDetection_GetEnergyEnvelope, AudioFrames) == 0x000000, "Member 'OnsetDetection_GetEnergyEnvelope::AudioFrames' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetEnergyEnvelope, ReturnValue) == 0x000010, "Member 'OnsetDetection_GetEnergyEnvelope::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetSpectralDifference
// 0x0018 (0x0018 - 0x0000)
struct OnsetDetection_GetSpectralDifference final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetSpectralDifference) == 0x000008, "Wrong alignment on OnsetDetection_GetSpectralDifference");
static_assert(sizeof(OnsetDetection_GetSpectralDifference) == 0x000018, "Wrong size on OnsetDetection_GetSpectralDifference");
static_assert(offsetof(OnsetDetection_GetSpectralDifference, MagnitudeSpectrum) == 0x000000, "Member 'OnsetDetection_GetSpectralDifference::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetSpectralDifference, ReturnValue) == 0x000010, "Member 'OnsetDetection_GetSpectralDifference::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.GetSpectralDifferenceHWR
// 0x0018 (0x0018 - 0x0000)
struct OnsetDetection_GetSpectralDifferenceHWR final
{
public:
	TArray<float>                                 MagnitudeSpectrum;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnsetDetection_GetSpectralDifferenceHWR) == 0x000008, "Wrong alignment on OnsetDetection_GetSpectralDifferenceHWR");
static_assert(sizeof(OnsetDetection_GetSpectralDifferenceHWR) == 0x000018, "Wrong size on OnsetDetection_GetSpectralDifferenceHWR");
static_assert(offsetof(OnsetDetection_GetSpectralDifferenceHWR, MagnitudeSpectrum) == 0x000000, "Member 'OnsetDetection_GetSpectralDifferenceHWR::MagnitudeSpectrum' has a wrong offset!");
static_assert(offsetof(OnsetDetection_GetSpectralDifferenceHWR, ReturnValue) == 0x000010, "Member 'OnsetDetection_GetSpectralDifferenceHWR::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.OnsetDetection.UpdateFrameSize
// 0x0004 (0x0004 - 0x0000)
struct OnsetDetection_UpdateFrameSize final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnsetDetection_UpdateFrameSize) == 0x000004, "Wrong alignment on OnsetDetection_UpdateFrameSize");
static_assert(sizeof(OnsetDetection_UpdateFrameSize) == 0x000004, "Wrong size on OnsetDetection_UpdateFrameSize");
static_assert(offsetof(OnsetDetection_UpdateFrameSize, FrameSize) == 0x000000, "Member 'OnsetDetection_UpdateFrameSize::FrameSize' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateBlackmanWindow
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateBlackmanWindow final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateBlackmanWindow) == 0x000008, "Wrong alignment on WindowsLibrary_CreateBlackmanWindow");
static_assert(sizeof(WindowsLibrary_CreateBlackmanWindow) == 0x000018, "Wrong size on WindowsLibrary_CreateBlackmanWindow");
static_assert(offsetof(WindowsLibrary_CreateBlackmanWindow, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateBlackmanWindow::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateBlackmanWindow, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateBlackmanWindow::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateHammingWindow
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateHammingWindow final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateHammingWindow) == 0x000008, "Wrong alignment on WindowsLibrary_CreateHammingWindow");
static_assert(sizeof(WindowsLibrary_CreateHammingWindow) == 0x000018, "Wrong size on WindowsLibrary_CreateHammingWindow");
static_assert(offsetof(WindowsLibrary_CreateHammingWindow, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateHammingWindow::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateHammingWindow, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateHammingWindow::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateHanningWindow
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateHanningWindow final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateHanningWindow) == 0x000008, "Wrong alignment on WindowsLibrary_CreateHanningWindow");
static_assert(sizeof(WindowsLibrary_CreateHanningWindow) == 0x000018, "Wrong size on WindowsLibrary_CreateHanningWindow");
static_assert(offsetof(WindowsLibrary_CreateHanningWindow, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateHanningWindow::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateHanningWindow, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateHanningWindow::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateRectangularWindow
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateRectangularWindow final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateRectangularWindow) == 0x000008, "Wrong alignment on WindowsLibrary_CreateRectangularWindow");
static_assert(sizeof(WindowsLibrary_CreateRectangularWindow) == 0x000018, "Wrong size on WindowsLibrary_CreateRectangularWindow");
static_assert(offsetof(WindowsLibrary_CreateRectangularWindow, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateRectangularWindow::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateRectangularWindow, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateRectangularWindow::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateTukeyWindow
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateTukeyWindow final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CosineFraction;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateTukeyWindow) == 0x000008, "Wrong alignment on WindowsLibrary_CreateTukeyWindow");
static_assert(sizeof(WindowsLibrary_CreateTukeyWindow) == 0x000018, "Wrong size on WindowsLibrary_CreateTukeyWindow");
static_assert(offsetof(WindowsLibrary_CreateTukeyWindow, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateTukeyWindow::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateTukeyWindow, CosineFraction) == 0x000004, "Member 'WindowsLibrary_CreateTukeyWindow::CosineFraction' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateTukeyWindow, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateTukeyWindow::ReturnValue' has a wrong offset!");

// Function AudioAnalysisTools.WindowsLibrary.CreateWindowByType
// 0x0018 (0x0018 - 0x0000)
struct WindowsLibrary_CreateWindowByType final
{
public:
	int32                                         FrameSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnalysisWindowType                           WindowType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowsLibrary_CreateWindowByType) == 0x000008, "Wrong alignment on WindowsLibrary_CreateWindowByType");
static_assert(sizeof(WindowsLibrary_CreateWindowByType) == 0x000018, "Wrong size on WindowsLibrary_CreateWindowByType");
static_assert(offsetof(WindowsLibrary_CreateWindowByType, FrameSize) == 0x000000, "Member 'WindowsLibrary_CreateWindowByType::FrameSize' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateWindowByType, WindowType) == 0x000004, "Member 'WindowsLibrary_CreateWindowByType::WindowType' has a wrong offset!");
static_assert(offsetof(WindowsLibrary_CreateWindowByType, ReturnValue) == 0x000008, "Member 'WindowsLibrary_CreateWindowByType::ReturnValue' has a wrong offset!");

}

