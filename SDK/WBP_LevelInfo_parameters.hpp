#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LevelInfo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ThankYouVeryCool_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_LevelInfo.WBP_LevelInfo_C.ExecuteUbergraph_WBP_LevelInfo
// 0x000C (0x000C - 0x0000)
struct WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo) == 0x000004, "Wrong alignment on WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo");
static_assert(sizeof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo) == 0x00000C, "Wrong size on WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, EntryPoint) == 0x000000, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, Temp_bool_Variable) == 0x000004, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, Temp_byte_Variable) == 0x000005, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo, K2Node_Select_Default) == 0x000008, "Member 'WBP_LevelInfo_C_ExecuteUbergraph_WBP_LevelInfo::K2Node_Select_Default' has a wrong offset!");

// Function WBP_LevelInfo.WBP_LevelInfo_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_LevelInfo_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LevelInfo_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_LevelInfo_C_PreConstruct");
static_assert(sizeof(WBP_LevelInfo_C_PreConstruct) == 0x000001, "Wrong size on WBP_LevelInfo_C_PreConstruct");
static_assert(offsetof(WBP_LevelInfo_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_LevelInfo_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_LevelInfo.WBP_LevelInfo_C.LoadSave
// 0x0230 (0x0230 - 0x0000)
struct WBP_LevelInfo_C_LoadSave final
{
public:
	struct FArcadeLevelSave                       SaveData;                                          // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<struct FChallenge>                     AllChallenges;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          AsCampaign;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_TimeSecondsToString_ReturnValue;          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0058(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0070(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   Temp_byte_Variable_2;                              // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0108(0x0018)()
	ERank                                         Temp_byte_Variable_3;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0128(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x0140(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x0158(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x0170(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0188(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x01A0(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x01B8(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x01D0(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x01E8(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0200(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0218(0x0018)()
};
static_assert(alignof(WBP_LevelInfo_C_LoadSave) == 0x000008, "Wrong alignment on WBP_LevelInfo_C_LoadSave");
static_assert(sizeof(WBP_LevelInfo_C_LoadSave) == 0x000230, "Wrong size on WBP_LevelInfo_C_LoadSave");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, SaveData) == 0x000000, "Member 'WBP_LevelInfo_C_LoadSave::SaveData' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, AllChallenges) == 0x000030, "Member 'WBP_LevelInfo_C_LoadSave::AllChallenges' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, AsCampaign) == 0x000040, "Member 'WBP_LevelInfo_C_LoadSave::AsCampaign' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_bool_Variable) == 0x000041, "Member 'WBP_LevelInfo_C_LoadSave::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, CallFunc_TimeSecondsToString_ReturnValue) == 0x000048, "Member 'WBP_LevelInfo_C_LoadSave::CallFunc_TimeSecondsToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, CallFunc_Conv_IntToText_ReturnValue) == 0x000058, "Member 'WBP_LevelInfo_C_LoadSave::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, CallFunc_Conv_StringToText_ReturnValue) == 0x000070, "Member 'WBP_LevelInfo_C_LoadSave::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_byte_Variable) == 0x000088, "Member 'WBP_LevelInfo_C_LoadSave::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_byte_Variable_1) == 0x000089, "Member 'WBP_LevelInfo_C_LoadSave::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_byte_Variable_2) == 0x00008A, "Member 'WBP_LevelInfo_C_LoadSave::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, K2Node_Select_Default) == 0x00008B, "Member 'WBP_LevelInfo_C_LoadSave::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable) == 0x000090, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_1) == 0x0000A8, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_2) == 0x0000C0, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_3) == 0x0000D8, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_4) == 0x0000F0, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_5) == 0x000108, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_byte_Variable_3) == 0x000120, "Member 'WBP_LevelInfo_C_LoadSave::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, K2Node_Select_Default_1) == 0x000128, "Member 'WBP_LevelInfo_C_LoadSave::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_6) == 0x000140, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_7) == 0x000158, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_8) == 0x000170, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_9) == 0x000188, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_10) == 0x0001A0, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_11) == 0x0001B8, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_12) == 0x0001D0, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_13) == 0x0001E8, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, Temp_text_Variable_14) == 0x000200, "Member 'WBP_LevelInfo_C_LoadSave::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_LoadSave, K2Node_Select_Default_2) == 0x000218, "Member 'WBP_LevelInfo_C_LoadSave::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_LevelInfo.WBP_LevelInfo_C.SetupAsNeverBeat
// 0x0020 (0x0020 - 0x0000)
struct WBP_LevelInfo_C_SetupAsNeverBeat final
{
public:
	TArray<struct FChallenge>                     Challenges;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FChallenge>                     K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(WBP_LevelInfo_C_SetupAsNeverBeat) == 0x000008, "Wrong alignment on WBP_LevelInfo_C_SetupAsNeverBeat");
static_assert(sizeof(WBP_LevelInfo_C_SetupAsNeverBeat) == 0x000020, "Wrong size on WBP_LevelInfo_C_SetupAsNeverBeat");
static_assert(offsetof(WBP_LevelInfo_C_SetupAsNeverBeat, Challenges) == 0x000000, "Member 'WBP_LevelInfo_C_SetupAsNeverBeat::Challenges' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_SetupAsNeverBeat, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_LevelInfo_C_SetupAsNeverBeat::K2Node_MakeArray_Array' has a wrong offset!");

// Function WBP_LevelInfo.WBP_LevelInfo_C.Get_HighestScore_ColorAndOpacity_0
// 0x0060 (0x0060 - 0x0000)
struct WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0 final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
};
static_assert(alignof(WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0) == 0x000008, "Wrong alignment on WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0");
static_assert(sizeof(WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0) == 0x000060, "Wrong size on WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0");
static_assert(offsetof(WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000028, "Member 'WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'WBP_LevelInfo_C_Get_HighestScore_ColorAndOpacity_0::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

