#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VoxelDoor

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "Engine_structs.hpp"
#include "E_DoorState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PVW_ExplosiveBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VoxelDoor.BP_VoxelDoor_C
// 0x0068 (0x0B48 - 0x0AE0)
class ABP_VoxelDoor_C final : public APVW_ExplosiveBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_VoxelDoor_C;                     // 0x0AE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        Decal;                                             // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         OpenTimeline_NewTrack_0_12246C9140C5140AB7624CBDBA566D80; // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OpenTimeline__Direction_12246C9140C5140AB7624CBDBA566D80; // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OpenTimeline;                                      // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DoorState                                   MyState;                                           // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x3];                                      // 0x0B19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MyStartingRot;                                     // 0x0B1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLocked;                                           // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMat;                                            // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSpin;                                       // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               NewVar_0_0;                                        // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VoxelDoor(int32 EntryPoint);
	void NotifyPlayingReverse();
	void DoorXP();
	void BndEvt__BP_VoxelDoor_ProjMoveComp_K2Node_ComponentBoundEvent_3_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void ReceiveBeginPlay();
	void RequestInteraction(class AActor* Interactor);
	void LevelReady();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_2_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void BndEvt__WorldRoot_K2Node_ComponentBoundEvent_1_ComponentSleepSignature__DelegateSignature(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void OpenDoor(bool BlowOffHinge, class AActor* Interactor, EImpactType ImpactType);
	void PostDataLoaded();
	void BndEvt__WorldRoot_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OpenTimeline__UpdateFunc();
	void OpenTimeline__FinishedFunc();
	bool IsInteractable();
	class FText GetInteractionText();
	bool OnHit(EImpactType ImpactType, const struct FHitResult& HitResult, float Dmg);
	void SetLock(bool Lock);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VoxelDoor_C">();
	}
	static class ABP_VoxelDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VoxelDoor_C>();
	}
};
static_assert(alignof(ABP_VoxelDoor_C) == 0x000008, "Wrong alignment on ABP_VoxelDoor_C");
static_assert(sizeof(ABP_VoxelDoor_C) == 0x000B48, "Wrong size on ABP_VoxelDoor_C");
static_assert(offsetof(ABP_VoxelDoor_C, UberGraphFrame_BP_VoxelDoor_C) == 0x000AE0, "Member 'ABP_VoxelDoor_C::UberGraphFrame_BP_VoxelDoor_C' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, Decal) == 0x000AE8, "Member 'ABP_VoxelDoor_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, NavModifier) == 0x000AF0, "Member 'ABP_VoxelDoor_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, ProjectileMovement) == 0x000AF8, "Member 'ABP_VoxelDoor_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, Box) == 0x000B00, "Member 'ABP_VoxelDoor_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, OpenTimeline_NewTrack_0_12246C9140C5140AB7624CBDBA566D80) == 0x000B08, "Member 'ABP_VoxelDoor_C::OpenTimeline_NewTrack_0_12246C9140C5140AB7624CBDBA566D80' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, OpenTimeline__Direction_12246C9140C5140AB7624CBDBA566D80) == 0x000B0C, "Member 'ABP_VoxelDoor_C::OpenTimeline__Direction_12246C9140C5140AB7624CBDBA566D80' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, OpenTimeline) == 0x000B10, "Member 'ABP_VoxelDoor_C::OpenTimeline' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, MyState) == 0x000B18, "Member 'ABP_VoxelDoor_C::MyState' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, MyStartingRot) == 0x000B1C, "Member 'ABP_VoxelDoor_C::MyStartingRot' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, bLocked) == 0x000B28, "Member 'ABP_VoxelDoor_C::bLocked' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, DynMat) == 0x000B30, "Member 'ABP_VoxelDoor_C::DynMat' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, bShouldSpin) == 0x000B38, "Member 'ABP_VoxelDoor_C::bShouldSpin' has a wrong offset!");
static_assert(offsetof(ABP_VoxelDoor_C, NewVar_0_0) == 0x000B40, "Member 'ABP_VoxelDoor_C::NewVar_0_0' has a wrong offset!");

}

