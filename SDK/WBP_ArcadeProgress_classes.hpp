#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ArcadeProgress

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ArcadeProgress.WBP_ArcadeProgress_C
// 0x00A8 (0x0308 - 0x0260)
class UWBP_ArcadeProgress_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_55;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_94;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Level_1;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LEVELWORD;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Next;                                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCurveFloat*                            XPCurve;                                           // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XPCounter;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMat;                                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressToAnim;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimStartLevel;                                    // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TickAnimHandle;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AnimProgressCurrent;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 NewLevel)> OnCrossLevel;                                      // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         InterpedAnim;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimEnLEvel;                                       // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAnimating;                                      // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interp_Speed;                                      // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelLastFrame;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        booooooop;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowNext;                                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Left)>    ReportNextLevelIn;                                 // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_WBP_ArcadeProgress(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnInitialLoadComplete();
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetToXP(float InXP);
	void AnimateToXP(int32 StartXP, int32 EndXP);
	void GetXPToProgress(int32 ProgressingFrom, int32* Needed);
	void Tick_Progress();
	void AnimateV2(int32 Start, int32 End);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ArcadeProgress_C">();
	}
	static class UWBP_ArcadeProgress_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ArcadeProgress_C>();
	}
};
static_assert(alignof(UWBP_ArcadeProgress_C) == 0x000008, "Wrong alignment on UWBP_ArcadeProgress_C");
static_assert(sizeof(UWBP_ArcadeProgress_C) == 0x000308, "Wrong size on UWBP_ArcadeProgress_C");
static_assert(offsetof(UWBP_ArcadeProgress_C, UberGraphFrame) == 0x000260, "Member 'UWBP_ArcadeProgress_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, Image_55) == 0x000268, "Member 'UWBP_ArcadeProgress_C::Image_55' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, Image_94) == 0x000270, "Member 'UWBP_ArcadeProgress_C::Image_94' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, Level_1) == 0x000278, "Member 'UWBP_ArcadeProgress_C::Level_1' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, LEVELWORD) == 0x000280, "Member 'UWBP_ArcadeProgress_C::LEVELWORD' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, Next) == 0x000288, "Member 'UWBP_ArcadeProgress_C::Next' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, XPCurve) == 0x000290, "Member 'UWBP_ArcadeProgress_C::XPCurve' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, XPCounter) == 0x000298, "Member 'UWBP_ArcadeProgress_C::XPCounter' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, DynMat) == 0x0002A0, "Member 'UWBP_ArcadeProgress_C::DynMat' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, ProgressToAnim) == 0x0002A8, "Member 'UWBP_ArcadeProgress_C::ProgressToAnim' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, AnimStartLevel) == 0x0002AC, "Member 'UWBP_ArcadeProgress_C::AnimStartLevel' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, TickAnimHandle) == 0x0002B0, "Member 'UWBP_ArcadeProgress_C::TickAnimHandle' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, AnimProgressCurrent) == 0x0002B8, "Member 'UWBP_ArcadeProgress_C::AnimProgressCurrent' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, OnCrossLevel) == 0x0002C0, "Member 'UWBP_ArcadeProgress_C::OnCrossLevel' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, InterpedAnim) == 0x0002D0, "Member 'UWBP_ArcadeProgress_C::InterpedAnim' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, AnimEnLEvel) == 0x0002D4, "Member 'UWBP_ArcadeProgress_C::AnimEnLEvel' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, bIsAnimating) == 0x0002D8, "Member 'UWBP_ArcadeProgress_C::bIsAnimating' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, Interp_Speed) == 0x0002DC, "Member 'UWBP_ArcadeProgress_C::Interp_Speed' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, LevelLastFrame) == 0x0002E0, "Member 'UWBP_ArcadeProgress_C::LevelLastFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, booooooop) == 0x0002E8, "Member 'UWBP_ArcadeProgress_C::booooooop' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, bShowNext) == 0x0002F0, "Member 'UWBP_ArcadeProgress_C::bShowNext' has a wrong offset!");
static_assert(offsetof(UWBP_ArcadeProgress_C, ReportNextLevelIn) == 0x0002F8, "Member 'UWBP_ArcadeProgress_C::ReportNextLevelIn' has a wrong offset!");

}

