#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LockedChapter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_LockedChapter.WBP_LockedChapter_C
// 0x0098 (0x02F8 - 0x0260)
class UWBP_LockedChapter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_AdamButton_C*                      WBP_AdamButton_C_3;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ULevelEditorSave*                       leveldata;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LevelName;                                         // 0x0280(0x0018)(Edit, BlueprintVisible)
	int32                                         UnlockLevel;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UClass* OutLevel, class FText DisplayName)> OnClicked;                                         // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsWeapon;                                         // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnClickedForWeapon;                                // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UWBP_LockedChapter_C* me)> OnHovered;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 MyDataAsset;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   ChapterName;                                       // 0x02E0(0x0018)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_WBP_LockedChapter(int32 EntryPoint);
	void BndEvt__WBP_AdamButton_C_3_K2Node_ComponentBoundEvent_9_OnPressed__DelegateSignature();
	void BndEvt__WBP_AdamButton_C_3_K2Node_ComponentBoundEvent_8_OnUnhovered__DelegateSignature();
	void BndEvt__WBP_AdamButton_C_3_K2Node_ComponentBoundEvent_7_AddedToFocusPath__DelegateSignature();
	void BndEvt__WBP_AdamButton_C_3_K2Node_ComponentBoundEvent_6_OnFocused__DelegateSignature();
	void BndEvt__WBP_AdamButton_C_3_K2Node_ComponentBoundEvent_5_OnHovered__DelegateSignature();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void BndEvt__WBP_AdamButton_K2Node_ComponentBoundEvent_2_OnUnhovered__DelegateSignature();
	void BndEvt__WBP_AdamButton_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature();
	void GetMyPicture(class UTexture2D** NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_LockedChapter_C">();
	}
	static class UWBP_LockedChapter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_LockedChapter_C>();
	}
};
static_assert(alignof(UWBP_LockedChapter_C) == 0x000008, "Wrong alignment on UWBP_LockedChapter_C");
static_assert(sizeof(UWBP_LockedChapter_C) == 0x0002F8, "Wrong size on UWBP_LockedChapter_C");
static_assert(offsetof(UWBP_LockedChapter_C, UberGraphFrame) == 0x000260, "Member 'UWBP_LockedChapter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, WBP_AdamButton_C_3) == 0x000268, "Member 'UWBP_LockedChapter_C::WBP_AdamButton_C_3' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, leveldata) == 0x000270, "Member 'UWBP_LockedChapter_C::leveldata' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, IsLocked) == 0x000278, "Member 'UWBP_LockedChapter_C::IsLocked' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, LevelName) == 0x000280, "Member 'UWBP_LockedChapter_C::LevelName' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, UnlockLevel) == 0x000298, "Member 'UWBP_LockedChapter_C::UnlockLevel' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, OnClicked) == 0x0002A0, "Member 'UWBP_LockedChapter_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, bIsWeapon) == 0x0002B0, "Member 'UWBP_LockedChapter_C::bIsWeapon' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, OnClickedForWeapon) == 0x0002B8, "Member 'UWBP_LockedChapter_C::OnClickedForWeapon' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, OnHovered) == 0x0002C8, "Member 'UWBP_LockedChapter_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, MyDataAsset) == 0x0002D8, "Member 'UWBP_LockedChapter_C::MyDataAsset' has a wrong offset!");
static_assert(offsetof(UWBP_LockedChapter_C, ChapterName) == 0x0002E0, "Member 'UWBP_LockedChapter_C::ChapterName' has a wrong offset!");

}

