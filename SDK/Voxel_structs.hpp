#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Voxel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Voxel.EVoxelTaskType
// NumValues: 0x000B
enum class EVoxelTaskType : uint8
{
	ChunksMeshing                            = 0,
	CollisionsChunksMeshing                  = 1,
	VisibleChunksMeshing                     = 2,
	VisibleCollisionsChunksMeshing           = 3,
	CollisionCooking                         = 4,
	FoliageBuild                             = 5,
	HISMBuild                                = 6,
	AsyncEditFunctions                       = 7,
	MeshMerge                                = 8,
	RenderOctree                             = 9,
	Max                                      = 10,
};

// Enum Voxel.EVoxelFoliageWorldType
// NumValues: 0x0003
enum class EVoxelFoliageWorldType : uint8
{
	Flat                                     = 0,
	Planet                                   = 1,
	EVoxelFoliageWorldType_MAX               = 2,
};

// Enum Voxel.EVoxelRenderType
// NumValues: 0x0004
enum class EVoxelRenderType : uint8
{
	MarchingCubes                            = 0,
	Cubic                                    = 1,
	SurfaceNets                              = 2,
	EVoxelRenderType_MAX                     = 3,
};

// Enum Voxel.EVoxelRGBHardness
// NumValues: 0x000B
enum class EVoxelRGBHardness : uint8
{
	FourWayBlend                             = 0,
	FiveWayBlend                             = 1,
	R                                        = 2,
	G                                        = 3,
	B                                        = 4,
	A                                        = 5,
	U0                                       = 6,
	U1                                       = 7,
	V0                                       = 8,
	V1                                       = 9,
	EVoxelRGBHardness_MAX                    = 10,
};

// Enum Voxel.EVoxelNormalConfig
// NumValues: 0x0005
enum class EVoxelNormalConfig : uint8
{
	NoNormal                                 = 0,
	GradientNormal                           = 1,
	FlatNormal                               = 2,
	MeshNormal                               = 3,
	EVoxelNormalConfig_MAX                   = 4,
};

// Enum Voxel.EVoxelUVConfig
// NumValues: 0x0004
enum class EVoxelUVConfig : uint8
{
	GlobalUVs                                = 0,
	PackWorldUpInUVs                         = 1,
	PerVoxelUVs                              = 2,
	Max                                      = 3,
};

// Enum Voxel.EVoxelMaterialConfig
// NumValues: 0x0005
enum class EVoxelMaterialConfig : uint8
{
	RGB                                      = 0,
	SingleIndex                              = 1,
	DoubleIndex_DEPRECATED                   = 2,
	MultiIndex                               = 3,
	EVoxelMaterialConfig_MAX                 = 4,
};

// Enum Voxel.EVoxelGeneratorPickerType
// NumValues: 0x0003
enum class EVoxelGeneratorPickerType : uint8
{
	Class                                    = 0,
	Object                                   = 1,
	EVoxelGeneratorPickerType_MAX            = 2,
};

// Enum Voxel.EVoxelWorldCoordinatesRounding
// NumValues: 0x0004
enum class EVoxelWorldCoordinatesRounding : uint8
{
	RoundToNearest                           = 0,
	RoundUp                                  = 1,
	RoundDown                                = 2,
	EVoxelWorldCoordinatesRounding_MAX       = 3,
};

// Enum Voxel.EVoxelAssetActorPreviewUpdateType
// NumValues: 0x0004
enum class EVoxelAssetActorPreviewUpdateType : uint32
{
	Manually                                 = 0,
	EndOfMove                                = 1,
	RealTime                                 = 2,
	EVoxelAssetActorPreviewUpdateType_MAX    = 3,
};

// Enum Voxel.EVoxelAssetMergeMode
// NumValues: 0x0007
enum class EVoxelAssetMergeMode : uint8
{
	AllValues                                = 0,
	AllMaterials                             = 1,
	AllValuesAndAllMaterials                 = 2,
	InnerValues                              = 3,
	InnerMaterials                           = 4,
	InnerValuesAndInnerMaterials             = 5,
	EVoxelAssetMergeMode_MAX                 = 6,
};

// Enum Voxel.EVoxelMemoryUsageType
// NumValues: 0x0011
enum class EVoxelMemoryUsageType : uint8
{
	VoxelsDirtyValuesData                    = 0,
	VoxelsDirtyMaterialsData                 = 1,
	VoxelsCachedValuesData                   = 2,
	VoxelsCachedMaterialsData                = 3,
	UndoRedo                                 = 4,
	Multiplayer                              = 5,
	IntermediateBuffers                      = 6,
	MeshesIndices                            = 7,
	MeshesTessellationIndices                = 8,
	MeshesVertices                           = 9,
	MeshesColors                             = 10,
	MeshesUVsAndTangents                     = 11,
	DataAssets                               = 12,
	HeightmapAssets                          = 13,
	UncompressedSaves                        = 14,
	CompressedSaves                          = 15,
	EVoxelMemoryUsageType_MAX                = 16,
};

// Enum Voxel.EVoxelDataAssetImportSource
// NumValues: 0x0005
enum class EVoxelDataAssetImportSource : uint32
{
	None                                     = 0,
	MagicaVox                                = 1,
	RawVox                                   = 2,
	Mesh                                     = 3,
	EVoxelDataAssetImportSource_MAX          = 4,
};

// Enum Voxel.EVoxelDistanceType
// NumValues: 0x0003
enum class EVoxelDistanceType : uint8
{
	Voxels                                   = 0,
	Centimeters                              = 1,
	EVoxelDistanceType_MAX                   = 2,
};

// Enum Voxel.EVoxelCubicFace
// NumValues: 0x0007
enum class EVoxelCubicFace : uint8
{
	Back                                     = 0,
	Front                                    = 1,
	Left                                     = 2,
	Right                                    = 3,
	Bottom                                   = 4,
	Top                                      = 5,
	EVoxelCubicFace_MAX                      = 6,
};

// Enum Voxel.EVoxelDataItemCombineMode
// NumValues: 0x0003
enum class EVoxelDataItemCombineMode : uint32
{
	Min                                      = 0,
	Max                                      = 1,
	Sum                                      = 2,
};

// Enum Voxel.EVoxel32BitMask
// NumValues: 0x0021
enum class EVoxel32BitMask : uint8
{
	Channel0                                 = 0,
	Channel1                                 = 1,
	Channel2                                 = 2,
	Channel3                                 = 3,
	Channel4                                 = 4,
	Channel5                                 = 5,
	Channel6                                 = 6,
	Channel7                                 = 7,
	Channel8                                 = 8,
	Channel9                                 = 9,
	Channel10                                = 10,
	Channel11                                = 11,
	Channel12                                = 12,
	Channel13                                = 13,
	Channel14                                = 14,
	Channel15                                = 15,
	Channel16                                = 16,
	Channel17                                = 17,
	Channel18                                = 18,
	Channel19                                = 19,
	Channel20                                = 20,
	Channel21                                = 21,
	Channel22                                = 22,
	Channel23                                = 23,
	Channel24                                = 24,
	Channel25                                = 25,
	Channel26                                = 26,
	Channel27                                = 27,
	Channel28                                = 28,
	Channel29                                = 29,
	Channel30                                = 30,
	Channel31                                = 31,
	EVoxel32BitMask_MAX                      = 32,
};

// Enum Voxel.EVoxelAxis
// NumValues: 0x0004
enum class EVoxelAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EVoxelAxis_MAX                           = 3,
};

// Enum Voxel.EVoxelComputeDevice
// NumValues: 0x0003
enum class EVoxelComputeDevice : uint8
{
	CPU                                      = 0,
	GPU                                      = 1,
	EVoxelComputeDevice_MAX                  = 2,
};

// Enum Voxel.EVoxelFalloff
// NumValues: 0x0005
enum class EVoxelFalloff : uint8
{
	Linear                                   = 0,
	Smooth                                   = 1,
	Spherical                                = 2,
	Tip                                      = 3,
	EVoxelFalloff_MAX                        = 4,
};

// Enum Voxel.EVoxelDataType
// NumValues: 0x0003
enum class EVoxelDataType : uint8
{
	Values                                   = 0,
	Materials                                = 1,
	EVoxelDataType_MAX                       = 2,
};

// Enum Voxel.EVoxelSamplerMode
// NumValues: 0x0003
enum class EVoxelSamplerMode : uint8
{
	Clamp                                    = 0,
	Tile                                     = 1,
	EVoxelSamplerMode_MAX                    = 2,
};

// Enum Voxel.EVoxelSpawnerActorSpawnType
// NumValues: 0x0003
enum class EVoxelSpawnerActorSpawnType : uint8
{
	All                                      = 0,
	OnlyFloating                             = 1,
	EVoxelSpawnerActorSpawnType_MAX          = 2,
};

// Enum Voxel.EVoxelRGBA
// NumValues: 0x0005
enum class EVoxelRGBA : uint8
{
	R                                        = 0,
	G                                        = 1,
	B                                        = 2,
	A                                        = 3,
	EVoxelRGBA_MAX                           = 4,
};

// Enum Voxel.EVoxelCellularReturnType
// NumValues: 0x0008
enum class EVoxelCellularReturnType : uint8
{
	CellValue                                = 0,
	Distance                                 = 1,
	Distance2                                = 2,
	Distance2Add                             = 3,
	Distance2Sub                             = 4,
	Distance2Mul                             = 5,
	Distance2Div                             = 6,
	EVoxelCellularReturnType_MAX             = 7,
};

// Enum Voxel.EVoxelCellularDistanceFunction
// NumValues: 0x0004
enum class EVoxelCellularDistanceFunction : uint8
{
	Euclidean                                = 0,
	Manhattan                                = 1,
	Natural                                  = 2,
	EVoxelCellularDistanceFunction_MAX       = 3,
};

// Enum Voxel.EVoxelNoiseFractalType
// NumValues: 0x0004
enum class EVoxelNoiseFractalType : uint8
{
	FBM                                      = 0,
	Billow                                   = 1,
	RigidMulti                               = 2,
	EVoxelNoiseFractalType_MAX               = 3,
};

// Enum Voxel.EVoxelNoiseInterpolation
// NumValues: 0x0004
enum class EVoxelNoiseInterpolation : uint8
{
	Linear                                   = 0,
	Hermite                                  = 1,
	Quintic                                  = 2,
	EVoxelNoiseInterpolation_MAX             = 3,
};

// Enum Voxel.EVoxelGeneratorParameterPropertyType
// NumValues: 0x0007
enum class EVoxelGeneratorParameterPropertyType : uint8
{
	Float                                    = 0,
	Int                                      = 1,
	Bool                                     = 2,
	Name                                     = 3,
	Object                                   = 4,
	Struct                                   = 5,
	EVoxelGeneratorParameterPropertyType_MAX = 6,
};

// Enum Voxel.EVoxelGeneratorParameterContainerType
// NumValues: 0x0005
enum class EVoxelGeneratorParameterContainerType : uint8
{
	None                                     = 0,
	Array                                    = 1,
	Set                                      = 2,
	Map                                      = 3,
	EVoxelGeneratorParameterContainerType_MAX = 4,
};

// Enum Voxel.EVoxelHeightmapImporterMaterialConfig
// NumValues: 0x0006
enum class EVoxelHeightmapImporterMaterialConfig : uint8
{
	RGB                                      = 0,
	FourWayBlend                             = 1,
	FiveWayBlend                             = 2,
	SingleIndex                              = 3,
	MultiIndex                               = 4,
	EVoxelHeightmapImporterMaterialConfig_MAX = 5,
};

// Enum Voxel.EVoxelMaterialMask_BP
// NumValues: 0x000D
enum class EVoxelMaterialMask_BP : uint8
{
	R                                        = 0,
	G                                        = 1,
	B                                        = 2,
	A                                        = 3,
	U0                                       = 4,
	V0                                       = 5,
	U1                                       = 6,
	V1                                       = 7,
	U2                                       = 8,
	V2                                       = 9,
	U3                                       = 10,
	V3                                       = 11,
	EVoxelMaterialMask_MAX                   = 12,
};

// Enum Voxel.EVoxelPaintMaterialType
// NumValues: 0x0008
enum class EVoxelPaintMaterialType : uint8
{
	Color                                    = 0,
	FiveWayBlend                             = 1,
	SingleIndex                              = 2,
	MultiIndex                               = 3,
	MultiIndexWetness                        = 4,
	MultiIndexRaw                            = 5,
	UV                                       = 6,
	EVoxelPaintMaterialType_MAX              = 7,
};

// Enum Voxel.EVoxelPartType
// NumValues: 0x0004
enum class EVoxelPartType : uint8
{
	Normal                                   = 0,
	Shatter                                  = 1,
	PreShatter                               = 2,
	EVoxelPartType_MAX                       = 3,
};

// Enum Voxel.EVoxelProjectionShape
// NumValues: 0x0003
enum class EVoxelProjectionShape : uint8
{
	Circle                                   = 0,
	Square                                   = 1,
	EVoxelProjectionShape_MAX                = 2,
};

// Enum Voxel.EVoxelThreadPriority
// NumValues: 0x0008
enum class EVoxelThreadPriority : uint8
{
	Normal                                   = 0,
	AboveNormal                              = 1,
	BelowNormal                              = 2,
	Highest                                  = 3,
	Lowest                                   = 4,
	SlightlyBelowNormal                      = 5,
	TimeCritical                             = 6,
	EVoxelThreadPriority_MAX                 = 7,
};

// Enum Voxel.EVoxelSurfaceToolMaskType
// NumValues: 0x0003
enum class EVoxelSurfaceToolMaskType : uint8
{
	Texture                                  = 0,
	Generator                                = 1,
	EVoxelSurfaceToolMaskType_MAX            = 2,
};

// Enum Voxel.EVoxelSDFMergeMode
// NumValues: 0x0004
enum class EVoxelSDFMergeMode : uint8
{
	Union                                    = 0,
	Intersection                             = 1,
	Override                                 = 2,
	EVoxelSDFMergeMode_MAX                   = 3,
};

// Enum Voxel.EVoxelToolAlignment
// NumValues: 0x0005
enum class EVoxelToolAlignment : uint8
{
	Surface                                  = 0,
	View                                     = 1,
	Ground                                   = 2,
	Up                                       = 3,
	EVoxelToolAlignment_MAX                  = 4,
};

// ScriptStruct Voxel.VoxelPerlinWormsSettings
// 0x0058 (0x0058 - 0x0000)
struct FVoxelPerlinWormsSettings final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAmplitude;                                 // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSegments;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentLength;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplitProbability;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplitProbabilityGain;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BranchMeanSize;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BranchSizeVariation;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseDirection;                                    // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSegmentLength;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorms;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPerlinWormsSettings) == 0x000004, "Wrong alignment on FVoxelPerlinWormsSettings");
static_assert(sizeof(FVoxelPerlinWormsSettings) == 0x000058, "Wrong size on FVoxelPerlinWormsSettings");
static_assert(offsetof(FVoxelPerlinWormsSettings, Seed) == 0x000000, "Member 'FVoxelPerlinWormsSettings::Seed' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, Radius) == 0x000004, "Member 'FVoxelPerlinWormsSettings::Radius' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, Start) == 0x000008, "Member 'FVoxelPerlinWormsSettings::Start' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, Direction) == 0x000014, "Member 'FVoxelPerlinWormsSettings::Direction' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, RotationAmplitude) == 0x000020, "Member 'FVoxelPerlinWormsSettings::RotationAmplitude' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, NumSegments) == 0x00002C, "Member 'FVoxelPerlinWormsSettings::NumSegments' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, SegmentLength) == 0x000030, "Member 'FVoxelPerlinWormsSettings::SegmentLength' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, SplitProbability) == 0x000034, "Member 'FVoxelPerlinWormsSettings::SplitProbability' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, SplitProbabilityGain) == 0x000038, "Member 'FVoxelPerlinWormsSettings::SplitProbabilityGain' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, BranchMeanSize) == 0x00003C, "Member 'FVoxelPerlinWormsSettings::BranchMeanSize' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, BranchSizeVariation) == 0x000040, "Member 'FVoxelPerlinWormsSettings::BranchSizeVariation' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, NoiseDirection) == 0x000044, "Member 'FVoxelPerlinWormsSettings::NoiseDirection' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, NoiseSegmentLength) == 0x000050, "Member 'FVoxelPerlinWormsSettings::NoiseSegmentLength' has a wrong offset!");
static_assert(offsetof(FVoxelPerlinWormsSettings, MaxWorms) == 0x000054, "Member 'FVoxelPerlinWormsSettings::MaxWorms' has a wrong offset!");

// ScriptStruct Voxel.VoxelFlatGeneratorDataItemConfig
// 0x000C (0x000C - 0x0000)
struct FVoxelFlatGeneratorDataItemConfig final
{
public:
	float                                         Smoothness;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtractItems;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelFlatGeneratorDataItemConfig) == 0x000004, "Wrong alignment on FVoxelFlatGeneratorDataItemConfig");
static_assert(sizeof(FVoxelFlatGeneratorDataItemConfig) == 0x00000C, "Wrong size on FVoxelFlatGeneratorDataItemConfig");
static_assert(offsetof(FVoxelFlatGeneratorDataItemConfig, Smoothness) == 0x000000, "Member 'FVoxelFlatGeneratorDataItemConfig::Smoothness' has a wrong offset!");
static_assert(offsetof(FVoxelFlatGeneratorDataItemConfig, Mask) == 0x000004, "Member 'FVoxelFlatGeneratorDataItemConfig::Mask' has a wrong offset!");
static_assert(offsetof(FVoxelFlatGeneratorDataItemConfig, bSubtractItems) == 0x000008, "Member 'FVoxelFlatGeneratorDataItemConfig::bSubtractItems' has a wrong offset!");

// ScriptStruct Voxel.VoxelFloatInterval
// 0x0008 (0x0008 - 0x0000)
struct FVoxelFloatInterval final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelFloatInterval) == 0x000004, "Wrong alignment on FVoxelFloatInterval");
static_assert(sizeof(FVoxelFloatInterval) == 0x000008, "Wrong size on FVoxelFloatInterval");
static_assert(offsetof(FVoxelFloatInterval, Min) == 0x000000, "Member 'FVoxelFloatInterval::Min' has a wrong offset!");
static_assert(offsetof(FVoxelFloatInterval, Max) == 0x000004, "Member 'FVoxelFloatInterval::Max' has a wrong offset!");

// ScriptStruct Voxel.VoxelIntBox
// 0x0018 (0x0018 - 0x0000)
struct FVoxelIntBox final
{
public:
	struct FIntVector                             Min;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Max;                                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelIntBox) == 0x000004, "Wrong alignment on FVoxelIntBox");
static_assert(sizeof(FVoxelIntBox) == 0x000018, "Wrong size on FVoxelIntBox");
static_assert(offsetof(FVoxelIntBox, Min) == 0x000000, "Member 'FVoxelIntBox::Min' has a wrong offset!");
static_assert(offsetof(FVoxelIntBox, Max) == 0x00000C, "Member 'FVoxelIntBox::Max' has a wrong offset!");

// ScriptStruct Voxel.VoxelLandscapeMaterialCollectionPermutation
// 0x0030 (0x0030 - 0x0000)
struct FVoxelLandscapeMaterialCollectionPermutation final
{
public:
	class FName                                   Names[0x6];                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelLandscapeMaterialCollectionPermutation) == 0x000004, "Wrong alignment on FVoxelLandscapeMaterialCollectionPermutation");
static_assert(sizeof(FVoxelLandscapeMaterialCollectionPermutation) == 0x000030, "Wrong size on FVoxelLandscapeMaterialCollectionPermutation");
static_assert(offsetof(FVoxelLandscapeMaterialCollectionPermutation, Names) == 0x000000, "Member 'FVoxelLandscapeMaterialCollectionPermutation::Names' has a wrong offset!");

// ScriptStruct Voxel.VoxelToolTickData
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x10) FVoxelToolTickData final
{
public:
	struct FVector2D                              MousePosition;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraViewDirection;                               // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdit;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       Keys;                                              // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Axes;                                              // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x67];                                      // 0x00B9(0x0067)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelToolTickData) == 0x000010, "Wrong alignment on FVoxelToolTickData");
static_assert(sizeof(FVoxelToolTickData) == 0x000120, "Wrong size on FVoxelToolTickData");
static_assert(offsetof(FVoxelToolTickData, MousePosition) == 0x000000, "Member 'FVoxelToolTickData::MousePosition' has a wrong offset!");
static_assert(offsetof(FVoxelToolTickData, CameraViewDirection) == 0x000008, "Member 'FVoxelToolTickData::CameraViewDirection' has a wrong offset!");
static_assert(offsetof(FVoxelToolTickData, bEdit) == 0x000014, "Member 'FVoxelToolTickData::bEdit' has a wrong offset!");
static_assert(offsetof(FVoxelToolTickData, Keys) == 0x000018, "Member 'FVoxelToolTickData::Keys' has a wrong offset!");
static_assert(offsetof(FVoxelToolTickData, Axes) == 0x000068, "Member 'FVoxelToolTickData::Axes' has a wrong offset!");
static_assert(offsetof(FVoxelToolTickData, CollisionChannel) == 0x0000B8, "Member 'FVoxelToolTickData::CollisionChannel' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorPicker
// 0x0068 (0x0068 - 0x0000)
struct FVoxelGeneratorPicker final
{
public:
	EVoxelGeneratorPickerType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UVoxelGenerator>            Class;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelGenerator*                        Object;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              Parameters;                                        // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGeneratorPicker) == 0x000008, "Wrong alignment on FVoxelGeneratorPicker");
static_assert(sizeof(FVoxelGeneratorPicker) == 0x000068, "Wrong size on FVoxelGeneratorPicker");
static_assert(offsetof(FVoxelGeneratorPicker, Type) == 0x000000, "Member 'FVoxelGeneratorPicker::Type' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorPicker, Class) == 0x000008, "Member 'FVoxelGeneratorPicker::Class' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorPicker, Object) == 0x000010, "Member 'FVoxelGeneratorPicker::Object' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorPicker, Parameters) == 0x000018, "Member 'FVoxelGeneratorPicker::Parameters' has a wrong offset!");

// ScriptStruct Voxel.VoxelCookingSettings
// 0x0080 (0x0080 - 0x0000)
struct FVoxelCookingSettings final
{
public:
	int32                                         RenderOctreeDepth;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoxelSize;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelRenderType                              RenderType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelGeneratorPicker                  Generator;                                         // 0x0010(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogProgress;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastCollisionCook;                                // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleanCollisionMesh;                               // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelCookingSettings) == 0x000008, "Wrong alignment on FVoxelCookingSettings");
static_assert(sizeof(FVoxelCookingSettings) == 0x000080, "Wrong size on FVoxelCookingSettings");
static_assert(offsetof(FVoxelCookingSettings, RenderOctreeDepth) == 0x000000, "Member 'FVoxelCookingSettings::RenderOctreeDepth' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, VoxelSize) == 0x000004, "Member 'FVoxelCookingSettings::VoxelSize' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, RenderType) == 0x000008, "Member 'FVoxelCookingSettings::RenderType' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, Generator) == 0x000010, "Member 'FVoxelCookingSettings::Generator' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, bLogProgress) == 0x000078, "Member 'FVoxelCookingSettings::bLogProgress' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, bFastCollisionCook) == 0x000079, "Member 'FVoxelCookingSettings::bFastCollisionCook' has a wrong offset!");
static_assert(offsetof(FVoxelCookingSettings, bCleanCollisionMesh) == 0x00007A, "Member 'FVoxelCookingSettings::bCleanCollisionMesh' has a wrong offset!");

// ScriptStruct Voxel.VoxelMeshConfig
// 0x0008 (0x0008 - 0x0000)
struct FVoxelMeshConfig final
{
public:
	bool                                          bReceivesDecals;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCustomDepth;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelMeshConfig) == 0x000004, "Wrong alignment on FVoxelMeshConfig");
static_assert(sizeof(FVoxelMeshConfig) == 0x000008, "Wrong size on FVoxelMeshConfig");
static_assert(offsetof(FVoxelMeshConfig, bReceivesDecals) == 0x000000, "Member 'FVoxelMeshConfig::bReceivesDecals' has a wrong offset!");
static_assert(offsetof(FVoxelMeshConfig, bRenderCustomDepth) == 0x000001, "Member 'FVoxelMeshConfig::bRenderCustomDepth' has a wrong offset!");
static_assert(offsetof(FVoxelMeshConfig, CustomDepthStencilWriteMask) == 0x000002, "Member 'FVoxelMeshConfig::CustomDepthStencilWriteMask' has a wrong offset!");
static_assert(offsetof(FVoxelMeshConfig, CustomDepthStencilValue) == 0x000004, "Member 'FVoxelMeshConfig::CustomDepthStencilValue' has a wrong offset!");

// ScriptStruct Voxel.VoxelLODMaterialsBase
// 0x0008 (0x0008 - 0x0000)
struct FVoxelLODMaterialsBase
{
public:
	int32                                         StartLOD;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndLOD;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelLODMaterialsBase) == 0x000004, "Wrong alignment on FVoxelLODMaterialsBase");
static_assert(sizeof(FVoxelLODMaterialsBase) == 0x000008, "Wrong size on FVoxelLODMaterialsBase");
static_assert(offsetof(FVoxelLODMaterialsBase, StartLOD) == 0x000000, "Member 'FVoxelLODMaterialsBase::StartLOD' has a wrong offset!");
static_assert(offsetof(FVoxelLODMaterialsBase, EndLOD) == 0x000004, "Member 'FVoxelLODMaterialsBase::EndLOD' has a wrong offset!");

// ScriptStruct Voxel.VoxelLODMaterials
// 0x0008 (0x0010 - 0x0008)
struct FVoxelLODMaterials final : public FVoxelLODMaterialsBase
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelLODMaterials) == 0x000008, "Wrong alignment on FVoxelLODMaterials");
static_assert(sizeof(FVoxelLODMaterials) == 0x000010, "Wrong size on FVoxelLODMaterials");
static_assert(offsetof(FVoxelLODMaterials, Material) == 0x000008, "Member 'FVoxelLODMaterials::Material' has a wrong offset!");

// ScriptStruct Voxel.VoxelMaterial
// 0x0001 (0x0001 - 0x0000)
struct FVoxelMaterial final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMaterial) == 0x000001, "Wrong alignment on FVoxelMaterial");
static_assert(sizeof(FVoxelMaterial) == 0x000001, "Wrong size on FVoxelMaterial");

// ScriptStruct Voxel.VoxelValueMaterial
// 0x0014 (0x0014 - 0x0000)
struct FVoxelValueMaterial final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelValueMaterial) == 0x000004, "Wrong alignment on FVoxelValueMaterial");
static_assert(sizeof(FVoxelValueMaterial) == 0x000014, "Wrong size on FVoxelValueMaterial");
static_assert(offsetof(FVoxelValueMaterial, Position) == 0x000000, "Member 'FVoxelValueMaterial::Position' has a wrong offset!");
static_assert(offsetof(FVoxelValueMaterial, Value) == 0x00000C, "Member 'FVoxelValueMaterial::Value' has a wrong offset!");
static_assert(offsetof(FVoxelValueMaterial, Material) == 0x000010, "Member 'FVoxelValueMaterial::Material' has a wrong offset!");

// ScriptStruct Voxel.VoxelLODMaterialCollections
// 0x0008 (0x0010 - 0x0008)
struct FVoxelLODMaterialCollections final : public FVoxelLODMaterialsBase
{
public:
	class UVoxelMaterialCollectionBase*           MaterialCollection;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelLODMaterialCollections) == 0x000008, "Wrong alignment on FVoxelLODMaterialCollections");
static_assert(sizeof(FVoxelLODMaterialCollections) == 0x000010, "Wrong size on FVoxelLODMaterialCollections");
static_assert(offsetof(FVoxelLODMaterialCollections, MaterialCollection) == 0x000008, "Member 'FVoxelLODMaterialCollections::MaterialCollection' has a wrong offset!");

// ScriptStruct Voxel.VoxelFindClosestNonEmptyVoxelResult
// 0x0018 (0x0018 - 0x0000)
struct FVoxelFindClosestNonEmptyVoxelResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             Position;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelFindClosestNonEmptyVoxelResult) == 0x000004, "Wrong alignment on FVoxelFindClosestNonEmptyVoxelResult");
static_assert(sizeof(FVoxelFindClosestNonEmptyVoxelResult) == 0x000018, "Wrong size on FVoxelFindClosestNonEmptyVoxelResult");
static_assert(offsetof(FVoxelFindClosestNonEmptyVoxelResult, bSuccess) == 0x000000, "Member 'FVoxelFindClosestNonEmptyVoxelResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FVoxelFindClosestNonEmptyVoxelResult, Position) == 0x000004, "Member 'FVoxelFindClosestNonEmptyVoxelResult::Position' has a wrong offset!");
static_assert(offsetof(FVoxelFindClosestNonEmptyVoxelResult, Value) == 0x000010, "Member 'FVoxelFindClosestNonEmptyVoxelResult::Value' has a wrong offset!");
static_assert(offsetof(FVoxelFindClosestNonEmptyVoxelResult, Material) == 0x000014, "Member 'FVoxelFindClosestNonEmptyVoxelResult::Material' has a wrong offset!");

// ScriptStruct Voxel.VoxelToolRenderingRef
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FVoxelToolRenderingRef final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelToolRenderingRef) == 0x000004, "Wrong alignment on FVoxelToolRenderingRef");
static_assert(sizeof(FVoxelToolRenderingRef) == 0x000004, "Wrong size on FVoxelToolRenderingRef");

// ScriptStruct Voxel.VoxelObjectArchiveEntry
// 0x0030 (0x0030 - 0x0000)
struct FVoxelObjectArchiveEntry final
{
public:
	TSoftObjectPtr<class UObject>                 Object;                                            // 0x0000(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelObjectArchiveEntry) == 0x000008, "Wrong alignment on FVoxelObjectArchiveEntry");
static_assert(sizeof(FVoxelObjectArchiveEntry) == 0x000030, "Wrong size on FVoxelObjectArchiveEntry");
static_assert(offsetof(FVoxelObjectArchiveEntry, Object) == 0x000000, "Member 'FVoxelObjectArchiveEntry::Object' has a wrong offset!");
static_assert(offsetof(FVoxelObjectArchiveEntry, Index) == 0x000028, "Member 'FVoxelObjectArchiveEntry::Index' has a wrong offset!");

// ScriptStruct Voxel.VoxelUncompressedWorldSave
// 0x0020 (0x0020 - 0x0000)
struct FVoxelUncompressedWorldSave final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelObjectArchiveEntry>       Objects;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelUncompressedWorldSave) == 0x000008, "Wrong alignment on FVoxelUncompressedWorldSave");
static_assert(sizeof(FVoxelUncompressedWorldSave) == 0x000020, "Wrong size on FVoxelUncompressedWorldSave");
static_assert(offsetof(FVoxelUncompressedWorldSave, Objects) == 0x000010, "Member 'FVoxelUncompressedWorldSave::Objects' has a wrong offset!");

// ScriptStruct Voxel.VoxelWorldCreateInfo
// 0x0048 (0x0048 - 0x0000)
struct FVoxelWorldCreateInfo final
{
public:
	bool                                          bOverrideSave;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelUncompressedWorldSave            SaveOverride;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverrideData;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            DataOverride;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelWorldCreateInfo) == 0x000008, "Wrong alignment on FVoxelWorldCreateInfo");
static_assert(sizeof(FVoxelWorldCreateInfo) == 0x000048, "Wrong size on FVoxelWorldCreateInfo");
static_assert(offsetof(FVoxelWorldCreateInfo, bOverrideSave) == 0x000000, "Member 'FVoxelWorldCreateInfo::bOverrideSave' has a wrong offset!");
static_assert(offsetof(FVoxelWorldCreateInfo, SaveOverride) == 0x000008, "Member 'FVoxelWorldCreateInfo::SaveOverride' has a wrong offset!");
static_assert(offsetof(FVoxelWorldCreateInfo, bOverrideData) == 0x000028, "Member 'FVoxelWorldCreateInfo::bOverrideData' has a wrong offset!");
static_assert(offsetof(FVoxelWorldCreateInfo, DataOverride) == 0x000030, "Member 'FVoxelWorldCreateInfo::DataOverride' has a wrong offset!");

// ScriptStruct Voxel.VoxelMaterialCollectionMaterialInfo
// 0x0014 (0x0014 - 0x0000)
struct FVoxelMaterialCollectionMaterialInfo final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMaterialInterface>      Material;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameOverride;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelMaterialCollectionMaterialInfo) == 0x000004, "Wrong alignment on FVoxelMaterialCollectionMaterialInfo");
static_assert(sizeof(FVoxelMaterialCollectionMaterialInfo) == 0x000014, "Wrong size on FVoxelMaterialCollectionMaterialInfo");
static_assert(offsetof(FVoxelMaterialCollectionMaterialInfo, Index) == 0x000000, "Member 'FVoxelMaterialCollectionMaterialInfo::Index' has a wrong offset!");
static_assert(offsetof(FVoxelMaterialCollectionMaterialInfo, Material) == 0x000004, "Member 'FVoxelMaterialCollectionMaterialInfo::Material' has a wrong offset!");
static_assert(offsetof(FVoxelMaterialCollectionMaterialInfo, NameOverride) == 0x00000C, "Member 'FVoxelMaterialCollectionMaterialInfo::NameOverride' has a wrong offset!");

// ScriptStruct Voxel.VoxelLandscapeImporterLayerInfo
// 0x0010 (0x0010 - 0x0000)
struct FVoxelLandscapeImporterLayerInfo final
{
public:
	class ULandscapeLayerInfoObject*              LayerInfo;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelRGBA                                    Layer;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index;                                             // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelLandscapeImporterLayerInfo) == 0x000008, "Wrong alignment on FVoxelLandscapeImporterLayerInfo");
static_assert(sizeof(FVoxelLandscapeImporterLayerInfo) == 0x000010, "Wrong size on FVoxelLandscapeImporterLayerInfo");
static_assert(offsetof(FVoxelLandscapeImporterLayerInfo, LayerInfo) == 0x000000, "Member 'FVoxelLandscapeImporterLayerInfo::LayerInfo' has a wrong offset!");
static_assert(offsetof(FVoxelLandscapeImporterLayerInfo, Layer) == 0x000008, "Member 'FVoxelLandscapeImporterLayerInfo::Layer' has a wrong offset!");
static_assert(offsetof(FVoxelLandscapeImporterLayerInfo, Index) == 0x000009, "Member 'FVoxelLandscapeImporterLayerInfo::Index' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorInit
// 0x0090 (0x0090 - 0x0000)
struct FVoxelGeneratorInit final
{
public:
	float                                         VoxelSize;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldSize;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelRenderType                              RenderType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelMaterialConfig                          MaterialConfig;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelMaterialCollectionBase*           MaterialCollection;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AVoxelWorld>             World;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x70];                                      // 0x0020(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelGeneratorInit) == 0x000008, "Wrong alignment on FVoxelGeneratorInit");
static_assert(sizeof(FVoxelGeneratorInit) == 0x000090, "Wrong size on FVoxelGeneratorInit");
static_assert(offsetof(FVoxelGeneratorInit, VoxelSize) == 0x000000, "Member 'FVoxelGeneratorInit::VoxelSize' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorInit, WorldSize) == 0x000004, "Member 'FVoxelGeneratorInit::WorldSize' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorInit, RenderType) == 0x000008, "Member 'FVoxelGeneratorInit::RenderType' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorInit, MaterialConfig) == 0x000009, "Member 'FVoxelGeneratorInit::MaterialConfig' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorInit, MaterialCollection) == 0x000010, "Member 'FVoxelGeneratorInit::MaterialCollection' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorInit, World) == 0x000018, "Member 'FVoxelGeneratorInit::World' has a wrong offset!");

// ScriptStruct Voxel.VoxelDisableEditsBoxItemReference
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FVoxelDisableEditsBoxItemReference final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelDisableEditsBoxItemReference) == 0x000008, "Wrong alignment on FVoxelDisableEditsBoxItemReference");
static_assert(sizeof(FVoxelDisableEditsBoxItemReference) == 0x000028, "Wrong size on FVoxelDisableEditsBoxItemReference");

// ScriptStruct Voxel.VoxelAssetItemReference
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FVoxelAssetItemReference final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelAssetItemReference) == 0x000008, "Wrong alignment on FVoxelAssetItemReference");
static_assert(sizeof(FVoxelAssetItemReference) == 0x000028, "Wrong size on FVoxelAssetItemReference");

// ScriptStruct Voxel.VoxelBasicMaterialCollectionLayer
// 0x0028 (0x0028 - 0x0000)
struct FVoxelBasicMaterialCollectionLayer final
{
public:
	uint8                                         LayerIndex;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LayerMaterial;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelBasicMaterialCollectionLayer) == 0x000008, "Wrong alignment on FVoxelBasicMaterialCollectionLayer");
static_assert(sizeof(FVoxelBasicMaterialCollectionLayer) == 0x000028, "Wrong size on FVoxelBasicMaterialCollectionLayer");
static_assert(offsetof(FVoxelBasicMaterialCollectionLayer, LayerIndex) == 0x000000, "Member 'FVoxelBasicMaterialCollectionLayer::LayerIndex' has a wrong offset!");
static_assert(offsetof(FVoxelBasicMaterialCollectionLayer, LayerMaterial) == 0x000008, "Member 'FVoxelBasicMaterialCollectionLayer::LayerMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelBasicMaterialCollectionLayer, DisplayName) == 0x000010, "Member 'FVoxelBasicMaterialCollectionLayer::DisplayName' has a wrong offset!");

// ScriptStruct Voxel.VoxelBoolVector
// 0x0003 (0x0003 - 0x0000)
struct FVoxelBoolVector final
{
public:
	bool                                          bX;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bY;                                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZ;                                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelBoolVector) == 0x000001, "Wrong alignment on FVoxelBoolVector");
static_assert(sizeof(FVoxelBoolVector) == 0x000003, "Wrong size on FVoxelBoolVector");
static_assert(offsetof(FVoxelBoolVector, bX) == 0x000000, "Member 'FVoxelBoolVector::bX' has a wrong offset!");
static_assert(offsetof(FVoxelBoolVector, bY) == 0x000001, "Member 'FVoxelBoolVector::bY' has a wrong offset!");
static_assert(offsetof(FVoxelBoolVector, bZ) == 0x000002, "Member 'FVoxelBoolVector::bZ' has a wrong offset!");

// ScriptStruct Voxel.VoxelCookedData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVoxelCookedData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelCookedData) == 0x000008, "Wrong alignment on FVoxelCookedData");
static_assert(sizeof(FVoxelCookedData) == 0x000010, "Wrong size on FVoxelCookedData");

// ScriptStruct Voxel.VoxelDataAssetImportSettings_MagicaVox
// 0x0008 (0x0008 - 0x0000)
struct FVoxelDataAssetImportSettings_MagicaVox final
{
public:
	bool                                          bUsePalette;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModelIndex;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelDataAssetImportSettings_MagicaVox) == 0x000004, "Wrong alignment on FVoxelDataAssetImportSettings_MagicaVox");
static_assert(sizeof(FVoxelDataAssetImportSettings_MagicaVox) == 0x000008, "Wrong size on FVoxelDataAssetImportSettings_MagicaVox");
static_assert(offsetof(FVoxelDataAssetImportSettings_MagicaVox, bUsePalette) == 0x000000, "Member 'FVoxelDataAssetImportSettings_MagicaVox::bUsePalette' has a wrong offset!");
static_assert(offsetof(FVoxelDataAssetImportSettings_MagicaVox, ModelIndex) == 0x000004, "Member 'FVoxelDataAssetImportSettings_MagicaVox::ModelIndex' has a wrong offset!");

// ScriptStruct Voxel.VoxelDataMemoryUsageInMB
// 0x0010 (0x0010 - 0x0000)
struct FVoxelDataMemoryUsageInMB final
{
public:
	float                                         DirtyValues;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedValues;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtyMaterials;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedMaterials;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelDataMemoryUsageInMB) == 0x000004, "Wrong alignment on FVoxelDataMemoryUsageInMB");
static_assert(sizeof(FVoxelDataMemoryUsageInMB) == 0x000010, "Wrong size on FVoxelDataMemoryUsageInMB");
static_assert(offsetof(FVoxelDataMemoryUsageInMB, DirtyValues) == 0x000000, "Member 'FVoxelDataMemoryUsageInMB::DirtyValues' has a wrong offset!");
static_assert(offsetof(FVoxelDataMemoryUsageInMB, CachedValues) == 0x000004, "Member 'FVoxelDataMemoryUsageInMB::CachedValues' has a wrong offset!");
static_assert(offsetof(FVoxelDataMemoryUsageInMB, DirtyMaterials) == 0x000008, "Member 'FVoxelDataMemoryUsageInMB::DirtyMaterials' has a wrong offset!");
static_assert(offsetof(FVoxelDataMemoryUsageInMB, CachedMaterials) == 0x00000C, "Member 'FVoxelDataMemoryUsageInMB::CachedMaterials' has a wrong offset!");

// ScriptStruct Voxel.VoxelDistance
// 0x0008 (0x0008 - 0x0000)
struct FVoxelDistance final
{
public:
	EVoxelDistanceType                            Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelDistance) == 0x000004, "Wrong alignment on FVoxelDistance");
static_assert(sizeof(FVoxelDistance) == 0x000008, "Wrong size on FVoxelDistance");
static_assert(offsetof(FVoxelDistance, Type) == 0x000000, "Member 'FVoxelDistance::Type' has a wrong offset!");
static_assert(offsetof(FVoxelDistance, Distance) == 0x000004, "Member 'FVoxelDistance::Distance' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorOutputPicker
// 0x0008 (0x0008 - 0x0000)
struct FVoxelGeneratorOutputPicker final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGeneratorOutputPicker) == 0x000004, "Wrong alignment on FVoxelGeneratorOutputPicker");
static_assert(sizeof(FVoxelGeneratorOutputPicker) == 0x000008, "Wrong size on FVoxelGeneratorOutputPicker");
static_assert(offsetof(FVoxelGeneratorOutputPicker, Name) == 0x000000, "Member 'FVoxelGeneratorOutputPicker::Name' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorParameterTerminalType
// 0x000C (0x000C - 0x0000)
struct FVoxelGeneratorParameterTerminalType
{
public:
	EVoxelGeneratorParameterPropertyType          PropertyType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PropertyClass;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGeneratorParameterTerminalType) == 0x000004, "Wrong alignment on FVoxelGeneratorParameterTerminalType");
static_assert(sizeof(FVoxelGeneratorParameterTerminalType) == 0x00000C, "Wrong size on FVoxelGeneratorParameterTerminalType");
static_assert(offsetof(FVoxelGeneratorParameterTerminalType, PropertyType) == 0x000000, "Member 'FVoxelGeneratorParameterTerminalType::PropertyType' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameterTerminalType, PropertyClass) == 0x000004, "Member 'FVoxelGeneratorParameterTerminalType::PropertyClass' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorParameterType
// 0x0010 (0x001C - 0x000C)
struct FVoxelGeneratorParameterType final : public FVoxelGeneratorParameterTerminalType
{
public:
	EVoxelGeneratorParameterContainerType         ContainerType;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelGeneratorParameterTerminalType   ValueType;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGeneratorParameterType) == 0x000004, "Wrong alignment on FVoxelGeneratorParameterType");
static_assert(sizeof(FVoxelGeneratorParameterType) == 0x00001C, "Wrong size on FVoxelGeneratorParameterType");
static_assert(offsetof(FVoxelGeneratorParameterType, ContainerType) == 0x00000C, "Member 'FVoxelGeneratorParameterType::ContainerType' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameterType, ValueType) == 0x000010, "Member 'FVoxelGeneratorParameterType::ValueType' has a wrong offset!");

// ScriptStruct Voxel.VoxelGeneratorParameter
// 0x00C0 (0x00C0 - 0x0000)
struct FVoxelGeneratorParameter final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelGeneratorParameterType           Type;                                              // 0x0008(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tooltip;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FString>              MetaData;                                          // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelGeneratorParameter) == 0x000008, "Wrong alignment on FVoxelGeneratorParameter");
static_assert(sizeof(FVoxelGeneratorParameter) == 0x0000C0, "Wrong size on FVoxelGeneratorParameter");
static_assert(offsetof(FVoxelGeneratorParameter, ID) == 0x000000, "Member 'FVoxelGeneratorParameter::ID' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, Type) == 0x000008, "Member 'FVoxelGeneratorParameter::Type' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, Name) == 0x000028, "Member 'FVoxelGeneratorParameter::Name' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, Category) == 0x000038, "Member 'FVoxelGeneratorParameter::Category' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, Tooltip) == 0x000048, "Member 'FVoxelGeneratorParameter::Tooltip' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, Priority) == 0x000058, "Member 'FVoxelGeneratorParameter::Priority' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, MetaData) == 0x000060, "Member 'FVoxelGeneratorParameter::MetaData' has a wrong offset!");
static_assert(offsetof(FVoxelGeneratorParameter, DefaultValue) == 0x0000B0, "Member 'FVoxelGeneratorParameter::DefaultValue' has a wrong offset!");

// ScriptStruct Voxel.VoxelTransformableGeneratorPicker
// 0x0068 (0x0068 - 0x0000)
struct FVoxelTransformableGeneratorPicker final
{
public:
	EVoxelGeneratorPickerType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UVoxelTransformableGenerator> Class;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGenerator*           Object;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              Parameters;                                        // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelTransformableGeneratorPicker) == 0x000008, "Wrong alignment on FVoxelTransformableGeneratorPicker");
static_assert(sizeof(FVoxelTransformableGeneratorPicker) == 0x000068, "Wrong size on FVoxelTransformableGeneratorPicker");
static_assert(offsetof(FVoxelTransformableGeneratorPicker, Type) == 0x000000, "Member 'FVoxelTransformableGeneratorPicker::Type' has a wrong offset!");
static_assert(offsetof(FVoxelTransformableGeneratorPicker, Class) == 0x000008, "Member 'FVoxelTransformableGeneratorPicker::Class' has a wrong offset!");
static_assert(offsetof(FVoxelTransformableGeneratorPicker, Object) == 0x000010, "Member 'FVoxelTransformableGeneratorPicker::Object' has a wrong offset!");
static_assert(offsetof(FVoxelTransformableGeneratorPicker, Parameters) == 0x000018, "Member 'FVoxelTransformableGeneratorPicker::Parameters' has a wrong offset!");

// ScriptStruct Voxel.VoxelHeightmapImporterWeightmapInfos
// 0x0018 (0x0018 - 0x0000)
struct FVoxelHeightmapImporterWeightmapInfos final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	EVoxelRGBA                                    Layer;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index;                                             // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelHeightmapImporterWeightmapInfos) == 0x000008, "Wrong alignment on FVoxelHeightmapImporterWeightmapInfos");
static_assert(sizeof(FVoxelHeightmapImporterWeightmapInfos) == 0x000018, "Wrong size on FVoxelHeightmapImporterWeightmapInfos");
static_assert(offsetof(FVoxelHeightmapImporterWeightmapInfos, File) == 0x000000, "Member 'FVoxelHeightmapImporterWeightmapInfos::File' has a wrong offset!");
static_assert(offsetof(FVoxelHeightmapImporterWeightmapInfos, Layer) == 0x000010, "Member 'FVoxelHeightmapImporterWeightmapInfos::Layer' has a wrong offset!");
static_assert(offsetof(FVoxelHeightmapImporterWeightmapInfos, Index) == 0x000011, "Member 'FVoxelHeightmapImporterWeightmapInfos::Index' has a wrong offset!");

// ScriptStruct Voxel.VoxelInstancedMaterialCollectionLayer
// 0x0010 (0x0010 - 0x0000)
struct FVoxelInstancedMaterialCollectionLayer final
{
public:
	uint8                                         LayerIndex;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LayerMaterialInstance;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelInstancedMaterialCollectionLayer) == 0x000008, "Wrong alignment on FVoxelInstancedMaterialCollectionLayer");
static_assert(sizeof(FVoxelInstancedMaterialCollectionLayer) == 0x000010, "Wrong size on FVoxelInstancedMaterialCollectionLayer");
static_assert(offsetof(FVoxelInstancedMaterialCollectionLayer, LayerIndex) == 0x000000, "Member 'FVoxelInstancedMaterialCollectionLayer::LayerIndex' has a wrong offset!");
static_assert(offsetof(FVoxelInstancedMaterialCollectionLayer, LayerMaterialInstance) == 0x000008, "Member 'FVoxelInstancedMaterialCollectionLayer::LayerMaterialInstance' has a wrong offset!");

// ScriptStruct Voxel.VoxelIntBoxWithValidity
// 0x001C (0x001C - 0x0000)
struct FVoxelIntBoxWithValidity final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bValid;                                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelIntBoxWithValidity) == 0x000004, "Wrong alignment on FVoxelIntBoxWithValidity");
static_assert(sizeof(FVoxelIntBoxWithValidity) == 0x00001C, "Wrong size on FVoxelIntBoxWithValidity");
static_assert(offsetof(FVoxelIntBoxWithValidity, Box) == 0x000000, "Member 'FVoxelIntBoxWithValidity::Box' has a wrong offset!");
static_assert(offsetof(FVoxelIntBoxWithValidity, bValid) == 0x000018, "Member 'FVoxelIntBoxWithValidity::bValid' has a wrong offset!");

// ScriptStruct Voxel.VoxelInt32Interval
// 0x0008 (0x0008 - 0x0000)
struct FVoxelInt32Interval final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelInt32Interval) == 0x000004, "Wrong alignment on FVoxelInt32Interval");
static_assert(sizeof(FVoxelInt32Interval) == 0x000008, "Wrong size on FVoxelInt32Interval");
static_assert(offsetof(FVoxelInt32Interval, Min) == 0x000000, "Member 'FVoxelInt32Interval::Min' has a wrong offset!");
static_assert(offsetof(FVoxelInt32Interval, Max) == 0x000004, "Member 'FVoxelInt32Interval::Max' has a wrong offset!");

// ScriptStruct Voxel.VoxelInvokerSettings
// 0x0058 (0x0058 - 0x0000)
struct FVoxelInvokerSettings final
{
public:
	bool                                          bUseForLOD;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODToSet;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           LODBounds;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseForCollisions;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelIntBox                           CollisionsBounds;                                  // 0x0024(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseForNavmesh;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelIntBox                           NavmeshBounds;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelInvokerSettings) == 0x000004, "Wrong alignment on FVoxelInvokerSettings");
static_assert(sizeof(FVoxelInvokerSettings) == 0x000058, "Wrong size on FVoxelInvokerSettings");
static_assert(offsetof(FVoxelInvokerSettings, bUseForLOD) == 0x000000, "Member 'FVoxelInvokerSettings::bUseForLOD' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, LODToSet) == 0x000004, "Member 'FVoxelInvokerSettings::LODToSet' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, LODBounds) == 0x000008, "Member 'FVoxelInvokerSettings::LODBounds' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, bUseForCollisions) == 0x000020, "Member 'FVoxelInvokerSettings::bUseForCollisions' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, CollisionsBounds) == 0x000024, "Member 'FVoxelInvokerSettings::CollisionsBounds' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, bUseForNavmesh) == 0x00003C, "Member 'FVoxelInvokerSettings::bUseForNavmesh' has a wrong offset!");
static_assert(offsetof(FVoxelInvokerSettings, NavmeshBounds) == 0x000040, "Member 'FVoxelInvokerSettings::NavmeshBounds' has a wrong offset!");

// ScriptStruct Voxel.VoxelLandscapeMaterialCollectionLayer
// 0x000C (0x000C - 0x0000)
struct FVoxelLandscapeMaterialCollectionLayer final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelLandscapeMaterialCollectionLayer) == 0x000004, "Wrong alignment on FVoxelLandscapeMaterialCollectionLayer");
static_assert(sizeof(FVoxelLandscapeMaterialCollectionLayer) == 0x00000C, "Wrong size on FVoxelLandscapeMaterialCollectionLayer");
static_assert(offsetof(FVoxelLandscapeMaterialCollectionLayer, Name) == 0x000000, "Member 'FVoxelLandscapeMaterialCollectionLayer::Name' has a wrong offset!");
static_assert(offsetof(FVoxelLandscapeMaterialCollectionLayer, Index) == 0x000008, "Member 'FVoxelLandscapeMaterialCollectionLayer::Index' has a wrong offset!");

// ScriptStruct Voxel.VoxelMagicaVoxSceneEntry
// 0x0060 (0x0060 - 0x0000)
struct FVoxelMagicaVoxSceneEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        Asset;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Layer;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelMagicaVoxSceneEntry) == 0x000010, "Wrong alignment on FVoxelMagicaVoxSceneEntry");
static_assert(sizeof(FVoxelMagicaVoxSceneEntry) == 0x000060, "Wrong size on FVoxelMagicaVoxSceneEntry");
static_assert(offsetof(FVoxelMagicaVoxSceneEntry, Name) == 0x000000, "Member 'FVoxelMagicaVoxSceneEntry::Name' has a wrong offset!");
static_assert(offsetof(FVoxelMagicaVoxSceneEntry, Asset) == 0x000010, "Member 'FVoxelMagicaVoxSceneEntry::Asset' has a wrong offset!");
static_assert(offsetof(FVoxelMagicaVoxSceneEntry, Transform) == 0x000020, "Member 'FVoxelMagicaVoxSceneEntry::Transform' has a wrong offset!");
static_assert(offsetof(FVoxelMagicaVoxSceneEntry, Layer) == 0x000050, "Member 'FVoxelMagicaVoxSceneEntry::Layer' has a wrong offset!");

// ScriptStruct Voxel.VoxelMaterialIndices
// 0x0008 (0x0008 - 0x0000)
struct FVoxelMaterialIndices final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMaterialIndices) == 0x000001, "Wrong alignment on FVoxelMaterialIndices");
static_assert(sizeof(FVoxelMaterialIndices) == 0x000008, "Wrong size on FVoxelMaterialIndices");

// ScriptStruct Voxel.VoxelHaltonStream
// 0x0008 (0x0008 - 0x0000)
struct FVoxelHaltonStream final
{
public:
	int32                                         InitialSeed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Seed;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelHaltonStream) == 0x000004, "Wrong alignment on FVoxelHaltonStream");
static_assert(sizeof(FVoxelHaltonStream) == 0x000008, "Wrong size on FVoxelHaltonStream");
static_assert(offsetof(FVoxelHaltonStream, InitialSeed) == 0x000000, "Member 'FVoxelHaltonStream::InitialSeed' has a wrong offset!");
static_assert(offsetof(FVoxelHaltonStream, Seed) == 0x000004, "Member 'FVoxelHaltonStream::Seed' has a wrong offset!");

// ScriptStruct Voxel.VoxelMeshImporterSettingsBase
// 0x0010 (0x0010 - 0x0000)
struct FVoxelMeshImporterSettingsBase
{
public:
	float                                         VoxelSize;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelAxis                                    SweepDirection;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseSweep;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWatertight;                                       // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLeaks;                                        // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExactBand;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDivisor;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelMeshImporterSettingsBase) == 0x000004, "Wrong alignment on FVoxelMeshImporterSettingsBase");
static_assert(sizeof(FVoxelMeshImporterSettingsBase) == 0x000010, "Wrong size on FVoxelMeshImporterSettingsBase");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, VoxelSize) == 0x000000, "Member 'FVoxelMeshImporterSettingsBase::VoxelSize' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, SweepDirection) == 0x000004, "Member 'FVoxelMeshImporterSettingsBase::SweepDirection' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, bReverseSweep) == 0x000005, "Member 'FVoxelMeshImporterSettingsBase::bReverseSweep' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, bWatertight) == 0x000006, "Member 'FVoxelMeshImporterSettingsBase::bWatertight' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, bHideLeaks) == 0x000007, "Member 'FVoxelMeshImporterSettingsBase::bHideLeaks' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, ExactBand) == 0x000008, "Member 'FVoxelMeshImporterSettingsBase::ExactBand' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettingsBase, DistanceDivisor) == 0x00000C, "Member 'FVoxelMeshImporterSettingsBase::DistanceDivisor' has a wrong offset!");

// ScriptStruct Voxel.VoxelMeshImporterSettings
// 0x0028 (0x0038 - 0x0010)
struct FVoxelMeshImporterSettings final : public FVoxelMeshImporterSettingsBase
{
public:
	bool                                          bImportColors;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ColorsMaterial;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportUVs;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     UVsMaterial;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenderTargetSize;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMeshImporterSettings) == 0x000008, "Wrong alignment on FVoxelMeshImporterSettings");
static_assert(sizeof(FVoxelMeshImporterSettings) == 0x000038, "Wrong size on FVoxelMeshImporterSettings");
static_assert(offsetof(FVoxelMeshImporterSettings, bImportColors) == 0x000010, "Member 'FVoxelMeshImporterSettings::bImportColors' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettings, ColorsMaterial) == 0x000018, "Member 'FVoxelMeshImporterSettings::ColorsMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettings, bImportUVs) == 0x000020, "Member 'FVoxelMeshImporterSettings::bImportUVs' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettings, UVsMaterial) == 0x000028, "Member 'FVoxelMeshImporterSettings::UVsMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterSettings, RenderTargetSize) == 0x000030, "Member 'FVoxelMeshImporterSettings::RenderTargetSize' has a wrong offset!");

// ScriptStruct Voxel.VoxelMeshImporterRenderTargetCache
// 0x0028 (0x0028 - 0x0000)
struct FVoxelMeshImporterRenderTargetCache final
{
public:
	class UTextureRenderTarget2D*                 ColorsRenderTarget;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 UVsRenderTarget;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LastRenderedColorsMaterial;                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LastRenderedUVsMaterial;                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastRenderedRenderTargetSize;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelMeshImporterRenderTargetCache) == 0x000008, "Wrong alignment on FVoxelMeshImporterRenderTargetCache");
static_assert(sizeof(FVoxelMeshImporterRenderTargetCache) == 0x000028, "Wrong size on FVoxelMeshImporterRenderTargetCache");
static_assert(offsetof(FVoxelMeshImporterRenderTargetCache, ColorsRenderTarget) == 0x000000, "Member 'FVoxelMeshImporterRenderTargetCache::ColorsRenderTarget' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterRenderTargetCache, UVsRenderTarget) == 0x000008, "Member 'FVoxelMeshImporterRenderTargetCache::UVsRenderTarget' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterRenderTargetCache, LastRenderedColorsMaterial) == 0x000010, "Member 'FVoxelMeshImporterRenderTargetCache::LastRenderedColorsMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterRenderTargetCache, LastRenderedUVsMaterial) == 0x000018, "Member 'FVoxelMeshImporterRenderTargetCache::LastRenderedUVsMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelMeshImporterRenderTargetCache, LastRenderedRenderTargetSize) == 0x000020, "Member 'FVoxelMeshImporterRenderTargetCache::LastRenderedRenderTargetSize' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialColor
// 0x001C (0x001C - 0x0000)
struct FVoxelPaintMaterialColor final
{
public:
	bool                                          bUseLinearColor;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LinearColor;                                       // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintR;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintG;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintB;                                           // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintA;                                           // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterialColor) == 0x000004, "Wrong alignment on FVoxelPaintMaterialColor");
static_assert(sizeof(FVoxelPaintMaterialColor) == 0x00001C, "Wrong size on FVoxelPaintMaterialColor");
static_assert(offsetof(FVoxelPaintMaterialColor, bUseLinearColor) == 0x000000, "Member 'FVoxelPaintMaterialColor::bUseLinearColor' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, LinearColor) == 0x000004, "Member 'FVoxelPaintMaterialColor::LinearColor' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, Color) == 0x000014, "Member 'FVoxelPaintMaterialColor::Color' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, bPaintR) == 0x000018, "Member 'FVoxelPaintMaterialColor::bPaintR' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, bPaintG) == 0x000019, "Member 'FVoxelPaintMaterialColor::bPaintG' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, bPaintB) == 0x00001A, "Member 'FVoxelPaintMaterialColor::bPaintB' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialColor, bPaintA) == 0x00001B, "Member 'FVoxelPaintMaterialColor::bPaintA' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterial_MaterialCollectionChannel
// 0x0001 (0x0001 - 0x0000)
struct FVoxelPaintMaterial_MaterialCollectionChannel final
{
public:
	uint8                                         Channel;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterial_MaterialCollectionChannel) == 0x000001, "Wrong alignment on FVoxelPaintMaterial_MaterialCollectionChannel");
static_assert(sizeof(FVoxelPaintMaterial_MaterialCollectionChannel) == 0x000001, "Wrong size on FVoxelPaintMaterial_MaterialCollectionChannel");
static_assert(offsetof(FVoxelPaintMaterial_MaterialCollectionChannel, Channel) == 0x000000, "Member 'FVoxelPaintMaterial_MaterialCollectionChannel::Channel' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialSingleIndex
// 0x0001 (0x0001 - 0x0000)
struct FVoxelPaintMaterialSingleIndex final
{
public:
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterialSingleIndex) == 0x000001, "Wrong alignment on FVoxelPaintMaterialSingleIndex");
static_assert(sizeof(FVoxelPaintMaterialSingleIndex) == 0x000001, "Wrong size on FVoxelPaintMaterialSingleIndex");
static_assert(offsetof(FVoxelPaintMaterialSingleIndex, Channel) == 0x000000, "Member 'FVoxelPaintMaterialSingleIndex::Channel' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialMultiIndex
// 0x0018 (0x0018 - 0x0000)
struct FVoxelPaintMaterialMultiIndex final
{
public:
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelPaintMaterial_MaterialCollectionChannel> LockedChannels;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterialMultiIndex) == 0x000008, "Wrong alignment on FVoxelPaintMaterialMultiIndex");
static_assert(sizeof(FVoxelPaintMaterialMultiIndex) == 0x000018, "Wrong size on FVoxelPaintMaterialMultiIndex");
static_assert(offsetof(FVoxelPaintMaterialMultiIndex, Channel) == 0x000000, "Member 'FVoxelPaintMaterialMultiIndex::Channel' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndex, TargetValue) == 0x000004, "Member 'FVoxelPaintMaterialMultiIndex::TargetValue' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndex, LockedChannels) == 0x000008, "Member 'FVoxelPaintMaterialMultiIndex::LockedChannels' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialMultiIndexWetness
// 0x0004 (0x0004 - 0x0000)
struct FVoxelPaintMaterialMultiIndexWetness final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterialMultiIndexWetness) == 0x000004, "Wrong alignment on FVoxelPaintMaterialMultiIndexWetness");
static_assert(sizeof(FVoxelPaintMaterialMultiIndexWetness) == 0x000004, "Wrong size on FVoxelPaintMaterialMultiIndexWetness");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexWetness, TargetValue) == 0x000000, "Member 'FVoxelPaintMaterialMultiIndexWetness::TargetValue' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialMultiIndexRaw
// 0x0020 (0x0020 - 0x0000)
struct FVoxelPaintMaterialMultiIndexRaw final
{
public:
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel0;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength0;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel1;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength1;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel2;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength2;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial_MaterialCollectionChannel Channel3;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength3;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterialMultiIndexRaw) == 0x000004, "Wrong alignment on FVoxelPaintMaterialMultiIndexRaw");
static_assert(sizeof(FVoxelPaintMaterialMultiIndexRaw) == 0x000020, "Wrong size on FVoxelPaintMaterialMultiIndexRaw");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Channel0) == 0x000000, "Member 'FVoxelPaintMaterialMultiIndexRaw::Channel0' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Strength0) == 0x000004, "Member 'FVoxelPaintMaterialMultiIndexRaw::Strength0' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Channel1) == 0x000008, "Member 'FVoxelPaintMaterialMultiIndexRaw::Channel1' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Strength1) == 0x00000C, "Member 'FVoxelPaintMaterialMultiIndexRaw::Strength1' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Channel2) == 0x000010, "Member 'FVoxelPaintMaterialMultiIndexRaw::Channel2' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Strength2) == 0x000014, "Member 'FVoxelPaintMaterialMultiIndexRaw::Strength2' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Channel3) == 0x000018, "Member 'FVoxelPaintMaterialMultiIndexRaw::Channel3' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialMultiIndexRaw, Strength3) == 0x00001C, "Member 'FVoxelPaintMaterialMultiIndexRaw::Strength3' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialUV
// 0x0010 (0x0010 - 0x0000)
struct FVoxelPaintMaterialUV final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV;                                                // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintU;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintV;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelPaintMaterialUV) == 0x000004, "Wrong alignment on FVoxelPaintMaterialUV");
static_assert(sizeof(FVoxelPaintMaterialUV) == 0x000010, "Wrong size on FVoxelPaintMaterialUV");
static_assert(offsetof(FVoxelPaintMaterialUV, Channel) == 0x000000, "Member 'FVoxelPaintMaterialUV::Channel' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialUV, UV) == 0x000004, "Member 'FVoxelPaintMaterialUV::UV' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialUV, bPaintU) == 0x00000C, "Member 'FVoxelPaintMaterialUV::bPaintU' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialUV, bPaintV) == 0x00000D, "Member 'FVoxelPaintMaterialUV::bPaintV' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterialFiveWayBlend
// 0x0020 (0x0020 - 0x0000)
struct FVoxelPaintMaterialFiveWayBlend final
{
public:
	int32                                         Channel;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LockedChannels;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bFourWayBlend;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelPaintMaterialFiveWayBlend) == 0x000008, "Wrong alignment on FVoxelPaintMaterialFiveWayBlend");
static_assert(sizeof(FVoxelPaintMaterialFiveWayBlend) == 0x000020, "Wrong size on FVoxelPaintMaterialFiveWayBlend");
static_assert(offsetof(FVoxelPaintMaterialFiveWayBlend, Channel) == 0x000000, "Member 'FVoxelPaintMaterialFiveWayBlend::Channel' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialFiveWayBlend, TargetValue) == 0x000004, "Member 'FVoxelPaintMaterialFiveWayBlend::TargetValue' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialFiveWayBlend, LockedChannels) == 0x000008, "Member 'FVoxelPaintMaterialFiveWayBlend::LockedChannels' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterialFiveWayBlend, bFourWayBlend) == 0x000018, "Member 'FVoxelPaintMaterialFiveWayBlend::bFourWayBlend' has a wrong offset!");

// ScriptStruct Voxel.VoxelPaintMaterial
// 0x0098 (0x0098 - 0x0000)
struct FVoxelPaintMaterial final
{
public:
	EVoxelPaintMaterialType                       Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterialColor               Color;                                             // 0x0004(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterialSingleIndex         SingleIndex;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterialMultiIndex          MultiIndex;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterialMultiIndexWetness   MultiIndexWetness;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterialMultiIndexRaw       MultiIndexRaw;                                     // 0x0044(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterialUV                  UV;                                                // 0x0064(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterialFiveWayBlend        FiveWayBlend;                                      // 0x0078(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelPaintMaterial) == 0x000008, "Wrong alignment on FVoxelPaintMaterial");
static_assert(sizeof(FVoxelPaintMaterial) == 0x000098, "Wrong size on FVoxelPaintMaterial");
static_assert(offsetof(FVoxelPaintMaterial, Type) == 0x000000, "Member 'FVoxelPaintMaterial::Type' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, Color) == 0x000004, "Member 'FVoxelPaintMaterial::Color' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, SingleIndex) == 0x000020, "Member 'FVoxelPaintMaterial::SingleIndex' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, MultiIndex) == 0x000028, "Member 'FVoxelPaintMaterial::MultiIndex' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, MultiIndexWetness) == 0x000040, "Member 'FVoxelPaintMaterial::MultiIndexWetness' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, MultiIndexRaw) == 0x000044, "Member 'FVoxelPaintMaterial::MultiIndexRaw' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, UV) == 0x000064, "Member 'FVoxelPaintMaterial::UV' has a wrong offset!");
static_assert(offsetof(FVoxelPaintMaterial, FiveWayBlend) == 0x000078, "Member 'FVoxelPaintMaterial::FiveWayBlend' has a wrong offset!");

// ScriptStruct Voxel.VoxelPositionValueMaterial
// 0x0014 (0x0014 - 0x0000)
struct FVoxelPositionValueMaterial final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelPositionValueMaterial) == 0x000004, "Wrong alignment on FVoxelPositionValueMaterial");
static_assert(sizeof(FVoxelPositionValueMaterial) == 0x000014, "Wrong size on FVoxelPositionValueMaterial");
static_assert(offsetof(FVoxelPositionValueMaterial, Position) == 0x000000, "Member 'FVoxelPositionValueMaterial::Position' has a wrong offset!");
static_assert(offsetof(FVoxelPositionValueMaterial, Value) == 0x00000C, "Member 'FVoxelPositionValueMaterial::Value' has a wrong offset!");
static_assert(offsetof(FVoxelPositionValueMaterial, Material) == 0x000010, "Member 'FVoxelPositionValueMaterial::Material' has a wrong offset!");

// ScriptStruct Voxel.VoxelDataItemConstructionInfo
// 0x0038 (0x0038 - 0x0000)
struct FVoxelDataItemConstructionInfo final
{
public:
	class UVoxelGeneratorInstanceWrapper*         Generator;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Parameters;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelDataItemConstructionInfo) == 0x000008, "Wrong alignment on FVoxelDataItemConstructionInfo");
static_assert(sizeof(FVoxelDataItemConstructionInfo) == 0x000038, "Wrong size on FVoxelDataItemConstructionInfo");
static_assert(offsetof(FVoxelDataItemConstructionInfo, Generator) == 0x000000, "Member 'FVoxelDataItemConstructionInfo::Generator' has a wrong offset!");
static_assert(offsetof(FVoxelDataItemConstructionInfo, Bounds) == 0x000008, "Member 'FVoxelDataItemConstructionInfo::Bounds' has a wrong offset!");
static_assert(offsetof(FVoxelDataItemConstructionInfo, Parameters) == 0x000020, "Member 'FVoxelDataItemConstructionInfo::Parameters' has a wrong offset!");
static_assert(offsetof(FVoxelDataItemConstructionInfo, Mask) == 0x000030, "Member 'FVoxelDataItemConstructionInfo::Mask' has a wrong offset!");

// ScriptStruct Voxel.VoxelProjectionHit
// 0x009C (0x009C - 0x0000)
struct FVoxelProjectionHit final
{
public:
	struct FIntVector                             VoxelPosition;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PlanePosition;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0014(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelProjectionHit) == 0x000004, "Wrong alignment on FVoxelProjectionHit");
static_assert(sizeof(FVoxelProjectionHit) == 0x00009C, "Wrong size on FVoxelProjectionHit");
static_assert(offsetof(FVoxelProjectionHit, VoxelPosition) == 0x000000, "Member 'FVoxelProjectionHit::VoxelPosition' has a wrong offset!");
static_assert(offsetof(FVoxelProjectionHit, PlanePosition) == 0x00000C, "Member 'FVoxelProjectionHit::PlanePosition' has a wrong offset!");
static_assert(offsetof(FVoxelProjectionHit, Hit) == 0x000014, "Member 'FVoxelProjectionHit::Hit' has a wrong offset!");

// ScriptStruct Voxel.VoxelLineTraceParameters
// 0x0050 (0x0050 - 0x0000)
struct FVoxelLineTraceParameters final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     CollisionChannelsToIgnore;                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelLineTraceParameters) == 0x000008, "Wrong alignment on FVoxelLineTraceParameters");
static_assert(sizeof(FVoxelLineTraceParameters) == 0x000050, "Wrong size on FVoxelLineTraceParameters");
static_assert(offsetof(FVoxelLineTraceParameters, CollisionChannel) == 0x000000, "Member 'FVoxelLineTraceParameters::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, CollisionChannelsToIgnore) == 0x000008, "Member 'FVoxelLineTraceParameters::CollisionChannelsToIgnore' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, ActorsToIgnore) == 0x000018, "Member 'FVoxelLineTraceParameters::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, DrawDebugType) == 0x000028, "Member 'FVoxelLineTraceParameters::DrawDebugType' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, TraceColor) == 0x00002C, "Member 'FVoxelLineTraceParameters::TraceColor' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, TraceHitColor) == 0x00003C, "Member 'FVoxelLineTraceParameters::TraceHitColor' has a wrong offset!");
static_assert(offsetof(FVoxelLineTraceParameters, DrawTime) == 0x00004C, "Member 'FVoxelLineTraceParameters::DrawTime' has a wrong offset!");

// ScriptStruct Voxel.VoxelRange
// 0x0010 (0x0010 - 0x0000)
struct FVoxelRange final
{
public:
	double                                        Min;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Max;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelRange) == 0x000008, "Wrong alignment on FVoxelRange");
static_assert(sizeof(FVoxelRange) == 0x000010, "Wrong size on FVoxelRange");
static_assert(offsetof(FVoxelRange, Min) == 0x000000, "Member 'FVoxelRange::Min' has a wrong offset!");
static_assert(offsetof(FVoxelRange, Max) == 0x000008, "Member 'FVoxelRange::Max' has a wrong offset!");

// ScriptStruct Voxel.VoxelCompressedWorldSave
// 0x0020 (0x0020 - 0x0000)
struct FVoxelCompressedWorldSave final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelObjectArchiveEntry>       Objects;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelCompressedWorldSave) == 0x000008, "Wrong alignment on FVoxelCompressedWorldSave");
static_assert(sizeof(FVoxelCompressedWorldSave) == 0x000020, "Wrong size on FVoxelCompressedWorldSave");
static_assert(offsetof(FVoxelCompressedWorldSave, Objects) == 0x000010, "Member 'FVoxelCompressedWorldSave::Objects' has a wrong offset!");

// ScriptStruct Voxel.VoxelSurfaceEditsStack
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVoxelSurfaceEditsStack final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelSurfaceEditsStack) == 0x000008, "Wrong alignment on FVoxelSurfaceEditsStack");
static_assert(sizeof(FVoxelSurfaceEditsStack) == 0x000010, "Wrong size on FVoxelSurfaceEditsStack");

// ScriptStruct Voxel.VoxelSurfaceEditsStackElement
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FVoxelSurfaceEditsStackElement final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelSurfaceEditsStackElement) == 0x000010, "Wrong alignment on FVoxelSurfaceEditsStackElement");
static_assert(sizeof(FVoxelSurfaceEditsStackElement) == 0x000060, "Wrong size on FVoxelSurfaceEditsStackElement");

// ScriptStruct Voxel.VoxelSurfaceEditsProcessedVoxels
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FVoxelSurfaceEditsProcessedVoxels final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelSurfaceEditsProcessedVoxels) == 0x000008, "Wrong alignment on FVoxelSurfaceEditsProcessedVoxels");
static_assert(sizeof(FVoxelSurfaceEditsProcessedVoxels) == 0x000030, "Wrong size on FVoxelSurfaceEditsProcessedVoxels");

// ScriptStruct Voxel.VoxelSurfaceEditsVoxels
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVoxelSurfaceEditsVoxels final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelSurfaceEditsVoxels) == 0x000008, "Wrong alignment on FVoxelSurfaceEditsVoxels");
static_assert(sizeof(FVoxelSurfaceEditsVoxels) == 0x000018, "Wrong size on FVoxelSurfaceEditsVoxels");

// ScriptStruct Voxel.VoxelSurfaceEditsVoxelBase
// 0x0028 (0x0028 - 0x0000)
struct FVoxelSurfaceEditsVoxelBase
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfacePosition;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelSurfaceEditsVoxelBase) == 0x000004, "Wrong alignment on FVoxelSurfaceEditsVoxelBase");
static_assert(sizeof(FVoxelSurfaceEditsVoxelBase) == 0x000028, "Wrong size on FVoxelSurfaceEditsVoxelBase");
static_assert(offsetof(FVoxelSurfaceEditsVoxelBase, Position) == 0x000000, "Member 'FVoxelSurfaceEditsVoxelBase::Position' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceEditsVoxelBase, Normal) == 0x00000C, "Member 'FVoxelSurfaceEditsVoxelBase::Normal' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceEditsVoxelBase, Value) == 0x000018, "Member 'FVoxelSurfaceEditsVoxelBase::Value' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceEditsVoxelBase, SurfacePosition) == 0x00001C, "Member 'FVoxelSurfaceEditsVoxelBase::SurfacePosition' has a wrong offset!");

// ScriptStruct Voxel.VoxelSurfaceEditsVoxel
// 0x0004 (0x002C - 0x0028)
struct FVoxelSurfaceEditsVoxel final : public FVoxelSurfaceEditsVoxelBase
{
public:
	float                                         Strength;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelSurfaceEditsVoxel) == 0x000004, "Wrong alignment on FVoxelSurfaceEditsVoxel");
static_assert(sizeof(FVoxelSurfaceEditsVoxel) == 0x00002C, "Wrong size on FVoxelSurfaceEditsVoxel");
static_assert(offsetof(FVoxelSurfaceEditsVoxel, Strength) == 0x000028, "Member 'FVoxelSurfaceEditsVoxel::Strength' has a wrong offset!");

// ScriptStruct Voxel.VoxelSurfaceToolMask
// 0x00A8 (0x00A8 - 0x0000)
struct FVoxelSurfaceToolMask final
{
public:
	EVoxelSurfaceToolMaskType                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelRGBA                                    Channel;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelGeneratorPicker                  Generator;                                         // 0x0018(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SeedsToRandomize;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bScaleWithBrushSize;                               // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             GeneratorDebugTexture;                             // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelSurfaceToolMask) == 0x000008, "Wrong alignment on FVoxelSurfaceToolMask");
static_assert(sizeof(FVoxelSurfaceToolMask) == 0x0000A8, "Wrong size on FVoxelSurfaceToolMask");
static_assert(offsetof(FVoxelSurfaceToolMask, Type) == 0x000000, "Member 'FVoxelSurfaceToolMask::Type' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, Texture) == 0x000008, "Member 'FVoxelSurfaceToolMask::Texture' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, Channel) == 0x000010, "Member 'FVoxelSurfaceToolMask::Channel' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, Generator) == 0x000018, "Member 'FVoxelSurfaceToolMask::Generator' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, SeedsToRandomize) == 0x000080, "Member 'FVoxelSurfaceToolMask::SeedsToRandomize' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, bScaleWithBrushSize) == 0x000090, "Member 'FVoxelSurfaceToolMask::bScaleWithBrushSize' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, GeneratorDebugTexture) == 0x000098, "Member 'FVoxelSurfaceToolMask::GeneratorDebugTexture' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, Scale) == 0x0000A0, "Member 'FVoxelSurfaceToolMask::Scale' has a wrong offset!");
static_assert(offsetof(FVoxelSurfaceToolMask, Ratio) == 0x0000A4, "Member 'FVoxelSurfaceToolMask::Ratio' has a wrong offset!");

// ScriptStruct Voxel.VoxelTestValues
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVoxelTestValues final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelTestValues) == 0x000008, "Wrong alignment on FVoxelTestValues");
static_assert(sizeof(FVoxelTestValues) == 0x000010, "Wrong size on FVoxelTestValues");

// ScriptStruct Voxel.VoxelTextureStructBase
// 0x0008 (0x0008 - 0x0000)
struct FVoxelTextureStructBase
{
public:
	uint64                                        ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelTextureStructBase) == 0x000008, "Wrong alignment on FVoxelTextureStructBase");
static_assert(sizeof(FVoxelTextureStructBase) == 0x000008, "Wrong size on FVoxelTextureStructBase");
static_assert(offsetof(FVoxelTextureStructBase, ID) == 0x000000, "Member 'FVoxelTextureStructBase::ID' has a wrong offset!");

// ScriptStruct Voxel.VoxelColorTexture
// 0x0010 (0x0018 - 0x0008)
struct FVoxelColorTexture final : public FVoxelTextureStructBase
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelColorTexture) == 0x000008, "Wrong alignment on FVoxelColorTexture");
static_assert(sizeof(FVoxelColorTexture) == 0x000018, "Wrong size on FVoxelColorTexture");

// ScriptStruct Voxel.VoxelFloatTexture
// 0x0010 (0x0018 - 0x0008)
struct FVoxelFloatTexture final : public FVoxelTextureStructBase
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelFloatTexture) == 0x000008, "Wrong alignment on FVoxelFloatTexture");
static_assert(sizeof(FVoxelFloatTexture) == 0x000018, "Wrong size on FVoxelFloatTexture");

// ScriptStruct Voxel.VoxelToolBaseConfig
// 0x0040 (0x0040 - 0x0000)
struct FVoxelToolBaseConfig final
{
public:
	class UMaterialInterface*                     OverlayMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MeshMaterial;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stride;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedDirection;                                // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FixedDirection;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFixedNormal;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FixedNormal;                                       // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAlignment;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelToolAlignment                           Alignment;                                         // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirMode;                                          // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToCamera;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlanePreview;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelToolBaseConfig) == 0x000008, "Wrong alignment on FVoxelToolBaseConfig");
static_assert(sizeof(FVoxelToolBaseConfig) == 0x000040, "Wrong size on FVoxelToolBaseConfig");
static_assert(offsetof(FVoxelToolBaseConfig, OverlayMaterial) == 0x000000, "Member 'FVoxelToolBaseConfig::OverlayMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, MeshMaterial) == 0x000008, "Member 'FVoxelToolBaseConfig::MeshMaterial' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, Stride) == 0x000010, "Member 'FVoxelToolBaseConfig::Stride' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, bUseFixedDirection) == 0x000014, "Member 'FVoxelToolBaseConfig::bUseFixedDirection' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, FixedDirection) == 0x000018, "Member 'FVoxelToolBaseConfig::FixedDirection' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, bUseFixedNormal) == 0x000024, "Member 'FVoxelToolBaseConfig::bUseFixedNormal' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, FixedNormal) == 0x000028, "Member 'FVoxelToolBaseConfig::FixedNormal' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, bHasAlignment) == 0x000034, "Member 'FVoxelToolBaseConfig::bHasAlignment' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, Alignment) == 0x000035, "Member 'FVoxelToolBaseConfig::Alignment' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, bAirMode) == 0x000036, "Member 'FVoxelToolBaseConfig::bAirMode' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, DistanceToCamera) == 0x000038, "Member 'FVoxelToolBaseConfig::DistanceToCamera' has a wrong offset!");
static_assert(offsetof(FVoxelToolBaseConfig, bShowPlanePreview) == 0x00003C, "Member 'FVoxelToolBaseConfig::bShowPlanePreview' has a wrong offset!");

// ScriptStruct Voxel.ModifiedVoxelMaterial
// 0x0010 (0x0010 - 0x0000)
struct FModifiedVoxelMaterial final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         OldMaterial;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         NewMaterial;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FModifiedVoxelMaterial) == 0x000004, "Wrong alignment on FModifiedVoxelMaterial");
static_assert(sizeof(FModifiedVoxelMaterial) == 0x000010, "Wrong size on FModifiedVoxelMaterial");
static_assert(offsetof(FModifiedVoxelMaterial, Position) == 0x000000, "Member 'FModifiedVoxelMaterial::Position' has a wrong offset!");
static_assert(offsetof(FModifiedVoxelMaterial, OldMaterial) == 0x00000C, "Member 'FModifiedVoxelMaterial::OldMaterial' has a wrong offset!");
static_assert(offsetof(FModifiedVoxelMaterial, NewMaterial) == 0x00000D, "Member 'FModifiedVoxelMaterial::NewMaterial' has a wrong offset!");

// ScriptStruct Voxel.ModifiedVoxelValue
// 0x0014 (0x0014 - 0x0000)
struct FModifiedVoxelValue final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModifiedVoxelValue) == 0x000004, "Wrong alignment on FModifiedVoxelValue");
static_assert(sizeof(FModifiedVoxelValue) == 0x000014, "Wrong size on FModifiedVoxelValue");
static_assert(offsetof(FModifiedVoxelValue, Position) == 0x000000, "Member 'FModifiedVoxelValue::Position' has a wrong offset!");
static_assert(offsetof(FModifiedVoxelValue, OldValue) == 0x00000C, "Member 'FModifiedVoxelValue::OldValue' has a wrong offset!");
static_assert(offsetof(FModifiedVoxelValue, NewValue) == 0x000010, "Member 'FModifiedVoxelValue::NewValue' has a wrong offset!");

}

