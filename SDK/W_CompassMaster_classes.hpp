#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_CompassMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_CompassMaster.W_CompassMaster_C
// 0x00E0 (0x0340 - 0x0260)
class UW_CompassMaster_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_Background;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Border;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Compas;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CP_Root;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_CompassIndicatorMaster_C*            W_CompassIndicatorMaster;                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	E_CompassMode                                 CompassMode;                                       // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrewievPosition;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraY;                                           // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CompassTexture;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CompassColor;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CompassOpacity;                                    // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            BackgroundColor;                                   // 0x02C0(0x0028)(Edit, BlueprintVisible)
	class UTexture2D*                             BackgroundTexture;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithBorder;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BorderTexture;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            BorderColor;                                       // 0x0300(0x0028)(Edit, BlueprintVisible)
	struct FVector2D                              CompassLocalSize;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Indicators_Y_PositionOffset;                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndicatorSize;                                     // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndicatorDistanceText_Y_PositionOffset;            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DistanceTextSize;                                  // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_CompassMaster(int32 EntryPoint);
	void AddIndicator(class UBP_TargetIndicatorComponent_C* TargetComponent);
	void UpdateIndicators();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void RemoveMarker(class UBP_TargetIndicatorComponent_C* ForComp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_CompassMaster_C">();
	}
	static class UW_CompassMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_CompassMaster_C>();
	}
};
static_assert(alignof(UW_CompassMaster_C) == 0x000008, "Wrong alignment on UW_CompassMaster_C");
static_assert(sizeof(UW_CompassMaster_C) == 0x000340, "Wrong size on UW_CompassMaster_C");
static_assert(offsetof(UW_CompassMaster_C, UberGraphFrame) == 0x000260, "Member 'UW_CompassMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Border_Background) == 0x000268, "Member 'UW_CompassMaster_C::Border_Background' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Border_Border) == 0x000270, "Member 'UW_CompassMaster_C::Border_Border' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Border_Compas) == 0x000278, "Member 'UW_CompassMaster_C::Border_Compas' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CP_Root) == 0x000280, "Member 'UW_CompassMaster_C::CP_Root' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, W_CompassIndicatorMaster) == 0x000288, "Member 'UW_CompassMaster_C::W_CompassIndicatorMaster' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassMode) == 0x000290, "Member 'UW_CompassMaster_C::CompassMode' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, PrewievPosition) == 0x000294, "Member 'UW_CompassMaster_C::PrewievPosition' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CameraY) == 0x000298, "Member 'UW_CompassMaster_C::CameraY' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassTexture) == 0x0002A0, "Member 'UW_CompassMaster_C::CompassTexture' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassColor) == 0x0002A8, "Member 'UW_CompassMaster_C::CompassColor' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassOpacity) == 0x0002B8, "Member 'UW_CompassMaster_C::CompassOpacity' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, BackgroundColor) == 0x0002C0, "Member 'UW_CompassMaster_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, BackgroundTexture) == 0x0002E8, "Member 'UW_CompassMaster_C::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, WithBorder) == 0x0002F0, "Member 'UW_CompassMaster_C::WithBorder' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, BorderTexture) == 0x0002F8, "Member 'UW_CompassMaster_C::BorderTexture' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, BorderColor) == 0x000300, "Member 'UW_CompassMaster_C::BorderColor' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, CompassLocalSize) == 0x000328, "Member 'UW_CompassMaster_C::CompassLocalSize' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, Indicators_Y_PositionOffset) == 0x000330, "Member 'UW_CompassMaster_C::Indicators_Y_PositionOffset' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, IndicatorSize) == 0x000334, "Member 'UW_CompassMaster_C::IndicatorSize' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, IndicatorDistanceText_Y_PositionOffset) == 0x000338, "Member 'UW_CompassMaster_C::IndicatorDistanceText_Y_PositionOffset' has a wrong offset!");
static_assert(offsetof(UW_CompassMaster_C, DistanceTextSize) == 0x00033C, "Member 'UW_CompassMaster_C::DistanceTextSize' has a wrong offset!");

}

