#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Clover

#include "Basic.hpp"

#include "WBP_Clover_classes.hpp"
#include "WBP_Clover_parameters.hpp"


namespace SDK
{

// Function WBP_Clover.WBP_Clover_C.ExecuteUbergraph_WBP_Clover
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Clover_C::ExecuteUbergraph_WBP_Clover(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Clover_C", "ExecuteUbergraph_WBP_Clover");

	Params::WBP_Clover_C_ExecuteUbergraph_WBP_Clover Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Clover.WBP_Clover_C.SetupAsImpossible
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsImpossible                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_Clover_C::SetupAsImpossible(bool bIsImpossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Clover_C", "SetupAsImpossible");

	Params::WBP_Clover_C_SetupAsImpossible Parms{};

	Parms.bIsImpossible = bIsImpossible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Clover.WBP_Clover_C.SetDisplayedLuck
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Luck                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Clover_C::SetDisplayedLuck(int32 Luck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Clover_C", "SetDisplayedLuck");

	Params::WBP_Clover_C_SetDisplayedLuck Parms{};

	Parms.Luck = Luck;

	UObject::ProcessEvent(Func, &Parms);
}

}

