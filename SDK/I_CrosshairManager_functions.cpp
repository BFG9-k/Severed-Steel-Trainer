#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_CrosshairManager

#include "Basic.hpp"

#include "I_CrosshairManager_classes.hpp"
#include "I_CrosshairManager_parameters.hpp"


namespace SDK
{

// Function I_CrosshairManager.I_CrosshairManager_C.RemoveCrosshair
// (Public, BlueprintCallable, BlueprintEvent)

void II_CrosshairManager_C::RemoveCrosshair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "RemoveCrosshair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_CrosshairManager.I_CrosshairManager_C.Recoil
// (Public, BlueprintCallable, BlueprintEvent)

void II_CrosshairManager_C::Recoil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "Recoil");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_CrosshairManager.I_CrosshairManager_C.ActivateCrosshair
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_CrosshairManager_C::ActivateCrosshair(const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "ActivateCrosshair");

	Params::I_CrosshairManager_C_ActivateCrosshair Parms{};

	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_CrosshairManager.I_CrosshairManager_C.CrosshairReaction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMoving                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void II_CrosshairManager_C::CrosshairReaction(bool IsMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "CrosshairReaction");

	Params::I_CrosshairManager_C_CrosshairReaction Parms{};

	Parms.IsMoving = IsMoving;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_CrosshairManager.I_CrosshairManager_C.ZoomIn
// (Public, BlueprintCallable, BlueprintEvent)

void II_CrosshairManager_C::ZoomIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "ZoomIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_CrosshairManager.I_CrosshairManager_C.ZoomOut
// (Public, BlueprintCallable, BlueprintEvent)

void II_CrosshairManager_C::ZoomOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "ZoomOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_CrosshairManager.I_CrosshairManager_C.HitIndicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_CrosshairManager_C::HitIndicator(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "HitIndicator");

	Params::I_CrosshairManager_C_HitIndicator Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_CrosshairManager.I_CrosshairManager_C.UpdateProgressBar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ProgressBarType                       ProgressType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     EmptyColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     FillColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ProgressBars                          ProgressBarType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_CrosshairManager_C::UpdateProgressBar(E_ProgressBarType ProgressType, float Time, float Value, const struct FLinearColor& EmptyColor, const struct FLinearColor& FillColor, E_ProgressBars ProgressBarType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "UpdateProgressBar");

	Params::I_CrosshairManager_C_UpdateProgressBar Parms{};

	Parms.ProgressType = ProgressType;
	Parms.Time = Time;
	Parms.Value = Value;
	Parms.EmptyColor = std::move(EmptyColor);
	Parms.FillColor = std::move(FillColor);
	Parms.ProgressBarType = ProgressBarType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_CrosshairManager.I_CrosshairManager_C.RemoveProgressBar
// (Public, BlueprintCallable, BlueprintEvent)

void II_CrosshairManager_C::RemoveProgressBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_CrosshairManager_C", "RemoveProgressBar");

	UObject::ProcessEvent(Func, nullptr);
}

}

