#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleDamageIndicatorComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.ExecuteUbergraph_BP_CircleDamageIndicatorComponent
// 0x0028 (0x0028 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent) == 0x000028, "Wrong size on BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, EntryPoint) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_CircleDamageIndicatorComponent_C_ExecuteUbergraph_BP_CircleDamageIndicatorComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_ReceiveTick");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_CircleDamageIndicatorComponent_C_ReceiveTick");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.DmgTaken
// 0x0070 (0x0070 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_DmgTaken final
{
public:
	struct FVector                                FromLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  CallFunc_NearDamage_Indicator;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  CallFunc_CustomSettings_Indicator;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_DmgTaken) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_DmgTaken");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_DmgTaken) == 0x000070, "Wrong size on BP_CircleDamageIndicatorComponent_C_DmgTaken");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, FromLocation) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::FromLocation' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_NearDamage_Indicator) == 0x000028, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_NearDamage_Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_Create_ReturnValue) == 0x000040, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_CustomSettings_Indicator) == 0x000050, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_CustomSettings_Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_GetOwner_ReturnValue_1) == 0x000060, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_DmgTaken, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'BP_CircleDamageIndicatorComponent_C_DmgTaken::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.RemoveIndicator
// 0x0010 (0x0010 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_RemoveIndicator final
{
public:
	class UUI_DamageIndicator_C*                  Indicator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_RemoveIndicator) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_RemoveIndicator");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_RemoveIndicator) == 0x000010, "Wrong size on BP_CircleDamageIndicatorComponent_C_RemoveIndicator");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveIndicator, Indicator) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveIndicator::Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveIndicator, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveIndicator::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.CalculateAngle
// 0x00A0 (0x00A0 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_CalculateAngle final
{
public:
	struct FVector                                FromLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  Indicator;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_CalculateAngle) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_CalculateAngle");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_CalculateAngle) == 0x0000A0, "Wrong size on BP_CircleDamageIndicatorComponent_C_CalculateAngle");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, FromLocation) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::FromLocation' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, Indicator) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_GetActorForwardVector_ReturnValue) == 0x00002C, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x000038, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Normal_ReturnValue) == 0x000044, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000050, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00005C, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Normal_ReturnValue_1) == 0x000068, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000080, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Roll_1) == 0x00008C, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Pitch_1) == 0x000090, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_BreakRotator_Yaw_1) == 0x000094, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CalculateAngle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_CircleDamageIndicatorComponent_C_CalculateAngle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.NearDamage
// 0x0018 (0x0018 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_NearDamage final
{
public:
	class UUI_DamageIndicator_C*                  Indicator;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_DamageIndicator_C*                  CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_DamageIndicator_C*                  CallFunc_CustomSettings_Indicator;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_NearDamage) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_NearDamage");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_NearDamage) == 0x000018, "Wrong size on BP_CircleDamageIndicatorComponent_C_NearDamage");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_NearDamage, Indicator) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_NearDamage::Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_NearDamage, CallFunc_Create_ReturnValue) == 0x000008, "Member 'BP_CircleDamageIndicatorComponent_C_NearDamage::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_NearDamage, CallFunc_CustomSettings_Indicator) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_NearDamage::CallFunc_CustomSettings_Indicator' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.CustomSettings
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_CustomSettings final
{
public:
	class UUI_DamageIndicator_C*                  IndicatorIn;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PointDamage;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  Indicator;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0038(0x0088)()
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_CustomSettings) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_CustomSettings");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_CustomSettings) == 0x0000C0, "Wrong size on BP_CircleDamageIndicatorComponent_C_CustomSettings");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, IndicatorIn) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::IndicatorIn' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, PointDamage) == 0x000008, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::PointDamage' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, Indicator) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::Indicator' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000018, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000020, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000028, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_CustomSettings, K2Node_MakeStruct_SlateBrush) == 0x000038, "Member 'BP_CircleDamageIndicatorComponent_C_CustomSettings::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function BP_CircleDamageIndicatorComponent.BP_CircleDamageIndicatorComponent_C.RemoveAllIndicators
// 0x0020 (0x0020 - 0x0000)
struct BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_DamageIndicator_C*                  CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators) == 0x000008, "Wrong alignment on BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators");
static_assert(sizeof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators) == 0x000020, "Wrong size on BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_CircleDamageIndicatorComponent_C_RemoveAllIndicators::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

