#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_CompassMaster

#include "Basic.hpp"

#include "W_CompassMaster_classes.hpp"
#include "W_CompassMaster_parameters.hpp"


namespace SDK
{

// Function W_CompassMaster.W_CompassMaster_C.ExecuteUbergraph_W_CompassMaster
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::ExecuteUbergraph_W_CompassMaster(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "ExecuteUbergraph_W_CompassMaster");

	Params::W_CompassMaster_C_ExecuteUbergraph_W_CompassMaster Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.AddIndicator
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_TargetIndicatorComponent_C*   TargetComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::AddIndicator(class UBP_TargetIndicatorComponent_C* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "AddIndicator");

	Params::W_CompassMaster_C_AddIndicator Parms{};

	Parms.TargetComponent = TargetComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.UpdateIndicators
// (BlueprintCallable, BlueprintEvent)

void UW_CompassMaster_C::UpdateIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "UpdateIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_CompassMaster.W_CompassMaster_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "Tick");

	Params::W_CompassMaster_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_CompassMaster_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_CompassMaster.W_CompassMaster_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_CompassMaster_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "PreConstruct");

	Params::W_CompassMaster_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_CompassMaster.W_CompassMaster_C.RemoveMarker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_TargetIndicatorComponent_C*   ForComp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_CompassMaster_C::RemoveMarker(class UBP_TargetIndicatorComponent_C* ForComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_CompassMaster_C", "RemoveMarker");

	Params::W_CompassMaster_C_RemoveMarker Parms{};

	Parms.ForComp = ForComp;

	UObject::ProcessEvent(Func, &Parms);
}

}

