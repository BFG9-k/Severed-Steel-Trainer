#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ALSV4_CPP_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ALSV4_CPP.ALSBaseCharacter.GetFirstPersonCameraTarget
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetFirstPersonCameraTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetFirstPersonCameraTarget) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetFirstPersonCameraTarget");
static_assert(sizeof(ALSBaseCharacter_GetFirstPersonCameraTarget) == 0x00000C, "Wrong size on ALSBaseCharacter_GetFirstPersonCameraTarget");
static_assert(offsetof(ALSBaseCharacter_GetFirstPersonCameraTarget, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetFirstPersonCameraTarget::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetGetUpAnimation
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_GetGetUpAnimation final
{
public:
	bool                                          bRagdollFaceUpState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetGetUpAnimation) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetGetUpAnimation");
static_assert(sizeof(ALSBaseCharacter_GetGetUpAnimation) == 0x000010, "Wrong size on ALSBaseCharacter_GetGetUpAnimation");
static_assert(offsetof(ALSBaseCharacter_GetGetUpAnimation, bRagdollFaceUpState) == 0x000000, "Member 'ALSBaseCharacter_GetGetUpAnimation::bRagdollFaceUpState' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetGetUpAnimation, ReturnValue) == 0x000008, "Member 'ALSBaseCharacter_GetGetUpAnimation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMantleAsset
// 0x0040 (0x0040 - 0x0000)
struct ALSBaseCharacter_GetMantleAsset final
{
public:
	EALSMantleType                                MantleType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMantleAsset                        ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMantleAsset) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetMantleAsset");
static_assert(sizeof(ALSBaseCharacter_GetMantleAsset) == 0x000040, "Wrong size on ALSBaseCharacter_GetMantleAsset");
static_assert(offsetof(ALSBaseCharacter_GetMantleAsset, MantleType) == 0x000000, "Member 'ALSBaseCharacter_GetMantleAsset::MantleType' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetMantleAsset, ReturnValue) == 0x000008, "Member 'ALSBaseCharacter_GetMantleAsset::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetRollAnimation
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_GetRollAnimation final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetRollAnimation) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetRollAnimation");
static_assert(sizeof(ALSBaseCharacter_GetRollAnimation) == 0x000008, "Wrong size on ALSBaseCharacter_GetRollAnimation");
static_assert(offsetof(ALSBaseCharacter_GetRollAnimation, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetRollAnimation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonPivotTarget
// 0x0030 (0x0030 - 0x0000)
struct ALSBaseCharacter_GetThirdPersonPivotTarget final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetThirdPersonPivotTarget) == 0x000010, "Wrong alignment on ALSBaseCharacter_GetThirdPersonPivotTarget");
static_assert(sizeof(ALSBaseCharacter_GetThirdPersonPivotTarget) == 0x000030, "Wrong size on ALSBaseCharacter_GetThirdPersonPivotTarget");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonPivotTarget, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetThirdPersonPivotTarget::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetThirdPersonTraceParams
// 0x0014 (0x0014 - 0x0000)
struct ALSBaseCharacter_GetThirdPersonTraceParams final
{
public:
	struct FVector                                TraceOrigin;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceRadius;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_GetThirdPersonTraceParams) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetThirdPersonTraceParams");
static_assert(sizeof(ALSBaseCharacter_GetThirdPersonTraceParams) == 0x000014, "Wrong size on ALSBaseCharacter_GetThirdPersonTraceParams");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, TraceOrigin) == 0x000000, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::TraceOrigin' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, TraceRadius) == 0x00000C, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::TraceRadius' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetThirdPersonTraceParams, ReturnValue) == 0x000010, "Member 'ALSBaseCharacter_GetThirdPersonTraceParams::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetUpComplete
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_GetUpComplete final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_GetUpComplete) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetUpComplete");
static_assert(sizeof(ALSBaseCharacter_GetUpComplete) == 0x000010, "Wrong size on ALSBaseCharacter_GetUpComplete");
static_assert(offsetof(ALSBaseCharacter_GetUpComplete, AnimMontage) == 0x000000, "Member 'ALSBaseCharacter_GetUpComplete::AnimMontage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetUpComplete, bInterrupted) == 0x000008, "Member 'ALSBaseCharacter_GetUpComplete::bInterrupted' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.MantleCheckFalling
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_MantleCheckFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_MantleCheckFalling) == 0x000001, "Wrong alignment on ALSBaseCharacter_MantleCheckFalling");
static_assert(sizeof(ALSBaseCharacter_MantleCheckFalling) == 0x000001, "Wrong size on ALSBaseCharacter_MantleCheckFalling");
static_assert(offsetof(ALSBaseCharacter_MantleCheckFalling, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_MantleCheckFalling::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.MantleCheckGrounded
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_MantleCheckGrounded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_MantleCheckGrounded) == 0x000001, "Wrong alignment on ALSBaseCharacter_MantleCheckGrounded");
static_assert(sizeof(ALSBaseCharacter_MantleCheckGrounded) == 0x000001, "Wrong size on ALSBaseCharacter_MantleCheckGrounded");
static_assert(offsetof(ALSBaseCharacter_MantleCheckGrounded, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_MantleCheckGrounded::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.MantleUpdate
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_MantleUpdate final
{
public:
	float                                         BlendIn;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_MantleUpdate) == 0x000004, "Wrong alignment on ALSBaseCharacter_MantleUpdate");
static_assert(sizeof(ALSBaseCharacter_MantleUpdate) == 0x000004, "Wrong size on ALSBaseCharacter_MantleUpdate");
static_assert(offsetof(ALSBaseCharacter_MantleUpdate, BlendIn) == 0x000000, "Member 'ALSBaseCharacter_MantleUpdate::BlendIn' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Multicast_MantleStart
// 0x0060 (0x0060 - 0x0000)
struct ALSBaseCharacter_Multicast_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeWS;                                     // 0x0010(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EALSMantleType                                MantleType;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Multicast_MantleStart) == 0x000010, "Wrong alignment on ALSBaseCharacter_Multicast_MantleStart");
static_assert(sizeof(ALSBaseCharacter_Multicast_MantleStart) == 0x000060, "Wrong size on ALSBaseCharacter_Multicast_MantleStart");
static_assert(offsetof(ALSBaseCharacter_Multicast_MantleStart, MantleHeight) == 0x000000, "Member 'ALSBaseCharacter_Multicast_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Multicast_MantleStart, MantleLedgeWS) == 0x000010, "Member 'ALSBaseCharacter_Multicast_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Multicast_MantleStart, MantleType) == 0x000050, "Member 'ALSBaseCharacter_Multicast_MantleStart::MantleType' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Multicast_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Multicast_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         track;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Multicast_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Multicast_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Multicast_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Multicast_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Multicast_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Multicast_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Multicast_PlayMontage, track) == 0x000008, "Member 'ALSBaseCharacter_Multicast_PlayMontage::track' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Multicast_RagdollEnd
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_Multicast_RagdollEnd final
{
public:
	struct FVector                                CharacterLocation;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Multicast_RagdollEnd) == 0x000004, "Wrong alignment on ALSBaseCharacter_Multicast_RagdollEnd");
static_assert(sizeof(ALSBaseCharacter_Multicast_RagdollEnd) == 0x00000C, "Wrong size on ALSBaseCharacter_Multicast_RagdollEnd");
static_assert(offsetof(ALSBaseCharacter_Multicast_RagdollEnd, CharacterLocation) == 0x000000, "Member 'ALSBaseCharacter_Multicast_RagdollEnd::CharacterLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_OverlayState final
{
public:
	EALSOverlayState                              PrevOverlayState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_OverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_OverlayState");
static_assert(sizeof(ALSBaseCharacter_OnRep_OverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_OverlayState");
static_assert(offsetof(ALSBaseCharacter_OnRep_OverlayState, PrevOverlayState) == 0x000000, "Member 'ALSBaseCharacter_OnRep_OverlayState::PrevOverlayState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_RotationMode final
{
public:
	EALSRotationMode                              PrevRotMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_RotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_RotationMode");
static_assert(sizeof(ALSBaseCharacter_OnRep_RotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_RotationMode");
static_assert(offsetof(ALSBaseCharacter_OnRep_RotationMode, PrevRotMode) == 0x000000, "Member 'ALSBaseCharacter_OnRep_RotationMode::PrevRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.OnRep_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_OnRep_ViewMode final
{
public:
	EALSViewMode                                  PrevViewMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_OnRep_ViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_OnRep_ViewMode");
static_assert(sizeof(ALSBaseCharacter_OnRep_ViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_OnRep_ViewMode");
static_assert(offsetof(ALSBaseCharacter_OnRep_ViewMode, PrevViewMode) == 0x000000, "Member 'ALSBaseCharacter_OnRep_ViewMode::PrevViewMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Replicated_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Replicated_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         track;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Replicated_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Replicated_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Replicated_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Replicated_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Replicated_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Replicated_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Replicated_PlayMontage, track) == 0x000008, "Member 'ALSBaseCharacter_Replicated_PlayMontage::track' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_MantleStart
// 0x0060 (0x0060 - 0x0000)
struct ALSBaseCharacter_Server_MantleStart final
{
public:
	float                                         MantleHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSComponentAndTransform              MantleLedgeWS;                                     // 0x0010(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EALSMantleType                                MantleType;                                        // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Server_MantleStart) == 0x000010, "Wrong alignment on ALSBaseCharacter_Server_MantleStart");
static_assert(sizeof(ALSBaseCharacter_Server_MantleStart) == 0x000060, "Wrong size on ALSBaseCharacter_Server_MantleStart");
static_assert(offsetof(ALSBaseCharacter_Server_MantleStart, MantleHeight) == 0x000000, "Member 'ALSBaseCharacter_Server_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_MantleStart, MantleLedgeWS) == 0x000010, "Member 'ALSBaseCharacter_Server_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_MantleStart, MantleType) == 0x000050, "Member 'ALSBaseCharacter_Server_MantleStart::MantleType' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_PlayMontage
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_Server_PlayMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         track;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_Server_PlayMontage) == 0x000008, "Wrong alignment on ALSBaseCharacter_Server_PlayMontage");
static_assert(sizeof(ALSBaseCharacter_Server_PlayMontage) == 0x000010, "Wrong size on ALSBaseCharacter_Server_PlayMontage");
static_assert(offsetof(ALSBaseCharacter_Server_PlayMontage, Montage) == 0x000000, "Member 'ALSBaseCharacter_Server_PlayMontage::Montage' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_Server_PlayMontage, track) == 0x000008, "Member 'ALSBaseCharacter_Server_PlayMontage::track' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_RagdollEnd
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_Server_RagdollEnd final
{
public:
	struct FVector                                CharacterLocation;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_RagdollEnd) == 0x000004, "Wrong alignment on ALSBaseCharacter_Server_RagdollEnd");
static_assert(sizeof(ALSBaseCharacter_Server_RagdollEnd) == 0x00000C, "Wrong size on ALSBaseCharacter_Server_RagdollEnd");
static_assert(offsetof(ALSBaseCharacter_Server_RagdollEnd, CharacterLocation) == 0x000000, "Member 'ALSBaseCharacter_Server_RagdollEnd::CharacterLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredGait::NewGait' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredRotationMode final
{
public:
	EALSRotationMode                              NewRotMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredRotationMode, NewRotMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredRotationMode::NewRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetDesiredStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_Server_SetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_Server_SetDesiredStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_Server_SetDesiredStance::NewStance' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetMeshLocationDuringRagdoll
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll final
{
public:
	struct FVector                                MeshLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll) == 0x000004, "Wrong alignment on ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll");
static_assert(sizeof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll) == 0x00000C, "Wrong size on ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll");
static_assert(offsetof(ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll, MeshLocation) == 0x000000, "Member 'ALSBaseCharacter_Server_SetMeshLocationDuringRagdoll::MeshLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetOverlayState final
{
public:
	EALSOverlayState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetOverlayState");
static_assert(sizeof(ALSBaseCharacter_Server_SetOverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetOverlayState");
static_assert(offsetof(ALSBaseCharacter_Server_SetOverlayState, NewState) == 0x000000, "Member 'ALSBaseCharacter_Server_SetOverlayState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetRotationMode final
{
public:
	EALSRotationMode                              NewRotationMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetRotationMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetRotationMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetRotationMode, NewRotationMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetRotationMode::NewRotationMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.Server_SetViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_Server_SetViewMode final
{
public:
	EALSViewMode                                  NewViewMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_Server_SetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_Server_SetViewMode");
static_assert(sizeof(ALSBaseCharacter_Server_SetViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_Server_SetViewMode");
static_assert(offsetof(ALSBaseCharacter_Server_SetViewMode, NewViewMode) == 0x000000, "Member 'ALSBaseCharacter_Server_SetViewMode::NewViewMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetAcceleration
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_SetAcceleration final
{
public:
	struct FVector                                NewAcceleration;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetAcceleration) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetAcceleration");
static_assert(sizeof(ALSBaseCharacter_SetAcceleration) == 0x00000C, "Wrong size on ALSBaseCharacter_SetAcceleration");
static_assert(offsetof(ALSBaseCharacter_SetAcceleration, NewAcceleration) == 0x000000, "Member 'ALSBaseCharacter_SetAcceleration::NewAcceleration' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetActorLocationAndTargetRotation
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_SetActorLocationAndTargetRotation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetActorLocationAndTargetRotation) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetActorLocationAndTargetRotation");
static_assert(sizeof(ALSBaseCharacter_SetActorLocationAndTargetRotation) == 0x000018, "Wrong size on ALSBaseCharacter_SetActorLocationAndTargetRotation");
static_assert(offsetof(ALSBaseCharacter_SetActorLocationAndTargetRotation, NewLocation) == 0x000000, "Member 'ALSBaseCharacter_SetActorLocationAndTargetRotation::NewLocation' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_SetActorLocationAndTargetRotation, NewRotation) == 0x00000C, "Member 'ALSBaseCharacter_SetActorLocationAndTargetRotation::NewRotation' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetAimYawRate
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_SetAimYawRate final
{
public:
	float                                         NewAimYawRate;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetAimYawRate) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetAimYawRate");
static_assert(sizeof(ALSBaseCharacter_SetAimYawRate) == 0x000004, "Wrong size on ALSBaseCharacter_SetAimYawRate");
static_assert(offsetof(ALSBaseCharacter_SetAimYawRate, NewAimYawRate) == 0x000000, "Member 'ALSBaseCharacter_SetAimYawRate::NewAimYawRate' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_SetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_SetDesiredGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredGait::NewGait' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredRotationMode final
{
public:
	EALSRotationMode                              NewRotMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_SetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_SetDesiredRotationMode, NewRotMode) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredRotationMode::NewRotMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetDesiredStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_SetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_SetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_SetDesiredStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_SetDesiredStance::NewStance' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetGait final
{
public:
	EALSGait                                      NewGait;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetGait");
static_assert(sizeof(ALSBaseCharacter_SetGait) == 0x000001, "Wrong size on ALSBaseCharacter_SetGait");
static_assert(offsetof(ALSBaseCharacter_SetGait, NewGait) == 0x000000, "Member 'ALSBaseCharacter_SetGait::NewGait' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetHasMovementInput
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetHasMovementInput final
{
public:
	bool                                          bNewHasMovementInput;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetHasMovementInput) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetHasMovementInput");
static_assert(sizeof(ALSBaseCharacter_SetHasMovementInput) == 0x000001, "Wrong size on ALSBaseCharacter_SetHasMovementInput");
static_assert(offsetof(ALSBaseCharacter_SetHasMovementInput, bNewHasMovementInput) == 0x000000, "Member 'ALSBaseCharacter_SetHasMovementInput::bNewHasMovementInput' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetIsMoving
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetIsMoving final
{
public:
	bool                                          bNewIsMoving;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetIsMoving) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetIsMoving");
static_assert(sizeof(ALSBaseCharacter_SetIsMoving) == 0x000001, "Wrong size on ALSBaseCharacter_SetIsMoving");
static_assert(offsetof(ALSBaseCharacter_SetIsMoving, bNewIsMoving) == 0x000000, "Member 'ALSBaseCharacter_SetIsMoving::bNewIsMoving' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetMovementAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetMovementAction final
{
public:
	EALSMovementAction                            NewAction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetMovementAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetMovementAction");
static_assert(sizeof(ALSBaseCharacter_SetMovementAction) == 0x000001, "Wrong size on ALSBaseCharacter_SetMovementAction");
static_assert(offsetof(ALSBaseCharacter_SetMovementAction, NewAction) == 0x000000, "Member 'ALSBaseCharacter_SetMovementAction::NewAction' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetMovementInputAmount
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_SetMovementInputAmount final
{
public:
	float                                         NewMovementInputAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetMovementInputAmount) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetMovementInputAmount");
static_assert(sizeof(ALSBaseCharacter_SetMovementInputAmount) == 0x000004, "Wrong size on ALSBaseCharacter_SetMovementInputAmount");
static_assert(offsetof(ALSBaseCharacter_SetMovementInputAmount, NewMovementInputAmount) == 0x000000, "Member 'ALSBaseCharacter_SetMovementInputAmount::NewMovementInputAmount' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetMovementState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetMovementState final
{
public:
	EALSMovementState                             NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetMovementState");
static_assert(sizeof(ALSBaseCharacter_SetMovementState) == 0x000001, "Wrong size on ALSBaseCharacter_SetMovementState");
static_assert(offsetof(ALSBaseCharacter_SetMovementState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetMovementState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetOverlayState final
{
public:
	EALSOverlayState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetOverlayState");
static_assert(sizeof(ALSBaseCharacter_SetOverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_SetOverlayState");
static_assert(offsetof(ALSBaseCharacter_SetOverlayState, NewState) == 0x000000, "Member 'ALSBaseCharacter_SetOverlayState::NewState' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetRightShoulder
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetRightShoulder final
{
public:
	bool                                          bNewRightShoulder;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetRightShoulder) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetRightShoulder");
static_assert(sizeof(ALSBaseCharacter_SetRightShoulder) == 0x000001, "Wrong size on ALSBaseCharacter_SetRightShoulder");
static_assert(offsetof(ALSBaseCharacter_SetRightShoulder, bNewRightShoulder) == 0x000000, "Member 'ALSBaseCharacter_SetRightShoulder::bNewRightShoulder' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetRotationMode final
{
public:
	EALSRotationMode                              NewRotationMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetRotationMode");
static_assert(sizeof(ALSBaseCharacter_SetRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_SetRotationMode");
static_assert(offsetof(ALSBaseCharacter_SetRotationMode, NewRotationMode) == 0x000000, "Member 'ALSBaseCharacter_SetRotationMode::NewRotationMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_SetSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetSpeed) == 0x000004, "Wrong alignment on ALSBaseCharacter_SetSpeed");
static_assert(sizeof(ALSBaseCharacter_SetSpeed) == 0x000004, "Wrong size on ALSBaseCharacter_SetSpeed");
static_assert(offsetof(ALSBaseCharacter_SetSpeed, NewSpeed) == 0x000000, "Member 'ALSBaseCharacter_SetSpeed::NewSpeed' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetStance final
{
public:
	EALSStance                                    NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetStance");
static_assert(sizeof(ALSBaseCharacter_SetStance) == 0x000001, "Wrong size on ALSBaseCharacter_SetStance");
static_assert(offsetof(ALSBaseCharacter_SetStance, NewStance) == 0x000000, "Member 'ALSBaseCharacter_SetStance::NewStance' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SetViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SetViewMode final
{
public:
	EALSViewMode                                  NewViewMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_SetViewMode");
static_assert(sizeof(ALSBaseCharacter_SetViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_SetViewMode");
static_assert(offsetof(ALSBaseCharacter_SetViewMode, NewViewMode) == 0x000000, "Member 'ALSBaseCharacter_SetViewMode::NewViewMode' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.TYVCMoveSmooth
// 0x0010 (0x0010 - 0x0000)
struct ALSBaseCharacter_TYVCMoveSmooth final
{
public:
	struct FVector                                Move;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_TYVCMoveSmooth) == 0x000004, "Wrong alignment on ALSBaseCharacter_TYVCMoveSmooth");
static_assert(sizeof(ALSBaseCharacter_TYVCMoveSmooth) == 0x000010, "Wrong size on ALSBaseCharacter_TYVCMoveSmooth");
static_assert(offsetof(ALSBaseCharacter_TYVCMoveSmooth, Move) == 0x000000, "Member 'ALSBaseCharacter_TYVCMoveSmooth::Move' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_TYVCMoveSmooth, DeltaSeconds) == 0x00000C, "Member 'ALSBaseCharacter_TYVCMoveSmooth::DeltaSeconds' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.CanSprint
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_CanSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_CanSprint) == 0x000001, "Wrong alignment on ALSBaseCharacter_CanSprint");
static_assert(sizeof(ALSBaseCharacter_CanSprint) == 0x000001, "Wrong size on ALSBaseCharacter_CanSprint");
static_assert(offsetof(ALSBaseCharacter_CanSprint, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_CanSprint::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAcceleration
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAcceleration) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAcceleration");
static_assert(sizeof(ALSBaseCharacter_GetAcceleration) == 0x00000C, "Wrong size on ALSBaseCharacter_GetAcceleration");
static_assert(offsetof(ALSBaseCharacter_GetAcceleration, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAcceleration::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetActualGait
// 0x0002 (0x0002 - 0x0000)
struct ALSBaseCharacter_GetActualGait final
{
public:
	EALSGait                                      AllowedGait;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSGait                                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetActualGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetActualGait");
static_assert(sizeof(ALSBaseCharacter_GetActualGait) == 0x000002, "Wrong size on ALSBaseCharacter_GetActualGait");
static_assert(offsetof(ALSBaseCharacter_GetActualGait, AllowedGait) == 0x000000, "Member 'ALSBaseCharacter_GetActualGait::AllowedGait' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetActualGait, ReturnValue) == 0x000001, "Member 'ALSBaseCharacter_GetActualGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAimingRotation
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetAimingRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAimingRotation) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAimingRotation");
static_assert(sizeof(ALSBaseCharacter_GetAimingRotation) == 0x00000C, "Wrong size on ALSBaseCharacter_GetAimingRotation");
static_assert(offsetof(ALSBaseCharacter_GetAimingRotation, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAimingRotation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAimYawRate
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetAimYawRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAimYawRate) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAimYawRate");
static_assert(sizeof(ALSBaseCharacter_GetAimYawRate) == 0x000004, "Wrong size on ALSBaseCharacter_GetAimYawRate");
static_assert(offsetof(ALSBaseCharacter_GetAimYawRate, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAimYawRate::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAllowedGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetAllowedGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAllowedGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetAllowedGait");
static_assert(sizeof(ALSBaseCharacter_GetAllowedGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetAllowedGait");
static_assert(offsetof(ALSBaseCharacter_GetAllowedGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetAllowedGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetAnimCurveValue
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetAnimCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetAnimCurveValue) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetAnimCurveValue");
static_assert(sizeof(ALSBaseCharacter_GetAnimCurveValue) == 0x00000C, "Wrong size on ALSBaseCharacter_GetAnimCurveValue");
static_assert(offsetof(ALSBaseCharacter_GetAnimCurveValue, CurveName) == 0x000000, "Member 'ALSBaseCharacter_GetAnimCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetAnimCurveValue, ReturnValue) == 0x000008, "Member 'ALSBaseCharacter_GetAnimCurveValue::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetCameraParameters
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetCameraParameters final
{
public:
	float                                         TPFOVOut;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPFOVOut;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightShoulderOut;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSBaseCharacter_GetCameraParameters) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetCameraParameters");
static_assert(sizeof(ALSBaseCharacter_GetCameraParameters) == 0x00000C, "Wrong size on ALSBaseCharacter_GetCameraParameters");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, TPFOVOut) == 0x000000, "Member 'ALSBaseCharacter_GetCameraParameters::TPFOVOut' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, FPFOVOut) == 0x000004, "Member 'ALSBaseCharacter_GetCameraParameters::FPFOVOut' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetCameraParameters, bRightShoulderOut) == 0x000008, "Member 'ALSBaseCharacter_GetCameraParameters::bRightShoulderOut' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetControlForwardRightVector
// 0x0018 (0x0018 - 0x0000)
struct ALSBaseCharacter_GetControlForwardRightVector final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetControlForwardRightVector) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetControlForwardRightVector");
static_assert(sizeof(ALSBaseCharacter_GetControlForwardRightVector) == 0x000018, "Wrong size on ALSBaseCharacter_GetControlForwardRightVector");
static_assert(offsetof(ALSBaseCharacter_GetControlForwardRightVector, Forward) == 0x000000, "Member 'ALSBaseCharacter_GetControlForwardRightVector::Forward' has a wrong offset!");
static_assert(offsetof(ALSBaseCharacter_GetControlForwardRightVector, Right) == 0x00000C, "Member 'ALSBaseCharacter_GetControlForwardRightVector::Right' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredGait");
static_assert(sizeof(ALSBaseCharacter_GetDesiredGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredGait");
static_assert(offsetof(ALSBaseCharacter_GetDesiredGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredRotationMode final
{
public:
	EALSRotationMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredRotationMode");
static_assert(sizeof(ALSBaseCharacter_GetDesiredRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredRotationMode");
static_assert(offsetof(ALSBaseCharacter_GetDesiredRotationMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredRotationMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetDesiredStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetDesiredStance final
{
public:
	EALSStance                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetDesiredStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetDesiredStance");
static_assert(sizeof(ALSBaseCharacter_GetDesiredStance) == 0x000001, "Wrong size on ALSBaseCharacter_GetDesiredStance");
static_assert(offsetof(ALSBaseCharacter_GetDesiredStance, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetDesiredStance::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetGait
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetGait final
{
public:
	EALSGait                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetGait) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetGait");
static_assert(sizeof(ALSBaseCharacter_GetGait) == 0x000001, "Wrong size on ALSBaseCharacter_GetGait");
static_assert(offsetof(ALSBaseCharacter_GetGait, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetGait::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementAction
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetMovementAction final
{
public:
	EALSMovementAction                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementAction) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetMovementAction");
static_assert(sizeof(ALSBaseCharacter_GetMovementAction) == 0x000001, "Wrong size on ALSBaseCharacter_GetMovementAction");
static_assert(offsetof(ALSBaseCharacter_GetMovementAction, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementAction::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInput
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetMovementInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementInput) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetMovementInput");
static_assert(sizeof(ALSBaseCharacter_GetMovementInput) == 0x00000C, "Wrong size on ALSBaseCharacter_GetMovementInput");
static_assert(offsetof(ALSBaseCharacter_GetMovementInput, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementInput::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementInputAmount
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetMovementInputAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementInputAmount) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetMovementInputAmount");
static_assert(sizeof(ALSBaseCharacter_GetMovementInputAmount) == 0x000004, "Wrong size on ALSBaseCharacter_GetMovementInputAmount");
static_assert(offsetof(ALSBaseCharacter_GetMovementInputAmount, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementInputAmount::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMovementState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetMovementState final
{
public:
	EALSMovementState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetMovementState");
static_assert(sizeof(ALSBaseCharacter_GetMovementState) == 0x000001, "Wrong size on ALSBaseCharacter_GetMovementState");
static_assert(offsetof(ALSBaseCharacter_GetMovementState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMovementState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetMyMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct ALSBaseCharacter_GetMyMovementComponent final
{
public:
	class UALSCharacterMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetMyMovementComponent) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetMyMovementComponent");
static_assert(sizeof(ALSBaseCharacter_GetMyMovementComponent) == 0x000008, "Wrong size on ALSBaseCharacter_GetMyMovementComponent");
static_assert(offsetof(ALSBaseCharacter_GetMyMovementComponent, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetMyMovementComponent::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetOverlayState final
{
public:
	EALSOverlayState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetOverlayState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetOverlayState");
static_assert(sizeof(ALSBaseCharacter_GetOverlayState) == 0x000001, "Wrong size on ALSBaseCharacter_GetOverlayState");
static_assert(offsetof(ALSBaseCharacter_GetOverlayState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetOverlayState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetPlayerMovementInput
// 0x000C (0x000C - 0x0000)
struct ALSBaseCharacter_GetPlayerMovementInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetPlayerMovementInput) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetPlayerMovementInput");
static_assert(sizeof(ALSBaseCharacter_GetPlayerMovementInput) == 0x00000C, "Wrong size on ALSBaseCharacter_GetPlayerMovementInput");
static_assert(offsetof(ALSBaseCharacter_GetPlayerMovementInput, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetPlayerMovementInput::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetPrevMovementState
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetPrevMovementState final
{
public:
	EALSMovementState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetPrevMovementState) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetPrevMovementState");
static_assert(sizeof(ALSBaseCharacter_GetPrevMovementState) == 0x000001, "Wrong size on ALSBaseCharacter_GetPrevMovementState");
static_assert(offsetof(ALSBaseCharacter_GetPrevMovementState, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetPrevMovementState::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetRotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetRotationMode final
{
public:
	EALSRotationMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetRotationMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetRotationMode");
static_assert(sizeof(ALSBaseCharacter_GetRotationMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetRotationMode");
static_assert(offsetof(ALSBaseCharacter_GetRotationMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetRotationMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct ALSBaseCharacter_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetSpeed) == 0x000004, "Wrong alignment on ALSBaseCharacter_GetSpeed");
static_assert(sizeof(ALSBaseCharacter_GetSpeed) == 0x000004, "Wrong size on ALSBaseCharacter_GetSpeed");
static_assert(offsetof(ALSBaseCharacter_GetSpeed, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetSpeed::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetStance
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetStance final
{
public:
	EALSStance                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetStance) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetStance");
static_assert(sizeof(ALSBaseCharacter_GetStance) == 0x000001, "Wrong size on ALSBaseCharacter_GetStance");
static_assert(offsetof(ALSBaseCharacter_GetStance, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetStance::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetTargetMovementSettings
// 0x0020 (0x0020 - 0x0000)
struct ALSBaseCharacter_GetTargetMovementSettings final
{
public:
	struct FALSMovementSettings                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetTargetMovementSettings) == 0x000008, "Wrong alignment on ALSBaseCharacter_GetTargetMovementSettings");
static_assert(sizeof(ALSBaseCharacter_GetTargetMovementSettings) == 0x000020, "Wrong size on ALSBaseCharacter_GetTargetMovementSettings");
static_assert(offsetof(ALSBaseCharacter_GetTargetMovementSettings, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetTargetMovementSettings::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.GetViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_GetViewMode final
{
public:
	EALSViewMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_GetViewMode) == 0x000001, "Wrong alignment on ALSBaseCharacter_GetViewMode");
static_assert(sizeof(ALSBaseCharacter_GetViewMode) == 0x000001, "Wrong size on ALSBaseCharacter_GetViewMode");
static_assert(offsetof(ALSBaseCharacter_GetViewMode, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_GetViewMode::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.HasMovementInput
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_HasMovementInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_HasMovementInput) == 0x000001, "Wrong alignment on ALSBaseCharacter_HasMovementInput");
static_assert(sizeof(ALSBaseCharacter_HasMovementInput) == 0x000001, "Wrong size on ALSBaseCharacter_HasMovementInput");
static_assert(offsetof(ALSBaseCharacter_HasMovementInput, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_HasMovementInput::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_IsMoving) == 0x000001, "Wrong alignment on ALSBaseCharacter_IsMoving");
static_assert(sizeof(ALSBaseCharacter_IsMoving) == 0x000001, "Wrong size on ALSBaseCharacter_IsMoving");
static_assert(offsetof(ALSBaseCharacter_IsMoving, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_IsMoving::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.IsRightShoulder
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_IsRightShoulder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_IsRightShoulder) == 0x000001, "Wrong alignment on ALSBaseCharacter_IsRightShoulder");
static_assert(sizeof(ALSBaseCharacter_IsRightShoulder) == 0x000001, "Wrong size on ALSBaseCharacter_IsRightShoulder");
static_assert(offsetof(ALSBaseCharacter_IsRightShoulder, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_IsRightShoulder::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSBaseCharacter.SwitchRight
// 0x0001 (0x0001 - 0x0000)
struct ALSBaseCharacter_SwitchRight final
{
public:
	EALSOverlayState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSBaseCharacter_SwitchRight) == 0x000001, "Wrong alignment on ALSBaseCharacter_SwitchRight");
static_assert(sizeof(ALSBaseCharacter_SwitchRight) == 0x000001, "Wrong size on ALSBaseCharacter_SwitchRight");
static_assert(offsetof(ALSBaseCharacter_SwitchRight, ReturnValue) == 0x000000, "Member 'ALSBaseCharacter_SwitchRight::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacter.AttachToHand
// 0x0028 (0x0028 - 0x0000)
struct ALSCharacter_AttachToHand final
{
public:
	class UStaticMesh*                            NewStaticMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          NewSkeletalMesh;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 NewAnimClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHand;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacter_AttachToHand) == 0x000008, "Wrong alignment on ALSCharacter_AttachToHand");
static_assert(sizeof(ALSCharacter_AttachToHand) == 0x000028, "Wrong size on ALSCharacter_AttachToHand");
static_assert(offsetof(ALSCharacter_AttachToHand, NewStaticMesh) == 0x000000, "Member 'ALSCharacter_AttachToHand::NewStaticMesh' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, NewSkeletalMesh) == 0x000008, "Member 'ALSCharacter_AttachToHand::NewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, NewAnimClass) == 0x000010, "Member 'ALSCharacter_AttachToHand::NewAnimClass' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, bLeftHand) == 0x000018, "Member 'ALSCharacter_AttachToHand::bLeftHand' has a wrong offset!");
static_assert(offsetof(ALSCharacter_AttachToHand, Offset) == 0x00001C, "Member 'ALSCharacter_AttachToHand::Offset' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayDynamicTransition
// 0x0020 (0x0020 - 0x0000)
struct ALSCharacterAnimInstance_PlayDynamicTransition final
{
public:
	float                                         ReTriggerDelay;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayDynamicTransition) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayDynamicTransition");
static_assert(sizeof(ALSCharacterAnimInstance_PlayDynamicTransition) == 0x000020, "Wrong size on ALSCharacterAnimInstance_PlayDynamicTransition");
static_assert(offsetof(ALSCharacterAnimInstance_PlayDynamicTransition, ReTriggerDelay) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayDynamicTransition::ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ALSCharacterAnimInstance_PlayDynamicTransition, Parameters) == 0x000008, "Member 'ALSCharacterAnimInstance_PlayDynamicTransition::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransition
// 0x0018 (0x0018 - 0x0000)
struct ALSCharacterAnimInstance_PlayTransition final
{
public:
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayTransition) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayTransition");
static_assert(sizeof(ALSCharacterAnimInstance_PlayTransition) == 0x000018, "Wrong size on ALSCharacterAnimInstance_PlayTransition");
static_assert(offsetof(ALSCharacterAnimInstance_PlayTransition, Parameters) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayTransition::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.PlayTransitionChecked
// 0x0018 (0x0018 - 0x0000)
struct ALSCharacterAnimInstance_PlayTransitionChecked final
{
public:
	struct FALSDynamicMontageParams               Parameters;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_PlayTransitionChecked) == 0x000008, "Wrong alignment on ALSCharacterAnimInstance_PlayTransitionChecked");
static_assert(sizeof(ALSCharacterAnimInstance_PlayTransitionChecked) == 0x000018, "Wrong size on ALSCharacterAnimInstance_PlayTransitionChecked");
static_assert(offsetof(ALSCharacterAnimInstance_PlayTransitionChecked, Parameters) == 0x000000, "Member 'ALSCharacterAnimInstance_PlayTransitionChecked::Parameters' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.SetGroundedEntryState
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_SetGroundedEntryState final
{
public:
	EALSGroundedEntryState                        GroundedEntryState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_SetGroundedEntryState) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_SetGroundedEntryState");
static_assert(sizeof(ALSCharacterAnimInstance_SetGroundedEntryState) == 0x000001, "Wrong size on ALSCharacterAnimInstance_SetGroundedEntryState");
static_assert(offsetof(ALSCharacterAnimInstance_SetGroundedEntryState, GroundedEntryState) == 0x000000, "Member 'ALSCharacterAnimInstance_SetGroundedEntryState::GroundedEntryState' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.SetOverlayOverrideState
// 0x0004 (0x0004 - 0x0000)
struct ALSCharacterAnimInstance_SetOverlayOverrideState final
{
public:
	int32                                         OverlayOverrideState;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_SetOverlayOverrideState) == 0x000004, "Wrong alignment on ALSCharacterAnimInstance_SetOverlayOverrideState");
static_assert(sizeof(ALSCharacterAnimInstance_SetOverlayOverrideState) == 0x000004, "Wrong size on ALSCharacterAnimInstance_SetOverlayOverrideState");
static_assert(offsetof(ALSCharacterAnimInstance_SetOverlayOverrideState, OverlayOverrideState) == 0x000000, "Member 'ALSCharacterAnimInstance_SetOverlayOverrideState::OverlayOverrideState' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.SetTrackedHipsDirection
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_SetTrackedHipsDirection final
{
public:
	EALSHipsDirection                             HipsDirection;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_SetTrackedHipsDirection) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_SetTrackedHipsDirection");
static_assert(sizeof(ALSCharacterAnimInstance_SetTrackedHipsDirection) == 0x000001, "Wrong size on ALSCharacterAnimInstance_SetTrackedHipsDirection");
static_assert(offsetof(ALSCharacterAnimInstance_SetTrackedHipsDirection, HipsDirection) == 0x000000, "Member 'ALSCharacterAnimInstance_SetTrackedHipsDirection::HipsDirection' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanDynamicTransition
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanDynamicTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanDynamicTransition) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanDynamicTransition");
static_assert(sizeof(ALSCharacterAnimInstance_CanDynamicTransition) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanDynamicTransition");
static_assert(offsetof(ALSCharacterAnimInstance_CanDynamicTransition, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanDynamicTransition::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanRotateInPlace
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanRotateInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanRotateInPlace) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanRotateInPlace");
static_assert(sizeof(ALSCharacterAnimInstance_CanRotateInPlace) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanRotateInPlace");
static_assert(offsetof(ALSCharacterAnimInstance_CanRotateInPlace, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanRotateInPlace::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.CanTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_CanTurnInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_CanTurnInPlace) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_CanTurnInPlace");
static_assert(sizeof(ALSCharacterAnimInstance_CanTurnInPlace) == 0x000001, "Wrong size on ALSCharacterAnimInstance_CanTurnInPlace");
static_assert(offsetof(ALSCharacterAnimInstance_CanTurnInPlace, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_CanTurnInPlace::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterAnimInstance.ShouldMoveCheck
// 0x0001 (0x0001 - 0x0000)
struct ALSCharacterAnimInstance_ShouldMoveCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterAnimInstance_ShouldMoveCheck) == 0x000001, "Wrong alignment on ALSCharacterAnimInstance_ShouldMoveCheck");
static_assert(sizeof(ALSCharacterAnimInstance_ShouldMoveCheck) == 0x000001, "Wrong size on ALSCharacterAnimInstance_ShouldMoveCheck");
static_assert(offsetof(ALSCharacterAnimInstance_ShouldMoveCheck, ReturnValue) == 0x000000, "Member 'ALSCharacterAnimInstance_ShouldMoveCheck::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterMovementComponent.Server_SetMaxWalkSpeedAndMaxAcceleration
// 0x0008 (0x0008 - 0x0000)
struct ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration final
{
public:
	float                                         NewMaxWalkSpeed;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxAcceleration;                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration) == 0x000004, "Wrong alignment on ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration");
static_assert(sizeof(ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration) == 0x000008, "Wrong size on ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration");
static_assert(offsetof(ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration, NewMaxWalkSpeed) == 0x000000, "Member 'ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration::NewMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration, NewMaxAcceleration) == 0x000004, "Member 'ALSCharacterMovementComponent_Server_SetMaxWalkSpeedAndMaxAcceleration::NewMaxAcceleration' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterMovementComponent.SetBrakingAndGroundFriction
// 0x0008 (0x0008 - 0x0000)
struct ALSCharacterMovementComponent_SetBrakingAndGroundFriction final
{
public:
	float                                         NewBraking;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewGroundFriction;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_SetBrakingAndGroundFriction) == 0x000004, "Wrong alignment on ALSCharacterMovementComponent_SetBrakingAndGroundFriction");
static_assert(sizeof(ALSCharacterMovementComponent_SetBrakingAndGroundFriction) == 0x000008, "Wrong size on ALSCharacterMovementComponent_SetBrakingAndGroundFriction");
static_assert(offsetof(ALSCharacterMovementComponent_SetBrakingAndGroundFriction, NewBraking) == 0x000000, "Member 'ALSCharacterMovementComponent_SetBrakingAndGroundFriction::NewBraking' has a wrong offset!");
static_assert(offsetof(ALSCharacterMovementComponent_SetBrakingAndGroundFriction, NewGroundFriction) == 0x000004, "Member 'ALSCharacterMovementComponent_SetBrakingAndGroundFriction::NewGroundFriction' has a wrong offset!");

// Function ALSV4_CPP.ALSCharacterMovementComponent.SetMaxWalkSpeedAndMaxAcceleration
// 0x0008 (0x0008 - 0x0000)
struct ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration final
{
public:
	float                                         NewMaxWalkSpeed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxAcceleration;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration) == 0x000004, "Wrong alignment on ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration");
static_assert(sizeof(ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration) == 0x000008, "Wrong size on ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration");
static_assert(offsetof(ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration, NewMaxWalkSpeed) == 0x000000, "Member 'ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration::NewMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration, NewMaxAcceleration) == 0x000004, "Member 'ALSCharacterMovementComponent_SetMaxWalkSpeedAndMaxAcceleration::NewMaxAcceleration' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.AngleInRange
// 0x0014 (0x0014 - 0x0000)
struct ALSMathLibrary_AngleInRange final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buffer;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseBuffer;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_AngleInRange) == 0x000004, "Wrong alignment on ALSMathLibrary_AngleInRange");
static_assert(sizeof(ALSMathLibrary_AngleInRange) == 0x000014, "Wrong size on ALSMathLibrary_AngleInRange");
static_assert(offsetof(ALSMathLibrary_AngleInRange, Angle) == 0x000000, "Member 'ALSMathLibrary_AngleInRange::Angle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, MinAngle) == 0x000004, "Member 'ALSMathLibrary_AngleInRange::MinAngle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, MaxAngle) == 0x000008, "Member 'ALSMathLibrary_AngleInRange::MaxAngle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, Buffer) == 0x00000C, "Member 'ALSMathLibrary_AngleInRange::Buffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, IncreaseBuffer) == 0x000010, "Member 'ALSMathLibrary_AngleInRange::IncreaseBuffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_AngleInRange, ReturnValue) == 0x000011, "Member 'ALSMathLibrary_AngleInRange::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.CalculateQuadrant
// 0x0020 (0x0020 - 0x0000)
struct ALSMathLibrary_CalculateQuadrant final
{
public:
	EALSMovementDirection                         Current;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FRThreshold;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FLThreshold;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BRThreshold;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BLThreshold;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buffer;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementDirection                         ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_CalculateQuadrant) == 0x000004, "Wrong alignment on ALSMathLibrary_CalculateQuadrant");
static_assert(sizeof(ALSMathLibrary_CalculateQuadrant) == 0x000020, "Wrong size on ALSMathLibrary_CalculateQuadrant");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Current) == 0x000000, "Member 'ALSMathLibrary_CalculateQuadrant::Current' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, FRThreshold) == 0x000004, "Member 'ALSMathLibrary_CalculateQuadrant::FRThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, FLThreshold) == 0x000008, "Member 'ALSMathLibrary_CalculateQuadrant::FLThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, BRThreshold) == 0x00000C, "Member 'ALSMathLibrary_CalculateQuadrant::BRThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, BLThreshold) == 0x000010, "Member 'ALSMathLibrary_CalculateQuadrant::BLThreshold' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Buffer) == 0x000014, "Member 'ALSMathLibrary_CalculateQuadrant::Buffer' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, Angle) == 0x000018, "Member 'ALSMathLibrary_CalculateQuadrant::Angle' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CalculateQuadrant, ReturnValue) == 0x00001C, "Member 'ALSMathLibrary_CalculateQuadrant::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.CapsuleHasRoomCheck
// 0x0020 (0x0020 - 0x0000)
struct ALSMathLibrary_CapsuleHasRoomCheck final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusOffset;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_CapsuleHasRoomCheck) == 0x000008, "Wrong alignment on ALSMathLibrary_CapsuleHasRoomCheck");
static_assert(sizeof(ALSMathLibrary_CapsuleHasRoomCheck) == 0x000020, "Wrong size on ALSMathLibrary_CapsuleHasRoomCheck");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, Capsule) == 0x000000, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, TargetLocation) == 0x000008, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, HeightOffset) == 0x000014, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::HeightOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, RadiusOffset) == 0x000018, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::RadiusOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_CapsuleHasRoomCheck, ReturnValue) == 0x00001C, "Member 'ALSMathLibrary_CapsuleHasRoomCheck::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleBaseLocation
// 0x0020 (0x0020 - 0x0000)
struct ALSMathLibrary_GetCapsuleBaseLocation final
{
public:
	float                                         ZOffset;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      Capsule;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_GetCapsuleBaseLocation) == 0x000008, "Wrong alignment on ALSMathLibrary_GetCapsuleBaseLocation");
static_assert(sizeof(ALSMathLibrary_GetCapsuleBaseLocation) == 0x000020, "Wrong size on ALSMathLibrary_GetCapsuleBaseLocation");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, ZOffset) == 0x000000, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::ZOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, Capsule) == 0x000008, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleBaseLocation, ReturnValue) == 0x000010, "Member 'ALSMathLibrary_GetCapsuleBaseLocation::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.GetCapsuleLocationFromBase
// 0x0028 (0x0028 - 0x0000)
struct ALSMathLibrary_GetCapsuleLocationFromBase final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffset;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      Capsule;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSMathLibrary_GetCapsuleLocationFromBase) == 0x000008, "Wrong alignment on ALSMathLibrary_GetCapsuleLocationFromBase");
static_assert(sizeof(ALSMathLibrary_GetCapsuleLocationFromBase) == 0x000028, "Wrong size on ALSMathLibrary_GetCapsuleLocationFromBase");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, BaseLocation) == 0x000000, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::BaseLocation' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, ZOffset) == 0x00000C, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::ZOffset' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, Capsule) == 0x000010, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::Capsule' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_GetCapsuleLocationFromBase, ReturnValue) == 0x000018, "Member 'ALSMathLibrary_GetCapsuleLocationFromBase::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.MantleComponentLocalToWorld
// 0x0070 (0x0070 - 0x0000)
struct ALSMathLibrary_MantleComponentLocalToWorld final
{
public:
	struct FALSComponentAndTransform              CompAndTransform;                                  // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_MantleComponentLocalToWorld) == 0x000010, "Wrong alignment on ALSMathLibrary_MantleComponentLocalToWorld");
static_assert(sizeof(ALSMathLibrary_MantleComponentLocalToWorld) == 0x000070, "Wrong size on ALSMathLibrary_MantleComponentLocalToWorld");
static_assert(offsetof(ALSMathLibrary_MantleComponentLocalToWorld, CompAndTransform) == 0x000000, "Member 'ALSMathLibrary_MantleComponentLocalToWorld::CompAndTransform' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_MantleComponentLocalToWorld, ReturnValue) == 0x000040, "Member 'ALSMathLibrary_MantleComponentLocalToWorld::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.TransfromAdd
// 0x0090 (0x0090 - 0x0000)
struct ALSMathLibrary_TransfromAdd final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0060(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_TransfromAdd) == 0x000010, "Wrong alignment on ALSMathLibrary_TransfromAdd");
static_assert(sizeof(ALSMathLibrary_TransfromAdd) == 0x000090, "Wrong size on ALSMathLibrary_TransfromAdd");
static_assert(offsetof(ALSMathLibrary_TransfromAdd, T1) == 0x000000, "Member 'ALSMathLibrary_TransfromAdd::T1' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransfromAdd, T2) == 0x000030, "Member 'ALSMathLibrary_TransfromAdd::T2' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransfromAdd, ReturnValue) == 0x000060, "Member 'ALSMathLibrary_TransfromAdd::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSMathLibrary.TransfromSub
// 0x0090 (0x0090 - 0x0000)
struct ALSMathLibrary_TransfromSub final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0060(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSMathLibrary_TransfromSub) == 0x000010, "Wrong alignment on ALSMathLibrary_TransfromSub");
static_assert(sizeof(ALSMathLibrary_TransfromSub) == 0x000090, "Wrong size on ALSMathLibrary_TransfromSub");
static_assert(offsetof(ALSMathLibrary_TransfromSub, T1) == 0x000000, "Member 'ALSMathLibrary_TransfromSub::T1' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransfromSub, T2) == 0x000030, "Member 'ALSMathLibrary_TransfromSub::T2' has a wrong offset!");
static_assert(offsetof(ALSMathLibrary_TransfromSub, ReturnValue) == 0x000060, "Member 'ALSMathLibrary_TransfromSub::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.CalculateAxisIndependentLag
// 0x0040 (0x0040 - 0x0000)
struct ALSPlayerCameraManager_CalculateAxisIndependentLag final
{
public:
	struct FVector                                CurrentLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LagSpeeds;                                         // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_CalculateAxisIndependentLag) == 0x000004, "Wrong alignment on ALSPlayerCameraManager_CalculateAxisIndependentLag");
static_assert(sizeof(ALSPlayerCameraManager_CalculateAxisIndependentLag) == 0x000040, "Wrong size on ALSPlayerCameraManager_CalculateAxisIndependentLag");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, CurrentLocation) == 0x000000, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::CurrentLocation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, TargetLocation) == 0x00000C, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::TargetLocation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, CameraRotation) == 0x000018, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::CameraRotation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, LagSpeeds) == 0x000024, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::LagSpeeds' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, DeltaTime) == 0x000030, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::DeltaTime' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CalculateAxisIndependentLag, ReturnValue) == 0x000034, "Member 'ALSPlayerCameraManager_CalculateAxisIndependentLag::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.CustomCameraBehavior
// 0x0024 (0x0024 - 0x0000)
struct ALSPlayerCameraManager_CustomCameraBehavior final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ALSPlayerCameraManager_CustomCameraBehavior) == 0x000004, "Wrong alignment on ALSPlayerCameraManager_CustomCameraBehavior");
static_assert(sizeof(ALSPlayerCameraManager_CustomCameraBehavior) == 0x000024, "Wrong size on ALSPlayerCameraManager_CustomCameraBehavior");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, DeltaTime) == 0x000000, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::DeltaTime' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, Location) == 0x000004, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::Location' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, Rotation) == 0x000010, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::Rotation' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, FOV) == 0x00001C, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::FOV' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_CustomCameraBehavior, ReturnValue) == 0x000020, "Member 'ALSPlayerCameraManager_CustomCameraBehavior::ReturnValue' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.DrawDebugTargets
// 0x000C (0x000C - 0x0000)
struct ALSPlayerCameraManager_DrawDebugTargets final
{
public:
	struct FVector                                PivotTargetLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_DrawDebugTargets) == 0x000004, "Wrong alignment on ALSPlayerCameraManager_DrawDebugTargets");
static_assert(sizeof(ALSPlayerCameraManager_DrawDebugTargets) == 0x00000C, "Wrong size on ALSPlayerCameraManager_DrawDebugTargets");
static_assert(offsetof(ALSPlayerCameraManager_DrawDebugTargets, PivotTargetLocation) == 0x000000, "Member 'ALSPlayerCameraManager_DrawDebugTargets::PivotTargetLocation' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.OnPossess
// 0x0008 (0x0008 - 0x0000)
struct ALSPlayerCameraManager_OnPossess final
{
public:
	class AALSBaseCharacter*                      NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_OnPossess) == 0x000008, "Wrong alignment on ALSPlayerCameraManager_OnPossess");
static_assert(sizeof(ALSPlayerCameraManager_OnPossess) == 0x000008, "Wrong size on ALSPlayerCameraManager_OnPossess");
static_assert(offsetof(ALSPlayerCameraManager_OnPossess, NewCharacter) == 0x000000, "Member 'ALSPlayerCameraManager_OnPossess::NewCharacter' has a wrong offset!");

// Function ALSV4_CPP.ALSPlayerCameraManager.GetCameraBehaviorParam
// 0x000C (0x000C - 0x0000)
struct ALSPlayerCameraManager_GetCameraBehaviorParam final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ALSPlayerCameraManager_GetCameraBehaviorParam) == 0x000004, "Wrong alignment on ALSPlayerCameraManager_GetCameraBehaviorParam");
static_assert(sizeof(ALSPlayerCameraManager_GetCameraBehaviorParam) == 0x00000C, "Wrong size on ALSPlayerCameraManager_GetCameraBehaviorParam");
static_assert(offsetof(ALSPlayerCameraManager_GetCameraBehaviorParam, CurveName) == 0x000000, "Member 'ALSPlayerCameraManager_GetCameraBehaviorParam::CurveName' has a wrong offset!");
static_assert(offsetof(ALSPlayerCameraManager_GetCameraBehaviorParam, ReturnValue) == 0x000008, "Member 'ALSPlayerCameraManager_GetCameraBehaviorParam::ReturnValue' has a wrong offset!");

}

