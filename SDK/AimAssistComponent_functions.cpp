#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistComponent

#include "Basic.hpp"

#include "AimAssistComponent_classes.hpp"
#include "AimAssistComponent_parameters.hpp"


namespace SDK
{

// Function AimAssistComponent.AimAssistComponent_C.ExecuteUbergraph_AimAssistComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::ExecuteUbergraph_AimAssistComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "ExecuteUbergraph_AimAssistComponent");

	Params::AimAssistComponent_C_ExecuteUbergraph_AimAssistComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AimAssistComponent.AimAssistComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "ReceiveTick");

	Params::AimAssistComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AimAssistComponent.AimAssistComponent_C.SearchForTargetsInWorld
// (BlueprintCallable, BlueprintEvent)

void UAimAssistComponent_C::SearchForTargetsInWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "SearchForTargetsInWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAimAssistComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.LegacyFrictionAssist
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::LegacyFrictionAssist(float Input, float* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "LegacyFrictionAssist");

	Params::AimAssistComponent_C_LegacyFrictionAssist Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function AimAssistComponent.AimAssistComponent_C.GetClosestActorToCrosshairFromArray
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::GetClosestActorToCrosshairFromArray(TArray<class AActor*>& Array, class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "GetClosestActorToCrosshairFromArray");

	Params::AimAssistComponent_C_GetClosestActorToCrosshairFromArray Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function AimAssistComponent.AimAssistComponent_C.FindTarget
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAimAssistComponent_C::FindTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "FindTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.CalculateTurnSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   InputX                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputY                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutputX                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutputY                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::CalculateTurnSpeed(float InputX, float InputY, float* OutputX, float* OutputY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "CalculateTurnSpeed");

	Params::AimAssistComponent_C_CalculateTurnSpeed Parms{};

	Parms.InputX = InputX;
	Parms.InputY = InputY;

	UObject::ProcessEvent(Func, &Parms);

	if (OutputX != nullptr)
		*OutputX = Parms.OutputX;

	if (OutputY != nullptr)
		*OutputY = Parms.OutputY;
}


// Function AimAssistComponent.AimAssistComponent_C.RadialDeadZone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   X_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeadZone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Output_X                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Output_Y                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::RadialDeadZone(float X_Input, float Y_Input, float DeadZone, float* Output_X, float* Output_Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "RadialDeadZone");

	Params::AimAssistComponent_C_RadialDeadZone Parms{};

	Parms.X_Input = X_Input;
	Parms.Y_Input = Y_Input;
	Parms.DeadZone = DeadZone;

	UObject::ProcessEvent(Func, &Parms);

	if (Output_X != nullptr)
		*Output_X = Parms.Output_X;

	if (Output_Y != nullptr)
		*Output_Y = Parms.Output_Y;
}


// Function AimAssistComponent.AimAssistComponent_C.AxialDeadZone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   X_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X_Deadzone                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Deadzone                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Output_X                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Output_Y                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::AxialDeadZone(float X_Input, float Y_Input, float X_Deadzone, float Y_Deadzone, float* Output_X, float* Output_Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "AxialDeadZone");

	Params::AimAssistComponent_C_AxialDeadZone Parms{};

	Parms.X_Input = X_Input;
	Parms.Y_Input = Y_Input;
	Parms.X_Deadzone = X_Deadzone;
	Parms.Y_Deadzone = Y_Deadzone;

	UObject::ProcessEvent(Func, &Parms);

	if (Output_X != nullptr)
		*Output_X = Parms.Output_X;

	if (Output_Y != nullptr)
		*Output_Y = Parms.Output_Y;
}


// Function AimAssistComponent.AimAssistComponent_C.Centering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   X_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Input                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X_Output                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Output                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::Centering(float X_Input, float Y_Input, float* X_Output, float* Y_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "Centering");

	Params::AimAssistComponent_C_Centering Parms{};

	Parms.X_Input = X_Input;
	Parms.Y_Input = Y_Input;

	UObject::ProcessEvent(Func, &Parms);

	if (X_Output != nullptr)
		*X_Output = Parms.X_Output;

	if (Y_Output != nullptr)
		*Y_Output = Parms.Y_Output;
}


// Function AimAssistComponent.AimAssistComponent_C.UpdateCurrentTarget
// (Private, BlueprintCallable, BlueprintEvent)

void UAimAssistComponent_C::UpdateCurrentTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "UpdateCurrentTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.CalculateDeltaRotation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Current_Location                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target_Location                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Current_Rotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Delta_X                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delta_Y                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::CalculateDeltaRotation(const struct FVector& Current_Location, const struct FVector& Target_Location, const struct FRotator& Current_Rotation, float* Delta_X, float* Delta_Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "CalculateDeltaRotation");

	Params::AimAssistComponent_C_CalculateDeltaRotation Parms{};

	Parms.Current_Location = std::move(Current_Location);
	Parms.Target_Location = std::move(Target_Location);
	Parms.Current_Rotation = std::move(Current_Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Delta_X != nullptr)
		*Delta_X = Parms.Delta_X;

	if (Delta_Y != nullptr)
		*Delta_Y = Parms.Delta_Y;
}


// Function AimAssistComponent.AimAssistComponent_C.BendProjectile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CorrectedEnd                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::BendProjectile(const struct FVector& Start, const struct FVector& End, struct FVector* CorrectedEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "BendProjectile");

	Params::AimAssistComponent_C_BendProjectile Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	if (CorrectedEnd != nullptr)
		*CorrectedEnd = std::move(Parms.CorrectedEnd);
}


// Function AimAssistComponent.AimAssistComponent_C.ShotFiredAssist
// (Public, BlueprintCallable, BlueprintEvent)

void UAimAssistComponent_C::ShotFiredAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "ShotFiredAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.HandleDifferentTargetsSlowDownCalculation
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ClosestActorToCrosshair                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::HandleDifferentTargetsSlowDownCalculation(class UObject* ClosestActorToCrosshair)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "HandleDifferentTargetsSlowDownCalculation");

	Params::AimAssistComponent_C_HandleDifferentTargetsSlowDownCalculation Parms{};

	Parms.ClosestActorToCrosshair = ClosestActorToCrosshair;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AimAssistComponent.AimAssistComponent_C.HandleShotFiredStrengthBonus
// (Private, BlueprintCallable, BlueprintEvent)

void UAimAssistComponent_C::HandleShotFiredStrengthBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "HandleShotFiredStrengthBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AimAssistComponent.AimAssistComponent_C.Debug
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Raw_Direction                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Deadzone_Direction                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Assisted_Direction                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAimAssistComponent_C::Debug(const struct FVector2D& Raw_Direction, const struct FVector2D& Deadzone_Direction, const struct FVector2D& Assisted_Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "Debug");

	Params::AimAssistComponent_C_Debug Parms{};

	Parms.Raw_Direction = std::move(Raw_Direction);
	Parms.Deadzone_Direction = std::move(Deadzone_Direction);
	Parms.Assisted_Direction = std::move(Assisted_Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AimAssistComponent.AimAssistComponent_C.HitTarget?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           HitActorFromTrace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTarget                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAimAssistComponent_C::HitTarget_(class AActor* HitActorFromTrace, bool* IsTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "HitTarget?");

	Params::AimAssistComponent_C_HitTarget_ Parms{};

	Parms.HitActorFromTrace = HitActorFromTrace;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTarget != nullptr)
		*IsTarget = Parms.IsTarget;
}


// Function AimAssistComponent.AimAssistComponent_C.GetAccelerationAngle
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UAimAssistComponent_C::GetAccelerationAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AimAssistComponent_C", "GetAccelerationAngle");

	Params::AimAssistComponent_C_GetAccelerationAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

