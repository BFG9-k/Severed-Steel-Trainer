#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioAnalysisTools

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "AudioAnalysisTools_structs.hpp"


namespace SDK
{

// Class AudioAnalysisTools.AudioAnalysisToolsLibrary
// 0x00D8 (0x0100 - 0x0028)
class UAudioAnalysisToolsLibrary final : public UObject
{
public:
	uint8                                         Pad_28[0xC8];                                      // 0x0028(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UBeatDetection*                         BeatDetection;                                     // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOnsetDetection*                        OnsetDetection;                                    // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UAudioAnalysisToolsLibrary* CreateAudioAnalysisTools(int64 FrameSize, EAnalysisWindowType WindowType);

	bool GetAudioByCurrentTime(class UImportedSoundWave* ImportedSoundWave, TArray<float>* AudioFrames);
	bool GetAudioByFrameRange(class UImportedSoundWave* ImportedSoundWave, int64 StartFrame, int64 EndFrame, TArray<float>* AudioFrames);
	bool GetAudioByFrameSize(class UImportedSoundWave* ImportedSoundWave, int64 FrameSize, TArray<float>* AudioFrames);
	bool GetAudioByTimeLength(class UImportedSoundWave* ImportedSoundWave, float TimeLength, TArray<float>* AudioFrames);
	bool GetAudioByTimeRange(class UImportedSoundWave* ImportedSoundWave, float StartTime, float EndTime, TArray<float>* AudioFrames);
	float GetComplexSpectralDifference();
	float GetEnergyDifference();
	float GetHighFrequencyContent();
	float GetPeakEnergy();
	float GetRootMeanSquare();
	float GetSpectralCentroid();
	float GetSpectralCrest();
	float GetSpectralDifference();
	float GetSpectralDifferenceHWR();
	float GetSpectralFlatness();
	float GetSpectralKurtosis();
	float GetSpectralRolloff();
	float GetZeroCrossingRate();
	void ProcessAudioFrames(const TArray<float>& AudioFrames, bool bProcessToBeatDetection);
	void UpdateFrameSize(int64 FrameSize);

	float GetBand(int64 Subband) const;
	TArray<float> GetFFTImaginary() const;
	TArray<float> GetFFTReal() const;
	TArray<float> GetMagnitudeSpectrum() const;
	bool IsBeat(int64 Subband) const;
	bool IsBeatRange(int64 Low, int64 High, int64 Threshold) const;
	bool IsHiHat() const;
	bool IsKick() const;
	bool IsSnare() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioAnalysisToolsLibrary">();
	}
	static class UAudioAnalysisToolsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioAnalysisToolsLibrary>();
	}
};
static_assert(alignof(UAudioAnalysisToolsLibrary) == 0x000008, "Wrong alignment on UAudioAnalysisToolsLibrary");
static_assert(sizeof(UAudioAnalysisToolsLibrary) == 0x000100, "Wrong size on UAudioAnalysisToolsLibrary");
static_assert(offsetof(UAudioAnalysisToolsLibrary, BeatDetection) == 0x0000F0, "Member 'UAudioAnalysisToolsLibrary::BeatDetection' has a wrong offset!");
static_assert(offsetof(UAudioAnalysisToolsLibrary, OnsetDetection) == 0x0000F8, "Member 'UAudioAnalysisToolsLibrary::OnsetDetection' has a wrong offset!");

// Class AudioAnalysisTools.BeatDetection
// 0x0090 (0x00B8 - 0x0028)
class UBeatDetection final : public UObject
{
public:
	uint8                                         Pad_28[0x90];                                      // 0x0028(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UBeatDetection* CreateBeatDetection(int64 FFTSubbandSize, int64 EnergyHistorySize);

	void ProcessMagnitude(const TArray<float>& MagnitudeSpectrum);
	void UpdateEnergyHistorySize(int64 EnergyHistorySize);
	void UpdateFFTSubbandSize(int64 FFTSubbandSize);

	float GetBand(int64 Subband) const;
	bool IsBeat(int64 Subband) const;
	bool IsBeatRange(int64 Low, int64 High, int64 Threshold) const;
	bool IsHiHat() const;
	bool IsKick() const;
	bool IsSnare() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeatDetection">();
	}
	static class UBeatDetection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeatDetection>();
	}
};
static_assert(alignof(UBeatDetection) == 0x000008, "Wrong alignment on UBeatDetection");
static_assert(sizeof(UBeatDetection) == 0x0000B8, "Wrong size on UBeatDetection");

// Class AudioAnalysisTools.CoreFrequencyDomainFeatures
// 0x0000 (0x0028 - 0x0028)
class UCoreFrequencyDomainFeatures final : public UObject
{
public:
	static float GetSpectralCentroid(const TArray<float>& MagnitudeSpectrum);
	static float GetSpectralCrest(const TArray<float>& MagnitudeSpectrum);
	static float GetSpectralFlatness(const TArray<float>& MagnitudeSpectrum);
	static float GetSpectralKurtosis(const TArray<float>& MagnitudeSpectrum);
	static float GetSpectralRolloff(const TArray<float>& MagnitudeSpectrum, const float Percentile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFrequencyDomainFeatures">();
	}
	static class UCoreFrequencyDomainFeatures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFrequencyDomainFeatures>();
	}
};
static_assert(alignof(UCoreFrequencyDomainFeatures) == 0x000008, "Wrong alignment on UCoreFrequencyDomainFeatures");
static_assert(sizeof(UCoreFrequencyDomainFeatures) == 0x000028, "Wrong size on UCoreFrequencyDomainFeatures");

// Class AudioAnalysisTools.CoreTimeDomainFeatures
// 0x0000 (0x0028 - 0x0028)
class UCoreTimeDomainFeatures final : public UObject
{
public:
	static float GetPeakEnergy(const TArray<float>& AudioFrames);
	static float GetRootMeanSquare(const TArray<float>& AudioFrames);
	static float GetZeroCrossingRate(const TArray<float>& AudioFrames);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTimeDomainFeatures">();
	}
	static class UCoreTimeDomainFeatures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTimeDomainFeatures>();
	}
};
static_assert(alignof(UCoreTimeDomainFeatures) == 0x000008, "Wrong alignment on UCoreTimeDomainFeatures");
static_assert(sizeof(UCoreTimeDomainFeatures) == 0x000028, "Wrong size on UCoreTimeDomainFeatures");

// Class AudioAnalysisTools.FFTAnalyzer
// 0x0000 (0x0028 - 0x0028)
class UFFTAnalyzer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FFTAnalyzer">();
	}
	static class UFFTAnalyzer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFFTAnalyzer>();
	}
};
static_assert(alignof(UFFTAnalyzer) == 0x000008, "Wrong alignment on UFFTAnalyzer");
static_assert(sizeof(UFFTAnalyzer) == 0x000028, "Wrong size on UFFTAnalyzer");

// Class AudioAnalysisTools.OnsetDetection
// 0x0088 (0x00B0 - 0x0028)
class UOnsetDetection final : public UObject
{
public:
	uint8                                         Pad_28[0x88];                                      // 0x0028(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOnsetDetection* CreateOnsetDetection(int64 FrameSize);
	static float GetHighFrequencyContent(const TArray<float>& MagnitudeSpectrum);

	float GetComplexSpectralDifference(const TArray<float>& FFTReal, const TArray<float>& FFTImaginary);
	float GetEnergyDifference(const TArray<float>& AudioFrames);
	float GetEnergyEnvelope(const TArray<float>& AudioFrames);
	float GetSpectralDifference(const TArray<float>& MagnitudeSpectrum);
	float GetSpectralDifferenceHWR(const TArray<float>& MagnitudeSpectrum);
	void UpdateFrameSize(int32 FrameSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnsetDetection">();
	}
	static class UOnsetDetection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnsetDetection>();
	}
};
static_assert(alignof(UOnsetDetection) == 0x000008, "Wrong alignment on UOnsetDetection");
static_assert(sizeof(UOnsetDetection) == 0x0000B0, "Wrong size on UOnsetDetection");

// Class AudioAnalysisTools.WindowsLibrary
// 0x0000 (0x0028 - 0x0028)
class UWindowsLibrary final : public UObject
{
public:
	static TArray<float> CreateBlackmanWindow(int32 FrameSize);
	static TArray<float> CreateHammingWindow(int32 FrameSize);
	static TArray<float> CreateHanningWindow(int32 FrameSize);
	static TArray<float> CreateRectangularWindow(int32 FrameSize);
	static TArray<float> CreateTukeyWindow(int32 FrameSize, float CosineFraction);
	static TArray<float> CreateWindowByType(int32 FrameSize, EAnalysisWindowType WindowType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindowsLibrary">();
	}
	static class UWindowsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowsLibrary>();
	}
};
static_assert(alignof(UWindowsLibrary) == 0x000008, "Wrong alignment on UWindowsLibrary");
static_assert(sizeof(UWindowsLibrary) == 0x000028, "Wrong size on UWindowsLibrary");

}

