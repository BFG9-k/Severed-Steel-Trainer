#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LuckDisplay

#include "Basic.hpp"

#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_LuckDisplay.BP_LuckDisplay_C
// 0x0070 (0x02D0 - 0x0260)
class UBP_LuckDisplay_C final : public ULuckDisplay
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       RestoreLuck3;                                      // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RestoreLuck2;                                      // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RestoreLuck1;                                      // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DamageLuck3;                                       // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DamageLuck2;                                       // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DamageLuck1;                                       // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Circle1;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Circle2;                                           // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Circle3;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         ShiftPerLuck;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XOffset;                                           // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartOffset1;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartOffset2;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartOffset3;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LuckDisplay(int32 EntryPoint);
	void Reset(int32 MaxAmount);
	void Construct();
	void SetLuck(int32 Amount, bool bRestore);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LuckDisplay_C">();
	}
	static class UBP_LuckDisplay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LuckDisplay_C>();
	}
};
static_assert(alignof(UBP_LuckDisplay_C) == 0x000008, "Wrong alignment on UBP_LuckDisplay_C");
static_assert(sizeof(UBP_LuckDisplay_C) == 0x0002D0, "Wrong size on UBP_LuckDisplay_C");
static_assert(offsetof(UBP_LuckDisplay_C, UberGraphFrame) == 0x000260, "Member 'UBP_LuckDisplay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, RestoreLuck3) == 0x000268, "Member 'UBP_LuckDisplay_C::RestoreLuck3' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, RestoreLuck2) == 0x000270, "Member 'UBP_LuckDisplay_C::RestoreLuck2' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, RestoreLuck1) == 0x000278, "Member 'UBP_LuckDisplay_C::RestoreLuck1' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, DamageLuck3) == 0x000280, "Member 'UBP_LuckDisplay_C::DamageLuck3' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, DamageLuck2) == 0x000288, "Member 'UBP_LuckDisplay_C::DamageLuck2' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, DamageLuck1) == 0x000290, "Member 'UBP_LuckDisplay_C::DamageLuck1' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, Circle1) == 0x000298, "Member 'UBP_LuckDisplay_C::Circle1' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, Circle2) == 0x0002A0, "Member 'UBP_LuckDisplay_C::Circle2' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, Circle3) == 0x0002A8, "Member 'UBP_LuckDisplay_C::Circle3' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, ShiftPerLuck) == 0x0002B0, "Member 'UBP_LuckDisplay_C::ShiftPerLuck' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, XOffset) == 0x0002B4, "Member 'UBP_LuckDisplay_C::XOffset' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, StartOffset1) == 0x0002B8, "Member 'UBP_LuckDisplay_C::StartOffset1' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, StartOffset2) == 0x0002C0, "Member 'UBP_LuckDisplay_C::StartOffset2' has a wrong offset!");
static_assert(offsetof(UBP_LuckDisplay_C, StartOffset3) == 0x0002C8, "Member 'UBP_LuckDisplay_C::StartOffset3' has a wrong offset!");

}

