#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Voxel

#include "Basic.hpp"

#include "Voxel_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Voxel.VoxelBlueprintLibrary.Add_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct VoxelBlueprintLibrary_Add_IntVectorIntVector final
{
public:
	struct FIntVector                             Left;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Right;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Add_IntVectorIntVector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Add_IntVectorIntVector");
static_assert(sizeof(VoxelBlueprintLibrary_Add_IntVectorIntVector) == 0x000024, "Wrong size on VoxelBlueprintLibrary_Add_IntVectorIntVector");
static_assert(offsetof(VoxelBlueprintLibrary_Add_IntVectorIntVector, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Add_IntVectorIntVector::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Add_IntVectorIntVector, Right) == 0x00000C, "Member 'VoxelBlueprintLibrary_Add_IntVectorIntVector::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Add_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_Add_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.AddNeighborsToSet
// 0x00A0 (0x00A0 - 0x0000)
struct VoxelBlueprintLibrary_AddNeighborsToSet final
{
public:
	TSet<struct FIntVector>                       InSet;                                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<struct FIntVector>                       OutSet;                                            // 0x0050(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_AddNeighborsToSet) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_AddNeighborsToSet");
static_assert(sizeof(VoxelBlueprintLibrary_AddNeighborsToSet) == 0x0000A0, "Wrong size on VoxelBlueprintLibrary_AddNeighborsToSet");
static_assert(offsetof(VoxelBlueprintLibrary_AddNeighborsToSet, InSet) == 0x000000, "Member 'VoxelBlueprintLibrary_AddNeighborsToSet::InSet' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_AddNeighborsToSet, OutSet) == 0x000050, "Member 'VoxelBlueprintLibrary_AddNeighborsToSet::OutSet' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ApplyLODSettings
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_ApplyLODSettings final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_ApplyLODSettings) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ApplyLODSettings");
static_assert(sizeof(VoxelBlueprintLibrary_ApplyLODSettings) == 0x000008, "Wrong size on VoxelBlueprintLibrary_ApplyLODSettings");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyLODSettings, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ApplyLODSettings::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ApplyNewMaterials
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_ApplyNewMaterials final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_ApplyNewMaterials) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ApplyNewMaterials");
static_assert(sizeof(VoxelBlueprintLibrary_ApplyNewMaterials) == 0x000008, "Wrong size on VoxelBlueprintLibrary_ApplyNewMaterials");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyNewMaterials, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ApplyNewMaterials::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ApplyPaintMaterial
// 0x00A8 (0x00A8 - 0x0000)
struct VoxelBlueprintLibrary_ApplyPaintMaterial final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0008(0x0098)(Parm, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         ReturnValue;                                       // 0x00A4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ApplyPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ApplyPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_ApplyPaintMaterial) == 0x0000A8, "Wrong size on VoxelBlueprintLibrary_ApplyPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyPaintMaterial, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_ApplyPaintMaterial::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyPaintMaterial, PaintMaterial) == 0x000008, "Member 'VoxelBlueprintLibrary_ApplyPaintMaterial::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyPaintMaterial, Strength) == 0x0000A0, "Member 'VoxelBlueprintLibrary_ApplyPaintMaterial::Strength' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ApplyPaintMaterial, ReturnValue) == 0x0000A4, "Member 'VoxelBlueprintLibrary_ApplyPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.AreCollisionsEnabled
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_AreCollisionsEnabled final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_AreCollisionsEnabled) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_AreCollisionsEnabled");
static_assert(sizeof(VoxelBlueprintLibrary_AreCollisionsEnabled) == 0x000020, "Wrong size on VoxelBlueprintLibrary_AreCollisionsEnabled");
static_assert(offsetof(VoxelBlueprintLibrary_AreCollisionsEnabled, World) == 0x000000, "Member 'VoxelBlueprintLibrary_AreCollisionsEnabled::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_AreCollisionsEnabled, Position) == 0x000008, "Member 'VoxelBlueprintLibrary_AreCollisionsEnabled::Position' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_AreCollisionsEnabled, LOD) == 0x000014, "Member 'VoxelBlueprintLibrary_AreCollisionsEnabled::LOD' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_AreCollisionsEnabled, bConvertToVoxelSpace) == 0x000018, "Member 'VoxelBlueprintLibrary_AreCollisionsEnabled::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_AreCollisionsEnabled, ReturnValue) == 0x000019, "Member 'VoxelBlueprintLibrary_AreCollisionsEnabled::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.BindVoxelChunkEvents
// 0x0038 (0x0038 - 0x0000)
struct VoxelBlueprintLibrary_BindVoxelChunkEvents final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVoxelIntBox& Bounds)> OnActivate;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVoxelIntBox& Bounds)> OnDeactivate;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFireExistingOnes;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChunkSize;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationDistanceInChunks;                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_BindVoxelChunkEvents) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_BindVoxelChunkEvents");
static_assert(sizeof(VoxelBlueprintLibrary_BindVoxelChunkEvents) == 0x000038, "Wrong size on VoxelBlueprintLibrary_BindVoxelChunkEvents");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, World) == 0x000000, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, OnActivate) == 0x000008, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::OnActivate' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, OnDeactivate) == 0x000018, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::OnDeactivate' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, bFireExistingOnes) == 0x000028, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::bFireExistingOnes' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, ChunkSize) == 0x00002C, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::ChunkSize' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelChunkEvents, ActivationDistanceInChunks) == 0x000030, "Member 'VoxelBlueprintLibrary_BindVoxelChunkEvents::ActivationDistanceInChunks' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.BindVoxelGenerationEvent
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_BindVoxelGenerationEvent final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVoxelIntBox& Bounds)> OnGenerate;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFireExistingOnes;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChunkSize;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerationDistanceInChunks;                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_BindVoxelGenerationEvent) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_BindVoxelGenerationEvent");
static_assert(sizeof(VoxelBlueprintLibrary_BindVoxelGenerationEvent) == 0x000028, "Wrong size on VoxelBlueprintLibrary_BindVoxelGenerationEvent");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelGenerationEvent, World) == 0x000000, "Member 'VoxelBlueprintLibrary_BindVoxelGenerationEvent::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelGenerationEvent, OnGenerate) == 0x000008, "Member 'VoxelBlueprintLibrary_BindVoxelGenerationEvent::OnGenerate' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelGenerationEvent, bFireExistingOnes) == 0x000018, "Member 'VoxelBlueprintLibrary_BindVoxelGenerationEvent::bFireExistingOnes' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelGenerationEvent, ChunkSize) == 0x00001C, "Member 'VoxelBlueprintLibrary_BindVoxelGenerationEvent::ChunkSize' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_BindVoxelGenerationEvent, GenerationDistanceInChunks) == 0x000020, "Member 'VoxelBlueprintLibrary_BindVoxelGenerationEvent::GenerationDistanceInChunks' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ClearAllData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_ClearAllData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ClearAllData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ClearAllData");
static_assert(sizeof(VoxelBlueprintLibrary_ClearAllData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_ClearAllData");
static_assert(offsetof(VoxelBlueprintLibrary_ClearAllData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ClearAllData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ClearAllData, bUpdateRender) == 0x000008, "Member 'VoxelBlueprintLibrary_ClearAllData::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ClearDirtyData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_ClearDirtyData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ClearDirtyData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ClearDirtyData");
static_assert(sizeof(VoxelBlueprintLibrary_ClearDirtyData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_ClearDirtyData");
static_assert(offsetof(VoxelBlueprintLibrary_ClearDirtyData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ClearDirtyData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ClearDirtyData, bUpdateRender) == 0x000008, "Member 'VoxelBlueprintLibrary_ClearDirtyData::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ClearFrames
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_ClearFrames final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_ClearFrames) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ClearFrames");
static_assert(sizeof(VoxelBlueprintLibrary_ClearFrames) == 0x000008, "Wrong size on VoxelBlueprintLibrary_ClearFrames");
static_assert(offsetof(VoxelBlueprintLibrary_ClearFrames, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ClearFrames::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ClearMaterialData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_ClearMaterialData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ClearMaterialData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ClearMaterialData");
static_assert(sizeof(VoxelBlueprintLibrary_ClearMaterialData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_ClearMaterialData");
static_assert(offsetof(VoxelBlueprintLibrary_ClearMaterialData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ClearMaterialData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ClearMaterialData, bUpdateRender) == 0x000008, "Member 'VoxelBlueprintLibrary_ClearMaterialData::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ClearValueData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_ClearValueData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ClearValueData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ClearValueData");
static_assert(sizeof(VoxelBlueprintLibrary_ClearValueData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_ClearValueData");
static_assert(offsetof(VoxelBlueprintLibrary_ClearValueData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ClearValueData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ClearValueData, bUpdateRender) == 0x000008, "Member 'VoxelBlueprintLibrary_ClearValueData::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CompactVoxelTexturePool
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_CompactVoxelTexturePool final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CompactVoxelTexturePool) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CompactVoxelTexturePool");
static_assert(sizeof(VoxelBlueprintLibrary_CompactVoxelTexturePool) == 0x000008, "Wrong size on VoxelBlueprintLibrary_CompactVoxelTexturePool");
static_assert(offsetof(VoxelBlueprintLibrary_CompactVoxelTexturePool, World) == 0x000000, "Member 'VoxelBlueprintLibrary_CompactVoxelTexturePool::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateColorPaintMaterial
// 0x00B8 (0x00B8 - 0x0000)
struct VoxelBlueprintLibrary_CreateColorPaintMaterial final
{
public:
	struct FVoxelPaintMaterialColor               Color;                                             // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0020(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateColorPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateColorPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateColorPaintMaterial) == 0x0000B8, "Wrong size on VoxelBlueprintLibrary_CreateColorPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateColorPaintMaterial, Color) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateColorPaintMaterial::Color' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateColorPaintMaterial, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateColorPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateFiveWayBlendPaintMaterial
// 0x00B8 (0x00B8 - 0x0000)
struct VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial final
{
public:
	struct FVoxelPaintMaterialFiveWayBlend        FiveWayBlend;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0020(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial) == 0x0000B8, "Wrong size on VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial, FiveWayBlend) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial::FiveWayBlend' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateFiveWayBlendPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateMultiIndexPaintMaterial
// 0x00B0 (0x00B0 - 0x0000)
struct VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial final
{
public:
	struct FVoxelPaintMaterialMultiIndex          MultiIndex;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0018(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial) == 0x0000B0, "Wrong size on VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial, MultiIndex) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial::MultiIndex' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateMultiIndexPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateMultiIndexRawPaintMaterial
// 0x00B8 (0x00B8 - 0x0000)
struct VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial final
{
public:
	struct FVoxelPaintMaterialMultiIndexRaw       MultiIndexRaw;                                     // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0020(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial) == 0x0000B8, "Wrong size on VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial, MultiIndexRaw) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial::MultiIndexRaw' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateMultiIndexRawPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateMultiIndexWetnessPaintMaterial
// 0x00A0 (0x00A0 - 0x0000)
struct VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial final
{
public:
	struct FVoxelPaintMaterialMultiIndexWetness   MultiIndexWetness;                                 // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0008(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial) == 0x0000A0, "Wrong size on VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial, MultiIndexWetness) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial::MultiIndexWetness' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_CreateMultiIndexWetnessPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateOrUpdateTextureFromVoxelColorTexture
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture final
{
public:
	struct FVoxelColorTexture                     VoxelTexture;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture");
static_assert(sizeof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture) == 0x000028, "Wrong size on VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture, VoxelTexture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture::VoxelTexture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture, Texture) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelColorTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateOrUpdateTextureFromVoxelFloatTexture
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture final
{
public:
	struct FVoxelFloatTexture                     VoxelTexture;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture");
static_assert(sizeof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture) == 0x000028, "Wrong size on VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture, VoxelTexture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture::VoxelTexture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture, Texture) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateOrUpdateTextureFromVoxelFloatTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateSingleIndexPaintMaterial
// 0x00A0 (0x00A0 - 0x0000)
struct VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial final
{
public:
	struct FVoxelPaintMaterialSingleIndex         SingleIndex;                                       // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0008(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial) == 0x0000A0, "Wrong size on VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial, SingleIndex) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial::SingleIndex' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_CreateSingleIndexPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateTextureFromVoxelColorTexture
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture final
{
public:
	struct FVoxelColorTexture                     VoxelTexture;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture");
static_assert(sizeof(VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture) == 0x000020, "Wrong size on VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture");
static_assert(offsetof(VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture, VoxelTexture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture::VoxelTexture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateTextureFromVoxelColorTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateTextureFromVoxelFloatTexture
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture final
{
public:
	struct FVoxelFloatTexture                     VoxelTexture;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture");
static_assert(sizeof(VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture) == 0x000020, "Wrong size on VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture");
static_assert(offsetof(VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture, VoxelTexture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture::VoxelTexture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateTextureFromVoxelFloatTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateToolRendering
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_CreateToolRendering final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_CreateToolRendering) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateToolRendering");
static_assert(sizeof(VoxelBlueprintLibrary_CreateToolRendering) == 0x000010, "Wrong size on VoxelBlueprintLibrary_CreateToolRendering");
static_assert(offsetof(VoxelBlueprintLibrary_CreateToolRendering, World) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateToolRendering::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateToolRendering, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_CreateToolRendering::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateUVPaintMaterial
// 0x00A8 (0x00A8 - 0x0000)
struct VoxelBlueprintLibrary_CreateUVPaintMaterial final
{
public:
	struct FVoxelPaintMaterialUV                  UV;                                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    ReturnValue;                                       // 0x0010(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateUVPaintMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateUVPaintMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_CreateUVPaintMaterial) == 0x0000A8, "Wrong size on VoxelBlueprintLibrary_CreateUVPaintMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_CreateUVPaintMaterial, UV) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateUVPaintMaterial::UV' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateUVPaintMaterial, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_CreateUVPaintMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateVoxelColorTextureFromVoxelFloatTexture
// 0x0038 (0x0038 - 0x0000)
struct VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EVoxelRGBA                                    Channel;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalize;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelColorTexture                     ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture");
static_assert(sizeof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture) == 0x000038, "Wrong size on VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture, Channel) == 0x000018, "Member 'VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture::Channel' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture, bNormalize) == 0x000019, "Member 'VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture::bNormalize' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_CreateVoxelColorTextureFromVoxelFloatTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.CreateVoxelFloatTextureFromTextureChannel
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelRGBA                                    Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel");
static_assert(sizeof(VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel) == 0x000028, "Wrong size on VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel, Channel) == 0x000008, "Member 'VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel::Channel' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_CreateVoxelFloatTextureFromTextureChannel::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.DestroyToolRendering
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_DestroyToolRendering final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 Ref;                                               // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_DestroyToolRendering) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_DestroyToolRendering");
static_assert(sizeof(VoxelBlueprintLibrary_DestroyToolRendering) == 0x000010, "Wrong size on VoxelBlueprintLibrary_DestroyToolRendering");
static_assert(offsetof(VoxelBlueprintLibrary_DestroyToolRendering, World) == 0x000000, "Member 'VoxelBlueprintLibrary_DestroyToolRendering::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_DestroyToolRendering, Ref) == 0x000008, "Member 'VoxelBlueprintLibrary_DestroyToolRendering::Ref' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Divide_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct VoxelBlueprintLibrary_Divide_IntVectorInt final
{
public:
	struct FIntVector                             Left;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Divide_IntVectorInt) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Divide_IntVectorInt");
static_assert(sizeof(VoxelBlueprintLibrary_Divide_IntVectorInt) == 0x00001C, "Wrong size on VoxelBlueprintLibrary_Divide_IntVectorInt");
static_assert(offsetof(VoxelBlueprintLibrary_Divide_IntVectorInt, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Divide_IntVectorInt::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Divide_IntVectorInt, Right) == 0x00000C, "Member 'VoxelBlueprintLibrary_Divide_IntVectorInt::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Divide_IntVectorInt, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_Divide_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetAllVoxelWorldsContainingPosition
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AVoxelWorld*>                    ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition");
static_assert(sizeof(VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition) == 0x000028, "Wrong size on VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition, WorldContextObject) == 0x000000, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition, Position) == 0x000008, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition::Position' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsContainingPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetAllVoxelWorldsOverlappingActor
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AVoxelWorld*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor");
static_assert(sizeof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor) == 0x000018, "Wrong size on VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor, Actor) == 0x000000, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor::Actor' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingActor::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetAllVoxelWorldsOverlappingBox
// 0x0038 (0x0038 - 0x0000)
struct VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0008(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AVoxelWorld*>                    ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox");
static_assert(sizeof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox) == 0x000038, "Wrong size on VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox, WorldContextObject) == 0x000000, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox, Box) == 0x000008, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox, ReturnValue) == 0x000028, "Member 'VoxelBlueprintLibrary_GetAllVoxelWorldsOverlappingBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetBounds
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_GetBounds final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetBounds) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetBounds");
static_assert(sizeof(VoxelBlueprintLibrary_GetBounds) == 0x000020, "Wrong size on VoxelBlueprintLibrary_GetBounds");
static_assert(offsetof(VoxelBlueprintLibrary_GetBounds, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetBounds::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetBounds, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetColor
// 0x0014 (0x0014 - 0x0000)
struct VoxelBlueprintLibrary_GetColor final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetColor) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetColor");
static_assert(sizeof(VoxelBlueprintLibrary_GetColor) == 0x000014, "Wrong size on VoxelBlueprintLibrary_GetColor");
static_assert(offsetof(VoxelBlueprintLibrary_GetColor, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_GetColor::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetColor, ReturnValue) == 0x000004, "Member 'VoxelBlueprintLibrary_GetColor::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetEstimatedCollisionsMemoryUsageInMB
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB");
static_assert(sizeof(VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB");
static_assert(offsetof(VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetEstimatedCollisionsMemoryUsageInMB::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetFloatOutput
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_GetFloatOutput final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetFloatOutput) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetFloatOutput");
static_assert(sizeof(VoxelBlueprintLibrary_GetFloatOutput) == 0x000028, "Wrong size on VoxelBlueprintLibrary_GetFloatOutput");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetFloatOutput::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, Name_0) == 0x000008, "Member 'VoxelBlueprintLibrary_GetFloatOutput::Name_0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, X) == 0x000010, "Member 'VoxelBlueprintLibrary_GetFloatOutput::X' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, Y) == 0x000014, "Member 'VoxelBlueprintLibrary_GetFloatOutput::Y' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, Z) == 0x000018, "Member 'VoxelBlueprintLibrary_GetFloatOutput::Z' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, DefaultValue) == 0x00001C, "Member 'VoxelBlueprintLibrary_GetFloatOutput::DefaultValue' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetFloatOutput, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_GetFloatOutput::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetHistoryPosition
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetHistoryPosition final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetHistoryPosition) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetHistoryPosition");
static_assert(sizeof(VoxelBlueprintLibrary_GetHistoryPosition) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetHistoryPosition");
static_assert(offsetof(VoxelBlueprintLibrary_GetHistoryPosition, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetHistoryPosition::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetHistoryPosition, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetHistoryPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetIntOutput
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_GetIntOutput final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetIntOutput) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetIntOutput");
static_assert(sizeof(VoxelBlueprintLibrary_GetIntOutput) == 0x000028, "Wrong size on VoxelBlueprintLibrary_GetIntOutput");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetIntOutput::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, Name_0) == 0x000008, "Member 'VoxelBlueprintLibrary_GetIntOutput::Name_0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, X) == 0x000010, "Member 'VoxelBlueprintLibrary_GetIntOutput::X' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, Y) == 0x000014, "Member 'VoxelBlueprintLibrary_GetIntOutput::Y' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, Z) == 0x000018, "Member 'VoxelBlueprintLibrary_GetIntOutput::Z' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, DefaultValue) == 0x00001C, "Member 'VoxelBlueprintLibrary_GetIntOutput::DefaultValue' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetIntOutput, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_GetIntOutput::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetMax_Intvector
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetMax_Intvector final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetMax_Intvector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetMax_Intvector");
static_assert(sizeof(VoxelBlueprintLibrary_GetMax_Intvector) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetMax_Intvector");
static_assert(offsetof(VoxelBlueprintLibrary_GetMax_Intvector, Vector) == 0x000000, "Member 'VoxelBlueprintLibrary_GetMax_Intvector::Vector' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMax_Intvector, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_GetMax_Intvector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetMemoryUsageInMB
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_GetMemoryUsageInMB final
{
public:
	EVoxelMemoryUsageType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetMemoryUsageInMB) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetMemoryUsageInMB");
static_assert(sizeof(VoxelBlueprintLibrary_GetMemoryUsageInMB) == 0x000008, "Wrong size on VoxelBlueprintLibrary_GetMemoryUsageInMB");
static_assert(offsetof(VoxelBlueprintLibrary_GetMemoryUsageInMB, Type) == 0x000000, "Member 'VoxelBlueprintLibrary_GetMemoryUsageInMB::Type' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMemoryUsageInMB, ReturnValue) == 0x000004, "Member 'VoxelBlueprintLibrary_GetMemoryUsageInMB::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetMin_Intvector
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetMin_Intvector final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetMin_Intvector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetMin_Intvector");
static_assert(sizeof(VoxelBlueprintLibrary_GetMin_Intvector) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetMin_Intvector");
static_assert(offsetof(VoxelBlueprintLibrary_GetMin_Intvector, Vector) == 0x000000, "Member 'VoxelBlueprintLibrary_GetMin_Intvector::Vector' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMin_Intvector, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_GetMin_Intvector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetMultiIndex
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_GetMultiIndex final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSortByStrength;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength0;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index0;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength1;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index1;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength2;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index2;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength3;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Index3;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Wetness;                                           // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetMultiIndex) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetMultiIndex");
static_assert(sizeof(VoxelBlueprintLibrary_GetMultiIndex) == 0x000028, "Wrong size on VoxelBlueprintLibrary_GetMultiIndex");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, bSortByStrength) == 0x000001, "Member 'VoxelBlueprintLibrary_GetMultiIndex::bSortByStrength' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Strength0) == 0x000004, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Strength0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Index0) == 0x000008, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Index0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Strength1) == 0x00000C, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Strength1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Index1) == 0x000010, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Index1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Strength2) == 0x000014, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Strength2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Index2) == 0x000018, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Index2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Strength3) == 0x00001C, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Strength3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Index3) == 0x000020, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Index3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetMultiIndex, Wetness) == 0x000024, "Member 'VoxelBlueprintLibrary_GetMultiIndex::Wetness' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetNormal
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_GetNormal final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetNormal) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetNormal");
static_assert(sizeof(VoxelBlueprintLibrary_GetNormal) == 0x000020, "Wrong size on VoxelBlueprintLibrary_GetNormal");
static_assert(offsetof(VoxelBlueprintLibrary_GetNormal, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetNormal::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetNormal, Position) == 0x000008, "Member 'VoxelBlueprintLibrary_GetNormal::Position' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetNormal, ReturnValue) == 0x000014, "Member 'VoxelBlueprintLibrary_GetNormal::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetNumberOfVoxelThreads
// 0x0004 (0x0004 - 0x0000)
struct VoxelBlueprintLibrary_GetNumberOfVoxelThreads final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetNumberOfVoxelThreads) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetNumberOfVoxelThreads");
static_assert(sizeof(VoxelBlueprintLibrary_GetNumberOfVoxelThreads) == 0x000004, "Wrong size on VoxelBlueprintLibrary_GetNumberOfVoxelThreads");
static_assert(offsetof(VoxelBlueprintLibrary_GetNumberOfVoxelThreads, ReturnValue) == 0x000000, "Member 'VoxelBlueprintLibrary_GetNumberOfVoxelThreads::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetPeakMemoryUsageInMB
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_GetPeakMemoryUsageInMB final
{
public:
	EVoxelMemoryUsageType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetPeakMemoryUsageInMB) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetPeakMemoryUsageInMB");
static_assert(sizeof(VoxelBlueprintLibrary_GetPeakMemoryUsageInMB) == 0x000008, "Wrong size on VoxelBlueprintLibrary_GetPeakMemoryUsageInMB");
static_assert(offsetof(VoxelBlueprintLibrary_GetPeakMemoryUsageInMB, Type) == 0x000000, "Member 'VoxelBlueprintLibrary_GetPeakMemoryUsageInMB::Type' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetPeakMemoryUsageInMB, ReturnValue) == 0x000004, "Member 'VoxelBlueprintLibrary_GetPeakMemoryUsageInMB::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetRawMaterial
// 0x000D (0x000D - 0x0000)
struct VoxelBlueprintLibrary_GetRawMaterial final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U0;                                                // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         V0;                                                // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U1;                                                // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         v1;                                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U2;                                                // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         v2;                                                // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U3;                                                // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         V3;                                                // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetRawMaterial) == 0x000001, "Wrong alignment on VoxelBlueprintLibrary_GetRawMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_GetRawMaterial) == 0x00000D, "Wrong size on VoxelBlueprintLibrary_GetRawMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_GetRawMaterial::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, R) == 0x000001, "Member 'VoxelBlueprintLibrary_GetRawMaterial::R' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, G) == 0x000002, "Member 'VoxelBlueprintLibrary_GetRawMaterial::G' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, B) == 0x000003, "Member 'VoxelBlueprintLibrary_GetRawMaterial::B' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, A) == 0x000004, "Member 'VoxelBlueprintLibrary_GetRawMaterial::A' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, U0) == 0x000005, "Member 'VoxelBlueprintLibrary_GetRawMaterial::U0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, V0) == 0x000006, "Member 'VoxelBlueprintLibrary_GetRawMaterial::V0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, U1) == 0x000007, "Member 'VoxelBlueprintLibrary_GetRawMaterial::U1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, v1) == 0x000008, "Member 'VoxelBlueprintLibrary_GetRawMaterial::v1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, U2) == 0x000009, "Member 'VoxelBlueprintLibrary_GetRawMaterial::U2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, v2) == 0x00000A, "Member 'VoxelBlueprintLibrary_GetRawMaterial::v2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, U3) == 0x00000B, "Member 'VoxelBlueprintLibrary_GetRawMaterial::U3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRawMaterial, V3) == 0x00000C, "Member 'VoxelBlueprintLibrary_GetRawMaterial::V3' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetRenderBoundsOverlappingDataBounds
// 0x0040 (0x0040 - 0x0000)
struct VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           DataBounds;                                        // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds");
static_assert(sizeof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds) == 0x000040, "Wrong size on VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds");
static_assert(offsetof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds, DataBounds) == 0x000008, "Member 'VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds::DataBounds' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds, LOD) == 0x000020, "Member 'VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds::LOD' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds, ReturnValue) == 0x000024, "Member 'VoxelBlueprintLibrary_GetRenderBoundsOverlappingDataBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetSingleIndex
// 0x0002 (0x0002 - 0x0000)
struct VoxelBlueprintLibrary_GetSingleIndex final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetSingleIndex) == 0x000001, "Wrong alignment on VoxelBlueprintLibrary_GetSingleIndex");
static_assert(sizeof(VoxelBlueprintLibrary_GetSingleIndex) == 0x000002, "Wrong size on VoxelBlueprintLibrary_GetSingleIndex");
static_assert(offsetof(VoxelBlueprintLibrary_GetSingleIndex, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_GetSingleIndex::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetSingleIndex, ReturnValue) == 0x000001, "Member 'VoxelBlueprintLibrary_GetSingleIndex::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetTaskCount
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetTaskCount final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_GetTaskCount) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetTaskCount");
static_assert(sizeof(VoxelBlueprintLibrary_GetTaskCount) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetTaskCount");
static_assert(offsetof(VoxelBlueprintLibrary_GetTaskCount, World) == 0x000000, "Member 'VoxelBlueprintLibrary_GetTaskCount::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetTaskCount, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetTaskCount::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetUV
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetUV final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Channel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetUV) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_GetUV");
static_assert(sizeof(VoxelBlueprintLibrary_GetUV) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetUV");
static_assert(offsetof(VoxelBlueprintLibrary_GetUV, Material) == 0x000000, "Member 'VoxelBlueprintLibrary_GetUV::Material' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetUV, Channel) == 0x000004, "Member 'VoxelBlueprintLibrary_GetUV::Channel' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetUV, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetUV::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetVoxelColorTextureSize
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_GetVoxelColorTextureSize final
{
public:
	struct FVoxelColorTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetVoxelColorTextureSize) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetVoxelColorTextureSize");
static_assert(sizeof(VoxelBlueprintLibrary_GetVoxelColorTextureSize) == 0x000020, "Wrong size on VoxelBlueprintLibrary_GetVoxelColorTextureSize");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelColorTextureSize, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_GetVoxelColorTextureSize::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelColorTextureSize, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_GetVoxelColorTextureSize::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetVoxelFloatTextureSize
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_GetVoxelFloatTextureSize final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetVoxelFloatTextureSize) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetVoxelFloatTextureSize");
static_assert(sizeof(VoxelBlueprintLibrary_GetVoxelFloatTextureSize) == 0x000020, "Wrong size on VoxelBlueprintLibrary_GetVoxelFloatTextureSize");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelFloatTextureSize, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_GetVoxelFloatTextureSize::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelFloatTextureSize, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_GetVoxelFloatTextureSize::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetVoxelWorldContainingPosition
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_GetVoxelWorldContainingPosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetVoxelWorldContainingPosition) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetVoxelWorldContainingPosition");
static_assert(sizeof(VoxelBlueprintLibrary_GetVoxelWorldContainingPosition) == 0x000020, "Wrong size on VoxelBlueprintLibrary_GetVoxelWorldContainingPosition");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldContainingPosition, WorldContextObject) == 0x000000, "Member 'VoxelBlueprintLibrary_GetVoxelWorldContainingPosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldContainingPosition, Position) == 0x000008, "Member 'VoxelBlueprintLibrary_GetVoxelWorldContainingPosition::Position' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldContainingPosition, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_GetVoxelWorldContainingPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetVoxelWorldOverlappingActor
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor");
static_assert(sizeof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor) == 0x000010, "Wrong size on VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor, Actor) == 0x000000, "Member 'VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor::Actor' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_GetVoxelWorldOverlappingActor::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.GetVoxelWorldOverlappingBox
// 0x0030 (0x0030 - 0x0000)
struct VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0008(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox");
static_assert(sizeof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox) == 0x000030, "Wrong size on VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox, WorldContextObject) == 0x000000, "Member 'VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox, Box) == 0x000008, "Member 'VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox, ReturnValue) == 0x000028, "Member 'VoxelBlueprintLibrary_GetVoxelWorldOverlappingBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.HasMaterialData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_HasMaterialData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_HasMaterialData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_HasMaterialData");
static_assert(sizeof(VoxelBlueprintLibrary_HasMaterialData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_HasMaterialData");
static_assert(offsetof(VoxelBlueprintLibrary_HasMaterialData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_HasMaterialData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_HasMaterialData, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_HasMaterialData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.HasValueData
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_HasValueData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_HasValueData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_HasValueData");
static_assert(sizeof(VoxelBlueprintLibrary_HasValueData) == 0x000010, "Wrong size on VoxelBlueprintLibrary_HasValueData");
static_assert(offsetof(VoxelBlueprintLibrary_HasValueData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_HasValueData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_HasValueData, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_HasValueData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IntervalContains_Float
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_IntervalContains_Float final
{
public:
	struct FVoxelFloatInterval                    Interval;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IntervalContains_Float) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_IntervalContains_Float");
static_assert(sizeof(VoxelBlueprintLibrary_IntervalContains_Float) == 0x000010, "Wrong size on VoxelBlueprintLibrary_IntervalContains_Float");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Float, Interval) == 0x000000, "Member 'VoxelBlueprintLibrary_IntervalContains_Float::Interval' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Float, Value) == 0x000008, "Member 'VoxelBlueprintLibrary_IntervalContains_Float::Value' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Float, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_IntervalContains_Float::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IntervalContains_Int32
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_IntervalContains_Int32 final
{
public:
	struct FVoxelInt32Interval                    Interval;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IntervalContains_Int32) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_IntervalContains_Int32");
static_assert(sizeof(VoxelBlueprintLibrary_IntervalContains_Int32) == 0x000010, "Wrong size on VoxelBlueprintLibrary_IntervalContains_Int32");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Int32, Interval) == 0x000000, "Member 'VoxelBlueprintLibrary_IntervalContains_Int32::Interval' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Int32, Value) == 0x000008, "Member 'VoxelBlueprintLibrary_IntervalContains_Int32::Value' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IntervalContains_Int32, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_IntervalContains_Int32::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsValidRef
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_IsValidRef final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 Ref;                                               // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IsValidRef) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_IsValidRef");
static_assert(sizeof(VoxelBlueprintLibrary_IsValidRef) == 0x000010, "Wrong size on VoxelBlueprintLibrary_IsValidRef");
static_assert(offsetof(VoxelBlueprintLibrary_IsValidRef, World) == 0x000000, "Member 'VoxelBlueprintLibrary_IsValidRef::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsValidRef, Ref) == 0x000008, "Member 'VoxelBlueprintLibrary_IsValidRef::Ref' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsValidRef, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_IsValidRef::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsVoxelColorTextureValid
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_IsVoxelColorTextureValid final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IsVoxelColorTextureValid) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_IsVoxelColorTextureValid");
static_assert(sizeof(VoxelBlueprintLibrary_IsVoxelColorTextureValid) == 0x000020, "Wrong size on VoxelBlueprintLibrary_IsVoxelColorTextureValid");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelColorTextureValid, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_IsVoxelColorTextureValid::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelColorTextureValid, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_IsVoxelColorTextureValid::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsVoxelFloatTextureValid
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_IsVoxelFloatTextureValid final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IsVoxelFloatTextureValid) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_IsVoxelFloatTextureValid");
static_assert(sizeof(VoxelBlueprintLibrary_IsVoxelFloatTextureValid) == 0x000020, "Wrong size on VoxelBlueprintLibrary_IsVoxelFloatTextureValid");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelFloatTextureValid, Texture) == 0x000000, "Member 'VoxelBlueprintLibrary_IsVoxelFloatTextureValid::Texture' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelFloatTextureValid, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_IsVoxelFloatTextureValid::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsVoxelPluginPro
// 0x0001 (0x0001 - 0x0000)
struct VoxelBlueprintLibrary_IsVoxelPluginPro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_IsVoxelPluginPro) == 0x000001, "Wrong alignment on VoxelBlueprintLibrary_IsVoxelPluginPro");
static_assert(sizeof(VoxelBlueprintLibrary_IsVoxelPluginPro) == 0x000001, "Wrong size on VoxelBlueprintLibrary_IsVoxelPluginPro");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelPluginPro, ReturnValue) == 0x000000, "Member 'VoxelBlueprintLibrary_IsVoxelPluginPro::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsVoxelWorldFoliageLoading
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading");
static_assert(sizeof(VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading) == 0x000010, "Wrong size on VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading, World) == 0x000000, "Member 'VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_IsVoxelWorldFoliageLoading::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.IsVoxelWorldMeshLoading
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_IsVoxelWorldMeshLoading final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_IsVoxelWorldMeshLoading) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_IsVoxelWorldMeshLoading");
static_assert(sizeof(VoxelBlueprintLibrary_IsVoxelWorldMeshLoading) == 0x000010, "Wrong size on VoxelBlueprintLibrary_IsVoxelWorldMeshLoading");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelWorldMeshLoading, World) == 0x000000, "Member 'VoxelBlueprintLibrary_IsVoxelWorldMeshLoading::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_IsVoxelWorldMeshLoading, ReturnValue) == 0x000008, "Member 'VoxelBlueprintLibrary_IsVoxelWorldMeshLoading::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MakeColorMaterial
// 0x0014 (0x0014 - 0x0000)
struct VoxelBlueprintLibrary_MakeColorMaterial final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_MakeColorMaterial) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_MakeColorMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_MakeColorMaterial) == 0x000014, "Wrong size on VoxelBlueprintLibrary_MakeColorMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_MakeColorMaterial, Color) == 0x000000, "Member 'VoxelBlueprintLibrary_MakeColorMaterial::Color' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeColorMaterial, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_MakeColorMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MakeIntBoxFromGlobalPositionAndRadius
// 0x0030 (0x0030 - 0x0000)
struct VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlobalPosition;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius");
static_assert(sizeof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius) == 0x000030, "Wrong size on VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius");
static_assert(offsetof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius, World) == 0x000000, "Member 'VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius, GlobalPosition) == 0x000008, "Member 'VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius::GlobalPosition' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius, Radius) == 0x000014, "Member 'VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius::Radius' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_MakeIntBoxFromGlobalPositionAndRadius::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MakeMaterialMask
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_MakeMaterialMask final
{
public:
	bool                                          R;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          G;                                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          A;                                                 // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          U0;                                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          V0;                                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          U1;                                                // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          v1;                                                // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          U2;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          v2;                                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          U3;                                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          V3;                                                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_MakeMaterialMask) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_MakeMaterialMask");
static_assert(sizeof(VoxelBlueprintLibrary_MakeMaterialMask) == 0x000010, "Wrong size on VoxelBlueprintLibrary_MakeMaterialMask");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, R) == 0x000000, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::R' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, G) == 0x000001, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::G' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, B) == 0x000002, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::B' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, A) == 0x000003, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::A' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, U0) == 0x000004, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::U0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, V0) == 0x000005, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::V0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, U1) == 0x000006, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::U1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, v1) == 0x000007, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::v1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, U2) == 0x000008, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::U2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, v2) == 0x000009, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::v2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, U3) == 0x00000A, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::U3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, V3) == 0x00000B, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::V3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeMaterialMask, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_MakeMaterialMask::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MakeRawMaterial
// 0x000D (0x000D - 0x0000)
struct VoxelBlueprintLibrary_MakeRawMaterial final
{
public:
	uint8                                         R;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U0;                                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         V0;                                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U1;                                                // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         v1;                                                // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U2;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         v2;                                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         U3;                                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         V3;                                                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_MakeRawMaterial) == 0x000001, "Wrong alignment on VoxelBlueprintLibrary_MakeRawMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_MakeRawMaterial) == 0x00000D, "Wrong size on VoxelBlueprintLibrary_MakeRawMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, R) == 0x000000, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::R' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, G) == 0x000001, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::G' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, B) == 0x000002, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::B' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, A) == 0x000003, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::A' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, U0) == 0x000004, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::U0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, V0) == 0x000005, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::V0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, U1) == 0x000006, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::U1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, v1) == 0x000007, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::v1' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, U2) == 0x000008, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::U2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, v2) == 0x000009, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::v2' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, U3) == 0x00000A, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::U3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, V3) == 0x00000B, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::V3' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeRawMaterial, ReturnValue) == 0x00000C, "Member 'VoxelBlueprintLibrary_MakeRawMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MakeSingleIndexMaterial
// 0x0002 (0x0002 - 0x0000)
struct VoxelBlueprintLibrary_MakeSingleIndexMaterial final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_MakeSingleIndexMaterial) == 0x000001, "Wrong alignment on VoxelBlueprintLibrary_MakeSingleIndexMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_MakeSingleIndexMaterial) == 0x000002, "Wrong size on VoxelBlueprintLibrary_MakeSingleIndexMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_MakeSingleIndexMaterial, Index_0) == 0x000000, "Member 'VoxelBlueprintLibrary_MakeSingleIndexMaterial::Index_0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MakeSingleIndexMaterial, ReturnValue) == 0x000001, "Member 'VoxelBlueprintLibrary_MakeSingleIndexMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.MarkSpawnersDirty
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_MarkSpawnersDirty final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_MarkSpawnersDirty) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_MarkSpawnersDirty");
static_assert(sizeof(VoxelBlueprintLibrary_MarkSpawnersDirty) == 0x000020, "Wrong size on VoxelBlueprintLibrary_MarkSpawnersDirty");
static_assert(offsetof(VoxelBlueprintLibrary_MarkSpawnersDirty, World) == 0x000000, "Member 'VoxelBlueprintLibrary_MarkSpawnersDirty::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_MarkSpawnersDirty, Bounds) == 0x000008, "Member 'VoxelBlueprintLibrary_MarkSpawnersDirty::Bounds' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Multiply_IntIntVector
// 0x001C (0x001C - 0x0000)
struct VoxelBlueprintLibrary_Multiply_IntIntVector final
{
public:
	int32                                         Left;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Right;                                             // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Multiply_IntIntVector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Multiply_IntIntVector");
static_assert(sizeof(VoxelBlueprintLibrary_Multiply_IntIntVector) == 0x00001C, "Wrong size on VoxelBlueprintLibrary_Multiply_IntIntVector");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntIntVector, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Multiply_IntIntVector::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntIntVector, Right) == 0x000004, "Member 'VoxelBlueprintLibrary_Multiply_IntIntVector::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntIntVector, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_Multiply_IntIntVector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Multiply_IntVectorInt
// 0x001C (0x001C - 0x0000)
struct VoxelBlueprintLibrary_Multiply_IntVectorInt final
{
public:
	struct FIntVector                             Left;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Right;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Multiply_IntVectorInt) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Multiply_IntVectorInt");
static_assert(sizeof(VoxelBlueprintLibrary_Multiply_IntVectorInt) == 0x00001C, "Wrong size on VoxelBlueprintLibrary_Multiply_IntVectorInt");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorInt, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorInt::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorInt, Right) == 0x00000C, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorInt::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorInt, ReturnValue) == 0x000010, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorInt::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Multiply_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct VoxelBlueprintLibrary_Multiply_IntVectorIntVector final
{
public:
	struct FIntVector                             Left;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Right;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Multiply_IntVectorIntVector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Multiply_IntVectorIntVector");
static_assert(sizeof(VoxelBlueprintLibrary_Multiply_IntVectorIntVector) == 0x000024, "Wrong size on VoxelBlueprintLibrary_Multiply_IntVectorIntVector");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorIntVector, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorIntVector::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorIntVector, Right) == 0x00000C, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorIntVector::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Multiply_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_Multiply_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.NumberOfCores
// 0x0004 (0x0004 - 0x0000)
struct VoxelBlueprintLibrary_NumberOfCores final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_NumberOfCores) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_NumberOfCores");
static_assert(sizeof(VoxelBlueprintLibrary_NumberOfCores) == 0x000004, "Wrong size on VoxelBlueprintLibrary_NumberOfCores");
static_assert(offsetof(VoxelBlueprintLibrary_NumberOfCores, ReturnValue) == 0x000000, "Member 'VoxelBlueprintLibrary_NumberOfCores::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RaiseError
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_RaiseError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RaiseError) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RaiseError");
static_assert(sizeof(VoxelBlueprintLibrary_RaiseError) == 0x000018, "Wrong size on VoxelBlueprintLibrary_RaiseError");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseError, Message) == 0x000000, "Member 'VoxelBlueprintLibrary_RaiseError::Message' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseError, Object) == 0x000010, "Member 'VoxelBlueprintLibrary_RaiseError::Object' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RaiseInfo
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_RaiseInfo final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RaiseInfo) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RaiseInfo");
static_assert(sizeof(VoxelBlueprintLibrary_RaiseInfo) == 0x000018, "Wrong size on VoxelBlueprintLibrary_RaiseInfo");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseInfo, Message) == 0x000000, "Member 'VoxelBlueprintLibrary_RaiseInfo::Message' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseInfo, Object) == 0x000010, "Member 'VoxelBlueprintLibrary_RaiseInfo::Object' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RaiseWarning
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_RaiseWarning final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RaiseWarning) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RaiseWarning");
static_assert(sizeof(VoxelBlueprintLibrary_RaiseWarning) == 0x000018, "Wrong size on VoxelBlueprintLibrary_RaiseWarning");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseWarning, Message) == 0x000000, "Member 'VoxelBlueprintLibrary_RaiseWarning::Message' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_RaiseWarning, Object) == 0x000010, "Member 'VoxelBlueprintLibrary_RaiseWarning::Object' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RecomputeComponentPositions
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_RecomputeComponentPositions final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RecomputeComponentPositions) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RecomputeComponentPositions");
static_assert(sizeof(VoxelBlueprintLibrary_RecomputeComponentPositions) == 0x000008, "Wrong size on VoxelBlueprintLibrary_RecomputeComponentPositions");
static_assert(offsetof(VoxelBlueprintLibrary_RecomputeComponentPositions, World) == 0x000000, "Member 'VoxelBlueprintLibrary_RecomputeComponentPositions::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Recreate
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_Recreate final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveData;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_Recreate) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_Recreate");
static_assert(sizeof(VoxelBlueprintLibrary_Recreate) == 0x000010, "Wrong size on VoxelBlueprintLibrary_Recreate");
static_assert(offsetof(VoxelBlueprintLibrary_Recreate, World) == 0x000000, "Member 'VoxelBlueprintLibrary_Recreate::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Recreate, bSaveData) == 0x000008, "Member 'VoxelBlueprintLibrary_Recreate::bSaveData' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RecreateRender
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_RecreateRender final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RecreateRender) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RecreateRender");
static_assert(sizeof(VoxelBlueprintLibrary_RecreateRender) == 0x000008, "Wrong size on VoxelBlueprintLibrary_RecreateRender");
static_assert(offsetof(VoxelBlueprintLibrary_RecreateRender, World) == 0x000000, "Member 'VoxelBlueprintLibrary_RecreateRender::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RecreateSpawners
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_RecreateSpawners final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RecreateSpawners) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RecreateSpawners");
static_assert(sizeof(VoxelBlueprintLibrary_RecreateSpawners) == 0x000008, "Wrong size on VoxelBlueprintLibrary_RecreateSpawners");
static_assert(offsetof(VoxelBlueprintLibrary_RecreateSpawners, World) == 0x000000, "Member 'VoxelBlueprintLibrary_RecreateSpawners::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Redo
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_Redo final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelIntBox>                   OutUpdatedBounds;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_Redo) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_Redo");
static_assert(sizeof(VoxelBlueprintLibrary_Redo) == 0x000020, "Wrong size on VoxelBlueprintLibrary_Redo");
static_assert(offsetof(VoxelBlueprintLibrary_Redo, World) == 0x000000, "Member 'VoxelBlueprintLibrary_Redo::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Redo, OutUpdatedBounds) == 0x000008, "Member 'VoxelBlueprintLibrary_Redo::OutUpdatedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Redo, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_Redo::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.RegenerateSpawners
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_RegenerateSpawners final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_RegenerateSpawners) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_RegenerateSpawners");
static_assert(sizeof(VoxelBlueprintLibrary_RegenerateSpawners) == 0x000020, "Wrong size on VoxelBlueprintLibrary_RegenerateSpawners");
static_assert(offsetof(VoxelBlueprintLibrary_RegenerateSpawners, World) == 0x000000, "Member 'VoxelBlueprintLibrary_RegenerateSpawners::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_RegenerateSpawners, Bounds) == 0x000008, "Member 'VoxelBlueprintLibrary_RegenerateSpawners::Bounds' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.SaveFrame
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_SaveFrame final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_SaveFrame) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_SaveFrame");
static_assert(sizeof(VoxelBlueprintLibrary_SaveFrame) == 0x000008, "Wrong size on VoxelBlueprintLibrary_SaveFrame");
static_assert(offsetof(VoxelBlueprintLibrary_SaveFrame, World) == 0x000000, "Member 'VoxelBlueprintLibrary_SaveFrame::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.ScaleData
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_ScaleData final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_ScaleData) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_ScaleData");
static_assert(sizeof(VoxelBlueprintLibrary_ScaleData) == 0x000018, "Wrong size on VoxelBlueprintLibrary_ScaleData");
static_assert(offsetof(VoxelBlueprintLibrary_ScaleData, World) == 0x000000, "Member 'VoxelBlueprintLibrary_ScaleData::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_ScaleData, Scale) == 0x000008, "Member 'VoxelBlueprintLibrary_ScaleData::Scale' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.SetNumberOfVoxelThreads
// 0x0004 (0x0004 - 0x0000)
struct VoxelBlueprintLibrary_SetNumberOfVoxelThreads final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_SetNumberOfVoxelThreads) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_SetNumberOfVoxelThreads");
static_assert(sizeof(VoxelBlueprintLibrary_SetNumberOfVoxelThreads) == 0x000004, "Wrong size on VoxelBlueprintLibrary_SetNumberOfVoxelThreads");
static_assert(offsetof(VoxelBlueprintLibrary_SetNumberOfVoxelThreads, Number) == 0x000000, "Member 'VoxelBlueprintLibrary_SetNumberOfVoxelThreads::Number' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.SetToolRenderingBounds
// 0x0028 (0x0028 - 0x0000)
struct VoxelBlueprintLibrary_SetToolRenderingBounds final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 Ref;                                               // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x000C(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_SetToolRenderingBounds) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_SetToolRenderingBounds");
static_assert(sizeof(VoxelBlueprintLibrary_SetToolRenderingBounds) == 0x000028, "Wrong size on VoxelBlueprintLibrary_SetToolRenderingBounds");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingBounds, World) == 0x000000, "Member 'VoxelBlueprintLibrary_SetToolRenderingBounds::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingBounds, Ref) == 0x000008, "Member 'VoxelBlueprintLibrary_SetToolRenderingBounds::Ref' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingBounds, Bounds) == 0x00000C, "Member 'VoxelBlueprintLibrary_SetToolRenderingBounds::Bounds' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.SetToolRenderingEnabled
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintLibrary_SetToolRenderingEnabled final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 Ref;                                               // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_SetToolRenderingEnabled) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_SetToolRenderingEnabled");
static_assert(sizeof(VoxelBlueprintLibrary_SetToolRenderingEnabled) == 0x000010, "Wrong size on VoxelBlueprintLibrary_SetToolRenderingEnabled");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingEnabled, World) == 0x000000, "Member 'VoxelBlueprintLibrary_SetToolRenderingEnabled::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingEnabled, Ref) == 0x000008, "Member 'VoxelBlueprintLibrary_SetToolRenderingEnabled::Ref' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingEnabled, bEnabled) == 0x00000C, "Member 'VoxelBlueprintLibrary_SetToolRenderingEnabled::bEnabled' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.SetToolRenderingMaterial
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_SetToolRenderingMaterial final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelToolRenderingRef                 Ref;                                               // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_SetToolRenderingMaterial) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_SetToolRenderingMaterial");
static_assert(sizeof(VoxelBlueprintLibrary_SetToolRenderingMaterial) == 0x000018, "Wrong size on VoxelBlueprintLibrary_SetToolRenderingMaterial");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingMaterial, World) == 0x000000, "Member 'VoxelBlueprintLibrary_SetToolRenderingMaterial::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingMaterial, Ref) == 0x000008, "Member 'VoxelBlueprintLibrary_SetToolRenderingMaterial::Ref' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_SetToolRenderingMaterial, Material) == 0x000010, "Member 'VoxelBlueprintLibrary_SetToolRenderingMaterial::Material' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Substract_IntVectorIntVector
// 0x0024 (0x0024 - 0x0000)
struct VoxelBlueprintLibrary_Substract_IntVectorIntVector final
{
public:
	struct FIntVector                             Left;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Right;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_Substract_IntVectorIntVector) == 0x000004, "Wrong alignment on VoxelBlueprintLibrary_Substract_IntVectorIntVector");
static_assert(sizeof(VoxelBlueprintLibrary_Substract_IntVectorIntVector) == 0x000024, "Wrong size on VoxelBlueprintLibrary_Substract_IntVectorIntVector");
static_assert(offsetof(VoxelBlueprintLibrary_Substract_IntVectorIntVector, Left) == 0x000000, "Member 'VoxelBlueprintLibrary_Substract_IntVectorIntVector::Left' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Substract_IntVectorIntVector, Right) == 0x00000C, "Member 'VoxelBlueprintLibrary_Substract_IntVectorIntVector::Right' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Substract_IntVectorIntVector, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_Substract_IntVectorIntVector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.TransformGlobalBoxToVoxelBox
// 0x0040 (0x0040 - 0x0000)
struct VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0008(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox");
static_assert(sizeof(VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox) == 0x000040, "Wrong size on VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox");
static_assert(offsetof(VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox, World) == 0x000000, "Member 'VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox, Box) == 0x000008, "Member 'VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox, ReturnValue) == 0x000024, "Member 'VoxelBlueprintLibrary_TransformGlobalBoxToVoxelBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.TransformVoxelBoxToGlobalBox
// 0x0040 (0x0040 - 0x0000)
struct VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Box;                                               // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0020(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox");
static_assert(sizeof(VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox) == 0x000040, "Wrong size on VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox");
static_assert(offsetof(VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox, World) == 0x000000, "Member 'VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox, Box) == 0x000008, "Member 'VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox, ReturnValue) == 0x000020, "Member 'VoxelBlueprintLibrary_TransformVoxelBoxToGlobalBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.Undo
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_Undo final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelIntBox>                   OutUpdatedBounds;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_Undo) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_Undo");
static_assert(sizeof(VoxelBlueprintLibrary_Undo) == 0x000020, "Wrong size on VoxelBlueprintLibrary_Undo");
static_assert(offsetof(VoxelBlueprintLibrary_Undo, World) == 0x000000, "Member 'VoxelBlueprintLibrary_Undo::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Undo, OutUpdatedBounds) == 0x000008, "Member 'VoxelBlueprintLibrary_Undo::OutUpdatedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_Undo, ReturnValue) == 0x000018, "Member 'VoxelBlueprintLibrary_Undo::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.UpdateAll
// 0x0008 (0x0008 - 0x0000)
struct VoxelBlueprintLibrary_UpdateAll final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_UpdateAll) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_UpdateAll");
static_assert(sizeof(VoxelBlueprintLibrary_UpdateAll) == 0x000008, "Wrong size on VoxelBlueprintLibrary_UpdateAll");
static_assert(offsetof(VoxelBlueprintLibrary_UpdateAll, World) == 0x000000, "Member 'VoxelBlueprintLibrary_UpdateAll::World' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.UpdateBounds
// 0x0020 (0x0020 - 0x0000)
struct VoxelBlueprintLibrary_UpdateBounds final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintLibrary_UpdateBounds) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_UpdateBounds");
static_assert(sizeof(VoxelBlueprintLibrary_UpdateBounds) == 0x000020, "Wrong size on VoxelBlueprintLibrary_UpdateBounds");
static_assert(offsetof(VoxelBlueprintLibrary_UpdateBounds, World) == 0x000000, "Member 'VoxelBlueprintLibrary_UpdateBounds::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_UpdateBounds, Bounds) == 0x000008, "Member 'VoxelBlueprintLibrary_UpdateBounds::Bounds' has a wrong offset!");

// Function Voxel.VoxelBlueprintLibrary.UpdatePosition
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintLibrary_UpdatePosition final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBlueprintLibrary_UpdatePosition) == 0x000008, "Wrong alignment on VoxelBlueprintLibrary_UpdatePosition");
static_assert(sizeof(VoxelBlueprintLibrary_UpdatePosition) == 0x000018, "Wrong size on VoxelBlueprintLibrary_UpdatePosition");
static_assert(offsetof(VoxelBlueprintLibrary_UpdatePosition, World) == 0x000000, "Member 'VoxelBlueprintLibrary_UpdatePosition::World' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintLibrary_UpdatePosition, Position) == 0x000008, "Member 'VoxelBlueprintLibrary_UpdatePosition::Position' has a wrong offset!");

// Function Voxel.VoxelInvokerComponentBase.GetInvokerSettings
// 0x0060 (0x0060 - 0x0000)
struct VoxelInvokerComponentBase_GetInvokerSettings final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelInvokerSettings                  ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelInvokerComponentBase_GetInvokerSettings) == 0x000008, "Wrong alignment on VoxelInvokerComponentBase_GetInvokerSettings");
static_assert(sizeof(VoxelInvokerComponentBase_GetInvokerSettings) == 0x000060, "Wrong size on VoxelInvokerComponentBase_GetInvokerSettings");
static_assert(offsetof(VoxelInvokerComponentBase_GetInvokerSettings, VoxelWorld) == 0x000000, "Member 'VoxelInvokerComponentBase_GetInvokerSettings::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelInvokerComponentBase_GetInvokerSettings, ReturnValue) == 0x000008, "Member 'VoxelInvokerComponentBase_GetInvokerSettings::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelInvokerComponentBase.GetInvokerVoxelPosition
// 0x0018 (0x0018 - 0x0000)
struct VoxelInvokerComponentBase_GetInvokerVoxelPosition final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelInvokerComponentBase_GetInvokerVoxelPosition) == 0x000008, "Wrong alignment on VoxelInvokerComponentBase_GetInvokerVoxelPosition");
static_assert(sizeof(VoxelInvokerComponentBase_GetInvokerVoxelPosition) == 0x000018, "Wrong size on VoxelInvokerComponentBase_GetInvokerVoxelPosition");
static_assert(offsetof(VoxelInvokerComponentBase_GetInvokerVoxelPosition, VoxelWorld) == 0x000000, "Member 'VoxelInvokerComponentBase_GetInvokerVoxelPosition::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelInvokerComponentBase_GetInvokerVoxelPosition, ReturnValue) == 0x000008, "Member 'VoxelInvokerComponentBase_GetInvokerVoxelPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelInvokerComponentBase.IsLocalInvoker
// 0x0001 (0x0001 - 0x0000)
struct VoxelInvokerComponentBase_IsLocalInvoker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelInvokerComponentBase_IsLocalInvoker) == 0x000001, "Wrong alignment on VoxelInvokerComponentBase_IsLocalInvoker");
static_assert(sizeof(VoxelInvokerComponentBase_IsLocalInvoker) == 0x000001, "Wrong size on VoxelInvokerComponentBase_IsLocalInvoker");
static_assert(offsetof(VoxelInvokerComponentBase_IsLocalInvoker, ReturnValue) == 0x000000, "Member 'VoxelInvokerComponentBase_IsLocalInvoker::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelInvokerComponentBase.ShouldUseInvoker
// 0x0010 (0x0010 - 0x0000)
struct VoxelInvokerComponentBase_ShouldUseInvoker final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelInvokerComponentBase_ShouldUseInvoker) == 0x000008, "Wrong alignment on VoxelInvokerComponentBase_ShouldUseInvoker");
static_assert(sizeof(VoxelInvokerComponentBase_ShouldUseInvoker) == 0x000010, "Wrong size on VoxelInvokerComponentBase_ShouldUseInvoker");
static_assert(offsetof(VoxelInvokerComponentBase_ShouldUseInvoker, VoxelWorld) == 0x000000, "Member 'VoxelInvokerComponentBase_ShouldUseInvoker::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelInvokerComponentBase_ShouldUseInvoker, ReturnValue) == 0x000008, "Member 'VoxelInvokerComponentBase_ShouldUseInvoker::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSimpleInvokerComponent.GetInvokerGlobalPosition
// 0x000C (0x000C - 0x0000)
struct VoxelSimpleInvokerComponent_GetInvokerGlobalPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSimpleInvokerComponent_GetInvokerGlobalPosition) == 0x000004, "Wrong alignment on VoxelSimpleInvokerComponent_GetInvokerGlobalPosition");
static_assert(sizeof(VoxelSimpleInvokerComponent_GetInvokerGlobalPosition) == 0x00000C, "Wrong size on VoxelSimpleInvokerComponent_GetInvokerGlobalPosition");
static_assert(offsetof(VoxelSimpleInvokerComponent_GetInvokerGlobalPosition, ReturnValue) == 0x000000, "Member 'VoxelSimpleInvokerComponent_GetInvokerGlobalPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemActor.K2_AddItemToWorld
// 0x0008 (0x0008 - 0x0000)
struct VoxelPlaceableItemActor_K2_AddItemToWorld final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemActor_K2_AddItemToWorld) == 0x000008, "Wrong alignment on VoxelPlaceableItemActor_K2_AddItemToWorld");
static_assert(sizeof(VoxelPlaceableItemActor_K2_AddItemToWorld) == 0x000008, "Wrong size on VoxelPlaceableItemActor_K2_AddItemToWorld");
static_assert(offsetof(VoxelPlaceableItemActor_K2_AddItemToWorld, World) == 0x000000, "Member 'VoxelPlaceableItemActor_K2_AddItemToWorld::World' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemActor.K2_GetPriority
// 0x0004 (0x0004 - 0x0000)
struct VoxelPlaceableItemActor_K2_GetPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemActor_K2_GetPriority) == 0x000004, "Wrong alignment on VoxelPlaceableItemActor_K2_GetPriority");
static_assert(sizeof(VoxelPlaceableItemActor_K2_GetPriority) == 0x000004, "Wrong size on VoxelPlaceableItemActor_K2_GetPriority");
static_assert(offsetof(VoxelPlaceableItemActor_K2_GetPriority, ReturnValue) == 0x000000, "Member 'VoxelPlaceableItemActor_K2_GetPriority::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelAssetTools.AddDisableEditsBox
// 0x0048 (0x0048 - 0x0000)
struct VoxelAssetTools_AddDisableEditsBox final
{
public:
	struct FVoxelDisableEditsBoxItemReference     Reference;                                         // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0030(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAssetTools_AddDisableEditsBox) == 0x000008, "Wrong alignment on VoxelAssetTools_AddDisableEditsBox");
static_assert(sizeof(VoxelAssetTools_AddDisableEditsBox) == 0x000048, "Wrong size on VoxelAssetTools_AddDisableEditsBox");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBox, Reference) == 0x000000, "Member 'VoxelAssetTools_AddDisableEditsBox::Reference' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBox, World) == 0x000028, "Member 'VoxelAssetTools_AddDisableEditsBox::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBox, Bounds) == 0x000030, "Member 'VoxelAssetTools_AddDisableEditsBox::Bounds' has a wrong offset!");

// Function Voxel.VoxelAssetTools.AddDisableEditsBoxAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelAssetTools_AddDisableEditsBoxAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelDisableEditsBoxItemReference     Reference;                                         // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0050(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_AddDisableEditsBoxAsync) == 0x000008, "Wrong alignment on VoxelAssetTools_AddDisableEditsBoxAsync");
static_assert(sizeof(VoxelAssetTools_AddDisableEditsBoxAsync) == 0x000070, "Wrong size on VoxelAssetTools_AddDisableEditsBoxAsync");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, WorldContextObject) == 0x000000, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, LatentInfo) == 0x000008, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, Reference) == 0x000020, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::Reference' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, World) == 0x000048, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, Bounds) == 0x000050, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_AddDisableEditsBoxAsync, bHideLatentWarnings) == 0x000068, "Member 'VoxelAssetTools_AddDisableEditsBoxAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelAssetTools.CreateDataAssetFromWorldSection
// 0x0030 (0x0030 - 0x0000)
struct VoxelAssetTools_CreateDataAssetFromWorldSection final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyMaterials;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelDataAsset*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAssetTools_CreateDataAssetFromWorldSection) == 0x000008, "Wrong alignment on VoxelAssetTools_CreateDataAssetFromWorldSection");
static_assert(sizeof(VoxelAssetTools_CreateDataAssetFromWorldSection) == 0x000030, "Wrong size on VoxelAssetTools_CreateDataAssetFromWorldSection");
static_assert(offsetof(VoxelAssetTools_CreateDataAssetFromWorldSection, World) == 0x000000, "Member 'VoxelAssetTools_CreateDataAssetFromWorldSection::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_CreateDataAssetFromWorldSection, Bounds) == 0x000008, "Member 'VoxelAssetTools_CreateDataAssetFromWorldSection::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_CreateDataAssetFromWorldSection, bCopyMaterials) == 0x000020, "Member 'VoxelAssetTools_CreateDataAssetFromWorldSection::bCopyMaterials' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_CreateDataAssetFromWorldSection, ReturnValue) == 0x000028, "Member 'VoxelAssetTools_CreateDataAssetFromWorldSection::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportAsset
// 0x0060 (0x0060 - 0x0000)
struct VoxelAssetTools_ImportAsset final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0040(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtractive;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelAssetMergeMode                          MergeMode;                                         // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportAsset) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportAsset");
static_assert(sizeof(VoxelAssetTools_ImportAsset) == 0x000060, "Wrong size on VoxelAssetTools_ImportAsset");
static_assert(offsetof(VoxelAssetTools_ImportAsset, World) == 0x000000, "Member 'VoxelAssetTools_ImportAsset::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, Asset) == 0x000008, "Member 'VoxelAssetTools_ImportAsset::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, Transform) == 0x000010, "Member 'VoxelAssetTools_ImportAsset::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, Bounds) == 0x000040, "Member 'VoxelAssetTools_ImportAsset::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, bSubtractive) == 0x000058, "Member 'VoxelAssetTools_ImportAsset::bSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, MergeMode) == 0x000059, "Member 'VoxelAssetTools_ImportAsset::MergeMode' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAsset, bConvertToVoxelSpace) == 0x00005A, "Member 'VoxelAssetTools_ImportAsset::bConvertToVoxelSpace' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportAssetAsReference
// 0x0090 (0x0090 - 0x0000)
struct VoxelAssetTools_ImportAssetAsReference final
{
public:
	struct FVoxelAssetItemReference               Reference;                                         // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0070(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x008D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportAssetAsReference) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportAssetAsReference");
static_assert(sizeof(VoxelAssetTools_ImportAssetAsReference) == 0x000090, "Wrong size on VoxelAssetTools_ImportAssetAsReference");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, Reference) == 0x000000, "Member 'VoxelAssetTools_ImportAssetAsReference::Reference' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, World) == 0x000028, "Member 'VoxelAssetTools_ImportAssetAsReference::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, Asset) == 0x000030, "Member 'VoxelAssetTools_ImportAssetAsReference::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, Transform) == 0x000040, "Member 'VoxelAssetTools_ImportAssetAsReference::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, Bounds) == 0x000070, "Member 'VoxelAssetTools_ImportAssetAsReference::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, Priority) == 0x000088, "Member 'VoxelAssetTools_ImportAssetAsReference::Priority' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, bConvertToVoxelSpace) == 0x00008C, "Member 'VoxelAssetTools_ImportAssetAsReference::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReference, bUpdateRender) == 0x00008D, "Member 'VoxelAssetTools_ImportAssetAsReference::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportAssetAsReferenceAsync
// 0x00B0 (0x00B0 - 0x0000)
struct VoxelAssetTools_ImportAssetAsReferenceAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelAssetItemReference               Reference;                                         // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0090(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x00AD(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x00AE(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportAssetAsReferenceAsync) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportAssetAsReferenceAsync");
static_assert(sizeof(VoxelAssetTools_ImportAssetAsReferenceAsync) == 0x0000B0, "Wrong size on VoxelAssetTools_ImportAssetAsReferenceAsync");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, WorldContextObject) == 0x000000, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, LatentInfo) == 0x000008, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, Reference) == 0x000020, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::Reference' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, World) == 0x000048, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, Asset) == 0x000050, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, Transform) == 0x000060, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, Bounds) == 0x000090, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, Priority) == 0x0000A8, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::Priority' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, bConvertToVoxelSpace) == 0x0000AC, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, bUpdateRender) == 0x0000AD, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsReferenceAsync, bHideLatentWarnings) == 0x0000AE, "Member 'VoxelAssetTools_ImportAssetAsReferenceAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportAssetAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelAssetTools_ImportAssetAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0060(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtractive;                                      // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelAssetMergeMode                          MergeMode;                                         // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x007B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportAssetAsync) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportAssetAsync");
static_assert(sizeof(VoxelAssetTools_ImportAssetAsync) == 0x000080, "Wrong size on VoxelAssetTools_ImportAssetAsync");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, WorldContextObject) == 0x000000, "Member 'VoxelAssetTools_ImportAssetAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, LatentInfo) == 0x000008, "Member 'VoxelAssetTools_ImportAssetAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, World) == 0x000020, "Member 'VoxelAssetTools_ImportAssetAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, Asset) == 0x000028, "Member 'VoxelAssetTools_ImportAssetAsync::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, Transform) == 0x000030, "Member 'VoxelAssetTools_ImportAssetAsync::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, Bounds) == 0x000060, "Member 'VoxelAssetTools_ImportAssetAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, bSubtractive) == 0x000078, "Member 'VoxelAssetTools_ImportAssetAsync::bSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, MergeMode) == 0x000079, "Member 'VoxelAssetTools_ImportAssetAsync::MergeMode' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, bConvertToVoxelSpace) == 0x00007A, "Member 'VoxelAssetTools_ImportAssetAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportAssetAsync, bHideLatentWarnings) == 0x00007B, "Member 'VoxelAssetTools_ImportAssetAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportDataAssetFast
// 0x0020 (0x0020 - 0x0000)
struct VoxelAssetTools_ImportDataAssetFast final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelAssetMergeMode                          MergeMode;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportDataAssetFast) == 0x000008, "Wrong alignment on VoxelAssetTools_ImportDataAssetFast");
static_assert(sizeof(VoxelAssetTools_ImportDataAssetFast) == 0x000020, "Wrong size on VoxelAssetTools_ImportDataAssetFast");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFast, World) == 0x000000, "Member 'VoxelAssetTools_ImportDataAssetFast::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFast, Asset) == 0x000008, "Member 'VoxelAssetTools_ImportDataAssetFast::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFast, Position) == 0x000010, "Member 'VoxelAssetTools_ImportDataAssetFast::Position' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFast, MergeMode) == 0x00001C, "Member 'VoxelAssetTools_ImportDataAssetFast::MergeMode' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFast, bConvertToVoxelSpace) == 0x00001D, "Member 'VoxelAssetTools_ImportDataAssetFast::bConvertToVoxelSpace' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportDataAssetFastAsync
// 0x0040 (0x0040 - 0x0000)
struct VoxelAssetTools_ImportDataAssetFastAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        Asset;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelAssetMergeMode                          MergeMode;                                         // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportDataAssetFastAsync) == 0x000008, "Wrong alignment on VoxelAssetTools_ImportDataAssetFastAsync");
static_assert(sizeof(VoxelAssetTools_ImportDataAssetFastAsync) == 0x000040, "Wrong size on VoxelAssetTools_ImportDataAssetFastAsync");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, WorldContextObject) == 0x000000, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, LatentInfo) == 0x000008, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, World) == 0x000020, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, Asset) == 0x000028, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, Position) == 0x000030, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, MergeMode) == 0x00003C, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::MergeMode' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, bConvertToVoxelSpace) == 0x00003D, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportDataAssetFastAsync, bHideLatentWarnings) == 0x00003E, "Member 'VoxelAssetTools_ImportDataAssetFastAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportModifierAsset
// 0x0060 (0x0060 - 0x0000)
struct VoxelAssetTools_ImportModifierAsset final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0040(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyValues;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyMaterials;                                  // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockEntireWorld;                                  // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x005B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportModifierAsset) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportModifierAsset");
static_assert(sizeof(VoxelAssetTools_ImportModifierAsset) == 0x000060, "Wrong size on VoxelAssetTools_ImportModifierAsset");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, World) == 0x000000, "Member 'VoxelAssetTools_ImportModifierAsset::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, Asset) == 0x000008, "Member 'VoxelAssetTools_ImportModifierAsset::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, Transform) == 0x000010, "Member 'VoxelAssetTools_ImportModifierAsset::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, Bounds) == 0x000040, "Member 'VoxelAssetTools_ImportModifierAsset::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, bModifyValues) == 0x000058, "Member 'VoxelAssetTools_ImportModifierAsset::bModifyValues' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, bModifyMaterials) == 0x000059, "Member 'VoxelAssetTools_ImportModifierAsset::bModifyMaterials' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, bLockEntireWorld) == 0x00005A, "Member 'VoxelAssetTools_ImportModifierAsset::bLockEntireWorld' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAsset, bConvertToVoxelSpace) == 0x00005B, "Member 'VoxelAssetTools_ImportModifierAsset::bConvertToVoxelSpace' has a wrong offset!");

// Function Voxel.VoxelAssetTools.ImportModifierAssetAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelAssetTools_ImportModifierAssetAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* Asset;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0060(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyValues;                                     // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyMaterials;                                  // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockEntireWorld;                                  // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x007B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_ImportModifierAssetAsync) == 0x000010, "Wrong alignment on VoxelAssetTools_ImportModifierAssetAsync");
static_assert(sizeof(VoxelAssetTools_ImportModifierAssetAsync) == 0x000080, "Wrong size on VoxelAssetTools_ImportModifierAssetAsync");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, WorldContextObject) == 0x000000, "Member 'VoxelAssetTools_ImportModifierAssetAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, LatentInfo) == 0x000008, "Member 'VoxelAssetTools_ImportModifierAssetAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, World) == 0x000020, "Member 'VoxelAssetTools_ImportModifierAssetAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, Asset) == 0x000028, "Member 'VoxelAssetTools_ImportModifierAssetAsync::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, Transform) == 0x000030, "Member 'VoxelAssetTools_ImportModifierAssetAsync::Transform' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, Bounds) == 0x000060, "Member 'VoxelAssetTools_ImportModifierAssetAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, bModifyValues) == 0x000078, "Member 'VoxelAssetTools_ImportModifierAssetAsync::bModifyValues' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, bModifyMaterials) == 0x000079, "Member 'VoxelAssetTools_ImportModifierAssetAsync::bModifyMaterials' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, bLockEntireWorld) == 0x00007A, "Member 'VoxelAssetTools_ImportModifierAssetAsync::bLockEntireWorld' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, bConvertToVoxelSpace) == 0x00007B, "Member 'VoxelAssetTools_ImportModifierAssetAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_ImportModifierAssetAsync, bHideLatentWarnings) == 0x00007C, "Member 'VoxelAssetTools_ImportModifierAssetAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelAssetTools.InvertDataAsset
// 0x0010 (0x0010 - 0x0000)
struct VoxelAssetTools_InvertDataAsset final
{
public:
	class UVoxelDataAsset*                        Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        InvertedAsset;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAssetTools_InvertDataAsset) == 0x000008, "Wrong alignment on VoxelAssetTools_InvertDataAsset");
static_assert(sizeof(VoxelAssetTools_InvertDataAsset) == 0x000010, "Wrong size on VoxelAssetTools_InvertDataAsset");
static_assert(offsetof(VoxelAssetTools_InvertDataAsset, Asset) == 0x000000, "Member 'VoxelAssetTools_InvertDataAsset::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_InvertDataAsset, InvertedAsset) == 0x000008, "Member 'VoxelAssetTools_InvertDataAsset::InvertedAsset' has a wrong offset!");

// Function Voxel.VoxelAssetTools.SetDataAssetMaterial
// 0x0018 (0x0018 - 0x0000)
struct VoxelAssetTools_SetDataAssetMaterial final
{
public:
	class UVoxelDataAsset*                        Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        NewAsset;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAssetTools_SetDataAssetMaterial) == 0x000008, "Wrong alignment on VoxelAssetTools_SetDataAssetMaterial");
static_assert(sizeof(VoxelAssetTools_SetDataAssetMaterial) == 0x000018, "Wrong size on VoxelAssetTools_SetDataAssetMaterial");
static_assert(offsetof(VoxelAssetTools_SetDataAssetMaterial, Asset) == 0x000000, "Member 'VoxelAssetTools_SetDataAssetMaterial::Asset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_SetDataAssetMaterial, NewAsset) == 0x000008, "Member 'VoxelAssetTools_SetDataAssetMaterial::NewAsset' has a wrong offset!");
static_assert(offsetof(VoxelAssetTools_SetDataAssetMaterial, Material) == 0x000010, "Member 'VoxelAssetTools_SetDataAssetMaterial::Material' has a wrong offset!");

// Function Voxel.VoxelMaterialCollectionBase.GetIndexMaterial
// 0x0010 (0x0010 - 0x0000)
struct VoxelMaterialCollectionBase_GetIndexMaterial final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMaterialCollectionBase_GetIndexMaterial) == 0x000008, "Wrong alignment on VoxelMaterialCollectionBase_GetIndexMaterial");
static_assert(sizeof(VoxelMaterialCollectionBase_GetIndexMaterial) == 0x000010, "Wrong size on VoxelMaterialCollectionBase_GetIndexMaterial");
static_assert(offsetof(VoxelMaterialCollectionBase_GetIndexMaterial, Index_0) == 0x000000, "Member 'VoxelMaterialCollectionBase_GetIndexMaterial::Index_0' has a wrong offset!");
static_assert(offsetof(VoxelMaterialCollectionBase_GetIndexMaterial, ReturnValue) == 0x000008, "Member 'VoxelMaterialCollectionBase_GetIndexMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMaterialCollectionBase.GetMaterialIndex
// 0x000C (0x000C - 0x0000)
struct VoxelMaterialCollectionBase_GetMaterialIndex final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMaterialCollectionBase_GetMaterialIndex) == 0x000004, "Wrong alignment on VoxelMaterialCollectionBase_GetMaterialIndex");
static_assert(sizeof(VoxelMaterialCollectionBase_GetMaterialIndex) == 0x00000C, "Wrong size on VoxelMaterialCollectionBase_GetMaterialIndex");
static_assert(offsetof(VoxelMaterialCollectionBase_GetMaterialIndex, Name_0) == 0x000000, "Member 'VoxelMaterialCollectionBase_GetMaterialIndex::Name_0' has a wrong offset!");
static_assert(offsetof(VoxelMaterialCollectionBase_GetMaterialIndex, ReturnValue) == 0x000008, "Member 'VoxelMaterialCollectionBase_GetMaterialIndex::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMaterialCollectionBase.GetMaterials
// 0x0010 (0x0010 - 0x0000)
struct VoxelMaterialCollectionBase_GetMaterials final
{
public:
	TArray<struct FVoxelMaterialCollectionMaterialInfo> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMaterialCollectionBase_GetMaterials) == 0x000008, "Wrong alignment on VoxelMaterialCollectionBase_GetMaterials");
static_assert(sizeof(VoxelMaterialCollectionBase_GetMaterials) == 0x000010, "Wrong size on VoxelMaterialCollectionBase_GetMaterials");
static_assert(offsetof(VoxelMaterialCollectionBase_GetMaterials, ReturnValue) == 0x000000, "Member 'VoxelMaterialCollectionBase_GetMaterials::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintMaterialCollectionInterface.GetMaterialForIndex
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelCubicFace                               Face;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex) == 0x000008, "Wrong alignment on VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex");
static_assert(sizeof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex) == 0x000010, "Wrong size on VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex, Index_0) == 0x000000, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex::Index_0' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex, Face) == 0x000004, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex::Face' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex, ReturnValue) == 0x000008, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndex::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintMaterialCollectionInterface.GetMaterialForIndices
// 0x0018 (0x0018 - 0x0000)
struct VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices final
{
public:
	TArray<uint8>                                 Indices;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices) == 0x000008, "Wrong alignment on VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices");
static_assert(sizeof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices) == 0x000018, "Wrong size on VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices, Indices) == 0x000000, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices::Indices' has a wrong offset!");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices, ReturnValue) == 0x000010, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterialForIndices::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBlueprintMaterialCollectionInterface.GetMaterials
// 0x0010 (0x0010 - 0x0000)
struct VoxelBlueprintMaterialCollectionInterface_GetMaterials final
{
public:
	TArray<struct FVoxelMaterialCollectionMaterialInfo> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBlueprintMaterialCollectionInterface_GetMaterials) == 0x000008, "Wrong alignment on VoxelBlueprintMaterialCollectionInterface_GetMaterials");
static_assert(sizeof(VoxelBlueprintMaterialCollectionInterface_GetMaterials) == 0x000010, "Wrong size on VoxelBlueprintMaterialCollectionInterface_GetMaterials");
static_assert(offsetof(VoxelBlueprintMaterialCollectionInterface_GetMaterials, ReturnValue) == 0x000000, "Member 'VoxelBlueprintMaterialCollectionInterface_GetMaterials::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolsBase.GetModifiedVoxelMaterialsBounds
// 0x0028 (0x0028 - 0x0000)
struct VoxelToolsBase_GetModifiedVoxelMaterialsBounds final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedVoxels;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolsBase_GetModifiedVoxelMaterialsBounds) == 0x000008, "Wrong alignment on VoxelToolsBase_GetModifiedVoxelMaterialsBounds");
static_assert(sizeof(VoxelToolsBase_GetModifiedVoxelMaterialsBounds) == 0x000028, "Wrong size on VoxelToolsBase_GetModifiedVoxelMaterialsBounds");
static_assert(offsetof(VoxelToolsBase_GetModifiedVoxelMaterialsBounds, ModifiedVoxels) == 0x000000, "Member 'VoxelToolsBase_GetModifiedVoxelMaterialsBounds::ModifiedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelToolsBase_GetModifiedVoxelMaterialsBounds, ReturnValue) == 0x000010, "Member 'VoxelToolsBase_GetModifiedVoxelMaterialsBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolsBase.GetModifiedVoxelValuesBounds
// 0x0028 (0x0028 - 0x0000)
struct VoxelToolsBase_GetModifiedVoxelValuesBounds final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedVoxels;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolsBase_GetModifiedVoxelValuesBounds) == 0x000008, "Wrong alignment on VoxelToolsBase_GetModifiedVoxelValuesBounds");
static_assert(sizeof(VoxelToolsBase_GetModifiedVoxelValuesBounds) == 0x000028, "Wrong size on VoxelToolsBase_GetModifiedVoxelValuesBounds");
static_assert(offsetof(VoxelToolsBase_GetModifiedVoxelValuesBounds, ModifiedVoxels) == 0x000000, "Member 'VoxelToolsBase_GetModifiedVoxelValuesBounds::ModifiedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelToolsBase_GetModifiedVoxelValuesBounds, ReturnValue) == 0x000010, "Member 'VoxelToolsBase_GetModifiedVoxelValuesBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelBoxTools.AddBox
// 0x0050 (0x0050 - 0x0000)
struct VoxelBoxTools_AddBox final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_AddBox) == 0x000008, "Wrong alignment on VoxelBoxTools_AddBox");
static_assert(sizeof(VoxelBoxTools_AddBox) == 0x000050, "Wrong size on VoxelBoxTools_AddBox");
static_assert(offsetof(VoxelBoxTools_AddBox, ModifiedValues) == 0x000000, "Member 'VoxelBoxTools_AddBox::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, EditedBounds) == 0x000010, "Member 'VoxelBoxTools_AddBox::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, VoxelWorld) == 0x000028, "Member 'VoxelBoxTools_AddBox::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, Bounds) == 0x000030, "Member 'VoxelBoxTools_AddBox::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, bMultiThreaded) == 0x000048, "Member 'VoxelBoxTools_AddBox::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, bRecordModifiedValues) == 0x000049, "Member 'VoxelBoxTools_AddBox::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBox, bUpdateRender) == 0x00004A, "Member 'VoxelBoxTools_AddBox::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBoxTools.AddBoxAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelBoxTools_AddBoxAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_AddBoxAsync) == 0x000008, "Wrong alignment on VoxelBoxTools_AddBoxAsync");
static_assert(sizeof(VoxelBoxTools_AddBoxAsync) == 0x000070, "Wrong size on VoxelBoxTools_AddBoxAsync");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, WorldContextObject) == 0x000000, "Member 'VoxelBoxTools_AddBoxAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, LatentInfo) == 0x000008, "Member 'VoxelBoxTools_AddBoxAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, ModifiedValues) == 0x000020, "Member 'VoxelBoxTools_AddBoxAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, EditedBounds) == 0x000030, "Member 'VoxelBoxTools_AddBoxAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, VoxelWorld) == 0x000048, "Member 'VoxelBoxTools_AddBoxAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, Bounds) == 0x000050, "Member 'VoxelBoxTools_AddBoxAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, bMultiThreaded) == 0x000068, "Member 'VoxelBoxTools_AddBoxAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, bRecordModifiedValues) == 0x000069, "Member 'VoxelBoxTools_AddBoxAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, bUpdateRender) == 0x00006A, "Member 'VoxelBoxTools_AddBoxAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_AddBoxAsync, bHideLatentWarnings) == 0x00006B, "Member 'VoxelBoxTools_AddBoxAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelBoxTools.RemoveBox
// 0x0050 (0x0050 - 0x0000)
struct VoxelBoxTools_RemoveBox final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_RemoveBox) == 0x000008, "Wrong alignment on VoxelBoxTools_RemoveBox");
static_assert(sizeof(VoxelBoxTools_RemoveBox) == 0x000050, "Wrong size on VoxelBoxTools_RemoveBox");
static_assert(offsetof(VoxelBoxTools_RemoveBox, ModifiedValues) == 0x000000, "Member 'VoxelBoxTools_RemoveBox::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, EditedBounds) == 0x000010, "Member 'VoxelBoxTools_RemoveBox::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, VoxelWorld) == 0x000028, "Member 'VoxelBoxTools_RemoveBox::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, Bounds) == 0x000030, "Member 'VoxelBoxTools_RemoveBox::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, bMultiThreaded) == 0x000048, "Member 'VoxelBoxTools_RemoveBox::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, bRecordModifiedValues) == 0x000049, "Member 'VoxelBoxTools_RemoveBox::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBox, bUpdateRender) == 0x00004A, "Member 'VoxelBoxTools_RemoveBox::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBoxTools.RemoveBoxAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelBoxTools_RemoveBoxAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_RemoveBoxAsync) == 0x000008, "Wrong alignment on VoxelBoxTools_RemoveBoxAsync");
static_assert(sizeof(VoxelBoxTools_RemoveBoxAsync) == 0x000070, "Wrong size on VoxelBoxTools_RemoveBoxAsync");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, WorldContextObject) == 0x000000, "Member 'VoxelBoxTools_RemoveBoxAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, LatentInfo) == 0x000008, "Member 'VoxelBoxTools_RemoveBoxAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, ModifiedValues) == 0x000020, "Member 'VoxelBoxTools_RemoveBoxAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, EditedBounds) == 0x000030, "Member 'VoxelBoxTools_RemoveBoxAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, VoxelWorld) == 0x000048, "Member 'VoxelBoxTools_RemoveBoxAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, Bounds) == 0x000050, "Member 'VoxelBoxTools_RemoveBoxAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, bMultiThreaded) == 0x000068, "Member 'VoxelBoxTools_RemoveBoxAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, bRecordModifiedValues) == 0x000069, "Member 'VoxelBoxTools_RemoveBoxAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, bUpdateRender) == 0x00006A, "Member 'VoxelBoxTools_RemoveBoxAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_RemoveBoxAsync, bHideLatentWarnings) == 0x00006B, "Member 'VoxelBoxTools_RemoveBoxAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelBoxTools.SetMaterialBox
// 0x00E8 (0x00E8 - 0x0000)
struct VoxelBoxTools_SetMaterialBox final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0048(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x00E1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x00E2(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_SetMaterialBox) == 0x000008, "Wrong alignment on VoxelBoxTools_SetMaterialBox");
static_assert(sizeof(VoxelBoxTools_SetMaterialBox) == 0x0000E8, "Wrong size on VoxelBoxTools_SetMaterialBox");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, ModifiedMaterials) == 0x000000, "Member 'VoxelBoxTools_SetMaterialBox::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, EditedBounds) == 0x000010, "Member 'VoxelBoxTools_SetMaterialBox::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, VoxelWorld) == 0x000028, "Member 'VoxelBoxTools_SetMaterialBox::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, Bounds) == 0x000030, "Member 'VoxelBoxTools_SetMaterialBox::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, PaintMaterial) == 0x000048, "Member 'VoxelBoxTools_SetMaterialBox::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, bMultiThreaded) == 0x0000E0, "Member 'VoxelBoxTools_SetMaterialBox::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, bRecordModifiedMaterials) == 0x0000E1, "Member 'VoxelBoxTools_SetMaterialBox::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBox, bUpdateRender) == 0x0000E2, "Member 'VoxelBoxTools_SetMaterialBox::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBoxTools.SetMaterialBoxAsync
// 0x0108 (0x0108 - 0x0000)
struct VoxelBoxTools_SetMaterialBoxAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0068(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0101(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0102(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0103(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_SetMaterialBoxAsync) == 0x000008, "Wrong alignment on VoxelBoxTools_SetMaterialBoxAsync");
static_assert(sizeof(VoxelBoxTools_SetMaterialBoxAsync) == 0x000108, "Wrong size on VoxelBoxTools_SetMaterialBoxAsync");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, WorldContextObject) == 0x000000, "Member 'VoxelBoxTools_SetMaterialBoxAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, LatentInfo) == 0x000008, "Member 'VoxelBoxTools_SetMaterialBoxAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelBoxTools_SetMaterialBoxAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, EditedBounds) == 0x000030, "Member 'VoxelBoxTools_SetMaterialBoxAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, VoxelWorld) == 0x000048, "Member 'VoxelBoxTools_SetMaterialBoxAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, Bounds) == 0x000050, "Member 'VoxelBoxTools_SetMaterialBoxAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, PaintMaterial) == 0x000068, "Member 'VoxelBoxTools_SetMaterialBoxAsync::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, bMultiThreaded) == 0x000100, "Member 'VoxelBoxTools_SetMaterialBoxAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, bRecordModifiedMaterials) == 0x000101, "Member 'VoxelBoxTools_SetMaterialBoxAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, bUpdateRender) == 0x000102, "Member 'VoxelBoxTools_SetMaterialBoxAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetMaterialBoxAsync, bHideLatentWarnings) == 0x000103, "Member 'VoxelBoxTools_SetMaterialBoxAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelBoxTools.SetValueBox
// 0x0050 (0x0050 - 0x0000)
struct VoxelBoxTools_SetValueBox final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x004E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelBoxTools_SetValueBox) == 0x000008, "Wrong alignment on VoxelBoxTools_SetValueBox");
static_assert(sizeof(VoxelBoxTools_SetValueBox) == 0x000050, "Wrong size on VoxelBoxTools_SetValueBox");
static_assert(offsetof(VoxelBoxTools_SetValueBox, ModifiedValues) == 0x000000, "Member 'VoxelBoxTools_SetValueBox::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, EditedBounds) == 0x000010, "Member 'VoxelBoxTools_SetValueBox::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, VoxelWorld) == 0x000028, "Member 'VoxelBoxTools_SetValueBox::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, Bounds) == 0x000030, "Member 'VoxelBoxTools_SetValueBox::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, Value) == 0x000048, "Member 'VoxelBoxTools_SetValueBox::Value' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, bMultiThreaded) == 0x00004C, "Member 'VoxelBoxTools_SetValueBox::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, bRecordModifiedValues) == 0x00004D, "Member 'VoxelBoxTools_SetValueBox::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBox, bUpdateRender) == 0x00004E, "Member 'VoxelBoxTools_SetValueBox::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelBoxTools.SetValueBoxAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelBoxTools_SetValueBoxAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelBoxTools_SetValueBoxAsync) == 0x000008, "Wrong alignment on VoxelBoxTools_SetValueBoxAsync");
static_assert(sizeof(VoxelBoxTools_SetValueBoxAsync) == 0x000070, "Wrong size on VoxelBoxTools_SetValueBoxAsync");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, WorldContextObject) == 0x000000, "Member 'VoxelBoxTools_SetValueBoxAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, LatentInfo) == 0x000008, "Member 'VoxelBoxTools_SetValueBoxAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, ModifiedValues) == 0x000020, "Member 'VoxelBoxTools_SetValueBoxAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, EditedBounds) == 0x000030, "Member 'VoxelBoxTools_SetValueBoxAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, VoxelWorld) == 0x000048, "Member 'VoxelBoxTools_SetValueBoxAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, Bounds) == 0x000050, "Member 'VoxelBoxTools_SetValueBoxAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, Value) == 0x000068, "Member 'VoxelBoxTools_SetValueBoxAsync::Value' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, bMultiThreaded) == 0x00006C, "Member 'VoxelBoxTools_SetValueBoxAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, bRecordModifiedValues) == 0x00006D, "Member 'VoxelBoxTools_SetValueBoxAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, bUpdateRender) == 0x00006E, "Member 'VoxelBoxTools_SetValueBoxAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelBoxTools_SetValueBoxAsync, bHideLatentWarnings) == 0x00006F, "Member 'VoxelBoxTools_SetValueBoxAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelCookingLibrary.CookVoxelData
// 0x0090 (0x0090 - 0x0000)
struct VoxelCookingLibrary_CookVoxelData final
{
public:
	struct FVoxelCookingSettings                  Settings;                                          // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelCookedData                       ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCookingLibrary_CookVoxelData) == 0x000008, "Wrong alignment on VoxelCookingLibrary_CookVoxelData");
static_assert(sizeof(VoxelCookingLibrary_CookVoxelData) == 0x000090, "Wrong size on VoxelCookingLibrary_CookVoxelData");
static_assert(offsetof(VoxelCookingLibrary_CookVoxelData, Settings) == 0x000000, "Member 'VoxelCookingLibrary_CookVoxelData::Settings' has a wrong offset!");
static_assert(offsetof(VoxelCookingLibrary_CookVoxelData, ReturnValue) == 0x000080, "Member 'VoxelCookingLibrary_CookVoxelData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelCookingLibrary.CookVoxelDataWithSave
// 0x00B0 (0x00B0 - 0x0000)
struct VoxelCookingLibrary_CookVoxelDataWithSave final
{
public:
	struct FVoxelCookingSettings                  Settings;                                          // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelUncompressedWorldSave            Save;                                              // 0x0080(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelCookedData                       ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCookingLibrary_CookVoxelDataWithSave) == 0x000008, "Wrong alignment on VoxelCookingLibrary_CookVoxelDataWithSave");
static_assert(sizeof(VoxelCookingLibrary_CookVoxelDataWithSave) == 0x0000B0, "Wrong size on VoxelCookingLibrary_CookVoxelDataWithSave");
static_assert(offsetof(VoxelCookingLibrary_CookVoxelDataWithSave, Settings) == 0x000000, "Member 'VoxelCookingLibrary_CookVoxelDataWithSave::Settings' has a wrong offset!");
static_assert(offsetof(VoxelCookingLibrary_CookVoxelDataWithSave, Save) == 0x000080, "Member 'VoxelCookingLibrary_CookVoxelDataWithSave::Save' has a wrong offset!");
static_assert(offsetof(VoxelCookingLibrary_CookVoxelDataWithSave, ReturnValue) == 0x0000A0, "Member 'VoxelCookingLibrary_CookVoxelDataWithSave::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelCookingLibrary.LoadCookedVoxelData
// 0x0018 (0x0018 - 0x0000)
struct VoxelCookingLibrary_LoadCookedVoxelData final
{
public:
	struct FVoxelCookedData                       CookedData;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCookingLibrary_LoadCookedVoxelData) == 0x000008, "Wrong alignment on VoxelCookingLibrary_LoadCookedVoxelData");
static_assert(sizeof(VoxelCookingLibrary_LoadCookedVoxelData) == 0x000018, "Wrong size on VoxelCookingLibrary_LoadCookedVoxelData");
static_assert(offsetof(VoxelCookingLibrary_LoadCookedVoxelData, CookedData) == 0x000000, "Member 'VoxelCookingLibrary_LoadCookedVoxelData::CookedData' has a wrong offset!");
static_assert(offsetof(VoxelCookingLibrary_LoadCookedVoxelData, World) == 0x000010, "Member 'VoxelCookingLibrary_LoadCookedVoxelData::World' has a wrong offset!");

// Function Voxel.VoxelCookingLibrary.MakeVoxelCookingSettingsFromVoxelWorld
// 0x0088 (0x0088 - 0x0000)
struct VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelCookingSettings                  ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld) == 0x000008, "Wrong alignment on VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld");
static_assert(sizeof(VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld) == 0x000088, "Wrong size on VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld");
static_assert(offsetof(VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld, World) == 0x000000, "Member 'VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld::World' has a wrong offset!");
static_assert(offsetof(VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld, ReturnValue) == 0x000008, "Member 'VoxelCookingLibrary_MakeVoxelCookingSettingsFromVoxelWorld::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelCubicLibrary.GetCubicVoxelPositionFromHit
// 0x0030 (0x0030 - 0x0000)
struct VoxelCubicLibrary_GetCubicVoxelPositionFromHit final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPosition;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectVoxelOutside;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit) == 0x000008, "Wrong alignment on VoxelCubicLibrary_GetCubicVoxelPositionFromHit");
static_assert(sizeof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit) == 0x000030, "Wrong size on VoxelCubicLibrary_GetCubicVoxelPositionFromHit");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit, World) == 0x000000, "Member 'VoxelCubicLibrary_GetCubicVoxelPositionFromHit::World' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit, HitPosition) == 0x000008, "Member 'VoxelCubicLibrary_GetCubicVoxelPositionFromHit::HitPosition' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit, HitNormal) == 0x000014, "Member 'VoxelCubicLibrary_GetCubicVoxelPositionFromHit::HitNormal' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit, bSelectVoxelOutside) == 0x000020, "Member 'VoxelCubicLibrary_GetCubicVoxelPositionFromHit::bSelectVoxelOutside' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelPositionFromHit, ReturnValue) == 0x000024, "Member 'VoxelCubicLibrary_GetCubicVoxelPositionFromHit::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelCubicLibrary.GetCubicVoxelValue
// 0x0018 (0x0018 - 0x0000)
struct VoxelCubicLibrary_GetCubicVoxelValue final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCubicLibrary_GetCubicVoxelValue) == 0x000008, "Wrong alignment on VoxelCubicLibrary_GetCubicVoxelValue");
static_assert(sizeof(VoxelCubicLibrary_GetCubicVoxelValue) == 0x000018, "Wrong size on VoxelCubicLibrary_GetCubicVoxelValue");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelValue, World) == 0x000000, "Member 'VoxelCubicLibrary_GetCubicVoxelValue::World' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelValue, Position) == 0x000008, "Member 'VoxelCubicLibrary_GetCubicVoxelValue::Position' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_GetCubicVoxelValue, ReturnValue) == 0x000014, "Member 'VoxelCubicLibrary_GetCubicVoxelValue::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelCubicLibrary.SetCubicVoxelValue
// 0x0018 (0x0018 - 0x0000)
struct VoxelCubicLibrary_SetCubicVoxelValue final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCubicLibrary_SetCubicVoxelValue) == 0x000008, "Wrong alignment on VoxelCubicLibrary_SetCubicVoxelValue");
static_assert(sizeof(VoxelCubicLibrary_SetCubicVoxelValue) == 0x000018, "Wrong size on VoxelCubicLibrary_SetCubicVoxelValue");
static_assert(offsetof(VoxelCubicLibrary_SetCubicVoxelValue, World) == 0x000000, "Member 'VoxelCubicLibrary_SetCubicVoxelValue::World' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_SetCubicVoxelValue, Position) == 0x000008, "Member 'VoxelCubicLibrary_SetCubicVoxelValue::Position' has a wrong offset!");
static_assert(offsetof(VoxelCubicLibrary_SetCubicVoxelValue, bValue) == 0x000014, "Member 'VoxelCubicLibrary_SetCubicVoxelValue::bValue' has a wrong offset!");

// Function Voxel.VoxelDataAsset.GetBounds
// 0x0018 (0x0018 - 0x0000)
struct VoxelDataAsset_GetBounds final
{
public:
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataAsset_GetBounds) == 0x000004, "Wrong alignment on VoxelDataAsset_GetBounds");
static_assert(sizeof(VoxelDataAsset_GetBounds) == 0x000018, "Wrong size on VoxelDataAsset_GetBounds");
static_assert(offsetof(VoxelDataAsset_GetBounds, ReturnValue) == 0x000000, "Member 'VoxelDataAsset_GetBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelDataAsset.GetSize
// 0x000C (0x000C - 0x0000)
struct VoxelDataAsset_GetSize final
{
public:
	struct FIntVector                             ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataAsset_GetSize) == 0x000004, "Wrong alignment on VoxelDataAsset_GetSize");
static_assert(sizeof(VoxelDataAsset_GetSize) == 0x00000C, "Wrong size on VoxelDataAsset_GetSize");
static_assert(offsetof(VoxelDataAsset_GetSize, ReturnValue) == 0x000000, "Member 'VoxelDataAsset_GetSize::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelDataItemActor.K2_AddItemToWorld
// 0x0008 (0x0008 - 0x0000)
struct VoxelDataItemActor_K2_AddItemToWorld final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataItemActor_K2_AddItemToWorld) == 0x000008, "Wrong alignment on VoxelDataItemActor_K2_AddItemToWorld");
static_assert(sizeof(VoxelDataItemActor_K2_AddItemToWorld) == 0x000008, "Wrong size on VoxelDataItemActor_K2_AddItemToWorld");
static_assert(offsetof(VoxelDataItemActor_K2_AddItemToWorld, World) == 0x000000, "Member 'VoxelDataItemActor_K2_AddItemToWorld::World' has a wrong offset!");

// Function Voxel.VoxelDataTools.CacheMaterials
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_CacheMaterials final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CacheMaterials) == 0x000008, "Wrong alignment on VoxelDataTools_CacheMaterials");
static_assert(sizeof(VoxelDataTools_CacheMaterials) == 0x000028, "Wrong size on VoxelDataTools_CacheMaterials");
static_assert(offsetof(VoxelDataTools_CacheMaterials, World) == 0x000000, "Member 'VoxelDataTools_CacheMaterials::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterials, Bounds) == 0x000008, "Member 'VoxelDataTools_CacheMaterials::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterials, bMultiThreaded) == 0x000020, "Member 'VoxelDataTools_CacheMaterials::bMultiThreaded' has a wrong offset!");

// Function Voxel.VoxelDataTools.CacheMaterialsAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_CacheMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CacheMaterialsAsync) == 0x000008, "Wrong alignment on VoxelDataTools_CacheMaterialsAsync");
static_assert(sizeof(VoxelDataTools_CacheMaterialsAsync) == 0x000048, "Wrong size on VoxelDataTools_CacheMaterialsAsync");
static_assert(offsetof(VoxelDataTools_CacheMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_CacheMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_CacheMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterialsAsync, World) == 0x000020, "Member 'VoxelDataTools_CacheMaterialsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterialsAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_CacheMaterialsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheMaterialsAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_CacheMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.CacheValues
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_CacheValues final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CacheValues) == 0x000008, "Wrong alignment on VoxelDataTools_CacheValues");
static_assert(sizeof(VoxelDataTools_CacheValues) == 0x000028, "Wrong size on VoxelDataTools_CacheValues");
static_assert(offsetof(VoxelDataTools_CacheValues, World) == 0x000000, "Member 'VoxelDataTools_CacheValues::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValues, Bounds) == 0x000008, "Member 'VoxelDataTools_CacheValues::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValues, bMultiThreaded) == 0x000020, "Member 'VoxelDataTools_CacheValues::bMultiThreaded' has a wrong offset!");

// Function Voxel.VoxelDataTools.CacheValuesAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_CacheValuesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CacheValuesAsync) == 0x000008, "Wrong alignment on VoxelDataTools_CacheValuesAsync");
static_assert(sizeof(VoxelDataTools_CacheValuesAsync) == 0x000048, "Wrong size on VoxelDataTools_CacheValuesAsync");
static_assert(offsetof(VoxelDataTools_CacheValuesAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_CacheValuesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValuesAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_CacheValuesAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValuesAsync, World) == 0x000020, "Member 'VoxelDataTools_CacheValuesAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValuesAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_CacheValuesAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CacheValuesAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_CacheValuesAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckForSingleMaterials
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_CheckForSingleMaterials final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_CheckForSingleMaterials) == 0x000008, "Wrong alignment on VoxelDataTools_CheckForSingleMaterials");
static_assert(sizeof(VoxelDataTools_CheckForSingleMaterials) == 0x000020, "Wrong size on VoxelDataTools_CheckForSingleMaterials");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterials, World) == 0x000000, "Member 'VoxelDataTools_CheckForSingleMaterials::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterials, Bounds) == 0x000008, "Member 'VoxelDataTools_CheckForSingleMaterials::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckForSingleMaterialsAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_CheckForSingleMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CheckForSingleMaterialsAsync) == 0x000008, "Wrong alignment on VoxelDataTools_CheckForSingleMaterialsAsync");
static_assert(sizeof(VoxelDataTools_CheckForSingleMaterialsAsync) == 0x000048, "Wrong size on VoxelDataTools_CheckForSingleMaterialsAsync");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_CheckForSingleMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_CheckForSingleMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterialsAsync, World) == 0x000020, "Member 'VoxelDataTools_CheckForSingleMaterialsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterialsAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_CheckForSingleMaterialsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleMaterialsAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_CheckForSingleMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckForSingleValues
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_CheckForSingleValues final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_CheckForSingleValues) == 0x000008, "Wrong alignment on VoxelDataTools_CheckForSingleValues");
static_assert(sizeof(VoxelDataTools_CheckForSingleValues) == 0x000020, "Wrong size on VoxelDataTools_CheckForSingleValues");
static_assert(offsetof(VoxelDataTools_CheckForSingleValues, World) == 0x000000, "Member 'VoxelDataTools_CheckForSingleValues::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleValues, Bounds) == 0x000008, "Member 'VoxelDataTools_CheckForSingleValues::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckForSingleValuesAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_CheckForSingleValuesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CheckForSingleValuesAsync) == 0x000008, "Wrong alignment on VoxelDataTools_CheckForSingleValuesAsync");
static_assert(sizeof(VoxelDataTools_CheckForSingleValuesAsync) == 0x000048, "Wrong size on VoxelDataTools_CheckForSingleValuesAsync");
static_assert(offsetof(VoxelDataTools_CheckForSingleValuesAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_CheckForSingleValuesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleValuesAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_CheckForSingleValuesAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleValuesAsync, World) == 0x000020, "Member 'VoxelDataTools_CheckForSingleValuesAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleValuesAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_CheckForSingleValuesAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckForSingleValuesAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_CheckForSingleValuesAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckIfSameAsGenerator
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_CheckIfSameAsGenerator final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_CheckIfSameAsGenerator) == 0x000008, "Wrong alignment on VoxelDataTools_CheckIfSameAsGenerator");
static_assert(sizeof(VoxelDataTools_CheckIfSameAsGenerator) == 0x000020, "Wrong size on VoxelDataTools_CheckIfSameAsGenerator");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGenerator, World) == 0x000000, "Member 'VoxelDataTools_CheckIfSameAsGenerator::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGenerator, Bounds) == 0x000008, "Member 'VoxelDataTools_CheckIfSameAsGenerator::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.CheckIfSameAsGeneratorAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_CheckIfSameAsGeneratorAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CheckIfSameAsGeneratorAsync) == 0x000008, "Wrong alignment on VoxelDataTools_CheckIfSameAsGeneratorAsync");
static_assert(sizeof(VoxelDataTools_CheckIfSameAsGeneratorAsync) == 0x000048, "Wrong size on VoxelDataTools_CheckIfSameAsGeneratorAsync");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGeneratorAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_CheckIfSameAsGeneratorAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGeneratorAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_CheckIfSameAsGeneratorAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGeneratorAsync, World) == 0x000020, "Member 'VoxelDataTools_CheckIfSameAsGeneratorAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGeneratorAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_CheckIfSameAsGeneratorAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CheckIfSameAsGeneratorAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_CheckIfSameAsGeneratorAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearCachedMaterials
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_ClearCachedMaterials final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_ClearCachedMaterials) == 0x000008, "Wrong alignment on VoxelDataTools_ClearCachedMaterials");
static_assert(sizeof(VoxelDataTools_ClearCachedMaterials) == 0x000020, "Wrong size on VoxelDataTools_ClearCachedMaterials");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterials, World) == 0x000000, "Member 'VoxelDataTools_ClearCachedMaterials::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterials, Bounds) == 0x000008, "Member 'VoxelDataTools_ClearCachedMaterials::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearCachedMaterialsAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_ClearCachedMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_ClearCachedMaterialsAsync) == 0x000008, "Wrong alignment on VoxelDataTools_ClearCachedMaterialsAsync");
static_assert(sizeof(VoxelDataTools_ClearCachedMaterialsAsync) == 0x000048, "Wrong size on VoxelDataTools_ClearCachedMaterialsAsync");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_ClearCachedMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_ClearCachedMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterialsAsync, World) == 0x000020, "Member 'VoxelDataTools_ClearCachedMaterialsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterialsAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_ClearCachedMaterialsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedMaterialsAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_ClearCachedMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearCachedValues
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_ClearCachedValues final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_ClearCachedValues) == 0x000008, "Wrong alignment on VoxelDataTools_ClearCachedValues");
static_assert(sizeof(VoxelDataTools_ClearCachedValues) == 0x000020, "Wrong size on VoxelDataTools_ClearCachedValues");
static_assert(offsetof(VoxelDataTools_ClearCachedValues, World) == 0x000000, "Member 'VoxelDataTools_ClearCachedValues::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedValues, Bounds) == 0x000008, "Member 'VoxelDataTools_ClearCachedValues::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearCachedValuesAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_ClearCachedValuesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_ClearCachedValuesAsync) == 0x000008, "Wrong alignment on VoxelDataTools_ClearCachedValuesAsync");
static_assert(sizeof(VoxelDataTools_ClearCachedValuesAsync) == 0x000048, "Wrong size on VoxelDataTools_ClearCachedValuesAsync");
static_assert(offsetof(VoxelDataTools_ClearCachedValuesAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_ClearCachedValuesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedValuesAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_ClearCachedValuesAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedValuesAsync, World) == 0x000020, "Member 'VoxelDataTools_ClearCachedValuesAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedValuesAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_ClearCachedValuesAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearCachedValuesAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_ClearCachedValuesAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearUnusedMaterials
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_ClearUnusedMaterials final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_ClearUnusedMaterials) == 0x000008, "Wrong alignment on VoxelDataTools_ClearUnusedMaterials");
static_assert(sizeof(VoxelDataTools_ClearUnusedMaterials) == 0x000020, "Wrong size on VoxelDataTools_ClearUnusedMaterials");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterials, World) == 0x000000, "Member 'VoxelDataTools_ClearUnusedMaterials::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterials, Bounds) == 0x000008, "Member 'VoxelDataTools_ClearUnusedMaterials::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.ClearUnusedMaterialsAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_ClearUnusedMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_ClearUnusedMaterialsAsync) == 0x000008, "Wrong alignment on VoxelDataTools_ClearUnusedMaterialsAsync");
static_assert(sizeof(VoxelDataTools_ClearUnusedMaterialsAsync) == 0x000048, "Wrong size on VoxelDataTools_ClearUnusedMaterialsAsync");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_ClearUnusedMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_ClearUnusedMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterialsAsync, World) == 0x000020, "Member 'VoxelDataTools_ClearUnusedMaterialsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterialsAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_ClearUnusedMaterialsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_ClearUnusedMaterialsAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_ClearUnusedMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.CompressIntoHeightmap
// 0x0018 (0x0018 - 0x0000)
struct VoxelDataTools_CompressIntoHeightmap final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelHeightmapAsset*                   HeightmapAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeightmapAssetMatchesWorld;                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_CompressIntoHeightmap) == 0x000008, "Wrong alignment on VoxelDataTools_CompressIntoHeightmap");
static_assert(sizeof(VoxelDataTools_CompressIntoHeightmap) == 0x000018, "Wrong size on VoxelDataTools_CompressIntoHeightmap");
static_assert(offsetof(VoxelDataTools_CompressIntoHeightmap, World) == 0x000000, "Member 'VoxelDataTools_CompressIntoHeightmap::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CompressIntoHeightmap, HeightmapAsset) == 0x000008, "Member 'VoxelDataTools_CompressIntoHeightmap::HeightmapAsset' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_CompressIntoHeightmap, bHeightmapAssetMatchesWorld) == 0x000010, "Member 'VoxelDataTools_CompressIntoHeightmap::bHeightmapAssetMatchesWorld' has a wrong offset!");

// Function Voxel.VoxelDataTools.FindClosestNonEmptyVoxel
// 0x0030 (0x0030 - 0x0000)
struct VoxelDataTools_FindClosestNonEmptyVoxel final
{
public:
	struct FVoxelFindClosestNonEmptyVoxelResult   Result;                                            // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadMaterial;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_FindClosestNonEmptyVoxel) == 0x000008, "Wrong alignment on VoxelDataTools_FindClosestNonEmptyVoxel");
static_assert(sizeof(VoxelDataTools_FindClosestNonEmptyVoxel) == 0x000030, "Wrong size on VoxelDataTools_FindClosestNonEmptyVoxel");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxel, Result) == 0x000000, "Member 'VoxelDataTools_FindClosestNonEmptyVoxel::Result' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxel, World) == 0x000018, "Member 'VoxelDataTools_FindClosestNonEmptyVoxel::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxel, Position) == 0x000020, "Member 'VoxelDataTools_FindClosestNonEmptyVoxel::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxel, bReadMaterial) == 0x00002C, "Member 'VoxelDataTools_FindClosestNonEmptyVoxel::bReadMaterial' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxel, bConvertToVoxelSpace) == 0x00002D, "Member 'VoxelDataTools_FindClosestNonEmptyVoxel::bConvertToVoxelSpace' has a wrong offset!");

// Function Voxel.VoxelDataTools.FindClosestNonEmptyVoxelAsync
// 0x0050 (0x0050 - 0x0000)
struct VoxelDataTools_FindClosestNonEmptyVoxelAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelFindClosestNonEmptyVoxelResult   Result;                                            // 0x0020(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadMaterial;                                     // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x004E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_FindClosestNonEmptyVoxelAsync) == 0x000008, "Wrong alignment on VoxelDataTools_FindClosestNonEmptyVoxelAsync");
static_assert(sizeof(VoxelDataTools_FindClosestNonEmptyVoxelAsync) == 0x000050, "Wrong size on VoxelDataTools_FindClosestNonEmptyVoxelAsync");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, Result) == 0x000020, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::Result' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, World) == 0x000038, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, Position) == 0x000040, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, bReadMaterial) == 0x00004C, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::bReadMaterial' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, bConvertToVoxelSpace) == 0x00004D, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_FindClosestNonEmptyVoxelAsync, bHideLatentWarnings) == 0x00004E, "Member 'VoxelDataTools_FindClosestNonEmptyVoxelAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetCompressedSave
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_GetCompressedSave final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelCompressedWorldSave              OutSave;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_GetCompressedSave) == 0x000008, "Wrong alignment on VoxelDataTools_GetCompressedSave");
static_assert(sizeof(VoxelDataTools_GetCompressedSave) == 0x000028, "Wrong size on VoxelDataTools_GetCompressedSave");
static_assert(offsetof(VoxelDataTools_GetCompressedSave, World) == 0x000000, "Member 'VoxelDataTools_GetCompressedSave::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetCompressedSave, OutSave) == 0x000008, "Member 'VoxelDataTools_GetCompressedSave::OutSave' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetCompressedSaveAsync
// 0x0050 (0x0050 - 0x0000)
struct VoxelDataTools_GetCompressedSaveAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelCompressedWorldSave              OutSave;                                           // 0x0028(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetCompressedSaveAsync) == 0x000008, "Wrong alignment on VoxelDataTools_GetCompressedSaveAsync");
static_assert(sizeof(VoxelDataTools_GetCompressedSaveAsync) == 0x000050, "Wrong size on VoxelDataTools_GetCompressedSaveAsync");
static_assert(offsetof(VoxelDataTools_GetCompressedSaveAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_GetCompressedSaveAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetCompressedSaveAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_GetCompressedSaveAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetCompressedSaveAsync, World) == 0x000020, "Member 'VoxelDataTools_GetCompressedSaveAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetCompressedSaveAsync, OutSave) == 0x000028, "Member 'VoxelDataTools_GetCompressedSaveAsync::OutSave' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetCompressedSaveAsync, bHideLatentWarnings) == 0x000048, "Member 'VoxelDataTools_GetCompressedSaveAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetDataMemoryUsageInMB
// 0x0018 (0x0018 - 0x0000)
struct VoxelDataTools_GetDataMemoryUsageInMB final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelDataMemoryUsageInMB              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_GetDataMemoryUsageInMB) == 0x000008, "Wrong alignment on VoxelDataTools_GetDataMemoryUsageInMB");
static_assert(sizeof(VoxelDataTools_GetDataMemoryUsageInMB) == 0x000018, "Wrong size on VoxelDataTools_GetDataMemoryUsageInMB");
static_assert(offsetof(VoxelDataTools_GetDataMemoryUsageInMB, World) == 0x000000, "Member 'VoxelDataTools_GetDataMemoryUsageInMB::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetDataMemoryUsageInMB, ReturnValue) == 0x000008, "Member 'VoxelDataTools_GetDataMemoryUsageInMB::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetInterpolatedValue
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_GetInterpolatedValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetInterpolatedValue) == 0x000008, "Wrong alignment on VoxelDataTools_GetInterpolatedValue");
static_assert(sizeof(VoxelDataTools_GetInterpolatedValue) == 0x000020, "Wrong size on VoxelDataTools_GetInterpolatedValue");
static_assert(offsetof(VoxelDataTools_GetInterpolatedValue, Value) == 0x000000, "Member 'VoxelDataTools_GetInterpolatedValue::Value' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetInterpolatedValue, World) == 0x000008, "Member 'VoxelDataTools_GetInterpolatedValue::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetInterpolatedValue, Position) == 0x000010, "Member 'VoxelDataTools_GetInterpolatedValue::Position' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetMaterial
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_GetMaterial final
{
public:
	struct FVoxelMaterial                         Material;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetMaterial) == 0x000008, "Wrong alignment on VoxelDataTools_GetMaterial");
static_assert(sizeof(VoxelDataTools_GetMaterial) == 0x000020, "Wrong size on VoxelDataTools_GetMaterial");
static_assert(offsetof(VoxelDataTools_GetMaterial, Material) == 0x000000, "Member 'VoxelDataTools_GetMaterial::Material' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterial, World) == 0x000008, "Member 'VoxelDataTools_GetMaterial::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterial, Position) == 0x000010, "Member 'VoxelDataTools_GetMaterial::Position' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetMaterialAsync
// 0x0040 (0x0040 - 0x0000)
struct VoxelDataTools_GetMaterialAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            World;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetMaterialAsync) == 0x000008, "Wrong alignment on VoxelDataTools_GetMaterialAsync");
static_assert(sizeof(VoxelDataTools_GetMaterialAsync) == 0x000040, "Wrong size on VoxelDataTools_GetMaterialAsync");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_GetMaterialAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_GetMaterialAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, Material) == 0x000020, "Member 'VoxelDataTools_GetMaterialAsync::Material' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, World) == 0x000028, "Member 'VoxelDataTools_GetMaterialAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, Position) == 0x000030, "Member 'VoxelDataTools_GetMaterialAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetMaterialAsync, bHideLatentWarnings) == 0x00003C, "Member 'VoxelDataTools_GetMaterialAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetSave
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_GetSave final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelUncompressedWorldSave            OutSave;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_GetSave) == 0x000008, "Wrong alignment on VoxelDataTools_GetSave");
static_assert(sizeof(VoxelDataTools_GetSave) == 0x000028, "Wrong size on VoxelDataTools_GetSave");
static_assert(offsetof(VoxelDataTools_GetSave, World) == 0x000000, "Member 'VoxelDataTools_GetSave::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetSave, OutSave) == 0x000008, "Member 'VoxelDataTools_GetSave::OutSave' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetSaveAsync
// 0x0050 (0x0050 - 0x0000)
struct VoxelDataTools_GetSaveAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelUncompressedWorldSave            OutSave;                                           // 0x0028(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetSaveAsync) == 0x000008, "Wrong alignment on VoxelDataTools_GetSaveAsync");
static_assert(sizeof(VoxelDataTools_GetSaveAsync) == 0x000050, "Wrong size on VoxelDataTools_GetSaveAsync");
static_assert(offsetof(VoxelDataTools_GetSaveAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_GetSaveAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetSaveAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_GetSaveAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetSaveAsync, World) == 0x000020, "Member 'VoxelDataTools_GetSaveAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetSaveAsync, OutSave) == 0x000028, "Member 'VoxelDataTools_GetSaveAsync::OutSave' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetSaveAsync, bHideLatentWarnings) == 0x000048, "Member 'VoxelDataTools_GetSaveAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetValue
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_GetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetValue) == 0x000008, "Wrong alignment on VoxelDataTools_GetValue");
static_assert(sizeof(VoxelDataTools_GetValue) == 0x000020, "Wrong size on VoxelDataTools_GetValue");
static_assert(offsetof(VoxelDataTools_GetValue, Value) == 0x000000, "Member 'VoxelDataTools_GetValue::Value' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValue, World) == 0x000008, "Member 'VoxelDataTools_GetValue::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValue, Position) == 0x000010, "Member 'VoxelDataTools_GetValue::Position' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetValueAsync
// 0x0040 (0x0040 - 0x0000)
struct VoxelDataTools_GetValueAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVoxelWorld*                            World;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetValueAsync) == 0x000008, "Wrong alignment on VoxelDataTools_GetValueAsync");
static_assert(sizeof(VoxelDataTools_GetValueAsync) == 0x000040, "Wrong size on VoxelDataTools_GetValueAsync");
static_assert(offsetof(VoxelDataTools_GetValueAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_GetValueAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValueAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_GetValueAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValueAsync, Value) == 0x000020, "Member 'VoxelDataTools_GetValueAsync::Value' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValueAsync, World) == 0x000028, "Member 'VoxelDataTools_GetValueAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValueAsync, Position) == 0x000030, "Member 'VoxelDataTools_GetValueAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetValueAsync, bHideLatentWarnings) == 0x00003C, "Member 'VoxelDataTools_GetValueAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetVoxelsValueAndMaterial
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_GetVoxelsValueAndMaterial final
{
public:
	TArray<struct FVoxelValueMaterial>            Voxels;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     Positions;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_GetVoxelsValueAndMaterial) == 0x000008, "Wrong alignment on VoxelDataTools_GetVoxelsValueAndMaterial");
static_assert(sizeof(VoxelDataTools_GetVoxelsValueAndMaterial) == 0x000028, "Wrong size on VoxelDataTools_GetVoxelsValueAndMaterial");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterial, Voxels) == 0x000000, "Member 'VoxelDataTools_GetVoxelsValueAndMaterial::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterial, World) == 0x000010, "Member 'VoxelDataTools_GetVoxelsValueAndMaterial::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterial, Positions) == 0x000018, "Member 'VoxelDataTools_GetVoxelsValueAndMaterial::Positions' has a wrong offset!");

// Function Voxel.VoxelDataTools.GetVoxelsValueAndMaterialAsync
// 0x0050 (0x0050 - 0x0000)
struct VoxelDataTools_GetVoxelsValueAndMaterialAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FVoxelValueMaterial>            Voxels;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     Positions;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_GetVoxelsValueAndMaterialAsync) == 0x000008, "Wrong alignment on VoxelDataTools_GetVoxelsValueAndMaterialAsync");
static_assert(sizeof(VoxelDataTools_GetVoxelsValueAndMaterialAsync) == 0x000050, "Wrong size on VoxelDataTools_GetVoxelsValueAndMaterialAsync");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, Voxels) == 0x000020, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, World) == 0x000030, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, Positions) == 0x000038, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::Positions' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_GetVoxelsValueAndMaterialAsync, bHideLatentWarnings) == 0x000048, "Member 'VoxelDataTools_GetVoxelsValueAndMaterialAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.LoadFromCompressedSave
// 0x0030 (0x0030 - 0x0000)
struct VoxelDataTools_LoadFromCompressedSave final
{
public:
	const class AVoxelWorld*                      World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelCompressedWorldSave              Save;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_LoadFromCompressedSave) == 0x000008, "Wrong alignment on VoxelDataTools_LoadFromCompressedSave");
static_assert(sizeof(VoxelDataTools_LoadFromCompressedSave) == 0x000030, "Wrong size on VoxelDataTools_LoadFromCompressedSave");
static_assert(offsetof(VoxelDataTools_LoadFromCompressedSave, World) == 0x000000, "Member 'VoxelDataTools_LoadFromCompressedSave::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_LoadFromCompressedSave, Save) == 0x000008, "Member 'VoxelDataTools_LoadFromCompressedSave::Save' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_LoadFromCompressedSave, ReturnValue) == 0x000028, "Member 'VoxelDataTools_LoadFromCompressedSave::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelDataTools.LoadFromSave
// 0x0030 (0x0030 - 0x0000)
struct VoxelDataTools_LoadFromSave final
{
public:
	const class AVoxelWorld*                      World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelUncompressedWorldSave            Save;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_LoadFromSave) == 0x000008, "Wrong alignment on VoxelDataTools_LoadFromSave");
static_assert(sizeof(VoxelDataTools_LoadFromSave) == 0x000030, "Wrong size on VoxelDataTools_LoadFromSave");
static_assert(offsetof(VoxelDataTools_LoadFromSave, World) == 0x000000, "Member 'VoxelDataTools_LoadFromSave::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_LoadFromSave, Save) == 0x000008, "Member 'VoxelDataTools_LoadFromSave::Save' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_LoadFromSave, ReturnValue) == 0x000028, "Member 'VoxelDataTools_LoadFromSave::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelDataTools.RoundToGenerator
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_RoundToGenerator final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveNormals;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_RoundToGenerator) == 0x000008, "Wrong alignment on VoxelDataTools_RoundToGenerator");
static_assert(sizeof(VoxelDataTools_RoundToGenerator) == 0x000028, "Wrong size on VoxelDataTools_RoundToGenerator");
static_assert(offsetof(VoxelDataTools_RoundToGenerator, World) == 0x000000, "Member 'VoxelDataTools_RoundToGenerator::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGenerator, Bounds) == 0x000008, "Member 'VoxelDataTools_RoundToGenerator::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGenerator, bPreserveNormals) == 0x000020, "Member 'VoxelDataTools_RoundToGenerator::bPreserveNormals' has a wrong offset!");

// Function Voxel.VoxelDataTools.RoundToGeneratorAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_RoundToGeneratorAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreserveNormals;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_RoundToGeneratorAsync) == 0x000008, "Wrong alignment on VoxelDataTools_RoundToGeneratorAsync");
static_assert(sizeof(VoxelDataTools_RoundToGeneratorAsync) == 0x000048, "Wrong size on VoxelDataTools_RoundToGeneratorAsync");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_RoundToGeneratorAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_RoundToGeneratorAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, World) == 0x000020, "Member 'VoxelDataTools_RoundToGeneratorAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_RoundToGeneratorAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, bPreserveNormals) == 0x000040, "Member 'VoxelDataTools_RoundToGeneratorAsync::bPreserveNormals' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundToGeneratorAsync, bHideLatentWarnings) == 0x000041, "Member 'VoxelDataTools_RoundToGeneratorAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.RoundVoxels
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_RoundVoxels final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelDataTools_RoundVoxels) == 0x000008, "Wrong alignment on VoxelDataTools_RoundVoxels");
static_assert(sizeof(VoxelDataTools_RoundVoxels) == 0x000020, "Wrong size on VoxelDataTools_RoundVoxels");
static_assert(offsetof(VoxelDataTools_RoundVoxels, World) == 0x000000, "Member 'VoxelDataTools_RoundVoxels::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundVoxels, Bounds) == 0x000008, "Member 'VoxelDataTools_RoundVoxels::Bounds' has a wrong offset!");

// Function Voxel.VoxelDataTools.RoundVoxelsAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_RoundVoxelsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_RoundVoxelsAsync) == 0x000008, "Wrong alignment on VoxelDataTools_RoundVoxelsAsync");
static_assert(sizeof(VoxelDataTools_RoundVoxelsAsync) == 0x000048, "Wrong size on VoxelDataTools_RoundVoxelsAsync");
static_assert(offsetof(VoxelDataTools_RoundVoxelsAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_RoundVoxelsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundVoxelsAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_RoundVoxelsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundVoxelsAsync, World) == 0x000020, "Member 'VoxelDataTools_RoundVoxelsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundVoxelsAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_RoundVoxelsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_RoundVoxelsAsync, bHideLatentWarnings) == 0x000040, "Member 'VoxelDataTools_RoundVoxelsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetBoxAsDirty
// 0x0028 (0x0028 - 0x0000)
struct VoxelDataTools_SetBoxAsDirty final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirtyValues;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirtyMaterials;                                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetBoxAsDirty) == 0x000008, "Wrong alignment on VoxelDataTools_SetBoxAsDirty");
static_assert(sizeof(VoxelDataTools_SetBoxAsDirty) == 0x000028, "Wrong size on VoxelDataTools_SetBoxAsDirty");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirty, World) == 0x000000, "Member 'VoxelDataTools_SetBoxAsDirty::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirty, Bounds) == 0x000008, "Member 'VoxelDataTools_SetBoxAsDirty::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirty, bDirtyValues) == 0x000020, "Member 'VoxelDataTools_SetBoxAsDirty::bDirtyValues' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirty, bDirtyMaterials) == 0x000021, "Member 'VoxelDataTools_SetBoxAsDirty::bDirtyMaterials' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetBoxAsDirtyAsync
// 0x0048 (0x0048 - 0x0000)
struct VoxelDataTools_SetBoxAsDirtyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0028(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirtyValues;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirtyMaterials;                                   // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetBoxAsDirtyAsync) == 0x000008, "Wrong alignment on VoxelDataTools_SetBoxAsDirtyAsync");
static_assert(sizeof(VoxelDataTools_SetBoxAsDirtyAsync) == 0x000048, "Wrong size on VoxelDataTools_SetBoxAsDirtyAsync");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, World) == 0x000020, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, Bounds) == 0x000028, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, bDirtyValues) == 0x000040, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::bDirtyValues' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, bDirtyMaterials) == 0x000041, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::bDirtyMaterials' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetBoxAsDirtyAsync, bHideLatentWarnings) == 0x000042, "Member 'VoxelDataTools_SetBoxAsDirtyAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetMaterial
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_SetMaterial final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Mask;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetMaterial) == 0x000008, "Wrong alignment on VoxelDataTools_SetMaterial");
static_assert(sizeof(VoxelDataTools_SetMaterial) == 0x000020, "Wrong size on VoxelDataTools_SetMaterial");
static_assert(offsetof(VoxelDataTools_SetMaterial, World) == 0x000000, "Member 'VoxelDataTools_SetMaterial::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterial, Position) == 0x000008, "Member 'VoxelDataTools_SetMaterial::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterial, Material) == 0x000014, "Member 'VoxelDataTools_SetMaterial::Material' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterial, Mask) == 0x000018, "Member 'VoxelDataTools_SetMaterial::Mask' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetMaterialAsync
// 0x0038 (0x0038 - 0x0000)
struct VoxelDataTools_SetMaterialAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelMaterial                         Material;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetMaterialAsync) == 0x000008, "Wrong alignment on VoxelDataTools_SetMaterialAsync");
static_assert(sizeof(VoxelDataTools_SetMaterialAsync) == 0x000038, "Wrong size on VoxelDataTools_SetMaterialAsync");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_SetMaterialAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_SetMaterialAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, World) == 0x000020, "Member 'VoxelDataTools_SetMaterialAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, Position) == 0x000028, "Member 'VoxelDataTools_SetMaterialAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, Material) == 0x000034, "Member 'VoxelDataTools_SetMaterialAsync::Material' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetMaterialAsync, bHideLatentWarnings) == 0x000035, "Member 'VoxelDataTools_SetMaterialAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetValue
// 0x0020 (0x0020 - 0x0000)
struct VoxelDataTools_SetValue final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetValue) == 0x000008, "Wrong alignment on VoxelDataTools_SetValue");
static_assert(sizeof(VoxelDataTools_SetValue) == 0x000020, "Wrong size on VoxelDataTools_SetValue");
static_assert(offsetof(VoxelDataTools_SetValue, World) == 0x000000, "Member 'VoxelDataTools_SetValue::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValue, Position) == 0x000008, "Member 'VoxelDataTools_SetValue::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValue, Value) == 0x000014, "Member 'VoxelDataTools_SetValue::Value' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValue, bUpdateRender) == 0x000018, "Member 'VoxelDataTools_SetValue::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelDataTools.SetValueAsync
// 0x0040 (0x0040 - 0x0000)
struct VoxelDataTools_SetValueAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDataTools_SetValueAsync) == 0x000008, "Wrong alignment on VoxelDataTools_SetValueAsync");
static_assert(sizeof(VoxelDataTools_SetValueAsync) == 0x000040, "Wrong size on VoxelDataTools_SetValueAsync");
static_assert(offsetof(VoxelDataTools_SetValueAsync, WorldContextObject) == 0x000000, "Member 'VoxelDataTools_SetValueAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValueAsync, LatentInfo) == 0x000008, "Member 'VoxelDataTools_SetValueAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValueAsync, World) == 0x000020, "Member 'VoxelDataTools_SetValueAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValueAsync, Position) == 0x000028, "Member 'VoxelDataTools_SetValueAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValueAsync, Value) == 0x000034, "Member 'VoxelDataTools_SetValueAsync::Value' has a wrong offset!");
static_assert(offsetof(VoxelDataTools_SetValueAsync, bHideLatentWarnings) == 0x000038, "Member 'VoxelDataTools_SetValueAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelDebugUtilities.DebugVoxelsInsideBounds
// 0x0050 (0x0050 - 0x0000)
struct VoxelDebugUtilities_DebugVoxelsInsideBounds final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDensities;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x003C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDebugUtilities_DebugVoxelsInsideBounds) == 0x000008, "Wrong alignment on VoxelDebugUtilities_DebugVoxelsInsideBounds");
static_assert(sizeof(VoxelDebugUtilities_DebugVoxelsInsideBounds) == 0x000050, "Wrong size on VoxelDebugUtilities_DebugVoxelsInsideBounds");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, World) == 0x000000, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::World' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, Bounds) == 0x000008, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, Color) == 0x000020, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::Color' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, LifeTime) == 0x000030, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::LifeTime' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, Thickness) == 0x000034, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::Thickness' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, bDebugDensities) == 0x000038, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::bDebugDensities' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DebugVoxelsInsideBounds, TextColor) == 0x00003C, "Member 'VoxelDebugUtilities_DebugVoxelsInsideBounds::TextColor' has a wrong offset!");

// Function Voxel.VoxelDebugUtilities.DrawDataOctree
// 0x0028 (0x0028 - 0x0000)
struct VoxelDebugUtilities_DrawDataOctree final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelDataType                                DataType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSingle;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCached;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 SingleColor;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SingleDirtyColor;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CachedColor;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DirtyColor;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDebugUtilities_DrawDataOctree) == 0x000008, "Wrong alignment on VoxelDebugUtilities_DrawDataOctree");
static_assert(sizeof(VoxelDebugUtilities_DrawDataOctree) == 0x000028, "Wrong size on VoxelDebugUtilities_DrawDataOctree");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, World) == 0x000000, "Member 'VoxelDebugUtilities_DrawDataOctree::World' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, DataType) == 0x000008, "Member 'VoxelDebugUtilities_DrawDataOctree::DataType' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, LifeTime) == 0x00000C, "Member 'VoxelDebugUtilities_DrawDataOctree::LifeTime' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, bShowSingle) == 0x000010, "Member 'VoxelDebugUtilities_DrawDataOctree::bShowSingle' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, bShowCached) == 0x000011, "Member 'VoxelDebugUtilities_DrawDataOctree::bShowCached' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, SingleColor) == 0x000014, "Member 'VoxelDebugUtilities_DrawDataOctree::SingleColor' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, SingleDirtyColor) == 0x000018, "Member 'VoxelDebugUtilities_DrawDataOctree::SingleDirtyColor' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, CachedColor) == 0x00001C, "Member 'VoxelDebugUtilities_DrawDataOctree::CachedColor' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDataOctree, DirtyColor) == 0x000020, "Member 'VoxelDebugUtilities_DrawDataOctree::DirtyColor' has a wrong offset!");

// Function Voxel.VoxelDebugUtilities.DrawDebugIntBox
// 0x0070 (0x0070 - 0x0000)
struct VoxelDebugUtilities_DrawDebugIntBox final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0058(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelDebugUtilities_DrawDebugIntBox) == 0x000010, "Wrong alignment on VoxelDebugUtilities_DrawDebugIntBox");
static_assert(sizeof(VoxelDebugUtilities_DrawDebugIntBox) == 0x000070, "Wrong size on VoxelDebugUtilities_DrawDebugIntBox");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, World) == 0x000000, "Member 'VoxelDebugUtilities_DrawDebugIntBox::World' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, Bounds) == 0x000008, "Member 'VoxelDebugUtilities_DrawDebugIntBox::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, Transform) == 0x000020, "Member 'VoxelDebugUtilities_DrawDebugIntBox::Transform' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, LifeTime) == 0x000050, "Member 'VoxelDebugUtilities_DrawDebugIntBox::LifeTime' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, Thickness) == 0x000054, "Member 'VoxelDebugUtilities_DrawDebugIntBox::Thickness' has a wrong offset!");
static_assert(offsetof(VoxelDebugUtilities_DrawDebugIntBox, Color) == 0x000058, "Member 'VoxelDebugUtilities_DrawDebugIntBox::Color' has a wrong offset!");

// Function Voxel.VoxelErosion.GetSedimentTexture
// 0x0018 (0x0018 - 0x0000)
struct VoxelErosion_GetSedimentTexture final
{
public:
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelErosion_GetSedimentTexture) == 0x000008, "Wrong alignment on VoxelErosion_GetSedimentTexture");
static_assert(sizeof(VoxelErosion_GetSedimentTexture) == 0x000018, "Wrong size on VoxelErosion_GetSedimentTexture");
static_assert(offsetof(VoxelErosion_GetSedimentTexture, ReturnValue) == 0x000000, "Member 'VoxelErosion_GetSedimentTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelErosion.GetTerrainHeightTexture
// 0x0018 (0x0018 - 0x0000)
struct VoxelErosion_GetTerrainHeightTexture final
{
public:
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelErosion_GetTerrainHeightTexture) == 0x000008, "Wrong alignment on VoxelErosion_GetTerrainHeightTexture");
static_assert(sizeof(VoxelErosion_GetTerrainHeightTexture) == 0x000018, "Wrong size on VoxelErosion_GetTerrainHeightTexture");
static_assert(offsetof(VoxelErosion_GetTerrainHeightTexture, ReturnValue) == 0x000000, "Member 'VoxelErosion_GetTerrainHeightTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelErosion.GetWaterHeightTexture
// 0x0018 (0x0018 - 0x0000)
struct VoxelErosion_GetWaterHeightTexture final
{
public:
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelErosion_GetWaterHeightTexture) == 0x000008, "Wrong alignment on VoxelErosion_GetWaterHeightTexture");
static_assert(sizeof(VoxelErosion_GetWaterHeightTexture) == 0x000018, "Wrong size on VoxelErosion_GetWaterHeightTexture");
static_assert(offsetof(VoxelErosion_GetWaterHeightTexture, ReturnValue) == 0x000000, "Member 'VoxelErosion_GetWaterHeightTexture::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelErosion.Step
// 0x0004 (0x0004 - 0x0000)
struct VoxelErosion_Step final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelErosion_Step) == 0x000004, "Wrong alignment on VoxelErosion_Step");
static_assert(sizeof(VoxelErosion_Step) == 0x000004, "Wrong size on VoxelErosion_Step");
static_assert(offsetof(VoxelErosion_Step, Count) == 0x000000, "Member 'VoxelErosion_Step::Count' has a wrong offset!");

// Function Voxel.VoxelErosion.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct VoxelErosion_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelErosion_IsInitialized) == 0x000001, "Wrong alignment on VoxelErosion_IsInitialized");
static_assert(sizeof(VoxelErosion_IsInitialized) == 0x000001, "Wrong size on VoxelErosion_IsInitialized");
static_assert(offsetof(VoxelErosion_IsInitialized, ReturnValue) == 0x000000, "Member 'VoxelErosion_IsInitialized::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.Deproject
// 0x0150 (0x0150 - 0x0000)
struct VoxelTool_Deproject final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0128(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0134(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0xF];                                      // 0x0141(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_Deproject) == 0x000010, "Wrong alignment on VoxelTool_Deproject");
static_assert(sizeof(VoxelTool_Deproject) == 0x000150, "Wrong size on VoxelTool_Deproject");
static_assert(offsetof(VoxelTool_Deproject, TickData) == 0x000000, "Member 'VoxelTool_Deproject::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_Deproject, ScreenPosition) == 0x000120, "Member 'VoxelTool_Deproject::ScreenPosition' has a wrong offset!");
static_assert(offsetof(VoxelTool_Deproject, WorldPosition) == 0x000128, "Member 'VoxelTool_Deproject::WorldPosition' has a wrong offset!");
static_assert(offsetof(VoxelTool_Deproject, WorldDirection) == 0x000134, "Member 'VoxelTool_Deproject::WorldDirection' has a wrong offset!");
static_assert(offsetof(VoxelTool_Deproject, ReturnValue) == 0x000140, "Member 'VoxelTool_Deproject::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.GetAxis
// 0x0130 (0x0130 - 0x0000)
struct VoxelTool_GetAxis final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	class FName                                   Axis;                                              // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_GetAxis) == 0x000010, "Wrong alignment on VoxelTool_GetAxis");
static_assert(sizeof(VoxelTool_GetAxis) == 0x000130, "Wrong size on VoxelTool_GetAxis");
static_assert(offsetof(VoxelTool_GetAxis, TickData) == 0x000000, "Member 'VoxelTool_GetAxis::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_GetAxis, Axis) == 0x000120, "Member 'VoxelTool_GetAxis::Axis' has a wrong offset!");
static_assert(offsetof(VoxelTool_GetAxis, ReturnValue) == 0x000128, "Member 'VoxelTool_GetAxis::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.GetRayDirection
// 0x0130 (0x0130 - 0x0000)
struct VoxelTool_GetRayDirection final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0120(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_GetRayDirection) == 0x000010, "Wrong alignment on VoxelTool_GetRayDirection");
static_assert(sizeof(VoxelTool_GetRayDirection) == 0x000130, "Wrong size on VoxelTool_GetRayDirection");
static_assert(offsetof(VoxelTool_GetRayDirection, TickData) == 0x000000, "Member 'VoxelTool_GetRayDirection::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_GetRayDirection, ReturnValue) == 0x000120, "Member 'VoxelTool_GetRayDirection::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.GetRayOrigin
// 0x0130 (0x0130 - 0x0000)
struct VoxelTool_GetRayOrigin final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0120(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_GetRayOrigin) == 0x000010, "Wrong alignment on VoxelTool_GetRayOrigin");
static_assert(sizeof(VoxelTool_GetRayOrigin) == 0x000130, "Wrong size on VoxelTool_GetRayOrigin");
static_assert(offsetof(VoxelTool_GetRayOrigin, TickData) == 0x000000, "Member 'VoxelTool_GetRayOrigin::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_GetRayOrigin, ReturnValue) == 0x000120, "Member 'VoxelTool_GetRayOrigin::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.IsAlternativeMode
// 0x0130 (0x0130 - 0x0000)
struct VoxelTool_IsAlternativeMode final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0xF];                                      // 0x0121(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_IsAlternativeMode) == 0x000010, "Wrong alignment on VoxelTool_IsAlternativeMode");
static_assert(sizeof(VoxelTool_IsAlternativeMode) == 0x000130, "Wrong size on VoxelTool_IsAlternativeMode");
static_assert(offsetof(VoxelTool_IsAlternativeMode, TickData) == 0x000000, "Member 'VoxelTool_IsAlternativeMode::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_IsAlternativeMode, ReturnValue) == 0x000120, "Member 'VoxelTool_IsAlternativeMode::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.IsKeyDown
// 0x0130 (0x0130 - 0x0000)
struct VoxelTool_IsKeyDown final
{
public:
	struct FVoxelToolTickData                     TickData;                                          // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_IsKeyDown) == 0x000010, "Wrong alignment on VoxelTool_IsKeyDown");
static_assert(sizeof(VoxelTool_IsKeyDown) == 0x000130, "Wrong size on VoxelTool_IsKeyDown");
static_assert(offsetof(VoxelTool_IsKeyDown, TickData) == 0x000000, "Member 'VoxelTool_IsKeyDown::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_IsKeyDown, Key) == 0x000120, "Member 'VoxelTool_IsKeyDown::Key' has a wrong offset!");
static_assert(offsetof(VoxelTool_IsKeyDown, ReturnValue) == 0x000128, "Member 'VoxelTool_IsKeyDown::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.MakeToolAxes
// 0x0060 (0x0060 - 0x0000)
struct VoxelTool_MakeToolAxes final
{
public:
	float                                         BrushSizeDelta;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalloffDelta;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthDelta;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_MakeToolAxes) == 0x000008, "Wrong alignment on VoxelTool_MakeToolAxes");
static_assert(sizeof(VoxelTool_MakeToolAxes) == 0x000060, "Wrong size on VoxelTool_MakeToolAxes");
static_assert(offsetof(VoxelTool_MakeToolAxes, BrushSizeDelta) == 0x000000, "Member 'VoxelTool_MakeToolAxes::BrushSizeDelta' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeToolAxes, FalloffDelta) == 0x000004, "Member 'VoxelTool_MakeToolAxes::FalloffDelta' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeToolAxes, StrengthDelta) == 0x000008, "Member 'VoxelTool_MakeToolAxes::StrengthDelta' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeToolAxes, ReturnValue) == 0x000010, "Member 'VoxelTool_MakeToolAxes::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.MakeToolKeys
// 0x0058 (0x0058 - 0x0000)
struct VoxelTool_MakeToolKeys final
{
public:
	bool                                          bAlternativeMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_MakeToolKeys) == 0x000008, "Wrong alignment on VoxelTool_MakeToolKeys");
static_assert(sizeof(VoxelTool_MakeToolKeys) == 0x000058, "Wrong size on VoxelTool_MakeToolKeys");
static_assert(offsetof(VoxelTool_MakeToolKeys, bAlternativeMode) == 0x000000, "Member 'VoxelTool_MakeToolKeys::bAlternativeMode' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeToolKeys, ReturnValue) == 0x000008, "Member 'VoxelTool_MakeToolKeys::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.MakeVoxelTool
// 0x0010 (0x0010 - 0x0000)
struct VoxelTool_MakeVoxelTool final
{
public:
	TSubclassOf<class UVoxelTool>                 ToolClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTool*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_MakeVoxelTool) == 0x000008, "Wrong alignment on VoxelTool_MakeVoxelTool");
static_assert(sizeof(VoxelTool_MakeVoxelTool) == 0x000010, "Wrong size on VoxelTool_MakeVoxelTool");
static_assert(offsetof(VoxelTool_MakeVoxelTool, ToolClass) == 0x000000, "Member 'VoxelTool_MakeVoxelTool::ToolClass' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelTool, ReturnValue) == 0x000008, "Member 'VoxelTool_MakeVoxelTool::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.MakeVoxelToolTickData
// 0x01F0 (0x01F0 - 0x0000)
struct VoxelTool_MakeVoxelToolTickData final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdit;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       Keys;                                              // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Axes;                                              // 0x0060(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              MousePosition;                                     // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x00B8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x00C4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0xB];                                       // 0x00C5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelToolTickData                     ReturnValue;                                       // 0x00D0(0x0120)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_MakeVoxelToolTickData) == 0x000010, "Wrong alignment on VoxelTool_MakeVoxelToolTickData");
static_assert(sizeof(VoxelTool_MakeVoxelToolTickData) == 0x0001F0, "Wrong size on VoxelTool_MakeVoxelToolTickData");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, PlayerController) == 0x000000, "Member 'VoxelTool_MakeVoxelToolTickData::PlayerController' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, bEdit) == 0x000008, "Member 'VoxelTool_MakeVoxelToolTickData::bEdit' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, Keys) == 0x000010, "Member 'VoxelTool_MakeVoxelToolTickData::Keys' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, Axes) == 0x000060, "Member 'VoxelTool_MakeVoxelToolTickData::Axes' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, MousePosition) == 0x0000B0, "Member 'VoxelTool_MakeVoxelToolTickData::MousePosition' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, CameraDirection) == 0x0000B8, "Member 'VoxelTool_MakeVoxelToolTickData::CameraDirection' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, CollisionChannel) == 0x0000C4, "Member 'VoxelTool_MakeVoxelToolTickData::CollisionChannel' has a wrong offset!");
static_assert(offsetof(VoxelTool_MakeVoxelToolTickData, ReturnValue) == 0x0000D0, "Member 'VoxelTool_MakeVoxelToolTickData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.Apply
// 0x00C0 (0x00C0 - 0x0000)
struct VoxelTool_Apply final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       Keys;                                              // 0x0020(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Axes;                                              // 0x0070(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_Apply) == 0x000008, "Wrong alignment on VoxelTool_Apply");
static_assert(sizeof(VoxelTool_Apply) == 0x0000C0, "Wrong size on VoxelTool_Apply");
static_assert(offsetof(VoxelTool_Apply, World) == 0x000000, "Member 'VoxelTool_Apply::World' has a wrong offset!");
static_assert(offsetof(VoxelTool_Apply, Position) == 0x000008, "Member 'VoxelTool_Apply::Position' has a wrong offset!");
static_assert(offsetof(VoxelTool_Apply, Normal) == 0x000014, "Member 'VoxelTool_Apply::Normal' has a wrong offset!");
static_assert(offsetof(VoxelTool_Apply, Keys) == 0x000020, "Member 'VoxelTool_Apply::Keys' has a wrong offset!");
static_assert(offsetof(VoxelTool_Apply, Axes) == 0x000070, "Member 'VoxelTool_Apply::Axes' has a wrong offset!");

// Function Voxel.VoxelTool.K2_AdvancedTick
// 0x0140 (0x0140 - 0x0000)
struct VoxelTool_K2_AdvancedTick final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelToolTickData                     TickData;                                          // 0x0010(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& Position, const struct FVector& Normal)> DoEditOverride;                                    // 0x0130(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_K2_AdvancedTick) == 0x000010, "Wrong alignment on VoxelTool_K2_AdvancedTick");
static_assert(sizeof(VoxelTool_K2_AdvancedTick) == 0x000140, "Wrong size on VoxelTool_K2_AdvancedTick");
static_assert(offsetof(VoxelTool_K2_AdvancedTick, WorldContextObject) == 0x000000, "Member 'VoxelTool_K2_AdvancedTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_AdvancedTick, TickData) == 0x000010, "Member 'VoxelTool_K2_AdvancedTick::TickData' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_AdvancedTick, DoEditOverride) == 0x000130, "Member 'VoxelTool_K2_AdvancedTick::DoEditOverride' has a wrong offset!");

// Function Voxel.VoxelTool.K2_SimpleTick
// 0x00C8 (0x00C8 - 0x0000)
struct VoxelTool_K2_SimpleTick final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEdit;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       Keys;                                              // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Axes;                                              // 0x0060(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& Position, const struct FVector& Normal)> DoEditOverride;                                    // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelTool_K2_SimpleTick) == 0x000008, "Wrong alignment on VoxelTool_K2_SimpleTick");
static_assert(sizeof(VoxelTool_K2_SimpleTick) == 0x0000C8, "Wrong size on VoxelTool_K2_SimpleTick");
static_assert(offsetof(VoxelTool_K2_SimpleTick, PlayerController) == 0x000000, "Member 'VoxelTool_K2_SimpleTick::PlayerController' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_SimpleTick, bEdit) == 0x000008, "Member 'VoxelTool_K2_SimpleTick::bEdit' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_SimpleTick, Keys) == 0x000010, "Member 'VoxelTool_K2_SimpleTick::Keys' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_SimpleTick, Axes) == 0x000060, "Member 'VoxelTool_K2_SimpleTick::Axes' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_SimpleTick, DoEditOverride) == 0x0000B0, "Member 'VoxelTool_K2_SimpleTick::DoEditOverride' has a wrong offset!");
static_assert(offsetof(VoxelTool_K2_SimpleTick, CollisionChannel) == 0x0000C0, "Member 'VoxelTool_K2_SimpleTick::CollisionChannel' has a wrong offset!");

// Function Voxel.VoxelTool.GetToolName
// 0x0008 (0x0008 - 0x0000)
struct VoxelTool_GetToolName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_GetToolName) == 0x000004, "Wrong alignment on VoxelTool_GetToolName");
static_assert(sizeof(VoxelTool_GetToolName) == 0x000008, "Wrong size on VoxelTool_GetToolName");
static_assert(offsetof(VoxelTool_GetToolName, ReturnValue) == 0x000000, "Member 'VoxelTool_GetToolName::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTool.GetVoxelWorld
// 0x0008 (0x0008 - 0x0000)
struct VoxelTool_GetVoxelWorld final
{
public:
	class AVoxelWorld*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTool_GetVoxelWorld) == 0x000008, "Wrong alignment on VoxelTool_GetVoxelWorld");
static_assert(sizeof(VoxelTool_GetVoxelWorld) == 0x000008, "Wrong size on VoxelTool_GetVoxelWorld");
static_assert(offsetof(VoxelTool_GetVoxelWorld, ReturnValue) == 0x000000, "Member 'VoxelTool_GetVoxelWorld::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.K2_DoEdit
// 0x001C (0x001C - 0x0000)
struct VoxelToolBase_K2_DoEdit final
{
public:
	struct FVoxelIntBoxWithValidity               ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_K2_DoEdit) == 0x000004, "Wrong alignment on VoxelToolBase_K2_DoEdit");
static_assert(sizeof(VoxelToolBase_K2_DoEdit) == 0x00001C, "Wrong size on VoxelToolBase_K2_DoEdit");
static_assert(offsetof(VoxelToolBase_K2_DoEdit, ReturnValue) == 0x000000, "Member 'VoxelToolBase_K2_DoEdit::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.K2_UpdateRender
// 0x0010 (0x0010 - 0x0000)
struct VoxelToolBase_K2_UpdateRender final
{
public:
	class UMaterialInstanceDynamic*               OverlayMaterialInstance;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MeshMaterialInstance;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_K2_UpdateRender) == 0x000008, "Wrong alignment on VoxelToolBase_K2_UpdateRender");
static_assert(sizeof(VoxelToolBase_K2_UpdateRender) == 0x000010, "Wrong size on VoxelToolBase_K2_UpdateRender");
static_assert(offsetof(VoxelToolBase_K2_UpdateRender, OverlayMaterialInstance) == 0x000000, "Member 'VoxelToolBase_K2_UpdateRender::OverlayMaterialInstance' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_K2_UpdateRender, MeshMaterialInstance) == 0x000008, "Member 'VoxelToolBase_K2_UpdateRender::MeshMaterialInstance' has a wrong offset!");

// Function Voxel.VoxelToolBase.SetToolOverlayBounds
// 0x001C (0x001C - 0x0000)
struct VoxelToolBase_SetToolOverlayBounds final
{
public:
	struct FBox                                   Bounds;                                            // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_SetToolOverlayBounds) == 0x000004, "Wrong alignment on VoxelToolBase_SetToolOverlayBounds");
static_assert(sizeof(VoxelToolBase_SetToolOverlayBounds) == 0x00001C, "Wrong size on VoxelToolBase_SetToolOverlayBounds");
static_assert(offsetof(VoxelToolBase_SetToolOverlayBounds, Bounds) == 0x000000, "Member 'VoxelToolBase_SetToolOverlayBounds::Bounds' has a wrong offset!");

// Function Voxel.VoxelToolBase.UpdateToolMesh
// 0x0050 (0x0050 - 0x0000)
struct VoxelToolBase_UpdateToolMesh final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelToolBase_UpdateToolMesh) == 0x000010, "Wrong alignment on VoxelToolBase_UpdateToolMesh");
static_assert(sizeof(VoxelToolBase_UpdateToolMesh) == 0x000050, "Wrong size on VoxelToolBase_UpdateToolMesh");
static_assert(offsetof(VoxelToolBase_UpdateToolMesh, Mesh) == 0x000000, "Member 'VoxelToolBase_UpdateToolMesh::Mesh' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_UpdateToolMesh, Material) == 0x000008, "Member 'VoxelToolBase_UpdateToolMesh::Material' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_UpdateToolMesh, Transform) == 0x000010, "Member 'VoxelToolBase_UpdateToolMesh::Transform' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_UpdateToolMesh, ID) == 0x000040, "Member 'VoxelToolBase_UpdateToolMesh::ID' has a wrong offset!");

// Function Voxel.VoxelToolBase.CanEdit
// 0x0001 (0x0001 - 0x0000)
struct VoxelToolBase_CanEdit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_CanEdit) == 0x000001, "Wrong alignment on VoxelToolBase_CanEdit");
static_assert(sizeof(VoxelToolBase_CanEdit) == 0x000001, "Wrong size on VoxelToolBase_CanEdit");
static_assert(offsetof(VoxelToolBase_CanEdit, ReturnValue) == 0x000000, "Member 'VoxelToolBase_CanEdit::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetBoundsToCache
// 0x0030 (0x0030 - 0x0000)
struct VoxelToolBase_GetBoundsToCache final
{
public:
	struct FVoxelIntBox                           Bounds;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetBoundsToCache) == 0x000004, "Wrong alignment on VoxelToolBase_GetBoundsToCache");
static_assert(sizeof(VoxelToolBase_GetBoundsToCache) == 0x000030, "Wrong size on VoxelToolBase_GetBoundsToCache");
static_assert(offsetof(VoxelToolBase_GetBoundsToCache, Bounds) == 0x000000, "Member 'VoxelToolBase_GetBoundsToCache::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_GetBoundsToCache, ReturnValue) == 0x000018, "Member 'VoxelToolBase_GetBoundsToCache::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct VoxelToolBase_GetDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetDeltaTime) == 0x000004, "Wrong alignment on VoxelToolBase_GetDeltaTime");
static_assert(sizeof(VoxelToolBase_GetDeltaTime) == 0x000004, "Wrong size on VoxelToolBase_GetDeltaTime");
static_assert(offsetof(VoxelToolBase_GetDeltaTime, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetDeltaTime::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetLastFrameTickData
// 0x0120 (0x0120 - 0x0000)
struct VoxelToolBase_GetLastFrameTickData final
{
public:
	struct FVoxelToolTickData                     ReturnValue;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetLastFrameTickData) == 0x000010, "Wrong alignment on VoxelToolBase_GetLastFrameTickData");
static_assert(sizeof(VoxelToolBase_GetLastFrameTickData) == 0x000120, "Wrong size on VoxelToolBase_GetLastFrameTickData");
static_assert(offsetof(VoxelToolBase_GetLastFrameTickData, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetLastFrameTickData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetMouseMovementSize
// 0x0004 (0x0004 - 0x0000)
struct VoxelToolBase_GetMouseMovementSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetMouseMovementSize) == 0x000004, "Wrong alignment on VoxelToolBase_GetMouseMovementSize");
static_assert(sizeof(VoxelToolBase_GetMouseMovementSize) == 0x000004, "Wrong size on VoxelToolBase_GetMouseMovementSize");
static_assert(offsetof(VoxelToolBase_GetMouseMovementSize, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetMouseMovementSize::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetTickData
// 0x0120 (0x0120 - 0x0000)
struct VoxelToolBase_GetTickData final
{
public:
	struct FVoxelToolTickData                     ReturnValue;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetTickData) == 0x000010, "Wrong alignment on VoxelToolBase_GetTickData");
static_assert(sizeof(VoxelToolBase_GetTickData) == 0x000120, "Wrong size on VoxelToolBase_GetTickData");
static_assert(offsetof(VoxelToolBase_GetTickData, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetTickData::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetToolDirection
// 0x000C (0x000C - 0x0000)
struct VoxelToolBase_GetToolDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetToolDirection) == 0x000004, "Wrong alignment on VoxelToolBase_GetToolDirection");
static_assert(sizeof(VoxelToolBase_GetToolDirection) == 0x00000C, "Wrong size on VoxelToolBase_GetToolDirection");
static_assert(offsetof(VoxelToolBase_GetToolDirection, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetToolDirection::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetToolNormal
// 0x000C (0x000C - 0x0000)
struct VoxelToolBase_GetToolNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetToolNormal) == 0x000004, "Wrong alignment on VoxelToolBase_GetToolNormal");
static_assert(sizeof(VoxelToolBase_GetToolNormal) == 0x00000C, "Wrong size on VoxelToolBase_GetToolNormal");
static_assert(offsetof(VoxelToolBase_GetToolNormal, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetToolNormal::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetToolPosition
// 0x000C (0x000C - 0x0000)
struct VoxelToolBase_GetToolPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetToolPosition) == 0x000004, "Wrong alignment on VoxelToolBase_GetToolPosition");
static_assert(sizeof(VoxelToolBase_GetToolPosition) == 0x00000C, "Wrong size on VoxelToolBase_GetToolPosition");
static_assert(offsetof(VoxelToolBase_GetToolPosition, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetToolPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetToolPreviewPosition
// 0x000C (0x000C - 0x0000)
struct VoxelToolBase_GetToolPreviewPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetToolPreviewPosition) == 0x000004, "Wrong alignment on VoxelToolBase_GetToolPreviewPosition");
static_assert(sizeof(VoxelToolBase_GetToolPreviewPosition) == 0x00000C, "Wrong size on VoxelToolBase_GetToolPreviewPosition");
static_assert(offsetof(VoxelToolBase_GetToolPreviewPosition, ReturnValue) == 0x000000, "Member 'VoxelToolBase_GetToolPreviewPosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.GetValueAfterAxisInput
// 0x0018 (0x0018 - 0x0000)
struct VoxelToolBase_GetValueAfterAxisInput final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_GetValueAfterAxisInput) == 0x000004, "Wrong alignment on VoxelToolBase_GetValueAfterAxisInput");
static_assert(sizeof(VoxelToolBase_GetValueAfterAxisInput) == 0x000018, "Wrong size on VoxelToolBase_GetValueAfterAxisInput");
static_assert(offsetof(VoxelToolBase_GetValueAfterAxisInput, AxisName) == 0x000000, "Member 'VoxelToolBase_GetValueAfterAxisInput::AxisName' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_GetValueAfterAxisInput, CurrentValue) == 0x000008, "Member 'VoxelToolBase_GetValueAfterAxisInput::CurrentValue' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_GetValueAfterAxisInput, Min) == 0x00000C, "Member 'VoxelToolBase_GetValueAfterAxisInput::Min' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_GetValueAfterAxisInput, Max) == 0x000010, "Member 'VoxelToolBase_GetValueAfterAxisInput::Max' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_GetValueAfterAxisInput, ReturnValue) == 0x000014, "Member 'VoxelToolBase_GetValueAfterAxisInput::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolBase.K2_GetToolConfig
// 0x0080 (0x0080 - 0x0000)
struct VoxelToolBase_K2_GetToolConfig final
{
public:
	struct FVoxelToolBaseConfig                   InConfig;                                          // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelToolBaseConfig                   OutConfig;                                         // 0x0040(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_K2_GetToolConfig) == 0x000008, "Wrong alignment on VoxelToolBase_K2_GetToolConfig");
static_assert(sizeof(VoxelToolBase_K2_GetToolConfig) == 0x000080, "Wrong size on VoxelToolBase_K2_GetToolConfig");
static_assert(offsetof(VoxelToolBase_K2_GetToolConfig, InConfig) == 0x000000, "Member 'VoxelToolBase_K2_GetToolConfig::InConfig' has a wrong offset!");
static_assert(offsetof(VoxelToolBase_K2_GetToolConfig, OutConfig) == 0x000040, "Member 'VoxelToolBase_K2_GetToolConfig::OutConfig' has a wrong offset!");

// Function Voxel.VoxelToolBase.LastFrameCanEdit
// 0x0001 (0x0001 - 0x0000)
struct VoxelToolBase_LastFrameCanEdit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolBase_LastFrameCanEdit) == 0x000001, "Wrong alignment on VoxelToolBase_LastFrameCanEdit");
static_assert(sizeof(VoxelToolBase_LastFrameCanEdit) == 0x000001, "Wrong size on VoxelToolBase_LastFrameCanEdit");
static_assert(offsetof(VoxelToolBase_LastFrameCanEdit, ReturnValue) == 0x000000, "Member 'VoxelToolBase_LastFrameCanEdit::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorCache.MakeGeneratorInstance
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorCache_MakeGeneratorInstance final
{
public:
	struct FVoxelGeneratorPicker                  Picker;                                            // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorCache_MakeGeneratorInstance) == 0x000008, "Wrong alignment on VoxelGeneratorCache_MakeGeneratorInstance");
static_assert(sizeof(VoxelGeneratorCache_MakeGeneratorInstance) == 0x000070, "Wrong size on VoxelGeneratorCache_MakeGeneratorInstance");
static_assert(offsetof(VoxelGeneratorCache_MakeGeneratorInstance, Picker) == 0x000000, "Member 'VoxelGeneratorCache_MakeGeneratorInstance::Picker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorCache_MakeGeneratorInstance, ReturnValue) == 0x000068, "Member 'VoxelGeneratorCache_MakeGeneratorInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorCache.MakeTransformableGeneratorInstance
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorCache_MakeTransformableGeneratorInstance final
{
public:
	struct FVoxelTransformableGeneratorPicker     Picker;                                            // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorCache_MakeTransformableGeneratorInstance) == 0x000008, "Wrong alignment on VoxelGeneratorCache_MakeTransformableGeneratorInstance");
static_assert(sizeof(VoxelGeneratorCache_MakeTransformableGeneratorInstance) == 0x000070, "Wrong size on VoxelGeneratorCache_MakeTransformableGeneratorInstance");
static_assert(offsetof(VoxelGeneratorCache_MakeTransformableGeneratorInstance, Picker) == 0x000000, "Member 'VoxelGeneratorCache_MakeTransformableGeneratorInstance::Picker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorCache_MakeTransformableGeneratorInstance, ReturnValue) == 0x000068, "Member 'VoxelGeneratorCache_MakeTransformableGeneratorInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorInstanceWrapper.IsValid
// 0x0001 (0x0001 - 0x0000)
struct VoxelGeneratorInstanceWrapper_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorInstanceWrapper_IsValid) == 0x000001, "Wrong alignment on VoxelGeneratorInstanceWrapper_IsValid");
static_assert(sizeof(VoxelGeneratorInstanceWrapper_IsValid) == 0x000001, "Wrong size on VoxelGeneratorInstanceWrapper_IsValid");
static_assert(offsetof(VoxelGeneratorInstanceWrapper_IsValid, ReturnValue) == 0x000000, "Member 'VoxelGeneratorInstanceWrapper_IsValid::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTransformableGeneratorInstanceWrapper.IsValid
// 0x0001 (0x0001 - 0x0000)
struct VoxelTransformableGeneratorInstanceWrapper_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTransformableGeneratorInstanceWrapper_IsValid) == 0x000001, "Wrong alignment on VoxelTransformableGeneratorInstanceWrapper_IsValid");
static_assert(sizeof(VoxelTransformableGeneratorInstanceWrapper_IsValid) == 0x000001, "Wrong size on VoxelTransformableGeneratorInstanceWrapper_IsValid");
static_assert(offsetof(VoxelTransformableGeneratorInstanceWrapper_IsValid, ReturnValue) == 0x000000, "Member 'VoxelTransformableGeneratorInstanceWrapper_IsValid::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.CreateColorTextureFromGenerator
// 0x0040 (0x0040 - 0x0000)
struct VoxelGeneratorTools_CreateColorTextureFromGenerator final
{
public:
	struct FVoxelColorTexture                     OutTexture;                                        // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         Generator;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartX;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartY;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_CreateColorTextureFromGenerator) == 0x000008, "Wrong alignment on VoxelGeneratorTools_CreateColorTextureFromGenerator");
static_assert(sizeof(VoxelGeneratorTools_CreateColorTextureFromGenerator) == 0x000040, "Wrong size on VoxelGeneratorTools_CreateColorTextureFromGenerator");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, OutTexture) == 0x000000, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::OutTexture' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, Generator) == 0x000018, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, OutputName) == 0x000020, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::OutputName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, SizeX) == 0x000028, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::SizeX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, SizeY) == 0x00002C, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::SizeY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, Scale) == 0x000030, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::Scale' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, StartX) == 0x000034, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::StartX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGenerator, StartY) == 0x000038, "Member 'VoxelGeneratorTools_CreateColorTextureFromGenerator::StartY' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.CreateColorTextureFromGeneratorAsync
// 0x0060 (0x0060 - 0x0000)
struct VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelColorTexture                     OutTexture;                                        // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         Generator;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputName;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartX;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartY;                                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync) == 0x000008, "Wrong alignment on VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync");
static_assert(sizeof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync) == 0x000060, "Wrong size on VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, WorldContextObject) == 0x000000, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, LatentInfo) == 0x000008, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, OutTexture) == 0x000020, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::OutTexture' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, Generator) == 0x000038, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, OutputName) == 0x000040, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::OutputName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, SizeX) == 0x000048, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::SizeX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, SizeY) == 0x00004C, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::SizeY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, Scale) == 0x000050, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::Scale' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, StartX) == 0x000054, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::StartX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, StartY) == 0x000058, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::StartY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync, bHideLatentWarnings) == 0x00005C, "Member 'VoxelGeneratorTools_CreateColorTextureFromGeneratorAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.CreateFloatTextureFromGenerator
// 0x0040 (0x0040 - 0x0000)
struct VoxelGeneratorTools_CreateFloatTextureFromGenerator final
{
public:
	struct FVoxelFloatTexture                     OutTexture;                                        // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         Generator;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartX;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartY;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_CreateFloatTextureFromGenerator) == 0x000008, "Wrong alignment on VoxelGeneratorTools_CreateFloatTextureFromGenerator");
static_assert(sizeof(VoxelGeneratorTools_CreateFloatTextureFromGenerator) == 0x000040, "Wrong size on VoxelGeneratorTools_CreateFloatTextureFromGenerator");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, OutTexture) == 0x000000, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::OutTexture' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, Generator) == 0x000018, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, OutputName) == 0x000020, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::OutputName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, SizeX) == 0x000028, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::SizeX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, SizeY) == 0x00002C, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::SizeY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, Scale) == 0x000030, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::Scale' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, StartX) == 0x000034, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::StartX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGenerator, StartY) == 0x000038, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGenerator::StartY' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.CreateFloatTextureFromGeneratorAsync
// 0x0060 (0x0060 - 0x0000)
struct VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelFloatTexture                     OutTexture;                                        // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         Generator;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputName;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartX;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartY;                                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync) == 0x000008, "Wrong alignment on VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync");
static_assert(sizeof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync) == 0x000060, "Wrong size on VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, WorldContextObject) == 0x000000, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, LatentInfo) == 0x000008, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, OutTexture) == 0x000020, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::OutTexture' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, Generator) == 0x000038, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, OutputName) == 0x000040, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::OutputName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, SizeX) == 0x000048, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::SizeX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, SizeY) == 0x00004C, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::SizeY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, Scale) == 0x000050, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::Scale' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, StartX) == 0x000054, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::StartX' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, StartY) == 0x000058, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::StartY' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync, bHideLatentWarnings) == 0x00005C, "Member 'VoxelGeneratorTools_CreateFloatTextureFromGeneratorAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.IsValid_GeneratorPicker
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_IsValid_GeneratorPicker final
{
public:
	struct FVoxelGeneratorPicker                  GeneratorPicker;                                   // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_IsValid_GeneratorPicker) == 0x000008, "Wrong alignment on VoxelGeneratorTools_IsValid_GeneratorPicker");
static_assert(sizeof(VoxelGeneratorTools_IsValid_GeneratorPicker) == 0x000070, "Wrong size on VoxelGeneratorTools_IsValid_GeneratorPicker");
static_assert(offsetof(VoxelGeneratorTools_IsValid_GeneratorPicker, GeneratorPicker) == 0x000000, "Member 'VoxelGeneratorTools_IsValid_GeneratorPicker::GeneratorPicker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_IsValid_GeneratorPicker, ReturnValue) == 0x000068, "Member 'VoxelGeneratorTools_IsValid_GeneratorPicker::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.IsValid_TransformableGeneratorPicker
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_IsValid_TransformableGeneratorPicker final
{
public:
	struct FVoxelTransformableGeneratorPicker     GeneratorPicker;                                   // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_IsValid_TransformableGeneratorPicker) == 0x000008, "Wrong alignment on VoxelGeneratorTools_IsValid_TransformableGeneratorPicker");
static_assert(sizeof(VoxelGeneratorTools_IsValid_TransformableGeneratorPicker) == 0x000070, "Wrong size on VoxelGeneratorTools_IsValid_TransformableGeneratorPicker");
static_assert(offsetof(VoxelGeneratorTools_IsValid_TransformableGeneratorPicker, GeneratorPicker) == 0x000000, "Member 'VoxelGeneratorTools_IsValid_TransformableGeneratorPicker::GeneratorPicker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_IsValid_TransformableGeneratorPicker, ReturnValue) == 0x000068, "Member 'VoxelGeneratorTools_IsValid_TransformableGeneratorPicker::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeGeneratorInstance
// 0x0100 (0x0100 - 0x0000)
struct VoxelGeneratorTools_MakeGeneratorInstance final
{
public:
	struct FVoxelGeneratorPicker                  GeneratorPicker;                                   // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelGeneratorInit                    GeneratorInit;                                     // 0x0068(0x0090)(Parm, NativeAccessSpecifierPublic)
	class UVoxelGeneratorInstanceWrapper*         ReturnValue;                                       // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeGeneratorInstance) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeGeneratorInstance");
static_assert(sizeof(VoxelGeneratorTools_MakeGeneratorInstance) == 0x000100, "Wrong size on VoxelGeneratorTools_MakeGeneratorInstance");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorInstance, GeneratorPicker) == 0x000000, "Member 'VoxelGeneratorTools_MakeGeneratorInstance::GeneratorPicker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorInstance, GeneratorInit) == 0x000068, "Member 'VoxelGeneratorTools_MakeGeneratorInstance::GeneratorInit' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorInstance, ReturnValue) == 0x0000F8, "Member 'VoxelGeneratorTools_MakeGeneratorInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeGeneratorPickerFromClass
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_MakeGeneratorPickerFromClass final
{
public:
	TSubclassOf<class UVoxelGenerator>            GeneratorClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelGeneratorPicker                  ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeGeneratorPickerFromClass) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeGeneratorPickerFromClass");
static_assert(sizeof(VoxelGeneratorTools_MakeGeneratorPickerFromClass) == 0x000070, "Wrong size on VoxelGeneratorTools_MakeGeneratorPickerFromClass");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorPickerFromClass, GeneratorClass) == 0x000000, "Member 'VoxelGeneratorTools_MakeGeneratorPickerFromClass::GeneratorClass' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorPickerFromClass, ReturnValue) == 0x000008, "Member 'VoxelGeneratorTools_MakeGeneratorPickerFromClass::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeGeneratorPickerFromObject
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_MakeGeneratorPickerFromObject final
{
public:
	class UVoxelGenerator*                        Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelGeneratorPicker                  ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeGeneratorPickerFromObject) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeGeneratorPickerFromObject");
static_assert(sizeof(VoxelGeneratorTools_MakeGeneratorPickerFromObject) == 0x000070, "Wrong size on VoxelGeneratorTools_MakeGeneratorPickerFromObject");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorPickerFromObject, Generator) == 0x000000, "Member 'VoxelGeneratorTools_MakeGeneratorPickerFromObject::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeGeneratorPickerFromObject, ReturnValue) == 0x000008, "Member 'VoxelGeneratorTools_MakeGeneratorPickerFromObject::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeTransformableGeneratorInstance
// 0x0100 (0x0100 - 0x0000)
struct VoxelGeneratorTools_MakeTransformableGeneratorInstance final
{
public:
	struct FVoxelTransformableGeneratorPicker     GeneratorPicker;                                   // 0x0000(0x0068)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelGeneratorInit                    GeneratorInit;                                     // 0x0068(0x0090)(Parm, NativeAccessSpecifierPublic)
	class UVoxelTransformableGeneratorInstanceWrapper* ReturnValue;                                       // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeTransformableGeneratorInstance) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeTransformableGeneratorInstance");
static_assert(sizeof(VoxelGeneratorTools_MakeTransformableGeneratorInstance) == 0x000100, "Wrong size on VoxelGeneratorTools_MakeTransformableGeneratorInstance");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorInstance, GeneratorPicker) == 0x000000, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorInstance::GeneratorPicker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorInstance, GeneratorInit) == 0x000068, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorInstance::GeneratorInit' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorInstance, ReturnValue) == 0x0000F8, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeTransformableGeneratorPickerFromClass
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass final
{
public:
	TSubclassOf<class UVoxelTransformableGenerator> GeneratorClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelTransformableGeneratorPicker     ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass");
static_assert(sizeof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass) == 0x000070, "Wrong size on VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass, GeneratorClass) == 0x000000, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass::GeneratorClass' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass, ReturnValue) == 0x000008, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorPickerFromClass::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.MakeTransformableGeneratorPickerFromObject
// 0x0070 (0x0070 - 0x0000)
struct VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject final
{
public:
	class UVoxelTransformableGenerator*           Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelTransformableGeneratorPicker     ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject) == 0x000008, "Wrong alignment on VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject");
static_assert(sizeof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject) == 0x000070, "Wrong size on VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject, Generator) == 0x000000, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject::Generator' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject, ReturnValue) == 0x000008, "Member 'VoxelGeneratorTools_MakeTransformableGeneratorPickerFromObject::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.SetGeneratorParameter
// 0x0078 (0x0078 - 0x0000)
struct VoxelGeneratorTools_SetGeneratorParameter final
{
public:
	struct FVoxelGeneratorPicker                  Picker;                                            // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueName;                                        // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_SetGeneratorParameter) == 0x000008, "Wrong alignment on VoxelGeneratorTools_SetGeneratorParameter");
static_assert(sizeof(VoxelGeneratorTools_SetGeneratorParameter) == 0x000078, "Wrong size on VoxelGeneratorTools_SetGeneratorParameter");
static_assert(offsetof(VoxelGeneratorTools_SetGeneratorParameter, Picker) == 0x000000, "Member 'VoxelGeneratorTools_SetGeneratorParameter::Picker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetGeneratorParameter, UniqueName) == 0x000068, "Member 'VoxelGeneratorTools_SetGeneratorParameter::UniqueName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetGeneratorParameter, Value) == 0x000070, "Member 'VoxelGeneratorTools_SetGeneratorParameter::Value' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetGeneratorParameter, ReturnValue) == 0x000074, "Member 'VoxelGeneratorTools_SetGeneratorParameter::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelGeneratorTools.SetTransformableGeneratorParameter
// 0x0078 (0x0078 - 0x0000)
struct VoxelGeneratorTools_SetTransformableGeneratorParameter final
{
public:
	struct FVoxelTransformableGeneratorPicker     Picker;                                            // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueName;                                        // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelGeneratorTools_SetTransformableGeneratorParameter) == 0x000008, "Wrong alignment on VoxelGeneratorTools_SetTransformableGeneratorParameter");
static_assert(sizeof(VoxelGeneratorTools_SetTransformableGeneratorParameter) == 0x000078, "Wrong size on VoxelGeneratorTools_SetTransformableGeneratorParameter");
static_assert(offsetof(VoxelGeneratorTools_SetTransformableGeneratorParameter, Picker) == 0x000000, "Member 'VoxelGeneratorTools_SetTransformableGeneratorParameter::Picker' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetTransformableGeneratorParameter, UniqueName) == 0x000068, "Member 'VoxelGeneratorTools_SetTransformableGeneratorParameter::UniqueName' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetTransformableGeneratorParameter, Value) == 0x000070, "Member 'VoxelGeneratorTools_SetTransformableGeneratorParameter::Value' has a wrong offset!");
static_assert(offsetof(VoxelGeneratorTools_SetTransformableGeneratorParameter, ReturnValue) == 0x000074, "Member 'VoxelGeneratorTools_SetTransformableGeneratorParameter::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelHeightmapAsset.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct VoxelHeightmapAsset_GetHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelHeightmapAsset_GetHeight) == 0x000004, "Wrong alignment on VoxelHeightmapAsset_GetHeight");
static_assert(sizeof(VoxelHeightmapAsset_GetHeight) == 0x000004, "Wrong size on VoxelHeightmapAsset_GetHeight");
static_assert(offsetof(VoxelHeightmapAsset_GetHeight, ReturnValue) == 0x000000, "Member 'VoxelHeightmapAsset_GetHeight::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelHeightmapAsset.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct VoxelHeightmapAsset_GetWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelHeightmapAsset_GetWidth) == 0x000004, "Wrong alignment on VoxelHeightmapAsset_GetWidth");
static_assert(sizeof(VoxelHeightmapAsset_GetWidth) == 0x000004, "Wrong size on VoxelHeightmapAsset_GetWidth");
static_assert(offsetof(VoxelHeightmapAsset_GetWidth, ReturnValue) == 0x000000, "Member 'VoxelHeightmapAsset_GetWidth::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.AddBox
// 0x0048 (0x0048 - 0x0000)
struct VoxelIntBoxLibrary_AddBox final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           BoxToAdd;                                          // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_AddBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_AddBox");
static_assert(sizeof(VoxelIntBoxLibrary_AddBox) == 0x000048, "Wrong size on VoxelIntBoxLibrary_AddBox");
static_assert(offsetof(VoxelIntBoxLibrary_AddBox, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_AddBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_AddBox, BoxToAdd) == 0x000018, "Member 'VoxelIntBoxLibrary_AddBox::BoxToAdd' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_AddBox, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_AddBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.AddPoint
// 0x003C (0x003C - 0x0000)
struct VoxelIntBoxLibrary_AddPoint final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Point;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_AddPoint) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_AddPoint");
static_assert(sizeof(VoxelIntBoxLibrary_AddPoint) == 0x00003C, "Wrong size on VoxelIntBoxLibrary_AddPoint");
static_assert(offsetof(VoxelIntBoxLibrary_AddPoint, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_AddPoint::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_AddPoint, Point) == 0x000018, "Member 'VoxelIntBoxLibrary_AddPoint::Point' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_AddPoint, ReturnValue) == 0x000024, "Member 'VoxelIntBoxLibrary_AddPoint::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.ApplyTransform
// 0x0070 (0x0070 - 0x0000)
struct VoxelIntBoxLibrary_ApplyTransform final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_ApplyTransform) == 0x000010, "Wrong alignment on VoxelIntBoxLibrary_ApplyTransform");
static_assert(sizeof(VoxelIntBoxLibrary_ApplyTransform) == 0x000070, "Wrong size on VoxelIntBoxLibrary_ApplyTransform");
static_assert(offsetof(VoxelIntBoxLibrary_ApplyTransform, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_ApplyTransform::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_ApplyTransform, Transform) == 0x000020, "Member 'VoxelIntBoxLibrary_ApplyTransform::Transform' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_ApplyTransform, ReturnValue) == 0x000050, "Member 'VoxelIntBoxLibrary_ApplyTransform::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.BreakIntBox
// 0x0030 (0x0030 - 0x0000)
struct VoxelIntBoxLibrary_BreakIntBox final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Min;                                               // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Max;                                               // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_BreakIntBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_BreakIntBox");
static_assert(sizeof(VoxelIntBoxLibrary_BreakIntBox) == 0x000030, "Wrong size on VoxelIntBoxLibrary_BreakIntBox");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBox, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_BreakIntBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBox, Min) == 0x000018, "Member 'VoxelIntBoxLibrary_BreakIntBox::Min' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBox, Max) == 0x000024, "Member 'VoxelIntBoxLibrary_BreakIntBox::Max' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.BreakIntBoxWithValidity
// 0x0038 (0x0038 - 0x0000)
struct VoxelIntBoxLibrary_BreakIntBoxWithValidity final
{
public:
	struct FVoxelIntBoxWithValidity               BoxWithValidity;                                   // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Box;                                               // 0x001C(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_BreakIntBoxWithValidity) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_BreakIntBoxWithValidity");
static_assert(sizeof(VoxelIntBoxLibrary_BreakIntBoxWithValidity) == 0x000038, "Wrong size on VoxelIntBoxLibrary_BreakIntBoxWithValidity");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBoxWithValidity, BoxWithValidity) == 0x000000, "Member 'VoxelIntBoxLibrary_BreakIntBoxWithValidity::BoxWithValidity' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBoxWithValidity, Box) == 0x00001C, "Member 'VoxelIntBoxLibrary_BreakIntBoxWithValidity::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_BreakIntBoxWithValidity, bIsValid) == 0x000034, "Member 'VoxelIntBoxLibrary_BreakIntBoxWithValidity::bIsValid' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Center
// 0x0030 (0x0030 - 0x0000)
struct VoxelIntBoxLibrary_Center final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Center) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Center");
static_assert(sizeof(VoxelIntBoxLibrary_Center) == 0x000030, "Wrong size on VoxelIntBoxLibrary_Center");
static_assert(offsetof(VoxelIntBoxLibrary_Center, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Center::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Center, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_Center::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Contains
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_Contains final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Other;                                             // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_Contains) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Contains");
static_assert(sizeof(VoxelIntBoxLibrary_Contains) == 0x000034, "Wrong size on VoxelIntBoxLibrary_Contains");
static_assert(offsetof(VoxelIntBoxLibrary_Contains, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Contains::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Contains, Other) == 0x000018, "Member 'VoxelIntBoxLibrary_Contains::Other' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Contains, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_Contains::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Conv_IntBoxToString
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_Conv_IntBoxToString final
{
public:
	struct FVoxelIntBox                           IntBox;                                            // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Conv_IntBoxToString) == 0x000008, "Wrong alignment on VoxelIntBoxLibrary_Conv_IntBoxToString");
static_assert(sizeof(VoxelIntBoxLibrary_Conv_IntBoxToString) == 0x000028, "Wrong size on VoxelIntBoxLibrary_Conv_IntBoxToString");
static_assert(offsetof(VoxelIntBoxLibrary_Conv_IntBoxToString, IntBox) == 0x000000, "Member 'VoxelIntBoxLibrary_Conv_IntBoxToString::IntBox' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Conv_IntBoxToString, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_Conv_IntBoxToString::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Conv_IntVectorToVoxelIntBox
// 0x0024 (0x0024 - 0x0000)
struct VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox final
{
public:
	struct FIntVector                             Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x000C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox");
static_assert(sizeof(VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox) == 0x000024, "Wrong size on VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox");
static_assert(offsetof(VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox, Vector) == 0x000000, "Member 'VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox::Vector' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox, ReturnValue) == 0x00000C, "Member 'VoxelIntBoxLibrary_Conv_IntVectorToVoxelIntBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.EqualEqual_IntBoxIntBox
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox final
{
public:
	struct FVoxelIntBox                           A;                                                 // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           B;                                                 // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox");
static_assert(sizeof(VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox) == 0x000034, "Wrong size on VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox");
static_assert(offsetof(VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox, A) == 0x000000, "Member 'VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox::A' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox, B) == 0x000018, "Member 'VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox::B' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_EqualEqual_IntBoxIntBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Extend
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_Extend final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Extent;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Extend) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Extend");
static_assert(sizeof(VoxelIntBoxLibrary_Extend) == 0x000034, "Wrong size on VoxelIntBoxLibrary_Extend");
static_assert(offsetof(VoxelIntBoxLibrary_Extend, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Extend::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Extend, Extent) == 0x000018, "Member 'VoxelIntBoxLibrary_Extend::Extent' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Extend, ReturnValue) == 0x00001C, "Member 'VoxelIntBoxLibrary_Extend::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Extend_IntVector
// 0x003C (0x003C - 0x0000)
struct VoxelIntBoxLibrary_Extend_IntVector final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Extent;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Extend_IntVector) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Extend_IntVector");
static_assert(sizeof(VoxelIntBoxLibrary_Extend_IntVector) == 0x00003C, "Wrong size on VoxelIntBoxLibrary_Extend_IntVector");
static_assert(offsetof(VoxelIntBoxLibrary_Extend_IntVector, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Extend_IntVector::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Extend_IntVector, Extent) == 0x000018, "Member 'VoxelIntBoxLibrary_Extend_IntVector::Extent' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Extend_IntVector, ReturnValue) == 0x000024, "Member 'VoxelIntBoxLibrary_Extend_IntVector::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.GetCenter
// 0x0024 (0x0024 - 0x0000)
struct VoxelIntBoxLibrary_GetCenter final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_GetCenter) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_GetCenter");
static_assert(sizeof(VoxelIntBoxLibrary_GetCenter) == 0x000024, "Wrong size on VoxelIntBoxLibrary_GetCenter");
static_assert(offsetof(VoxelIntBoxLibrary_GetCenter, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_GetCenter::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_GetCenter, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_GetCenter::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.GetCorners
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_GetCorners final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_GetCorners) == 0x000008, "Wrong alignment on VoxelIntBoxLibrary_GetCorners");
static_assert(sizeof(VoxelIntBoxLibrary_GetCorners) == 0x000028, "Wrong size on VoxelIntBoxLibrary_GetCorners");
static_assert(offsetof(VoxelIntBoxLibrary_GetCorners, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_GetCorners::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_GetCorners, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_GetCorners::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.GetSize
// 0x0024 (0x0024 - 0x0000)
struct VoxelIntBoxLibrary_GetSize final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_GetSize) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_GetSize");
static_assert(sizeof(VoxelIntBoxLibrary_GetSize) == 0x000024, "Wrong size on VoxelIntBoxLibrary_GetSize");
static_assert(offsetof(VoxelIntBoxLibrary_GetSize, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_GetSize::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_GetSize, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_GetSize::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.InfiniteBox
// 0x0018 (0x0018 - 0x0000)
struct VoxelIntBoxLibrary_InfiniteBox final
{
public:
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_InfiniteBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_InfiniteBox");
static_assert(sizeof(VoxelIntBoxLibrary_InfiniteBox) == 0x000018, "Wrong size on VoxelIntBoxLibrary_InfiniteBox");
static_assert(offsetof(VoxelIntBoxLibrary_InfiniteBox, ReturnValue) == 0x000000, "Member 'VoxelIntBoxLibrary_InfiniteBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Intersect
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_Intersect final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Other;                                             // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_Intersect) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Intersect");
static_assert(sizeof(VoxelIntBoxLibrary_Intersect) == 0x000034, "Wrong size on VoxelIntBoxLibrary_Intersect");
static_assert(offsetof(VoxelIntBoxLibrary_Intersect, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Intersect::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Intersect, Other) == 0x000018, "Member 'VoxelIntBoxLibrary_Intersect::Other' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Intersect, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_Intersect::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.IsIntVectorInsideBox
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_IsIntVectorInsideBox final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_IsIntVectorInsideBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_IsIntVectorInsideBox");
static_assert(sizeof(VoxelIntBoxLibrary_IsIntVectorInsideBox) == 0x000028, "Wrong size on VoxelIntBoxLibrary_IsIntVectorInsideBox");
static_assert(offsetof(VoxelIntBoxLibrary_IsIntVectorInsideBox, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_IsIntVectorInsideBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_IsIntVectorInsideBox, Position) == 0x000018, "Member 'VoxelIntBoxLibrary_IsIntVectorInsideBox::Position' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_IsIntVectorInsideBox, ReturnValue) == 0x000024, "Member 'VoxelIntBoxLibrary_IsIntVectorInsideBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.IsValid
// 0x001C (0x001C - 0x0000)
struct VoxelIntBoxLibrary_IsValid final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_IsValid) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_IsValid");
static_assert(sizeof(VoxelIntBoxLibrary_IsValid) == 0x00001C, "Wrong size on VoxelIntBoxLibrary_IsValid");
static_assert(offsetof(VoxelIntBoxLibrary_IsValid, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_IsValid::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_IsValid, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.IsVectorInsideBox
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_IsVectorInsideBox final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_IsVectorInsideBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_IsVectorInsideBox");
static_assert(sizeof(VoxelIntBoxLibrary_IsVectorInsideBox) == 0x000028, "Wrong size on VoxelIntBoxLibrary_IsVectorInsideBox");
static_assert(offsetof(VoxelIntBoxLibrary_IsVectorInsideBox, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_IsVectorInsideBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_IsVectorInsideBox, Position) == 0x000018, "Member 'VoxelIntBoxLibrary_IsVectorInsideBox::Position' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_IsVectorInsideBox, ReturnValue) == 0x000024, "Member 'VoxelIntBoxLibrary_IsVectorInsideBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.MakeBoxFromLocalPositionAndRadius
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius");
static_assert(sizeof(VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius) == 0x000028, "Wrong size on VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius, Position) == 0x000000, "Member 'VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius::Position' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius, Radius) == 0x00000C, "Member 'VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius::Radius' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius, ReturnValue) == 0x000010, "Member 'VoxelIntBoxLibrary_MakeBoxFromLocalPositionAndRadius::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.MakeBoxFromPositionAndRadius
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius");
static_assert(sizeof(VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius) == 0x000028, "Wrong size on VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius, Position) == 0x000000, "Member 'VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius::Position' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius, Radius) == 0x00000C, "Member 'VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius::Radius' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius, ReturnValue) == 0x000010, "Member 'VoxelIntBoxLibrary_MakeBoxFromPositionAndRadius::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.MakeIntBox
// 0x0030 (0x0030 - 0x0000)
struct VoxelIntBoxLibrary_MakeIntBox final
{
public:
	struct FIntVector                             Min;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Max;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_MakeIntBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_MakeIntBox");
static_assert(sizeof(VoxelIntBoxLibrary_MakeIntBox) == 0x000030, "Wrong size on VoxelIntBoxLibrary_MakeIntBox");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBox, Min) == 0x000000, "Member 'VoxelIntBoxLibrary_MakeIntBox::Min' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBox, Max) == 0x00000C, "Member 'VoxelIntBoxLibrary_MakeIntBox::Max' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBox, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_MakeIntBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.MakeIntBoxFromPoints
// 0x0028 (0x0028 - 0x0000)
struct VoxelIntBoxLibrary_MakeIntBoxFromPoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_MakeIntBoxFromPoints) == 0x000008, "Wrong alignment on VoxelIntBoxLibrary_MakeIntBoxFromPoints");
static_assert(sizeof(VoxelIntBoxLibrary_MakeIntBoxFromPoints) == 0x000028, "Wrong size on VoxelIntBoxLibrary_MakeIntBoxFromPoints");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBoxFromPoints, Points) == 0x000000, "Member 'VoxelIntBoxLibrary_MakeIntBoxFromPoints::Points' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBoxFromPoints, ReturnValue) == 0x000010, "Member 'VoxelIntBoxLibrary_MakeIntBoxFromPoints::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.MakeIntBoxWithValidity
// 0x0038 (0x0038 - 0x0000)
struct VoxelIntBoxLibrary_MakeIntBoxWithValidity final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelIntBoxWithValidity               ReturnValue;                                       // 0x001C(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_MakeIntBoxWithValidity) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_MakeIntBoxWithValidity");
static_assert(sizeof(VoxelIntBoxLibrary_MakeIntBoxWithValidity) == 0x000038, "Wrong size on VoxelIntBoxLibrary_MakeIntBoxWithValidity");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBoxWithValidity, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_MakeIntBoxWithValidity::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBoxWithValidity, bIsValid) == 0x000018, "Member 'VoxelIntBoxLibrary_MakeIntBoxWithValidity::bIsValid' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_MakeIntBoxWithValidity, ReturnValue) == 0x00001C, "Member 'VoxelIntBoxLibrary_MakeIntBoxWithValidity::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.NotEqual_IntBoxIntBox
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_NotEqual_IntBoxIntBox final
{
public:
	struct FVoxelIntBox                           A;                                                 // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           B;                                                 // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelIntBoxLibrary_NotEqual_IntBoxIntBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_NotEqual_IntBoxIntBox");
static_assert(sizeof(VoxelIntBoxLibrary_NotEqual_IntBoxIntBox) == 0x000034, "Wrong size on VoxelIntBoxLibrary_NotEqual_IntBoxIntBox");
static_assert(offsetof(VoxelIntBoxLibrary_NotEqual_IntBoxIntBox, A) == 0x000000, "Member 'VoxelIntBoxLibrary_NotEqual_IntBoxIntBox::A' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_NotEqual_IntBoxIntBox, B) == 0x000018, "Member 'VoxelIntBoxLibrary_NotEqual_IntBoxIntBox::B' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_NotEqual_IntBoxIntBox, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_NotEqual_IntBoxIntBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Overlap
// 0x0048 (0x0048 - 0x0000)
struct VoxelIntBoxLibrary_Overlap final
{
public:
	struct FVoxelIntBox                           A;                                                 // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           B;                                                 // 0x0018(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Overlap) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Overlap");
static_assert(sizeof(VoxelIntBoxLibrary_Overlap) == 0x000048, "Wrong size on VoxelIntBoxLibrary_Overlap");
static_assert(offsetof(VoxelIntBoxLibrary_Overlap, A) == 0x000000, "Member 'VoxelIntBoxLibrary_Overlap::A' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Overlap, B) == 0x000018, "Member 'VoxelIntBoxLibrary_Overlap::B' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Overlap, ReturnValue) == 0x000030, "Member 'VoxelIntBoxLibrary_Overlap::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.RemoveTranslation
// 0x0030 (0x0030 - 0x0000)
struct VoxelIntBoxLibrary_RemoveTranslation final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_RemoveTranslation) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_RemoveTranslation");
static_assert(sizeof(VoxelIntBoxLibrary_RemoveTranslation) == 0x000030, "Wrong size on VoxelIntBoxLibrary_RemoveTranslation");
static_assert(offsetof(VoxelIntBoxLibrary_RemoveTranslation, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_RemoveTranslation::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_RemoveTranslation, ReturnValue) == 0x000018, "Member 'VoxelIntBoxLibrary_RemoveTranslation::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.Scale
// 0x0034 (0x0034 - 0x0000)
struct VoxelIntBoxLibrary_Scale final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scale_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_Scale) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_Scale");
static_assert(sizeof(VoxelIntBoxLibrary_Scale) == 0x000034, "Wrong size on VoxelIntBoxLibrary_Scale");
static_assert(offsetof(VoxelIntBoxLibrary_Scale, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_Scale::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Scale, Scale_0) == 0x000018, "Member 'VoxelIntBoxLibrary_Scale::Scale_0' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_Scale, ReturnValue) == 0x00001C, "Member 'VoxelIntBoxLibrary_Scale::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelIntBoxLibrary.TranslateBox
// 0x003C (0x003C - 0x0000)
struct VoxelIntBoxLibrary_TranslateBox final
{
public:
	struct FVoxelIntBox                           Box;                                               // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelIntBoxLibrary_TranslateBox) == 0x000004, "Wrong alignment on VoxelIntBoxLibrary_TranslateBox");
static_assert(sizeof(VoxelIntBoxLibrary_TranslateBox) == 0x00003C, "Wrong size on VoxelIntBoxLibrary_TranslateBox");
static_assert(offsetof(VoxelIntBoxLibrary_TranslateBox, Box) == 0x000000, "Member 'VoxelIntBoxLibrary_TranslateBox::Box' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_TranslateBox, Position) == 0x000018, "Member 'VoxelIntBoxLibrary_TranslateBox::Position' has a wrong offset!");
static_assert(offsetof(VoxelIntBoxLibrary_TranslateBox, ReturnValue) == 0x000024, "Member 'VoxelIntBoxLibrary_TranslateBox::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelLevelTools.Level
// 0x0050 (0x0050 - 0x0000)
struct VoxelLevelTools_Level final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x004B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelLevelTools_Level) == 0x000008, "Wrong alignment on VoxelLevelTools_Level");
static_assert(sizeof(VoxelLevelTools_Level) == 0x000050, "Wrong size on VoxelLevelTools_Level");
static_assert(offsetof(VoxelLevelTools_Level, ModifiedValues) == 0x000000, "Member 'VoxelLevelTools_Level::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, EditedBounds) == 0x000010, "Member 'VoxelLevelTools_Level::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, VoxelWorld) == 0x000028, "Member 'VoxelLevelTools_Level::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, Position) == 0x000030, "Member 'VoxelLevelTools_Level::Position' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, Radius) == 0x00003C, "Member 'VoxelLevelTools_Level::Radius' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, Falloff) == 0x000040, "Member 'VoxelLevelTools_Level::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, Height) == 0x000044, "Member 'VoxelLevelTools_Level::Height' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, bAdditive) == 0x000048, "Member 'VoxelLevelTools_Level::bAdditive' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, bMultiThreaded) == 0x000049, "Member 'VoxelLevelTools_Level::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, bRecordModifiedValues) == 0x00004A, "Member 'VoxelLevelTools_Level::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, bConvertToVoxelSpace) == 0x00004B, "Member 'VoxelLevelTools_Level::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_Level, bUpdateRender) == 0x00004C, "Member 'VoxelLevelTools_Level::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelLevelTools.LevelAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelLevelTools_LevelAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x006B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelLevelTools_LevelAsync) == 0x000008, "Wrong alignment on VoxelLevelTools_LevelAsync");
static_assert(sizeof(VoxelLevelTools_LevelAsync) == 0x000070, "Wrong size on VoxelLevelTools_LevelAsync");
static_assert(offsetof(VoxelLevelTools_LevelAsync, WorldContextObject) == 0x000000, "Member 'VoxelLevelTools_LevelAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, LatentInfo) == 0x000008, "Member 'VoxelLevelTools_LevelAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, ModifiedValues) == 0x000020, "Member 'VoxelLevelTools_LevelAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, EditedBounds) == 0x000030, "Member 'VoxelLevelTools_LevelAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, VoxelWorld) == 0x000048, "Member 'VoxelLevelTools_LevelAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, Position) == 0x000050, "Member 'VoxelLevelTools_LevelAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, Radius) == 0x00005C, "Member 'VoxelLevelTools_LevelAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, Falloff) == 0x000060, "Member 'VoxelLevelTools_LevelAsync::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, Height) == 0x000064, "Member 'VoxelLevelTools_LevelAsync::Height' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bAdditive) == 0x000068, "Member 'VoxelLevelTools_LevelAsync::bAdditive' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bMultiThreaded) == 0x000069, "Member 'VoxelLevelTools_LevelAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bRecordModifiedValues) == 0x00006A, "Member 'VoxelLevelTools_LevelAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bConvertToVoxelSpace) == 0x00006B, "Member 'VoxelLevelTools_LevelAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bUpdateRender) == 0x00006C, "Member 'VoxelLevelTools_LevelAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelLevelTools_LevelAsync, bHideLatentWarnings) == 0x00006D, "Member 'VoxelLevelTools_LevelAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelMagicaVoxSceneActor.SetScene
// 0x0008 (0x0008 - 0x0000)
struct VoxelMagicaVoxSceneActor_SetScene final
{
public:
	class UVoxelMagicaVoxScene*                   Scene;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMagicaVoxSceneActor_SetScene) == 0x000008, "Wrong alignment on VoxelMagicaVoxSceneActor_SetScene");
static_assert(sizeof(VoxelMagicaVoxSceneActor_SetScene) == 0x000008, "Wrong size on VoxelMagicaVoxSceneActor_SetScene");
static_assert(offsetof(VoxelMagicaVoxSceneActor_SetScene, Scene) == 0x000000, "Member 'VoxelMagicaVoxSceneActor_SetScene::Scene' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.GetHalton1D
// 0x000C (0x000C - 0x0000)
struct VoxelMathLibrary_GetHalton1D final
{
public:
	struct FVoxelHaltonStream                     Stream;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_GetHalton1D) == 0x000004, "Wrong alignment on VoxelMathLibrary_GetHalton1D");
static_assert(sizeof(VoxelMathLibrary_GetHalton1D) == 0x00000C, "Wrong size on VoxelMathLibrary_GetHalton1D");
static_assert(offsetof(VoxelMathLibrary_GetHalton1D, Stream) == 0x000000, "Member 'VoxelMathLibrary_GetHalton1D::Stream' has a wrong offset!");
static_assert(offsetof(VoxelMathLibrary_GetHalton1D, ReturnValue) == 0x000008, "Member 'VoxelMathLibrary_GetHalton1D::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.GetHalton2D
// 0x0010 (0x0010 - 0x0000)
struct VoxelMathLibrary_GetHalton2D final
{
public:
	struct FVoxelHaltonStream                     Stream;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_GetHalton2D) == 0x000004, "Wrong alignment on VoxelMathLibrary_GetHalton2D");
static_assert(sizeof(VoxelMathLibrary_GetHalton2D) == 0x000010, "Wrong size on VoxelMathLibrary_GetHalton2D");
static_assert(offsetof(VoxelMathLibrary_GetHalton2D, Stream) == 0x000000, "Member 'VoxelMathLibrary_GetHalton2D::Stream' has a wrong offset!");
static_assert(offsetof(VoxelMathLibrary_GetHalton2D, ReturnValue) == 0x000008, "Member 'VoxelMathLibrary_GetHalton2D::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.GetHalton3D
// 0x0014 (0x0014 - 0x0000)
struct VoxelMathLibrary_GetHalton3D final
{
public:
	struct FVoxelHaltonStream                     Stream;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_GetHalton3D) == 0x000004, "Wrong alignment on VoxelMathLibrary_GetHalton3D");
static_assert(sizeof(VoxelMathLibrary_GetHalton3D) == 0x000014, "Wrong size on VoxelMathLibrary_GetHalton3D");
static_assert(offsetof(VoxelMathLibrary_GetHalton3D, Stream) == 0x000000, "Member 'VoxelMathLibrary_GetHalton3D::Stream' has a wrong offset!");
static_assert(offsetof(VoxelMathLibrary_GetHalton3D, ReturnValue) == 0x000008, "Member 'VoxelMathLibrary_GetHalton3D::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.GetUnitVectorFromRandom
// 0x0014 (0x0014 - 0x0000)
struct VoxelMathLibrary_GetUnitVectorFromRandom final
{
public:
	struct FVector2D                              Random;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_GetUnitVectorFromRandom) == 0x000004, "Wrong alignment on VoxelMathLibrary_GetUnitVectorFromRandom");
static_assert(sizeof(VoxelMathLibrary_GetUnitVectorFromRandom) == 0x000014, "Wrong size on VoxelMathLibrary_GetUnitVectorFromRandom");
static_assert(offsetof(VoxelMathLibrary_GetUnitVectorFromRandom, Random) == 0x000000, "Member 'VoxelMathLibrary_GetUnitVectorFromRandom::Random' has a wrong offset!");
static_assert(offsetof(VoxelMathLibrary_GetUnitVectorFromRandom, ReturnValue) == 0x000008, "Member 'VoxelMathLibrary_GetUnitVectorFromRandom::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.MakeHaltonStream
// 0x000C (0x000C - 0x0000)
struct VoxelMathLibrary_MakeHaltonStream final
{
public:
	int32                                         InitialSeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelHaltonStream                     ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_MakeHaltonStream) == 0x000004, "Wrong alignment on VoxelMathLibrary_MakeHaltonStream");
static_assert(sizeof(VoxelMathLibrary_MakeHaltonStream) == 0x00000C, "Wrong size on VoxelMathLibrary_MakeHaltonStream");
static_assert(offsetof(VoxelMathLibrary_MakeHaltonStream, InitialSeed) == 0x000000, "Member 'VoxelMathLibrary_MakeHaltonStream::InitialSeed' has a wrong offset!");
static_assert(offsetof(VoxelMathLibrary_MakeHaltonStream, ReturnValue) == 0x000004, "Member 'VoxelMathLibrary_MakeHaltonStream::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMathLibrary.ResetHaltonStream
// 0x0008 (0x0008 - 0x0000)
struct VoxelMathLibrary_ResetHaltonStream final
{
public:
	struct FVoxelHaltonStream                     Stream;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMathLibrary_ResetHaltonStream) == 0x000004, "Wrong alignment on VoxelMathLibrary_ResetHaltonStream");
static_assert(sizeof(VoxelMathLibrary_ResetHaltonStream) == 0x000008, "Wrong size on VoxelMathLibrary_ResetHaltonStream");
static_assert(offsetof(VoxelMathLibrary_ResetHaltonStream, Stream) == 0x000000, "Member 'VoxelMathLibrary_ResetHaltonStream::Stream' has a wrong offset!");

// Function Voxel.VoxelMeshImporterLibrary.ConvertMeshToVoxels
// 0x00C0 (0x00C0 - 0x0000)
struct VoxelMeshImporterLibrary_ConvertMeshToVoxels final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelMeshImporterInputData*            Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSubtractive;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelMeshImporterSettings             Settings;                                          // 0x0048(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelMeshImporterRenderTargetCache    RenderTargetCache;                                 // 0x0080(0x0028)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UVoxelDataAsset*                        Asset;                                             // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLeaks;                                          // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelMeshImporterLibrary_ConvertMeshToVoxels) == 0x000010, "Wrong alignment on VoxelMeshImporterLibrary_ConvertMeshToVoxels");
static_assert(sizeof(VoxelMeshImporterLibrary_ConvertMeshToVoxels) == 0x0000C0, "Wrong size on VoxelMeshImporterLibrary_ConvertMeshToVoxels");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, WorldContextObject) == 0x000000, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, Mesh) == 0x000008, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::Mesh' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, Transform) == 0x000010, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::Transform' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, bSubtractive) == 0x000040, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::bSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, Settings) == 0x000048, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::Settings' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, RenderTargetCache) == 0x000080, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::RenderTargetCache' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, Asset) == 0x0000A8, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::Asset' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels, NumLeaks) == 0x0000B0, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels::NumLeaks' has a wrong offset!");

// Function Voxel.VoxelMeshImporterLibrary.ConvertMeshToVoxels_NoMaterials
// 0x0070 (0x0070 - 0x0000)
struct VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelMeshImporterInputData*            Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSubtractive;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelMeshImporterSettingsBase         Settings;                                          // 0x0044(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelDataAsset*                        Asset;                                             // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLeaks;                                          // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials) == 0x000010, "Wrong alignment on VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials");
static_assert(sizeof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials) == 0x000070, "Wrong size on VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, WorldContextObject) == 0x000000, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, Mesh) == 0x000008, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::Mesh' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, Transform) == 0x000010, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::Transform' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, bSubtractive) == 0x000040, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::bSubtractive' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, Settings) == 0x000044, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::Settings' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, Asset) == 0x000058, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::Asset' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials, NumLeaks) == 0x000060, "Member 'VoxelMeshImporterLibrary_ConvertMeshToVoxels_NoMaterials::NumLeaks' has a wrong offset!");

// Function Voxel.VoxelMeshImporterLibrary.CreateMeshDataFromStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelMeshImporterInputData*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh) == 0x000008, "Wrong alignment on VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh");
static_assert(sizeof(VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh) == 0x000010, "Wrong size on VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh, StaticMesh) == 0x000000, "Member 'VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh, ReturnValue) == 0x000008, "Member 'VoxelMeshImporterLibrary_CreateMeshDataFromStaticMesh::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMeshImporterLibrary.CreateTextureFromMaterial
// 0x0020 (0x0020 - 0x0000)
struct VoxelMeshImporterLibrary_CreateTextureFromMaterial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelMeshImporterLibrary_CreateTextureFromMaterial) == 0x000008, "Wrong alignment on VoxelMeshImporterLibrary_CreateTextureFromMaterial");
static_assert(sizeof(VoxelMeshImporterLibrary_CreateTextureFromMaterial) == 0x000020, "Wrong size on VoxelMeshImporterLibrary_CreateTextureFromMaterial");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateTextureFromMaterial, WorldContextObject) == 0x000000, "Member 'VoxelMeshImporterLibrary_CreateTextureFromMaterial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateTextureFromMaterial, Material) == 0x000008, "Member 'VoxelMeshImporterLibrary_CreateTextureFromMaterial::Material' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateTextureFromMaterial, Width) == 0x000010, "Member 'VoxelMeshImporterLibrary_CreateTextureFromMaterial::Width' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateTextureFromMaterial, Height) == 0x000014, "Member 'VoxelMeshImporterLibrary_CreateTextureFromMaterial::Height' has a wrong offset!");
static_assert(offsetof(VoxelMeshImporterLibrary_CreateTextureFromMaterial, ReturnValue) == 0x000018, "Member 'VoxelMeshImporterLibrary_CreateTextureFromMaterial::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMultiplayerTcpInterface.ConnectToServer
// 0x0028 (0x0028 - 0x0000)
struct VoxelMultiplayerTcpInterface_ConnectToServer final
{
public:
	class FString                                 OutError;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelMultiplayerTcpInterface_ConnectToServer) == 0x000008, "Wrong alignment on VoxelMultiplayerTcpInterface_ConnectToServer");
static_assert(sizeof(VoxelMultiplayerTcpInterface_ConnectToServer) == 0x000028, "Wrong size on VoxelMultiplayerTcpInterface_ConnectToServer");
static_assert(offsetof(VoxelMultiplayerTcpInterface_ConnectToServer, OutError) == 0x000000, "Member 'VoxelMultiplayerTcpInterface_ConnectToServer::OutError' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_ConnectToServer, IP) == 0x000010, "Member 'VoxelMultiplayerTcpInterface_ConnectToServer::IP' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_ConnectToServer, Port) == 0x000020, "Member 'VoxelMultiplayerTcpInterface_ConnectToServer::Port' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_ConnectToServer, ReturnValue) == 0x000024, "Member 'VoxelMultiplayerTcpInterface_ConnectToServer::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelMultiplayerTcpInterface.StartServer
// 0x0028 (0x0028 - 0x0000)
struct VoxelMultiplayerTcpInterface_StartServer final
{
public:
	class FString                                 OutError;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelMultiplayerTcpInterface_StartServer) == 0x000008, "Wrong alignment on VoxelMultiplayerTcpInterface_StartServer");
static_assert(sizeof(VoxelMultiplayerTcpInterface_StartServer) == 0x000028, "Wrong size on VoxelMultiplayerTcpInterface_StartServer");
static_assert(offsetof(VoxelMultiplayerTcpInterface_StartServer, OutError) == 0x000000, "Member 'VoxelMultiplayerTcpInterface_StartServer::OutError' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_StartServer, IP) == 0x000010, "Member 'VoxelMultiplayerTcpInterface_StartServer::IP' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_StartServer, Port) == 0x000020, "Member 'VoxelMultiplayerTcpInterface_StartServer::Port' has a wrong offset!");
static_assert(offsetof(VoxelMultiplayerTcpInterface_StartServer, ReturnValue) == 0x000024, "Member 'VoxelMultiplayerTcpInterface_StartServer::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelNoClippingComponent.ShouldUseVoxelWorld
// 0x0010 (0x0010 - 0x0000)
struct VoxelNoClippingComponent_ShouldUseVoxelWorld final
{
public:
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNoClippingComponent_ShouldUseVoxelWorld) == 0x000008, "Wrong alignment on VoxelNoClippingComponent_ShouldUseVoxelWorld");
static_assert(sizeof(VoxelNoClippingComponent_ShouldUseVoxelWorld) == 0x000010, "Wrong size on VoxelNoClippingComponent_ShouldUseVoxelWorld");
static_assert(offsetof(VoxelNoClippingComponent_ShouldUseVoxelWorld, VoxelWorld) == 0x000000, "Member 'VoxelNoClippingComponent_ShouldUseVoxelWorld::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelNoClippingComponent_ShouldUseVoxelWorld, ReturnValue) == 0x000008, "Member 'VoxelNoClippingComponent_ShouldUseVoxelWorld::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelPhysicsTools.ApplyVoxelPhysics
// 0x0068 (0x0068 - 0x0000)
struct VoxelPhysicsTools_ApplyVoxelPhysics final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IVoxelPhysicsPartSpawnerResult>> Results;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0038(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IVoxelPhysicsPartSpawner> PartSpawner;                                       // 0x0050(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         MinParts;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelPartType                                PhysicsType;                                       // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelPhysicsTools_ApplyVoxelPhysics) == 0x000008, "Wrong alignment on VoxelPhysicsTools_ApplyVoxelPhysics");
static_assert(sizeof(VoxelPhysicsTools_ApplyVoxelPhysics) == 0x000068, "Wrong size on VoxelPhysicsTools_ApplyVoxelPhysics");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, WorldContextObject) == 0x000000, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, LatentInfo) == 0x000008, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, Results) == 0x000020, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::Results' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, World) == 0x000030, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::World' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, Bounds) == 0x000038, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, PartSpawner) == 0x000050, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::PartSpawner' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, MinParts) == 0x000060, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::MinParts' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, bDebug) == 0x000064, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::bDebug' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, bHideLatentWarnings) == 0x000065, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::bHideLatentWarnings' has a wrong offset!");
static_assert(offsetof(VoxelPhysicsTools_ApplyVoxelPhysics, PhysicsType) == 0x000066, "Member 'VoxelPhysicsTools_ApplyVoxelPhysics::PhysicsType' has a wrong offset!");

// Function Voxel.VoxelWorld.CreateMultiplayerInterfaceInstance
// 0x0008 (0x0008 - 0x0000)
struct VoxelWorld_CreateMultiplayerInterfaceInstance final
{
public:
	class UVoxelMultiplayerInterface*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_CreateMultiplayerInterfaceInstance) == 0x000008, "Wrong alignment on VoxelWorld_CreateMultiplayerInterfaceInstance");
static_assert(sizeof(VoxelWorld_CreateMultiplayerInterfaceInstance) == 0x000008, "Wrong size on VoxelWorld_CreateMultiplayerInterfaceInstance");
static_assert(offsetof(VoxelWorld_CreateMultiplayerInterfaceInstance, ReturnValue) == 0x000000, "Member 'VoxelWorld_CreateMultiplayerInterfaceInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.CreateWorld
// 0x0048 (0x0048 - 0x0000)
struct VoxelWorld_CreateWorld final
{
public:
	struct FVoxelWorldCreateInfo                  Info;                                              // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_CreateWorld) == 0x000008, "Wrong alignment on VoxelWorld_CreateWorld");
static_assert(sizeof(VoxelWorld_CreateWorld) == 0x000048, "Wrong size on VoxelWorld_CreateWorld");
static_assert(offsetof(VoxelWorld_CreateWorld, Info) == 0x000000, "Member 'VoxelWorld_CreateWorld::Info' has a wrong offset!");

// Function Voxel.VoxelWorld.SetCollisionResponseToChannel
// 0x0002 (0x0002 - 0x0000)
struct VoxelWorld_SetCollisionResponseToChannel final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_SetCollisionResponseToChannel) == 0x000001, "Wrong alignment on VoxelWorld_SetCollisionResponseToChannel");
static_assert(sizeof(VoxelWorld_SetCollisionResponseToChannel) == 0x000002, "Wrong size on VoxelWorld_SetCollisionResponseToChannel");
static_assert(offsetof(VoxelWorld_SetCollisionResponseToChannel, Channel) == 0x000000, "Member 'VoxelWorld_SetCollisionResponseToChannel::Channel' has a wrong offset!");
static_assert(offsetof(VoxelWorld_SetCollisionResponseToChannel, NewResponse) == 0x000001, "Member 'VoxelWorld_SetCollisionResponseToChannel::NewResponse' has a wrong offset!");

// Function Voxel.VoxelWorld.SetGeneratorClass
// 0x0008 (0x0008 - 0x0000)
struct VoxelWorld_SetGeneratorClass final
{
public:
	TSubclassOf<class UVoxelGenerator>            NewGeneratorClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_SetGeneratorClass) == 0x000008, "Wrong alignment on VoxelWorld_SetGeneratorClass");
static_assert(sizeof(VoxelWorld_SetGeneratorClass) == 0x000008, "Wrong size on VoxelWorld_SetGeneratorClass");
static_assert(offsetof(VoxelWorld_SetGeneratorClass, NewGeneratorClass) == 0x000000, "Member 'VoxelWorld_SetGeneratorClass::NewGeneratorClass' has a wrong offset!");

// Function Voxel.VoxelWorld.SetGeneratorObject
// 0x0008 (0x0008 - 0x0000)
struct VoxelWorld_SetGeneratorObject final
{
public:
	class UVoxelGenerator*                        NewGenerator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_SetGeneratorObject) == 0x000008, "Wrong alignment on VoxelWorld_SetGeneratorObject");
static_assert(sizeof(VoxelWorld_SetGeneratorObject) == 0x000008, "Wrong size on VoxelWorld_SetGeneratorObject");
static_assert(offsetof(VoxelWorld_SetGeneratorObject, NewGenerator) == 0x000000, "Member 'VoxelWorld_SetGeneratorObject::NewGenerator' has a wrong offset!");

// Function Voxel.VoxelWorld.SetRenderOctreeDepth
// 0x0004 (0x0004 - 0x0000)
struct VoxelWorld_SetRenderOctreeDepth final
{
public:
	int32                                         NewDepth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_SetRenderOctreeDepth) == 0x000004, "Wrong alignment on VoxelWorld_SetRenderOctreeDepth");
static_assert(sizeof(VoxelWorld_SetRenderOctreeDepth) == 0x000004, "Wrong size on VoxelWorld_SetRenderOctreeDepth");
static_assert(offsetof(VoxelWorld_SetRenderOctreeDepth, NewDepth) == 0x000000, "Member 'VoxelWorld_SetRenderOctreeDepth::NewDepth' has a wrong offset!");

// Function Voxel.VoxelWorld.SetWorldSize
// 0x0004 (0x0004 - 0x0000)
struct VoxelWorld_SetWorldSize final
{
public:
	int32                                         NewWorldSizeInVoxels;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_SetWorldSize) == 0x000004, "Wrong alignment on VoxelWorld_SetWorldSize");
static_assert(sizeof(VoxelWorld_SetWorldSize) == 0x000004, "Wrong size on VoxelWorld_SetWorldSize");
static_assert(offsetof(VoxelWorld_SetWorldSize, NewWorldSizeInVoxels) == 0x000000, "Member 'VoxelWorld_SetWorldSize::NewWorldSizeInVoxels' has a wrong offset!");

// Function Voxel.VoxelWorld.GetGeneratorCache
// 0x0008 (0x0008 - 0x0000)
struct VoxelWorld_GetGeneratorCache final
{
public:
	class UVoxelGeneratorCache*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_GetGeneratorCache) == 0x000008, "Wrong alignment on VoxelWorld_GetGeneratorCache");
static_assert(sizeof(VoxelWorld_GetGeneratorCache) == 0x000008, "Wrong size on VoxelWorld_GetGeneratorCache");
static_assert(offsetof(VoxelWorld_GetGeneratorCache, ReturnValue) == 0x000000, "Member 'VoxelWorld_GetGeneratorCache::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.GetGeneratorInit
// 0x0090 (0x0090 - 0x0000)
struct VoxelWorld_GetGeneratorInit final
{
public:
	struct FVoxelGeneratorInit                    ReturnValue;                                       // 0x0000(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_GetGeneratorInit) == 0x000008, "Wrong alignment on VoxelWorld_GetGeneratorInit");
static_assert(sizeof(VoxelWorld_GetGeneratorInit) == 0x000090, "Wrong size on VoxelWorld_GetGeneratorInit");
static_assert(offsetof(VoxelWorld_GetGeneratorInit, ReturnValue) == 0x000000, "Member 'VoxelWorld_GetGeneratorInit::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.GetMultiplayerInterfaceInstance
// 0x0008 (0x0008 - 0x0000)
struct VoxelWorld_GetMultiplayerInterfaceInstance final
{
public:
	class UVoxelMultiplayerInterface*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_GetMultiplayerInterfaceInstance) == 0x000008, "Wrong alignment on VoxelWorld_GetMultiplayerInterfaceInstance");
static_assert(sizeof(VoxelWorld_GetMultiplayerInterfaceInstance) == 0x000008, "Wrong size on VoxelWorld_GetMultiplayerInterfaceInstance");
static_assert(offsetof(VoxelWorld_GetMultiplayerInterfaceInstance, ReturnValue) == 0x000000, "Member 'VoxelWorld_GetMultiplayerInterfaceInstance::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.GetNeighboringPositions
// 0x0020 (0x0020 - 0x0000)
struct VoxelWorld_GetNeighboringPositions final
{
public:
	struct FVector                                GlobalPosition;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntVector>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_GetNeighboringPositions) == 0x000008, "Wrong alignment on VoxelWorld_GetNeighboringPositions");
static_assert(sizeof(VoxelWorld_GetNeighboringPositions) == 0x000020, "Wrong size on VoxelWorld_GetNeighboringPositions");
static_assert(offsetof(VoxelWorld_GetNeighboringPositions, GlobalPosition) == 0x000000, "Member 'VoxelWorld_GetNeighboringPositions::GlobalPosition' has a wrong offset!");
static_assert(offsetof(VoxelWorld_GetNeighboringPositions, ReturnValue) == 0x000010, "Member 'VoxelWorld_GetNeighboringPositions::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.IsCreated
// 0x0001 (0x0001 - 0x0000)
struct VoxelWorld_IsCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_IsCreated) == 0x000001, "Wrong alignment on VoxelWorld_IsCreated");
static_assert(sizeof(VoxelWorld_IsCreated) == 0x000001, "Wrong size on VoxelWorld_IsCreated");
static_assert(offsetof(VoxelWorld_IsCreated, ReturnValue) == 0x000000, "Member 'VoxelWorld_IsCreated::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct VoxelWorld_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_IsLoaded) == 0x000001, "Wrong alignment on VoxelWorld_IsLoaded");
static_assert(sizeof(VoxelWorld_IsLoaded) == 0x000001, "Wrong size on VoxelWorld_IsLoaded");
static_assert(offsetof(VoxelWorld_IsLoaded, ReturnValue) == 0x000000, "Member 'VoxelWorld_IsLoaded::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_GlobalToLocal
// 0x001C (0x001C - 0x0000)
struct VoxelWorld_K2_GlobalToLocal final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelWorldCoordinatesRounding                Rounding;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_GlobalToLocal) == 0x000004, "Wrong alignment on VoxelWorld_K2_GlobalToLocal");
static_assert(sizeof(VoxelWorld_K2_GlobalToLocal) == 0x00001C, "Wrong size on VoxelWorld_K2_GlobalToLocal");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocal, Position) == 0x000000, "Member 'VoxelWorld_K2_GlobalToLocal::Position' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocal, Rounding) == 0x00000C, "Member 'VoxelWorld_K2_GlobalToLocal::Rounding' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocal, ReturnValue) == 0x000010, "Member 'VoxelWorld_K2_GlobalToLocal::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_GlobalToLocalBounds
// 0x0034 (0x0034 - 0x0000)
struct VoxelWorld_K2_GlobalToLocalBounds final
{
public:
	struct FBox                                   Bounds;                                            // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_GlobalToLocalBounds) == 0x000004, "Wrong alignment on VoxelWorld_K2_GlobalToLocalBounds");
static_assert(sizeof(VoxelWorld_K2_GlobalToLocalBounds) == 0x000034, "Wrong size on VoxelWorld_K2_GlobalToLocalBounds");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocalBounds, Bounds) == 0x000000, "Member 'VoxelWorld_K2_GlobalToLocalBounds::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocalBounds, ReturnValue) == 0x00001C, "Member 'VoxelWorld_K2_GlobalToLocalBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_GlobalToLocalFloat
// 0x0018 (0x0018 - 0x0000)
struct VoxelWorld_K2_GlobalToLocalFloat final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_GlobalToLocalFloat) == 0x000004, "Wrong alignment on VoxelWorld_K2_GlobalToLocalFloat");
static_assert(sizeof(VoxelWorld_K2_GlobalToLocalFloat) == 0x000018, "Wrong size on VoxelWorld_K2_GlobalToLocalFloat");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocalFloat, Position) == 0x000000, "Member 'VoxelWorld_K2_GlobalToLocalFloat::Position' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_GlobalToLocalFloat, ReturnValue) == 0x00000C, "Member 'VoxelWorld_K2_GlobalToLocalFloat::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_LocalToGlobal
// 0x0018 (0x0018 - 0x0000)
struct VoxelWorld_K2_LocalToGlobal final
{
public:
	struct FIntVector                             Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_LocalToGlobal) == 0x000004, "Wrong alignment on VoxelWorld_K2_LocalToGlobal");
static_assert(sizeof(VoxelWorld_K2_LocalToGlobal) == 0x000018, "Wrong size on VoxelWorld_K2_LocalToGlobal");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobal, Position) == 0x000000, "Member 'VoxelWorld_K2_LocalToGlobal::Position' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobal, ReturnValue) == 0x00000C, "Member 'VoxelWorld_K2_LocalToGlobal::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_LocalToGlobalBounds
// 0x0034 (0x0034 - 0x0000)
struct VoxelWorld_K2_LocalToGlobalBounds final
{
public:
	struct FVoxelIntBox                           Bounds;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0018(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_LocalToGlobalBounds) == 0x000004, "Wrong alignment on VoxelWorld_K2_LocalToGlobalBounds");
static_assert(sizeof(VoxelWorld_K2_LocalToGlobalBounds) == 0x000034, "Wrong size on VoxelWorld_K2_LocalToGlobalBounds");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobalBounds, Bounds) == 0x000000, "Member 'VoxelWorld_K2_LocalToGlobalBounds::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobalBounds, ReturnValue) == 0x000018, "Member 'VoxelWorld_K2_LocalToGlobalBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelWorld.K2_LocalToGlobalFloat
// 0x0018 (0x0018 - 0x0000)
struct VoxelWorld_K2_LocalToGlobalFloat final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelWorld_K2_LocalToGlobalFloat) == 0x000004, "Wrong alignment on VoxelWorld_K2_LocalToGlobalFloat");
static_assert(sizeof(VoxelWorld_K2_LocalToGlobalFloat) == 0x000018, "Wrong size on VoxelWorld_K2_LocalToGlobalFloat");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobalFloat, Position) == 0x000000, "Member 'VoxelWorld_K2_LocalToGlobalFloat::Position' has a wrong offset!");
static_assert(offsetof(VoxelWorld_K2_LocalToGlobalFloat, ReturnValue) == 0x00000C, "Member 'VoxelWorld_K2_LocalToGlobalFloat::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemManager.AddDataItem
// 0x0038 (0x0038 - 0x0000)
struct VoxelPlaceableItemManager_AddDataItem final
{
public:
	struct FVoxelDataItemConstructionInfo         Info;                                              // 0x0000(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemManager_AddDataItem) == 0x000008, "Wrong alignment on VoxelPlaceableItemManager_AddDataItem");
static_assert(sizeof(VoxelPlaceableItemManager_AddDataItem) == 0x000038, "Wrong size on VoxelPlaceableItemManager_AddDataItem");
static_assert(offsetof(VoxelPlaceableItemManager_AddDataItem, Info) == 0x000000, "Member 'VoxelPlaceableItemManager_AddDataItem::Info' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemManager.DrawDebugLine
// 0x0028 (0x0028 - 0x0000)
struct VoxelPlaceableItemManager_DrawDebugLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemManager_DrawDebugLine) == 0x000004, "Wrong alignment on VoxelPlaceableItemManager_DrawDebugLine");
static_assert(sizeof(VoxelPlaceableItemManager_DrawDebugLine) == 0x000028, "Wrong size on VoxelPlaceableItemManager_DrawDebugLine");
static_assert(offsetof(VoxelPlaceableItemManager_DrawDebugLine, Start) == 0x000000, "Member 'VoxelPlaceableItemManager_DrawDebugLine::Start' has a wrong offset!");
static_assert(offsetof(VoxelPlaceableItemManager_DrawDebugLine, End) == 0x00000C, "Member 'VoxelPlaceableItemManager_DrawDebugLine::End' has a wrong offset!");
static_assert(offsetof(VoxelPlaceableItemManager_DrawDebugLine, Color) == 0x000018, "Member 'VoxelPlaceableItemManager_DrawDebugLine::Color' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemManager.DrawDebugPoint
// 0x001C (0x001C - 0x0000)
struct VoxelPlaceableItemManager_DrawDebugPoint final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemManager_DrawDebugPoint) == 0x000004, "Wrong alignment on VoxelPlaceableItemManager_DrawDebugPoint");
static_assert(sizeof(VoxelPlaceableItemManager_DrawDebugPoint) == 0x00001C, "Wrong size on VoxelPlaceableItemManager_DrawDebugPoint");
static_assert(offsetof(VoxelPlaceableItemManager_DrawDebugPoint, Position) == 0x000000, "Member 'VoxelPlaceableItemManager_DrawDebugPoint::Position' has a wrong offset!");
static_assert(offsetof(VoxelPlaceableItemManager_DrawDebugPoint, Color) == 0x00000C, "Member 'VoxelPlaceableItemManager_DrawDebugPoint::Color' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemManager.GetGeneratorCache
// 0x0008 (0x0008 - 0x0000)
struct VoxelPlaceableItemManager_GetGeneratorCache final
{
public:
	class UVoxelGeneratorCache*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemManager_GetGeneratorCache) == 0x000008, "Wrong alignment on VoxelPlaceableItemManager_GetGeneratorCache");
static_assert(sizeof(VoxelPlaceableItemManager_GetGeneratorCache) == 0x000008, "Wrong size on VoxelPlaceableItemManager_GetGeneratorCache");
static_assert(offsetof(VoxelPlaceableItemManager_GetGeneratorCache, ReturnValue) == 0x000000, "Member 'VoxelPlaceableItemManager_GetGeneratorCache::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelPlaceableItemsUtilities.AddWorms
// 0x0068 (0x0068 - 0x0000)
struct VoxelPlaceableItemsUtilities_AddWorms final
{
public:
	TDelegate<void(const struct FVector& Start, const struct FVector& End, float Radius)> AddWorm;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelPerlinWormsSettings              Settings;                                          // 0x0010(0x0058)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPlaceableItemsUtilities_AddWorms) == 0x000004, "Wrong alignment on VoxelPlaceableItemsUtilities_AddWorms");
static_assert(sizeof(VoxelPlaceableItemsUtilities_AddWorms) == 0x000068, "Wrong size on VoxelPlaceableItemsUtilities_AddWorms");
static_assert(offsetof(VoxelPlaceableItemsUtilities_AddWorms, AddWorm) == 0x000000, "Member 'VoxelPlaceableItemsUtilities_AddWorms::AddWorm' has a wrong offset!");
static_assert(offsetof(VoxelPlaceableItemsUtilities_AddWorms, Settings) == 0x000010, "Member 'VoxelPlaceableItemsUtilities_AddWorms::Settings' has a wrong offset!");

// Function Voxel.VoxelProceduralMeshComponent.AreVoxelCollisionsFrozen
// 0x0010 (0x0010 - 0x0000)
struct VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen final
{
public:
	const class AVoxelWorld*                      VoxelWorld;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen) == 0x000008, "Wrong alignment on VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen");
static_assert(sizeof(VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen) == 0x000010, "Wrong size on VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen");
static_assert(offsetof(VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen, VoxelWorld) == 0x000000, "Member 'VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen, ReturnValue) == 0x000008, "Member 'VoxelProceduralMeshComponent_AreVoxelCollisionsFrozen::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProceduralMeshComponent.SetVoxelCollisionsFrozen
// 0x0010 (0x0010 - 0x0000)
struct VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen final
{
public:
	const class AVoxelWorld*                      VoxelWorld;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrozen;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen) == 0x000008, "Wrong alignment on VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen");
static_assert(sizeof(VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen) == 0x000010, "Wrong size on VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen");
static_assert(offsetof(VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen, VoxelWorld) == 0x000000, "Member 'VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen, bFrozen) == 0x000008, "Member 'VoxelProceduralMeshComponent_SetVoxelCollisionsFrozen::bFrozen' has a wrong offset!");

// Function Voxel.VoxelProceduralMeshComponent.InitChunk
// 0x001C (0x001C - 0x0000)
struct VoxelProceduralMeshComponent_InitChunk final
{
public:
	uint8                                         ChunkLOD;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelIntBox                           ChunkBounds;                                       // 0x0004(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProceduralMeshComponent_InitChunk) == 0x000004, "Wrong alignment on VoxelProceduralMeshComponent_InitChunk");
static_assert(sizeof(VoxelProceduralMeshComponent_InitChunk) == 0x00001C, "Wrong size on VoxelProceduralMeshComponent_InitChunk");
static_assert(offsetof(VoxelProceduralMeshComponent_InitChunk, ChunkLOD) == 0x000000, "Member 'VoxelProceduralMeshComponent_InitChunk::ChunkLOD' has a wrong offset!");
static_assert(offsetof(VoxelProceduralMeshComponent_InitChunk, ChunkBounds) == 0x000004, "Member 'VoxelProceduralMeshComponent_InitChunk::ChunkBounds' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.CreateSurfaceVoxelsFromHits
// 0x0028 (0x0028 - 0x0000)
struct VoxelProjectionTools_CreateSurfaceVoxelsFromHits final
{
public:
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsVoxels               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProjectionTools_CreateSurfaceVoxelsFromHits) == 0x000008, "Wrong alignment on VoxelProjectionTools_CreateSurfaceVoxelsFromHits");
static_assert(sizeof(VoxelProjectionTools_CreateSurfaceVoxelsFromHits) == 0x000028, "Wrong size on VoxelProjectionTools_CreateSurfaceVoxelsFromHits");
static_assert(offsetof(VoxelProjectionTools_CreateSurfaceVoxelsFromHits, Hits) == 0x000000, "Member 'VoxelProjectionTools_CreateSurfaceVoxelsFromHits::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_CreateSurfaceVoxelsFromHits, ReturnValue) == 0x000010, "Member 'VoxelProjectionTools_CreateSurfaceVoxelsFromHits::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.CreateSurfaceVoxelsFromHitsWithExactValues
// 0x0030 (0x0030 - 0x0000)
struct VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsVoxels               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues) == 0x000008, "Wrong alignment on VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues");
static_assert(sizeof(VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues) == 0x000030, "Wrong size on VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues");
static_assert(offsetof(VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues, World) == 0x000000, "Member 'VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues::World' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues, Hits) == 0x000008, "Member 'VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues, ReturnValue) == 0x000018, "Member 'VoxelProjectionTools_CreateSurfaceVoxelsFromHitsWithExactValues::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.FindProjectionVoxels
// 0x0098 (0x0098 - 0x0000)
struct VoxelProjectionTools_FindProjectionVoxels final
{
public:
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelLineTraceParameters              Parameters;                                        // 0x0018(0x0050)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0068(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0074(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelProjectionShape                         Shape;                                             // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumRays;                                           // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelProjectionTools_FindProjectionVoxels) == 0x000008, "Wrong alignment on VoxelProjectionTools_FindProjectionVoxels");
static_assert(sizeof(VoxelProjectionTools_FindProjectionVoxels) == 0x000098, "Wrong size on VoxelProjectionTools_FindProjectionVoxels");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Hits) == 0x000000, "Member 'VoxelProjectionTools_FindProjectionVoxels::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, World) == 0x000010, "Member 'VoxelProjectionTools_FindProjectionVoxels::World' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Parameters) == 0x000018, "Member 'VoxelProjectionTools_FindProjectionVoxels::Parameters' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Position) == 0x000068, "Member 'VoxelProjectionTools_FindProjectionVoxels::Position' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Direction) == 0x000074, "Member 'VoxelProjectionTools_FindProjectionVoxels::Direction' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Radius) == 0x000080, "Member 'VoxelProjectionTools_FindProjectionVoxels::Radius' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, Shape) == 0x000084, "Member 'VoxelProjectionTools_FindProjectionVoxels::Shape' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, NumRays) == 0x000088, "Member 'VoxelProjectionTools_FindProjectionVoxels::NumRays' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, MaxDistance) == 0x00008C, "Member 'VoxelProjectionTools_FindProjectionVoxels::MaxDistance' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxels, ReturnValue) == 0x000090, "Member 'VoxelProjectionTools_FindProjectionVoxels::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.FindProjectionVoxelsAsync
// 0x00B8 (0x00B8 - 0x0000)
struct VoxelProjectionTools_FindProjectionVoxelsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelLineTraceParameters              Parameters;                                        // 0x0038(0x0050)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0088(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0094(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelProjectionShape                         Shape;                                             // 0x00A4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumRays;                                           // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProjectionTools_FindProjectionVoxelsAsync) == 0x000008, "Wrong alignment on VoxelProjectionTools_FindProjectionVoxelsAsync");
static_assert(sizeof(VoxelProjectionTools_FindProjectionVoxelsAsync) == 0x0000B8, "Wrong size on VoxelProjectionTools_FindProjectionVoxelsAsync");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, WorldContextObject) == 0x000000, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, LatentInfo) == 0x000008, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Hits) == 0x000020, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, World) == 0x000030, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Parameters) == 0x000038, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Parameters' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Position) == 0x000088, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Direction) == 0x000094, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Direction' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Radius) == 0x0000A0, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, Shape) == 0x0000A4, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::Shape' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, NumRays) == 0x0000A8, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::NumRays' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, MaxDistance) == 0x0000AC, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::MaxDistance' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, bHideLatentWarnings) == 0x0000B0, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::bHideLatentWarnings' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_FindProjectionVoxelsAsync, ReturnValue) == 0x0000B4, "Member 'VoxelProjectionTools_FindProjectionVoxelsAsync::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.GetHitsAverageNormal
// 0x0020 (0x0020 - 0x0000)
struct VoxelProjectionTools_GetHitsAverageNormal final
{
public:
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelProjectionTools_GetHitsAverageNormal) == 0x000008, "Wrong alignment on VoxelProjectionTools_GetHitsAverageNormal");
static_assert(sizeof(VoxelProjectionTools_GetHitsAverageNormal) == 0x000020, "Wrong size on VoxelProjectionTools_GetHitsAverageNormal");
static_assert(offsetof(VoxelProjectionTools_GetHitsAverageNormal, Hits) == 0x000000, "Member 'VoxelProjectionTools_GetHitsAverageNormal::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_GetHitsAverageNormal, ReturnValue) == 0x000010, "Member 'VoxelProjectionTools_GetHitsAverageNormal::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.GetHitsAveragePosition
// 0x0020 (0x0020 - 0x0000)
struct VoxelProjectionTools_GetHitsAveragePosition final
{
public:
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelProjectionTools_GetHitsAveragePosition) == 0x000008, "Wrong alignment on VoxelProjectionTools_GetHitsAveragePosition");
static_assert(sizeof(VoxelProjectionTools_GetHitsAveragePosition) == 0x000020, "Wrong size on VoxelProjectionTools_GetHitsAveragePosition");
static_assert(offsetof(VoxelProjectionTools_GetHitsAveragePosition, Hits) == 0x000000, "Member 'VoxelProjectionTools_GetHitsAveragePosition::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_GetHitsAveragePosition, ReturnValue) == 0x000010, "Member 'VoxelProjectionTools_GetHitsAveragePosition::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.GetHitsPositions
// 0x0020 (0x0020 - 0x0000)
struct VoxelProjectionTools_GetHitsPositions final
{
public:
	TArray<struct FVoxelProjectionHit>            Hits;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProjectionTools_GetHitsPositions) == 0x000008, "Wrong alignment on VoxelProjectionTools_GetHitsPositions");
static_assert(sizeof(VoxelProjectionTools_GetHitsPositions) == 0x000020, "Wrong size on VoxelProjectionTools_GetHitsPositions");
static_assert(offsetof(VoxelProjectionTools_GetHitsPositions, Hits) == 0x000000, "Member 'VoxelProjectionTools_GetHitsPositions::Hits' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_GetHitsPositions, ReturnValue) == 0x000010, "Member 'VoxelProjectionTools_GetHitsPositions::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelProjectionTools.MakeVoxelLineTraceParameters
// 0x0098 (0x0098 - 0x0000)
struct VoxelProjectionTools_MakeVoxelLineTraceParameters final
{
public:
	TArray<ECollisionChannel>                     CollisionChannelsToIgnore;                         // 0x0000(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0034(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelLineTraceParameters              ReturnValue;                                       // 0x0048(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelProjectionTools_MakeVoxelLineTraceParameters) == 0x000008, "Wrong alignment on VoxelProjectionTools_MakeVoxelLineTraceParameters");
static_assert(sizeof(VoxelProjectionTools_MakeVoxelLineTraceParameters) == 0x000098, "Wrong size on VoxelProjectionTools_MakeVoxelLineTraceParameters");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, CollisionChannelsToIgnore) == 0x000000, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::CollisionChannelsToIgnore' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, ActorsToIgnore) == 0x000010, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, CollisionChannel) == 0x000020, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::CollisionChannel' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, DrawDebugType) == 0x000021, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::DrawDebugType' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, TraceColor) == 0x000024, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::TraceColor' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, TraceHitColor) == 0x000034, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::TraceHitColor' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, DrawTime) == 0x000044, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::DrawTime' has a wrong offset!");
static_assert(offsetof(VoxelProjectionTools_MakeVoxelLineTraceParameters, ReturnValue) == 0x000048, "Member 'VoxelProjectionTools_MakeVoxelLineTraceParameters::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSaveUtilities.CompressVoxelSave
// 0x0040 (0x0040 - 0x0000)
struct VoxelSaveUtilities_CompressVoxelSave final
{
public:
	struct FVoxelUncompressedWorldSave            UncompressedSave;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelCompressedWorldSave              OutCompressedSave;                                 // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSaveUtilities_CompressVoxelSave) == 0x000008, "Wrong alignment on VoxelSaveUtilities_CompressVoxelSave");
static_assert(sizeof(VoxelSaveUtilities_CompressVoxelSave) == 0x000040, "Wrong size on VoxelSaveUtilities_CompressVoxelSave");
static_assert(offsetof(VoxelSaveUtilities_CompressVoxelSave, UncompressedSave) == 0x000000, "Member 'VoxelSaveUtilities_CompressVoxelSave::UncompressedSave' has a wrong offset!");
static_assert(offsetof(VoxelSaveUtilities_CompressVoxelSave, OutCompressedSave) == 0x000020, "Member 'VoxelSaveUtilities_CompressVoxelSave::OutCompressedSave' has a wrong offset!");

// Function Voxel.VoxelSaveUtilities.DecompressVoxelSave
// 0x0048 (0x0048 - 0x0000)
struct VoxelSaveUtilities_DecompressVoxelSave final
{
public:
	struct FVoxelCompressedWorldSave              CompressedSave;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelUncompressedWorldSave            OutUncompressedSave;                               // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSaveUtilities_DecompressVoxelSave) == 0x000008, "Wrong alignment on VoxelSaveUtilities_DecompressVoxelSave");
static_assert(sizeof(VoxelSaveUtilities_DecompressVoxelSave) == 0x000048, "Wrong size on VoxelSaveUtilities_DecompressVoxelSave");
static_assert(offsetof(VoxelSaveUtilities_DecompressVoxelSave, CompressedSave) == 0x000000, "Member 'VoxelSaveUtilities_DecompressVoxelSave::CompressedSave' has a wrong offset!");
static_assert(offsetof(VoxelSaveUtilities_DecompressVoxelSave, OutUncompressedSave) == 0x000020, "Member 'VoxelSaveUtilities_DecompressVoxelSave::OutUncompressedSave' has a wrong offset!");
static_assert(offsetof(VoxelSaveUtilities_DecompressVoxelSave, ReturnValue) == 0x000040, "Member 'VoxelSaveUtilities_DecompressVoxelSave::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSphereTools.AddSphere
// 0x0048 (0x0048 - 0x0000)
struct VoxelSphereTools_AddSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0043(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_AddSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_AddSphere");
static_assert(sizeof(VoxelSphereTools_AddSphere) == 0x000048, "Wrong size on VoxelSphereTools_AddSphere");
static_assert(offsetof(VoxelSphereTools_AddSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_AddSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_AddSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_AddSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, Position) == 0x000030, "Member 'VoxelSphereTools_AddSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_AddSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, bMultiThreaded) == 0x000040, "Member 'VoxelSphereTools_AddSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, bRecordModifiedValues) == 0x000041, "Member 'VoxelSphereTools_AddSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, bConvertToVoxelSpace) == 0x000042, "Member 'VoxelSphereTools_AddSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphere, bUpdateRender) == 0x000043, "Member 'VoxelSphereTools_AddSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.AddSphereAsync
// 0x0068 (0x0068 - 0x0000)
struct VoxelSphereTools_AddSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0063(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_AddSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_AddSphereAsync");
static_assert(sizeof(VoxelSphereTools_AddSphereAsync) == 0x000068, "Wrong size on VoxelSphereTools_AddSphereAsync");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_AddSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_AddSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_AddSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_AddSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_AddSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_AddSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_AddSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, bMultiThreaded) == 0x000060, "Member 'VoxelSphereTools_AddSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, bRecordModifiedValues) == 0x000061, "Member 'VoxelSphereTools_AddSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, bConvertToVoxelSpace) == 0x000062, "Member 'VoxelSphereTools_AddSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, bUpdateRender) == 0x000063, "Member 'VoxelSphereTools_AddSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_AddSphereAsync, bHideLatentWarnings) == 0x000064, "Member 'VoxelSphereTools_AddSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.ApplyKernelSphere
// 0x0058 (0x0058 - 0x0000)
struct VoxelSphereTools_ApplyKernelSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstDegreeNeighborMultiplier;                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondDegreeNeighborMultiplier;                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdDegreeNeighborMultiplier;                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0057(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSphereTools_ApplyKernelSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_ApplyKernelSphere");
static_assert(sizeof(VoxelSphereTools_ApplyKernelSphere) == 0x000058, "Wrong size on VoxelSphereTools_ApplyKernelSphere");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_ApplyKernelSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_ApplyKernelSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_ApplyKernelSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, Position) == 0x000030, "Member 'VoxelSphereTools_ApplyKernelSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_ApplyKernelSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, CenterMultiplier) == 0x000040, "Member 'VoxelSphereTools_ApplyKernelSphere::CenterMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, FirstDegreeNeighborMultiplier) == 0x000044, "Member 'VoxelSphereTools_ApplyKernelSphere::FirstDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, SecondDegreeNeighborMultiplier) == 0x000048, "Member 'VoxelSphereTools_ApplyKernelSphere::SecondDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, ThirdDegreeNeighborMultiplier) == 0x00004C, "Member 'VoxelSphereTools_ApplyKernelSphere::ThirdDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, NumIterations) == 0x000050, "Member 'VoxelSphereTools_ApplyKernelSphere::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, bMultiThreaded) == 0x000054, "Member 'VoxelSphereTools_ApplyKernelSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, bRecordModifiedValues) == 0x000055, "Member 'VoxelSphereTools_ApplyKernelSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, bConvertToVoxelSpace) == 0x000056, "Member 'VoxelSphereTools_ApplyKernelSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphere, bUpdateRender) == 0x000057, "Member 'VoxelSphereTools_ApplyKernelSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.ApplyKernelSphereAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelSphereTools_ApplyKernelSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplier;                                  // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstDegreeNeighborMultiplier;                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondDegreeNeighborMultiplier;                    // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdDegreeNeighborMultiplier;                     // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0075(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0076(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0077(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_ApplyKernelSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_ApplyKernelSphereAsync");
static_assert(sizeof(VoxelSphereTools_ApplyKernelSphereAsync) == 0x000080, "Wrong size on VoxelSphereTools_ApplyKernelSphereAsync");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, CenterMultiplier) == 0x000060, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::CenterMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, FirstDegreeNeighborMultiplier) == 0x000064, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::FirstDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, SecondDegreeNeighborMultiplier) == 0x000068, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::SecondDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, ThirdDegreeNeighborMultiplier) == 0x00006C, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::ThirdDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, NumIterations) == 0x000070, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, bMultiThreaded) == 0x000074, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, bRecordModifiedValues) == 0x000075, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, bConvertToVoxelSpace) == 0x000076, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, bUpdateRender) == 0x000077, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyKernelSphereAsync, bHideLatentWarnings) == 0x000078, "Member 'VoxelSphereTools_ApplyKernelSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.ApplyMaterialKernelSphere
// 0x0060 (0x0060 - 0x0000)
struct VoxelSphereTools_ApplyMaterialKernelSphere final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstDegreeNeighborMultiplier;                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondDegreeNeighborMultiplier;                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdDegreeNeighborMultiplier;                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x005B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_ApplyMaterialKernelSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_ApplyMaterialKernelSphere");
static_assert(sizeof(VoxelSphereTools_ApplyMaterialKernelSphere) == 0x000060, "Wrong size on VoxelSphereTools_ApplyMaterialKernelSphere");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, ModifiedMaterials) == 0x000000, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, Position) == 0x000030, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, CenterMultiplier) == 0x000040, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::CenterMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, FirstDegreeNeighborMultiplier) == 0x000044, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::FirstDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, SecondDegreeNeighborMultiplier) == 0x000048, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::SecondDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, ThirdDegreeNeighborMultiplier) == 0x00004C, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::ThirdDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, NumIterations) == 0x000050, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, Mask) == 0x000054, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, bMultiThreaded) == 0x000058, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, bRecordModifiedMaterials) == 0x000059, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, bConvertToVoxelSpace) == 0x00005A, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphere, bUpdateRender) == 0x00005B, "Member 'VoxelSphereTools_ApplyMaterialKernelSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.ApplyMaterialKernelSphereAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelSphereTools_ApplyMaterialKernelSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplier;                                  // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstDegreeNeighborMultiplier;                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondDegreeNeighborMultiplier;                    // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdDegreeNeighborMultiplier;                     // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x007B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_ApplyMaterialKernelSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_ApplyMaterialKernelSphereAsync");
static_assert(sizeof(VoxelSphereTools_ApplyMaterialKernelSphereAsync) == 0x000080, "Wrong size on VoxelSphereTools_ApplyMaterialKernelSphereAsync");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, CenterMultiplier) == 0x000060, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::CenterMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, FirstDegreeNeighborMultiplier) == 0x000064, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::FirstDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, SecondDegreeNeighborMultiplier) == 0x000068, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::SecondDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, ThirdDegreeNeighborMultiplier) == 0x00006C, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::ThirdDegreeNeighborMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, NumIterations) == 0x000070, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, Mask) == 0x000074, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, bMultiThreaded) == 0x000078, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, bRecordModifiedMaterials) == 0x000079, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, bConvertToVoxelSpace) == 0x00007A, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, bUpdateRender) == 0x00007B, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_ApplyMaterialKernelSphereAsync, bHideLatentWarnings) == 0x00007C, "Member 'VoxelSphereTools_ApplyMaterialKernelSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveCapsule
// 0x0058 (0x0058 - 0x0000)
struct VoxelSphereTools_RemoveCapsule final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveCapsule) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveCapsule");
static_assert(sizeof(VoxelSphereTools_RemoveCapsule) == 0x000058, "Wrong size on VoxelSphereTools_RemoveCapsule");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_RemoveCapsule::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_RemoveCapsule::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_RemoveCapsule::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, Position) == 0x000030, "Member 'VoxelSphereTools_RemoveCapsule::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, Rotation) == 0x00003C, "Member 'VoxelSphereTools_RemoveCapsule::Rotation' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, Radius) == 0x000048, "Member 'VoxelSphereTools_RemoveCapsule::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, HalfHeight) == 0x00004C, "Member 'VoxelSphereTools_RemoveCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, bMultiThreaded) == 0x000050, "Member 'VoxelSphereTools_RemoveCapsule::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, bRecordModifiedValues) == 0x000051, "Member 'VoxelSphereTools_RemoveCapsule::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, bConvertToVoxelSpace) == 0x000052, "Member 'VoxelSphereTools_RemoveCapsule::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsule, bUpdateRender) == 0x000053, "Member 'VoxelSphereTools_RemoveCapsule::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveCapsuleAsync
// 0x0078 (0x0078 - 0x0000)
struct VoxelSphereTools_RemoveCapsuleAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x005C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveCapsuleAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveCapsuleAsync");
static_assert(sizeof(VoxelSphereTools_RemoveCapsuleAsync) == 0x000078, "Wrong size on VoxelSphereTools_RemoveCapsuleAsync");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_RemoveCapsuleAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_RemoveCapsuleAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_RemoveCapsuleAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_RemoveCapsuleAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_RemoveCapsuleAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, Position) == 0x000050, "Member 'VoxelSphereTools_RemoveCapsuleAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, Rotation) == 0x00005C, "Member 'VoxelSphereTools_RemoveCapsuleAsync::Rotation' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, Radius) == 0x000068, "Member 'VoxelSphereTools_RemoveCapsuleAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, HalfHeight) == 0x00006C, "Member 'VoxelSphereTools_RemoveCapsuleAsync::HalfHeight' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, bMultiThreaded) == 0x000070, "Member 'VoxelSphereTools_RemoveCapsuleAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, bRecordModifiedValues) == 0x000071, "Member 'VoxelSphereTools_RemoveCapsuleAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, bConvertToVoxelSpace) == 0x000072, "Member 'VoxelSphereTools_RemoveCapsuleAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, bUpdateRender) == 0x000073, "Member 'VoxelSphereTools_RemoveCapsuleAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveCapsuleAsync, bHideLatentWarnings) == 0x000074, "Member 'VoxelSphereTools_RemoveCapsuleAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveSphere
// 0x0048 (0x0048 - 0x0000)
struct VoxelSphereTools_RemoveSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0043(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveSphere");
static_assert(sizeof(VoxelSphereTools_RemoveSphere) == 0x000048, "Wrong size on VoxelSphereTools_RemoveSphere");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_RemoveSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_RemoveSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_RemoveSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, Position) == 0x000030, "Member 'VoxelSphereTools_RemoveSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_RemoveSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, bMultiThreaded) == 0x000040, "Member 'VoxelSphereTools_RemoveSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, bRecordModifiedValues) == 0x000041, "Member 'VoxelSphereTools_RemoveSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, bConvertToVoxelSpace) == 0x000042, "Member 'VoxelSphereTools_RemoveSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphere, bUpdateRender) == 0x000043, "Member 'VoxelSphereTools_RemoveSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveSphereAsync
// 0x0068 (0x0068 - 0x0000)
struct VoxelSphereTools_RemoveSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0063(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveSphereAsync");
static_assert(sizeof(VoxelSphereTools_RemoveSphereAsync) == 0x000068, "Wrong size on VoxelSphereTools_RemoveSphereAsync");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_RemoveSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_RemoveSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_RemoveSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_RemoveSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_RemoveSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_RemoveSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_RemoveSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, bMultiThreaded) == 0x000060, "Member 'VoxelSphereTools_RemoveSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, bRecordModifiedValues) == 0x000061, "Member 'VoxelSphereTools_RemoveSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, bConvertToVoxelSpace) == 0x000062, "Member 'VoxelSphereTools_RemoveSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, bUpdateRender) == 0x000063, "Member 'VoxelSphereTools_RemoveSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereAsync, bHideLatentWarnings) == 0x000064, "Member 'VoxelSphereTools_RemoveSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveSphereWithDurability
// 0x0050 (0x0050 - 0x0000)
struct VoxelSphereTools_RemoveSphereWithDurability final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelInt32Interval                    Interval;                                          // 0x0040(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x004B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveSphereWithDurability) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveSphereWithDurability");
static_assert(sizeof(VoxelSphereTools_RemoveSphereWithDurability) == 0x000050, "Wrong size on VoxelSphereTools_RemoveSphereWithDurability");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_RemoveSphereWithDurability::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_RemoveSphereWithDurability::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_RemoveSphereWithDurability::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, Position) == 0x000030, "Member 'VoxelSphereTools_RemoveSphereWithDurability::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, Radius) == 0x00003C, "Member 'VoxelSphereTools_RemoveSphereWithDurability::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, Interval) == 0x000040, "Member 'VoxelSphereTools_RemoveSphereWithDurability::Interval' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, bMultiThreaded) == 0x000048, "Member 'VoxelSphereTools_RemoveSphereWithDurability::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, bRecordModifiedValues) == 0x000049, "Member 'VoxelSphereTools_RemoveSphereWithDurability::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, bConvertToVoxelSpace) == 0x00004A, "Member 'VoxelSphereTools_RemoveSphereWithDurability::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurability, bUpdateRender) == 0x00004B, "Member 'VoxelSphereTools_RemoveSphereWithDurability::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RemoveSphereWithDurabilityAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelSphereTools_RemoveSphereWithDurabilityAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelInt32Interval                    Interval;                                          // 0x0060(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x006B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RemoveSphereWithDurabilityAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_RemoveSphereWithDurabilityAsync");
static_assert(sizeof(VoxelSphereTools_RemoveSphereWithDurabilityAsync) == 0x000070, "Wrong size on VoxelSphereTools_RemoveSphereWithDurabilityAsync");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, Position) == 0x000050, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, Interval) == 0x000060, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::Interval' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, bMultiThreaded) == 0x000068, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, bRecordModifiedValues) == 0x000069, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, bConvertToVoxelSpace) == 0x00006A, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, bUpdateRender) == 0x00006B, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RemoveSphereWithDurabilityAsync, bHideLatentWarnings) == 0x00006C, "Member 'VoxelSphereTools_RemoveSphereWithDurabilityAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RevertSphere
// 0x0050 (0x0050 - 0x0000)
struct VoxelSphereTools_RevertSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryPosition;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertValues;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMaterials;                                  // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0047(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RevertSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_RevertSphere");
static_assert(sizeof(VoxelSphereTools_RevertSphere) == 0x000050, "Wrong size on VoxelSphereTools_RevertSphere");
static_assert(offsetof(VoxelSphereTools_RevertSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_RevertSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_RevertSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_RevertSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, Position) == 0x000030, "Member 'VoxelSphereTools_RevertSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_RevertSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, HistoryPosition) == 0x000040, "Member 'VoxelSphereTools_RevertSphere::HistoryPosition' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bRevertValues) == 0x000044, "Member 'VoxelSphereTools_RevertSphere::bRevertValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bRevertMaterials) == 0x000045, "Member 'VoxelSphereTools_RevertSphere::bRevertMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bMultiThreaded) == 0x000046, "Member 'VoxelSphereTools_RevertSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bRecordModifiedValues) == 0x000047, "Member 'VoxelSphereTools_RevertSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bConvertToVoxelSpace) == 0x000048, "Member 'VoxelSphereTools_RevertSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphere, bUpdateRender) == 0x000049, "Member 'VoxelSphereTools_RevertSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RevertSphereAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelSphereTools_RevertSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryPosition;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertValues;                                     // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMaterials;                                  // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0067(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RevertSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_RevertSphereAsync");
static_assert(sizeof(VoxelSphereTools_RevertSphereAsync) == 0x000070, "Wrong size on VoxelSphereTools_RevertSphereAsync");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_RevertSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_RevertSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_RevertSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_RevertSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_RevertSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_RevertSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_RevertSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, HistoryPosition) == 0x000060, "Member 'VoxelSphereTools_RevertSphereAsync::HistoryPosition' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bRevertValues) == 0x000064, "Member 'VoxelSphereTools_RevertSphereAsync::bRevertValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bRevertMaterials) == 0x000065, "Member 'VoxelSphereTools_RevertSphereAsync::bRevertMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bMultiThreaded) == 0x000066, "Member 'VoxelSphereTools_RevertSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bRecordModifiedValues) == 0x000067, "Member 'VoxelSphereTools_RevertSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bConvertToVoxelSpace) == 0x000068, "Member 'VoxelSphereTools_RevertSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bUpdateRender) == 0x000069, "Member 'VoxelSphereTools_RevertSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereAsync, bHideLatentWarnings) == 0x00006A, "Member 'VoxelSphereTools_RevertSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RevertSphereToGenerator
// 0x0048 (0x0048 - 0x0000)
struct VoxelSphereTools_RevertSphereToGenerator final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertValues;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMaterials;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0043(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RevertSphereToGenerator) == 0x000008, "Wrong alignment on VoxelSphereTools_RevertSphereToGenerator");
static_assert(sizeof(VoxelSphereTools_RevertSphereToGenerator) == 0x000048, "Wrong size on VoxelSphereTools_RevertSphereToGenerator");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_RevertSphereToGenerator::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_RevertSphereToGenerator::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_RevertSphereToGenerator::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, Position) == 0x000030, "Member 'VoxelSphereTools_RevertSphereToGenerator::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, Radius) == 0x00003C, "Member 'VoxelSphereTools_RevertSphereToGenerator::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bRevertValues) == 0x000040, "Member 'VoxelSphereTools_RevertSphereToGenerator::bRevertValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bRevertMaterials) == 0x000041, "Member 'VoxelSphereTools_RevertSphereToGenerator::bRevertMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bMultiThreaded) == 0x000042, "Member 'VoxelSphereTools_RevertSphereToGenerator::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bRecordModifiedValues) == 0x000043, "Member 'VoxelSphereTools_RevertSphereToGenerator::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bConvertToVoxelSpace) == 0x000044, "Member 'VoxelSphereTools_RevertSphereToGenerator::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGenerator, bUpdateRender) == 0x000045, "Member 'VoxelSphereTools_RevertSphereToGenerator::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.RevertSphereToGeneratorAsync
// 0x0068 (0x0068 - 0x0000)
struct VoxelSphereTools_RevertSphereToGeneratorAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertValues;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMaterials;                                  // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0063(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_RevertSphereToGeneratorAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_RevertSphereToGeneratorAsync");
static_assert(sizeof(VoxelSphereTools_RevertSphereToGeneratorAsync) == 0x000068, "Wrong size on VoxelSphereTools_RevertSphereToGeneratorAsync");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, Position) == 0x000050, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bRevertValues) == 0x000060, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bRevertValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bRevertMaterials) == 0x000061, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bRevertMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bMultiThreaded) == 0x000062, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bRecordModifiedValues) == 0x000063, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bConvertToVoxelSpace) == 0x000064, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bUpdateRender) == 0x000065, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_RevertSphereToGeneratorAsync, bHideLatentWarnings) == 0x000066, "Member 'VoxelSphereTools_RevertSphereToGeneratorAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetMaterialInCapsule
// 0x00F0 (0x00F0 - 0x0000)
struct VoxelSphereTools_SetMaterialInCapsule final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0050(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x00E9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x00EA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x00EB(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SetMaterialInCapsule) == 0x000008, "Wrong alignment on VoxelSphereTools_SetMaterialInCapsule");
static_assert(sizeof(VoxelSphereTools_SetMaterialInCapsule) == 0x0000F0, "Wrong size on VoxelSphereTools_SetMaterialInCapsule");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, ModifiedMaterials) == 0x000000, "Member 'VoxelSphereTools_SetMaterialInCapsule::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_SetMaterialInCapsule::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_SetMaterialInCapsule::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, Position) == 0x000030, "Member 'VoxelSphereTools_SetMaterialInCapsule::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, Rotation) == 0x00003C, "Member 'VoxelSphereTools_SetMaterialInCapsule::Rotation' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, Radius) == 0x000048, "Member 'VoxelSphereTools_SetMaterialInCapsule::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, HalfHeight) == 0x00004C, "Member 'VoxelSphereTools_SetMaterialInCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, PaintMaterial) == 0x000050, "Member 'VoxelSphereTools_SetMaterialInCapsule::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, bMultiThreaded) == 0x0000E8, "Member 'VoxelSphereTools_SetMaterialInCapsule::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, bRecordModifiedMaterials) == 0x0000E9, "Member 'VoxelSphereTools_SetMaterialInCapsule::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, bConvertToVoxelSpace) == 0x0000EA, "Member 'VoxelSphereTools_SetMaterialInCapsule::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsule, bUpdateRender) == 0x0000EB, "Member 'VoxelSphereTools_SetMaterialInCapsule::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetMaterialInCapsuleAsync
// 0x0110 (0x0110 - 0x0000)
struct VoxelSphereTools_SetMaterialInCapsuleAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x005C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0070(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x010A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x010B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x010C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SetMaterialInCapsuleAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_SetMaterialInCapsuleAsync");
static_assert(sizeof(VoxelSphereTools_SetMaterialInCapsuleAsync) == 0x000110, "Wrong size on VoxelSphereTools_SetMaterialInCapsuleAsync");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, Position) == 0x000050, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, Rotation) == 0x00005C, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::Rotation' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, Radius) == 0x000068, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, HalfHeight) == 0x00006C, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::HalfHeight' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, PaintMaterial) == 0x000070, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, bMultiThreaded) == 0x000108, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, bRecordModifiedMaterials) == 0x000109, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, bConvertToVoxelSpace) == 0x00010A, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, bUpdateRender) == 0x00010B, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialInCapsuleAsync, bHideLatentWarnings) == 0x00010C, "Member 'VoxelSphereTools_SetMaterialInCapsuleAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetMaterialSphere
// 0x00E8 (0x00E8 - 0x0000)
struct VoxelSphereTools_SetMaterialSphere final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0040(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x00DC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x00E4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x00E5(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x00E6(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x00E7(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSphereTools_SetMaterialSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_SetMaterialSphere");
static_assert(sizeof(VoxelSphereTools_SetMaterialSphere) == 0x0000E8, "Wrong size on VoxelSphereTools_SetMaterialSphere");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, ModifiedMaterials) == 0x000000, "Member 'VoxelSphereTools_SetMaterialSphere::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_SetMaterialSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_SetMaterialSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, Position) == 0x000030, "Member 'VoxelSphereTools_SetMaterialSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_SetMaterialSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, PaintMaterial) == 0x000040, "Member 'VoxelSphereTools_SetMaterialSphere::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, Strength) == 0x0000D8, "Member 'VoxelSphereTools_SetMaterialSphere::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, FalloffType) == 0x0000DC, "Member 'VoxelSphereTools_SetMaterialSphere::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, Falloff) == 0x0000E0, "Member 'VoxelSphereTools_SetMaterialSphere::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, bMultiThreaded) == 0x0000E4, "Member 'VoxelSphereTools_SetMaterialSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, bRecordModifiedMaterials) == 0x0000E5, "Member 'VoxelSphereTools_SetMaterialSphere::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, bConvertToVoxelSpace) == 0x0000E6, "Member 'VoxelSphereTools_SetMaterialSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphere, bUpdateRender) == 0x0000E7, "Member 'VoxelSphereTools_SetMaterialSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetMaterialSphereAsync
// 0x0110 (0x0110 - 0x0000)
struct VoxelSphereTools_SetMaterialSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0060(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x00FC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0104(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0105(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0106(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0107(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SetMaterialSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_SetMaterialSphereAsync");
static_assert(sizeof(VoxelSphereTools_SetMaterialSphereAsync) == 0x000110, "Wrong size on VoxelSphereTools_SetMaterialSphereAsync");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_SetMaterialSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_SetMaterialSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSphereTools_SetMaterialSphereAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_SetMaterialSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_SetMaterialSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_SetMaterialSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_SetMaterialSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, PaintMaterial) == 0x000060, "Member 'VoxelSphereTools_SetMaterialSphereAsync::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, Strength) == 0x0000F8, "Member 'VoxelSphereTools_SetMaterialSphereAsync::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, FalloffType) == 0x0000FC, "Member 'VoxelSphereTools_SetMaterialSphereAsync::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, Falloff) == 0x000100, "Member 'VoxelSphereTools_SetMaterialSphereAsync::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, bMultiThreaded) == 0x000104, "Member 'VoxelSphereTools_SetMaterialSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, bRecordModifiedMaterials) == 0x000105, "Member 'VoxelSphereTools_SetMaterialSphereAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, bConvertToVoxelSpace) == 0x000106, "Member 'VoxelSphereTools_SetMaterialSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, bUpdateRender) == 0x000107, "Member 'VoxelSphereTools_SetMaterialSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetMaterialSphereAsync, bHideLatentWarnings) == 0x000108, "Member 'VoxelSphereTools_SetMaterialSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetValueSphere
// 0x0048 (0x0048 - 0x0000)
struct VoxelSphereTools_SetValueSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0047(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSphereTools_SetValueSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_SetValueSphere");
static_assert(sizeof(VoxelSphereTools_SetValueSphere) == 0x000048, "Wrong size on VoxelSphereTools_SetValueSphere");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_SetValueSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_SetValueSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_SetValueSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, Position) == 0x000030, "Member 'VoxelSphereTools_SetValueSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_SetValueSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, Value) == 0x000040, "Member 'VoxelSphereTools_SetValueSphere::Value' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, bMultiThreaded) == 0x000044, "Member 'VoxelSphereTools_SetValueSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, bRecordModifiedValues) == 0x000045, "Member 'VoxelSphereTools_SetValueSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, bConvertToVoxelSpace) == 0x000046, "Member 'VoxelSphereTools_SetValueSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphere, bUpdateRender) == 0x000047, "Member 'VoxelSphereTools_SetValueSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SetValueSphereAsync
// 0x0070 (0x0070 - 0x0000)
struct VoxelSphereTools_SetValueSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0067(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SetValueSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_SetValueSphereAsync");
static_assert(sizeof(VoxelSphereTools_SetValueSphereAsync) == 0x000070, "Wrong size on VoxelSphereTools_SetValueSphereAsync");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_SetValueSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_SetValueSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_SetValueSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_SetValueSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_SetValueSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_SetValueSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_SetValueSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, Value) == 0x000060, "Member 'VoxelSphereTools_SetValueSphereAsync::Value' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, bMultiThreaded) == 0x000064, "Member 'VoxelSphereTools_SetValueSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, bRecordModifiedValues) == 0x000065, "Member 'VoxelSphereTools_SetValueSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, bConvertToVoxelSpace) == 0x000066, "Member 'VoxelSphereTools_SetValueSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, bUpdateRender) == 0x000067, "Member 'VoxelSphereTools_SetValueSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SetValueSphereAsync, bHideLatentWarnings) == 0x000068, "Member 'VoxelSphereTools_SetValueSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SmoothMaterialSphere
// 0x0058 (0x0058 - 0x0000)
struct VoxelSphereTools_SmoothMaterialSphere final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0057(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSphereTools_SmoothMaterialSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_SmoothMaterialSphere");
static_assert(sizeof(VoxelSphereTools_SmoothMaterialSphere) == 0x000058, "Wrong size on VoxelSphereTools_SmoothMaterialSphere");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, ModifiedMaterials) == 0x000000, "Member 'VoxelSphereTools_SmoothMaterialSphere::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_SmoothMaterialSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_SmoothMaterialSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, Position) == 0x000030, "Member 'VoxelSphereTools_SmoothMaterialSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_SmoothMaterialSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, Strength) == 0x000040, "Member 'VoxelSphereTools_SmoothMaterialSphere::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, NumIterations) == 0x000044, "Member 'VoxelSphereTools_SmoothMaterialSphere::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, Mask) == 0x000048, "Member 'VoxelSphereTools_SmoothMaterialSphere::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, FalloffType) == 0x00004C, "Member 'VoxelSphereTools_SmoothMaterialSphere::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, Falloff) == 0x000050, "Member 'VoxelSphereTools_SmoothMaterialSphere::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, bMultiThreaded) == 0x000054, "Member 'VoxelSphereTools_SmoothMaterialSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, bRecordModifiedMaterials) == 0x000055, "Member 'VoxelSphereTools_SmoothMaterialSphere::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, bConvertToVoxelSpace) == 0x000056, "Member 'VoxelSphereTools_SmoothMaterialSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphere, bUpdateRender) == 0x000057, "Member 'VoxelSphereTools_SmoothMaterialSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SmoothMaterialSphereAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelSphereTools_SmoothMaterialSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mask;                                              // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0075(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0076(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0077(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SmoothMaterialSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_SmoothMaterialSphereAsync");
static_assert(sizeof(VoxelSphereTools_SmoothMaterialSphereAsync) == 0x000080, "Wrong size on VoxelSphereTools_SmoothMaterialSphereAsync");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, Strength) == 0x000060, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, NumIterations) == 0x000064, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, Mask) == 0x000068, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, FalloffType) == 0x00006C, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, Falloff) == 0x000070, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, bMultiThreaded) == 0x000074, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, bRecordModifiedMaterials) == 0x000075, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, bConvertToVoxelSpace) == 0x000076, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, bUpdateRender) == 0x000077, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothMaterialSphereAsync, bHideLatentWarnings) == 0x000078, "Member 'VoxelSphereTools_SmoothMaterialSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SmoothSphere
// 0x0058 (0x0058 - 0x0000)
struct VoxelSphereTools_SmoothSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SmoothSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_SmoothSphere");
static_assert(sizeof(VoxelSphereTools_SmoothSphere) == 0x000058, "Wrong size on VoxelSphereTools_SmoothSphere");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_SmoothSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_SmoothSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_SmoothSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, Position) == 0x000030, "Member 'VoxelSphereTools_SmoothSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, Radius) == 0x00003C, "Member 'VoxelSphereTools_SmoothSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, Strength) == 0x000040, "Member 'VoxelSphereTools_SmoothSphere::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, NumIterations) == 0x000044, "Member 'VoxelSphereTools_SmoothSphere::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, FalloffType) == 0x000048, "Member 'VoxelSphereTools_SmoothSphere::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, Falloff) == 0x00004C, "Member 'VoxelSphereTools_SmoothSphere::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, bMultiThreaded) == 0x000050, "Member 'VoxelSphereTools_SmoothSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, bRecordModifiedValues) == 0x000051, "Member 'VoxelSphereTools_SmoothSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, bConvertToVoxelSpace) == 0x000052, "Member 'VoxelSphereTools_SmoothSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphere, bUpdateRender) == 0x000053, "Member 'VoxelSphereTools_SmoothSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.SmoothSphereAsync
// 0x0078 (0x0078 - 0x0000)
struct VoxelSphereTools_SmoothSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_SmoothSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_SmoothSphereAsync");
static_assert(sizeof(VoxelSphereTools_SmoothSphereAsync) == 0x000078, "Wrong size on VoxelSphereTools_SmoothSphereAsync");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_SmoothSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_SmoothSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_SmoothSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_SmoothSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_SmoothSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_SmoothSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, Radius) == 0x00005C, "Member 'VoxelSphereTools_SmoothSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, Strength) == 0x000060, "Member 'VoxelSphereTools_SmoothSphereAsync::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, NumIterations) == 0x000064, "Member 'VoxelSphereTools_SmoothSphereAsync::NumIterations' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, FalloffType) == 0x000068, "Member 'VoxelSphereTools_SmoothSphereAsync::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, Falloff) == 0x00006C, "Member 'VoxelSphereTools_SmoothSphereAsync::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, bMultiThreaded) == 0x000070, "Member 'VoxelSphereTools_SmoothSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, bRecordModifiedValues) == 0x000071, "Member 'VoxelSphereTools_SmoothSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, bConvertToVoxelSpace) == 0x000072, "Member 'VoxelSphereTools_SmoothSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, bUpdateRender) == 0x000073, "Member 'VoxelSphereTools_SmoothSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_SmoothSphereAsync, bHideLatentWarnings) == 0x000074, "Member 'VoxelSphereTools_SmoothSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSphereTools.TrimSphere
// 0x0058 (0x0058 - 0x0000)
struct VoxelSphereTools_TrimSphere final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_TrimSphere) == 0x000008, "Wrong alignment on VoxelSphereTools_TrimSphere");
static_assert(sizeof(VoxelSphereTools_TrimSphere) == 0x000058, "Wrong size on VoxelSphereTools_TrimSphere");
static_assert(offsetof(VoxelSphereTools_TrimSphere, ModifiedValues) == 0x000000, "Member 'VoxelSphereTools_TrimSphere::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, EditedBounds) == 0x000010, "Member 'VoxelSphereTools_TrimSphere::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, VoxelWorld) == 0x000028, "Member 'VoxelSphereTools_TrimSphere::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, Position) == 0x000030, "Member 'VoxelSphereTools_TrimSphere::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, Normal) == 0x00003C, "Member 'VoxelSphereTools_TrimSphere::Normal' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, Radius) == 0x000048, "Member 'VoxelSphereTools_TrimSphere::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, Falloff) == 0x00004C, "Member 'VoxelSphereTools_TrimSphere::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, bAdditive) == 0x000050, "Member 'VoxelSphereTools_TrimSphere::bAdditive' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, bMultiThreaded) == 0x000051, "Member 'VoxelSphereTools_TrimSphere::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, bRecordModifiedValues) == 0x000052, "Member 'VoxelSphereTools_TrimSphere::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, bConvertToVoxelSpace) == 0x000053, "Member 'VoxelSphereTools_TrimSphere::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphere, bUpdateRender) == 0x000054, "Member 'VoxelSphereTools_TrimSphere::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSphereTools.TrimSphereAsync
// 0x0078 (0x0078 - 0x0000)
struct VoxelSphereTools_TrimSphereAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x005C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0075(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSphereTools_TrimSphereAsync) == 0x000008, "Wrong alignment on VoxelSphereTools_TrimSphereAsync");
static_assert(sizeof(VoxelSphereTools_TrimSphereAsync) == 0x000078, "Wrong size on VoxelSphereTools_TrimSphereAsync");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, WorldContextObject) == 0x000000, "Member 'VoxelSphereTools_TrimSphereAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, LatentInfo) == 0x000008, "Member 'VoxelSphereTools_TrimSphereAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, ModifiedValues) == 0x000020, "Member 'VoxelSphereTools_TrimSphereAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, EditedBounds) == 0x000030, "Member 'VoxelSphereTools_TrimSphereAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, VoxelWorld) == 0x000048, "Member 'VoxelSphereTools_TrimSphereAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, Position) == 0x000050, "Member 'VoxelSphereTools_TrimSphereAsync::Position' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, Normal) == 0x00005C, "Member 'VoxelSphereTools_TrimSphereAsync::Normal' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, Radius) == 0x000068, "Member 'VoxelSphereTools_TrimSphereAsync::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, Falloff) == 0x00006C, "Member 'VoxelSphereTools_TrimSphereAsync::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bAdditive) == 0x000070, "Member 'VoxelSphereTools_TrimSphereAsync::bAdditive' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bMultiThreaded) == 0x000071, "Member 'VoxelSphereTools_TrimSphereAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bRecordModifiedValues) == 0x000072, "Member 'VoxelSphereTools_TrimSphereAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bConvertToVoxelSpace) == 0x000073, "Member 'VoxelSphereTools_TrimSphereAsync::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bUpdateRender) == 0x000074, "Member 'VoxelSphereTools_TrimSphereAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSphereTools_TrimSphereAsync, bHideLatentWarnings) == 0x000075, "Member 'VoxelSphereTools_TrimSphereAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.EditVoxelMaterials
// 0x0100 (0x0100 - 0x0000)
struct VoxelSurfaceEditTools_EditVoxelMaterials final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0030(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x00C8(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x00F9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x00FA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceEditTools_EditVoxelMaterials) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_EditVoxelMaterials");
static_assert(sizeof(VoxelSurfaceEditTools_EditVoxelMaterials) == 0x000100, "Wrong size on VoxelSurfaceEditTools_EditVoxelMaterials");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, ModifiedMaterials) == 0x000000, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, EditedBounds) == 0x000010, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, VoxelWorld) == 0x000028, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, PaintMaterial) == 0x000030, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, ProcessedVoxels) == 0x0000C8, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, bMultiThreaded) == 0x0000F8, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, bRecordModifiedMaterials) == 0x0000F9, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterials, bUpdateRender) == 0x0000FA, "Member 'VoxelSurfaceEditTools_EditVoxelMaterials::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.EditVoxelMaterialsAsync
// 0x0120 (0x0120 - 0x0000)
struct VoxelSurfaceEditTools_EditVoxelMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelPaintMaterial                    PaintMaterial;                                     // 0x0050(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x00E8(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x011A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x011B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_EditVoxelMaterialsAsync");
static_assert(sizeof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync) == 0x000120, "Wrong size on VoxelSurfaceEditTools_EditVoxelMaterialsAsync");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, EditedBounds) == 0x000030, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, VoxelWorld) == 0x000048, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, PaintMaterial) == 0x000050, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::PaintMaterial' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, ProcessedVoxels) == 0x0000E8, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, bMultiThreaded) == 0x000118, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, bRecordModifiedMaterials) == 0x000119, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, bUpdateRender) == 0x00011A, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelMaterialsAsync, bHideLatentWarnings) == 0x00011B, "Member 'VoxelSurfaceEditTools_EditVoxelMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.EditVoxelValues
// 0x0068 (0x0068 - 0x0000)
struct VoxelSurfaceEditTools_EditVoxelValues final
{
public:
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DistanceDivisor;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0065(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0066(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceEditTools_EditVoxelValues) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_EditVoxelValues");
static_assert(sizeof(VoxelSurfaceEditTools_EditVoxelValues) == 0x000068, "Wrong size on VoxelSurfaceEditTools_EditVoxelValues");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, ModifiedValues) == 0x000000, "Member 'VoxelSurfaceEditTools_EditVoxelValues::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, EditedBounds) == 0x000010, "Member 'VoxelSurfaceEditTools_EditVoxelValues::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, VoxelWorld) == 0x000028, "Member 'VoxelSurfaceEditTools_EditVoxelValues::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, ProcessedVoxels) == 0x000030, "Member 'VoxelSurfaceEditTools_EditVoxelValues::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, DistanceDivisor) == 0x000060, "Member 'VoxelSurfaceEditTools_EditVoxelValues::DistanceDivisor' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, bMultiThreaded) == 0x000064, "Member 'VoxelSurfaceEditTools_EditVoxelValues::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, bRecordModifiedValues) == 0x000065, "Member 'VoxelSurfaceEditTools_EditVoxelValues::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValues, bUpdateRender) == 0x000066, "Member 'VoxelSurfaceEditTools_EditVoxelValues::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.EditVoxelValuesAsync
// 0x0088 (0x0088 - 0x0000)
struct VoxelSurfaceEditTools_EditVoxelValuesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelValue>            ModifiedValues;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0050(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DistanceDivisor;                                   // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedValues;                             // 0x0085(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0086(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0087(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceEditTools_EditVoxelValuesAsync) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_EditVoxelValuesAsync");
static_assert(sizeof(VoxelSurfaceEditTools_EditVoxelValuesAsync) == 0x000088, "Wrong size on VoxelSurfaceEditTools_EditVoxelValuesAsync");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, ModifiedValues) == 0x000020, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::ModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, EditedBounds) == 0x000030, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, VoxelWorld) == 0x000048, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, ProcessedVoxels) == 0x000050, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, DistanceDivisor) == 0x000080, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::DistanceDivisor' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, bMultiThreaded) == 0x000084, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, bRecordModifiedValues) == 0x000085, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::bRecordModifiedValues' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, bUpdateRender) == 0x000086, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_EditVoxelValuesAsync, bHideLatentWarnings) == 0x000087, "Member 'VoxelSurfaceEditTools_EditVoxelValuesAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.PropagateVoxelMaterials
// 0x0068 (0x0068 - 0x0000)
struct VoxelSurfaceEditTools_PropagateVoxelMaterials final
{
public:
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0010(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceEditTools_PropagateVoxelMaterials) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_PropagateVoxelMaterials");
static_assert(sizeof(VoxelSurfaceEditTools_PropagateVoxelMaterials) == 0x000068, "Wrong size on VoxelSurfaceEditTools_PropagateVoxelMaterials");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, ModifiedMaterials) == 0x000000, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, EditedBounds) == 0x000010, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, VoxelWorld) == 0x000028, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, ProcessedVoxels) == 0x000030, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, bMultiThreaded) == 0x000060, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, bRecordModifiedMaterials) == 0x000061, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterials, bUpdateRender) == 0x000062, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterials::bUpdateRender' has a wrong offset!");

// Function Voxel.VoxelSurfaceEditTools.PropagateVoxelMaterialsAsync
// 0x0088 (0x0088 - 0x0000)
struct VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FModifiedVoxelMaterial>         ModifiedMaterials;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           EditedBounds;                                      // 0x0030(0x0018)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            VoxelWorld;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0050(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordModifiedMaterials;                          // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRender;                                     // 0x0082(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0083(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync) == 0x000008, "Wrong alignment on VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync");
static_assert(sizeof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync) == 0x000088, "Wrong size on VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, ModifiedMaterials) == 0x000020, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::ModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, EditedBounds) == 0x000030, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::EditedBounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, VoxelWorld) == 0x000048, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::VoxelWorld' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, ProcessedVoxels) == 0x000050, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, bMultiThreaded) == 0x000080, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, bRecordModifiedMaterials) == 0x000081, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::bRecordModifiedMaterials' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, bUpdateRender) == 0x000082, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::bUpdateRender' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync, bHideLatentWarnings) == 0x000083, "Member 'VoxelSurfaceEditTools_PropagateVoxelMaterialsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.AddToStack
// 0x0080 (0x0080 - 0x0000)
struct VoxelSurfaceTools_AddToStack final
{
public:
	struct FVoxelSurfaceEditsStack                Stack;                                             // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsStackElement         Element;                                           // 0x0010(0x0060)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsStack                ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_AddToStack) == 0x000010, "Wrong alignment on VoxelSurfaceTools_AddToStack");
static_assert(sizeof(VoxelSurfaceTools_AddToStack) == 0x000080, "Wrong size on VoxelSurfaceTools_AddToStack");
static_assert(offsetof(VoxelSurfaceTools_AddToStack, Stack) == 0x000000, "Member 'VoxelSurfaceTools_AddToStack::Stack' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_AddToStack, Element) == 0x000010, "Member 'VoxelSurfaceTools_AddToStack::Element' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_AddToStack, ReturnValue) == 0x000070, "Member 'VoxelSurfaceTools_AddToStack::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyConstantStrength
// 0x0070 (0x0070 - 0x0000)
struct VoxelSurfaceTools_ApplyConstantStrength final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyConstantStrength) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyConstantStrength");
static_assert(sizeof(VoxelSurfaceTools_ApplyConstantStrength) == 0x000070, "Wrong size on VoxelSurfaceTools_ApplyConstantStrength");
static_assert(offsetof(VoxelSurfaceTools_ApplyConstantStrength, Strength) == 0x000000, "Member 'VoxelSurfaceTools_ApplyConstantStrength::Strength' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyConstantStrength, ReturnValue) == 0x000010, "Member 'VoxelSurfaceTools_ApplyConstantStrength::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyFalloff
// 0x0090 (0x0090 - 0x0000)
struct VoxelSurfaceTools_ApplyFalloff final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Center;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyFalloff) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyFalloff");
static_assert(sizeof(VoxelSurfaceTools_ApplyFalloff) == 0x000090, "Wrong size on VoxelSurfaceTools_ApplyFalloff");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, World) == 0x000000, "Member 'VoxelSurfaceTools_ApplyFalloff::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, FalloffType) == 0x000008, "Member 'VoxelSurfaceTools_ApplyFalloff::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, Center) == 0x00000C, "Member 'VoxelSurfaceTools_ApplyFalloff::Center' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, Radius) == 0x000018, "Member 'VoxelSurfaceTools_ApplyFalloff::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, Falloff) == 0x00001C, "Member 'VoxelSurfaceTools_ApplyFalloff::Falloff' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, bConvertToVoxelSpace) == 0x000020, "Member 'VoxelSurfaceTools_ApplyFalloff::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFalloff, ReturnValue) == 0x000030, "Member 'VoxelSurfaceTools_ApplyFalloff::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyFlatten
// 0x0090 (0x0090 - 0x0000)
struct VoxelSurfaceTools_ApplyFlatten final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSDFMergeMode                            MergeMode;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0xE];                                       // 0x0022(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyFlatten) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyFlatten");
static_assert(sizeof(VoxelSurfaceTools_ApplyFlatten) == 0x000090, "Wrong size on VoxelSurfaceTools_ApplyFlatten");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, World) == 0x000000, "Member 'VoxelSurfaceTools_ApplyFlatten::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, PlanePoint) == 0x000008, "Member 'VoxelSurfaceTools_ApplyFlatten::PlanePoint' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, PlaneNormal) == 0x000014, "Member 'VoxelSurfaceTools_ApplyFlatten::PlaneNormal' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, MergeMode) == 0x000020, "Member 'VoxelSurfaceTools_ApplyFlatten::MergeMode' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, bConvertToVoxelSpace) == 0x000021, "Member 'VoxelSurfaceTools_ApplyFlatten::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyFlatten, ReturnValue) == 0x000030, "Member 'VoxelSurfaceTools_ApplyFlatten::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyStack
// 0x0058 (0x0058 - 0x0000)
struct VoxelSurfaceTools_ApplyStack final
{
public:
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsStack                Stack;                                             // 0x0018(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ReturnValue;                                       // 0x0028(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyStack) == 0x000008, "Wrong alignment on VoxelSurfaceTools_ApplyStack");
static_assert(sizeof(VoxelSurfaceTools_ApplyStack) == 0x000058, "Wrong size on VoxelSurfaceTools_ApplyStack");
static_assert(offsetof(VoxelSurfaceTools_ApplyStack, Voxels) == 0x000000, "Member 'VoxelSurfaceTools_ApplyStack::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStack, Stack) == 0x000018, "Member 'VoxelSurfaceTools_ApplyStack::Stack' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStack, ReturnValue) == 0x000028, "Member 'VoxelSurfaceTools_ApplyStack::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyStackAsync
// 0x0080 (0x0080 - 0x0000)
struct VoxelSurfaceTools_ApplyStackAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0020(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsStack                Stack;                                             // 0x0068(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_ApplyStackAsync) == 0x000008, "Wrong alignment on VoxelSurfaceTools_ApplyStackAsync");
static_assert(sizeof(VoxelSurfaceTools_ApplyStackAsync) == 0x000080, "Wrong size on VoxelSurfaceTools_ApplyStackAsync");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceTools_ApplyStackAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceTools_ApplyStackAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, ProcessedVoxels) == 0x000020, "Member 'VoxelSurfaceTools_ApplyStackAsync::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, Voxels) == 0x000050, "Member 'VoxelSurfaceTools_ApplyStackAsync::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, Stack) == 0x000068, "Member 'VoxelSurfaceTools_ApplyStackAsync::Stack' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStackAsync, bHideLatentWarnings) == 0x000078, "Member 'VoxelSurfaceTools_ApplyStackAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyStrengthCurve
// 0x0090 (0x0090 - 0x0000)
struct VoxelSurfaceTools_ApplyStrengthCurve final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrengthCurve;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0030(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyStrengthCurve) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyStrengthCurve");
static_assert(sizeof(VoxelSurfaceTools_ApplyStrengthCurve) == 0x000090, "Wrong size on VoxelSurfaceTools_ApplyStrengthCurve");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, World) == 0x000000, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, Center) == 0x000008, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::Center' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, Radius) == 0x000014, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, StrengthCurve) == 0x000018, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::StrengthCurve' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, bConvertToVoxelSpace) == 0x000020, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthCurve, ReturnValue) == 0x000030, "Member 'VoxelSurfaceTools_ApplyStrengthCurve::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyStrengthMask
// 0x00B0 (0x00B0 - 0x0000)
struct VoxelSurfaceTools_ApplyStrengthMask final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelFloatTexture                     Mask;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                EditPosition;                                      // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneTangent;                                      // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSamplerMode                             SamplerMode;                                       // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0050(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyStrengthMask) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyStrengthMask");
static_assert(sizeof(VoxelSurfaceTools_ApplyStrengthMask) == 0x0000B0, "Wrong size on VoxelSurfaceTools_ApplyStrengthMask");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, World) == 0x000000, "Member 'VoxelSurfaceTools_ApplyStrengthMask::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, Mask) == 0x000008, "Member 'VoxelSurfaceTools_ApplyStrengthMask::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, EditPosition) == 0x000020, "Member 'VoxelSurfaceTools_ApplyStrengthMask::EditPosition' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, ScaleX) == 0x00002C, "Member 'VoxelSurfaceTools_ApplyStrengthMask::ScaleX' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, ScaleY) == 0x000030, "Member 'VoxelSurfaceTools_ApplyStrengthMask::ScaleY' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, PlaneNormal) == 0x000034, "Member 'VoxelSurfaceTools_ApplyStrengthMask::PlaneNormal' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, PlaneTangent) == 0x000040, "Member 'VoxelSurfaceTools_ApplyStrengthMask::PlaneTangent' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, SamplerMode) == 0x00004C, "Member 'VoxelSurfaceTools_ApplyStrengthMask::SamplerMode' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, bConvertToVoxelSpace) == 0x00004D, "Member 'VoxelSurfaceTools_ApplyStrengthMask::bConvertToVoxelSpace' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyStrengthMask, ReturnValue) == 0x000050, "Member 'VoxelSurfaceTools_ApplyStrengthMask::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.ApplyTerrace
// 0x0070 (0x0070 - 0x0000)
struct VoxelSurfaceTools_ApplyTerrace final
{
public:
	int32                                         TerraceHeightInVoxels;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImmutableVoxels;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelSurfaceEditsStackElement         ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_ApplyTerrace) == 0x000010, "Wrong alignment on VoxelSurfaceTools_ApplyTerrace");
static_assert(sizeof(VoxelSurfaceTools_ApplyTerrace) == 0x000070, "Wrong size on VoxelSurfaceTools_ApplyTerrace");
static_assert(offsetof(VoxelSurfaceTools_ApplyTerrace, TerraceHeightInVoxels) == 0x000000, "Member 'VoxelSurfaceTools_ApplyTerrace::TerraceHeightInVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyTerrace, Angle) == 0x000004, "Member 'VoxelSurfaceTools_ApplyTerrace::Angle' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyTerrace, ImmutableVoxels) == 0x000008, "Member 'VoxelSurfaceTools_ApplyTerrace::ImmutableVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_ApplyTerrace, ReturnValue) == 0x000010, "Member 'VoxelSurfaceTools_ApplyTerrace::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.DebugSurfaceVoxels
// 0x0040 (0x0040 - 0x0000)
struct VoxelSurfaceTools_DebugSurfaceVoxels final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsProcessedVoxels      ProcessedVoxels;                                   // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_DebugSurfaceVoxels) == 0x000008, "Wrong alignment on VoxelSurfaceTools_DebugSurfaceVoxels");
static_assert(sizeof(VoxelSurfaceTools_DebugSurfaceVoxels) == 0x000040, "Wrong size on VoxelSurfaceTools_DebugSurfaceVoxels");
static_assert(offsetof(VoxelSurfaceTools_DebugSurfaceVoxels, World) == 0x000000, "Member 'VoxelSurfaceTools_DebugSurfaceVoxels::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_DebugSurfaceVoxels, ProcessedVoxels) == 0x000008, "Member 'VoxelSurfaceTools_DebugSurfaceVoxels::ProcessedVoxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_DebugSurfaceVoxels, LifeTime) == 0x000038, "Member 'VoxelSurfaceTools_DebugSurfaceVoxels::LifeTime' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.FindSurfaceVoxels
// 0x0040 (0x0040 - 0x0000)
struct VoxelSurfaceTools_FindSurfaceVoxels final
{
public:
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeNormals;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_FindSurfaceVoxels) == 0x000008, "Wrong alignment on VoxelSurfaceTools_FindSurfaceVoxels");
static_assert(sizeof(VoxelSurfaceTools_FindSurfaceVoxels) == 0x000040, "Wrong size on VoxelSurfaceTools_FindSurfaceVoxels");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels, Voxels) == 0x000000, "Member 'VoxelSurfaceTools_FindSurfaceVoxels::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels, World) == 0x000018, "Member 'VoxelSurfaceTools_FindSurfaceVoxels::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels, Bounds) == 0x000020, "Member 'VoxelSurfaceTools_FindSurfaceVoxels::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels, bComputeNormals) == 0x000038, "Member 'VoxelSurfaceTools_FindSurfaceVoxels::bComputeNormals' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.FindSurfaceVoxels2D
// 0x0040 (0x0040 - 0x0000)
struct VoxelSurfaceTools_FindSurfaceVoxels2D final
{
public:
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeNormals;                                   // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_FindSurfaceVoxels2D) == 0x000008, "Wrong alignment on VoxelSurfaceTools_FindSurfaceVoxels2D");
static_assert(sizeof(VoxelSurfaceTools_FindSurfaceVoxels2D) == 0x000040, "Wrong size on VoxelSurfaceTools_FindSurfaceVoxels2D");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2D, Voxels) == 0x000000, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2D::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2D, World) == 0x000018, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2D::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2D, Bounds) == 0x000020, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2D::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2D, bComputeNormals) == 0x000038, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2D::bComputeNormals' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.FindSurfaceVoxels2DAsync
// 0x0060 (0x0060 - 0x0000)
struct VoxelSurfaceTools_FindSurfaceVoxels2DAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0040(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeNormals;                                   // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync) == 0x000008, "Wrong alignment on VoxelSurfaceTools_FindSurfaceVoxels2DAsync");
static_assert(sizeof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync) == 0x000060, "Wrong size on VoxelSurfaceTools_FindSurfaceVoxels2DAsync");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, Voxels) == 0x000020, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, World) == 0x000038, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, Bounds) == 0x000040, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, bComputeNormals) == 0x000058, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::bComputeNormals' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxels2DAsync, bHideLatentWarnings) == 0x000059, "Member 'VoxelSurfaceTools_FindSurfaceVoxels2DAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.FindSurfaceVoxelsAsync
// 0x0060 (0x0060 - 0x0000)
struct VoxelSurfaceTools_FindSurfaceVoxelsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0040(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeNormals;                                   // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLatentWarnings;                               // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_FindSurfaceVoxelsAsync) == 0x000008, "Wrong alignment on VoxelSurfaceTools_FindSurfaceVoxelsAsync");
static_assert(sizeof(VoxelSurfaceTools_FindSurfaceVoxelsAsync) == 0x000060, "Wrong size on VoxelSurfaceTools_FindSurfaceVoxelsAsync");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, WorldContextObject) == 0x000000, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, LatentInfo) == 0x000008, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, Voxels) == 0x000020, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, World) == 0x000038, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, Bounds) == 0x000040, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, bComputeNormals) == 0x000058, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::bComputeNormals' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsAsync, bHideLatentWarnings) == 0x000059, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsAsync::bHideLatentWarnings' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.FindSurfaceVoxelsFromDistanceField
// 0x0040 (0x0040 - 0x0000)
struct VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField final
{
public:
	struct FVoxelSurfaceEditsVoxels               Voxels;                                            // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreaded;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelComputeDevice                           ComputeDevice;                                     // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField) == 0x000008, "Wrong alignment on VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField");
static_assert(sizeof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField) == 0x000040, "Wrong size on VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField, Voxels) == 0x000000, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField, World) == 0x000018, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField, Bounds) == 0x000020, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField, bMultiThreaded) == 0x000038, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField::bMultiThreaded' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField, ComputeDevice) == 0x000039, "Member 'VoxelSurfaceTools_FindSurfaceVoxelsFromDistanceField::ComputeDevice' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.GetBounds
// 0x0048 (0x0048 - 0x0000)
struct VoxelSurfaceTools_GetBounds final
{
public:
	struct FVoxelSurfaceEditsProcessedVoxels      Voxels;                                            // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSurfaceTools_GetBounds) == 0x000008, "Wrong alignment on VoxelSurfaceTools_GetBounds");
static_assert(sizeof(VoxelSurfaceTools_GetBounds) == 0x000048, "Wrong size on VoxelSurfaceTools_GetBounds");
static_assert(offsetof(VoxelSurfaceTools_GetBounds, Voxels) == 0x000000, "Member 'VoxelSurfaceTools_GetBounds::Voxels' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetBounds, ReturnValue) == 0x000030, "Member 'VoxelSurfaceTools_GetBounds::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelSurfaceTools.GetStrengthMaskScale
// 0x0038 (0x0038 - 0x0000)
struct VoxelSurfaceTools_GetStrengthMaskScale final
{
public:
	float                                         ScaleX;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVoxelWorld*                            World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelFloatTexture                     Mask;                                              // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConvertToVoxelSpace;                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSurfaceTools_GetStrengthMaskScale) == 0x000008, "Wrong alignment on VoxelSurfaceTools_GetStrengthMaskScale");
static_assert(sizeof(VoxelSurfaceTools_GetStrengthMaskScale) == 0x000038, "Wrong size on VoxelSurfaceTools_GetStrengthMaskScale");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, ScaleX) == 0x000000, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::ScaleX' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, ScaleY) == 0x000004, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::ScaleY' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, World) == 0x000008, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::World' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, Mask) == 0x000010, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::Mask' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, SizeX) == 0x000028, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::SizeX' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, SizeY) == 0x00002C, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::SizeY' has a wrong offset!");
static_assert(offsetof(VoxelSurfaceTools_GetStrengthMaskScale, bConvertToVoxelSpace) == 0x000030, "Member 'VoxelSurfaceTools_GetStrengthMaskScale::bConvertToVoxelSpace' has a wrong offset!");

// Function Voxel.VoxelTestLibrary.ReadValues
// 0x0030 (0x0030 - 0x0000)
struct VoxelTestLibrary_ReadValues final
{
public:
	class AVoxelWorld*                            World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelIntBox                           Bounds;                                            // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelTestValues                       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTestLibrary_ReadValues) == 0x000008, "Wrong alignment on VoxelTestLibrary_ReadValues");
static_assert(sizeof(VoxelTestLibrary_ReadValues) == 0x000030, "Wrong size on VoxelTestLibrary_ReadValues");
static_assert(offsetof(VoxelTestLibrary_ReadValues, World) == 0x000000, "Member 'VoxelTestLibrary_ReadValues::World' has a wrong offset!");
static_assert(offsetof(VoxelTestLibrary_ReadValues, Bounds) == 0x000008, "Member 'VoxelTestLibrary_ReadValues::Bounds' has a wrong offset!");
static_assert(offsetof(VoxelTestLibrary_ReadValues, ReturnValue) == 0x000020, "Member 'VoxelTestLibrary_ReadValues::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTestLibrary.TestValues
// 0x0020 (0x0020 - 0x0000)
struct VoxelTestLibrary_TestValues final
{
public:
	struct FVoxelTestValues                       ValuesA;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FVoxelTestValues                       ValuesB;                                           // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTestLibrary_TestValues) == 0x000008, "Wrong alignment on VoxelTestLibrary_TestValues");
static_assert(sizeof(VoxelTestLibrary_TestValues) == 0x000020, "Wrong size on VoxelTestLibrary_TestValues");
static_assert(offsetof(VoxelTestLibrary_TestValues, ValuesA) == 0x000000, "Member 'VoxelTestLibrary_TestValues::ValuesA' has a wrong offset!");
static_assert(offsetof(VoxelTestLibrary_TestValues, ValuesB) == 0x000010, "Member 'VoxelTestLibrary_TestValues::ValuesB' has a wrong offset!");

// Function Voxel.VoxelTextureTools.Maximum
// 0x0038 (0x0038 - 0x0000)
struct VoxelTextureTools_Maximum final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTextureTools_Maximum) == 0x000008, "Wrong alignment on VoxelTextureTools_Maximum");
static_assert(sizeof(VoxelTextureTools_Maximum) == 0x000038, "Wrong size on VoxelTextureTools_Maximum");
static_assert(offsetof(VoxelTextureTools_Maximum, Texture) == 0x000000, "Member 'VoxelTextureTools_Maximum::Texture' has a wrong offset!");
static_assert(offsetof(VoxelTextureTools_Maximum, Radius) == 0x000018, "Member 'VoxelTextureTools_Maximum::Radius' has a wrong offset!");
static_assert(offsetof(VoxelTextureTools_Maximum, ReturnValue) == 0x000020, "Member 'VoxelTextureTools_Maximum::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelTextureTools.Minimum
// 0x0038 (0x0038 - 0x0000)
struct VoxelTextureTools_Minimum final
{
public:
	struct FVoxelFloatTexture                     Texture;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelFloatTexture                     ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelTextureTools_Minimum) == 0x000008, "Wrong alignment on VoxelTextureTools_Minimum");
static_assert(sizeof(VoxelTextureTools_Minimum) == 0x000038, "Wrong size on VoxelTextureTools_Minimum");
static_assert(offsetof(VoxelTextureTools_Minimum, Texture) == 0x000000, "Member 'VoxelTextureTools_Minimum::Texture' has a wrong offset!");
static_assert(offsetof(VoxelTextureTools_Minimum, Radius) == 0x000018, "Member 'VoxelTextureTools_Minimum::Radius' has a wrong offset!");
static_assert(offsetof(VoxelTextureTools_Minimum, ReturnValue) == 0x000020, "Member 'VoxelTextureTools_Minimum::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolLibrary.UpdateSphereOverlayMaterial
// 0x0018 (0x0018 - 0x0000)
struct VoxelToolLibrary_UpdateSphereOverlayMaterial final
{
public:
	class UVoxelToolBase*                         Tool;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               OverlayMaterialInstance;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelFalloff                                 FalloffType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Falloff;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolLibrary_UpdateSphereOverlayMaterial) == 0x000008, "Wrong alignment on VoxelToolLibrary_UpdateSphereOverlayMaterial");
static_assert(sizeof(VoxelToolLibrary_UpdateSphereOverlayMaterial) == 0x000018, "Wrong size on VoxelToolLibrary_UpdateSphereOverlayMaterial");
static_assert(offsetof(VoxelToolLibrary_UpdateSphereOverlayMaterial, Tool) == 0x000000, "Member 'VoxelToolLibrary_UpdateSphereOverlayMaterial::Tool' has a wrong offset!");
static_assert(offsetof(VoxelToolLibrary_UpdateSphereOverlayMaterial, OverlayMaterialInstance) == 0x000008, "Member 'VoxelToolLibrary_UpdateSphereOverlayMaterial::OverlayMaterialInstance' has a wrong offset!");
static_assert(offsetof(VoxelToolLibrary_UpdateSphereOverlayMaterial, FalloffType) == 0x000010, "Member 'VoxelToolLibrary_UpdateSphereOverlayMaterial::FalloffType' has a wrong offset!");
static_assert(offsetof(VoxelToolLibrary_UpdateSphereOverlayMaterial, Falloff) == 0x000014, "Member 'VoxelToolLibrary_UpdateSphereOverlayMaterial::Falloff' has a wrong offset!");

// Function Voxel.VoxelToolManager.CreateDefaultTools
// 0x0001 (0x0001 - 0x0000)
struct VoxelToolManager_CreateDefaultTools final
{
public:
	bool                                          bLoadBlueprints;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_CreateDefaultTools) == 0x000001, "Wrong alignment on VoxelToolManager_CreateDefaultTools");
static_assert(sizeof(VoxelToolManager_CreateDefaultTools) == 0x000001, "Wrong size on VoxelToolManager_CreateDefaultTools");
static_assert(offsetof(VoxelToolManager_CreateDefaultTools, bLoadBlueprints) == 0x000000, "Member 'VoxelToolManager_CreateDefaultTools::bLoadBlueprints' has a wrong offset!");

// Function Voxel.VoxelToolManager.SetActiveTool
// 0x0008 (0x0008 - 0x0000)
struct VoxelToolManager_SetActiveTool final
{
public:
	class UVoxelTool*                             NewActiveTool;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_SetActiveTool) == 0x000008, "Wrong alignment on VoxelToolManager_SetActiveTool");
static_assert(sizeof(VoxelToolManager_SetActiveTool) == 0x000008, "Wrong size on VoxelToolManager_SetActiveTool");
static_assert(offsetof(VoxelToolManager_SetActiveTool, NewActiveTool) == 0x000000, "Member 'VoxelToolManager_SetActiveTool::NewActiveTool' has a wrong offset!");

// Function Voxel.VoxelToolManager.SetActiveToolByClass
// 0x0008 (0x0008 - 0x0000)
struct VoxelToolManager_SetActiveToolByClass final
{
public:
	TSubclassOf<class UVoxelTool>                 NewActiveTool;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_SetActiveToolByClass) == 0x000008, "Wrong alignment on VoxelToolManager_SetActiveToolByClass");
static_assert(sizeof(VoxelToolManager_SetActiveToolByClass) == 0x000008, "Wrong size on VoxelToolManager_SetActiveToolByClass");
static_assert(offsetof(VoxelToolManager_SetActiveToolByClass, NewActiveTool) == 0x000000, "Member 'VoxelToolManager_SetActiveToolByClass::NewActiveTool' has a wrong offset!");

// Function Voxel.VoxelToolManager.SetActiveToolByName
// 0x0008 (0x0008 - 0x0000)
struct VoxelToolManager_SetActiveToolByName final
{
public:
	class FName                                   NewActiveTool;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_SetActiveToolByName) == 0x000004, "Wrong alignment on VoxelToolManager_SetActiveToolByName");
static_assert(sizeof(VoxelToolManager_SetActiveToolByName) == 0x000008, "Wrong size on VoxelToolManager_SetActiveToolByName");
static_assert(offsetof(VoxelToolManager_SetActiveToolByName, NewActiveTool) == 0x000000, "Member 'VoxelToolManager_SetActiveToolByName::NewActiveTool' has a wrong offset!");

// Function Voxel.VoxelToolManager.GetActiveTool
// 0x0008 (0x0008 - 0x0000)
struct VoxelToolManager_GetActiveTool final
{
public:
	class UVoxelTool*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_GetActiveTool) == 0x000008, "Wrong alignment on VoxelToolManager_GetActiveTool");
static_assert(sizeof(VoxelToolManager_GetActiveTool) == 0x000008, "Wrong size on VoxelToolManager_GetActiveTool");
static_assert(offsetof(VoxelToolManager_GetActiveTool, ReturnValue) == 0x000000, "Member 'VoxelToolManager_GetActiveTool::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolManager.GetTools
// 0x0010 (0x0010 - 0x0000)
struct VoxelToolManager_GetTools final
{
public:
	TArray<class UVoxelTool*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_GetTools) == 0x000008, "Wrong alignment on VoxelToolManager_GetTools");
static_assert(sizeof(VoxelToolManager_GetTools) == 0x000010, "Wrong size on VoxelToolManager_GetTools");
static_assert(offsetof(VoxelToolManager_GetTools, ReturnValue) == 0x000000, "Member 'VoxelToolManager_GetTools::ReturnValue' has a wrong offset!");

// Function Voxel.VoxelToolManager.K2_GetSharedConfig
// 0x0008 (0x0008 - 0x0000)
struct VoxelToolManager_K2_GetSharedConfig final
{
public:
	class UVoxelToolSharedConfig*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelToolManager_K2_GetSharedConfig) == 0x000008, "Wrong alignment on VoxelToolManager_K2_GetSharedConfig");
static_assert(sizeof(VoxelToolManager_K2_GetSharedConfig) == 0x000008, "Wrong size on VoxelToolManager_K2_GetSharedConfig");
static_assert(offsetof(VoxelToolManager_K2_GetSharedConfig, ReturnValue) == 0x000000, "Member 'VoxelToolManager_K2_GetSharedConfig::ReturnValue' has a wrong offset!");

}

