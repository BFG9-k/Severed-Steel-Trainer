#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Weather_Interface

#include "Basic.hpp"

#include "UDS_and_UDW_State_structs.hpp"
#include "UDS_Season_structs.hpp"


namespace SDK::Params
{

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Set Current Season
// 0x0001 (0x0001 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Set_Current_Season final
{
public:
	EUDS_Season                                   Season;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Set_Current_Season) == 0x000001, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Set_Current_Season");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Set_Current_Season) == 0x000001, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Set_Current_Season");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Set_Current_Season, Season) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Set_Current_Season::Season' has a wrong offset!");

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Update Cloud Coverage from UDS
// 0x0004 (0x0004 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS final
{
public:
	float                                         Cloud_Coverage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS) == 0x000004, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS) == 0x000004, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS, Cloud_Coverage) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Update_Cloud_Coverage_from_UDS::Cloud_Coverage' has a wrong offset!");

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Get Intended Cloud Speed
// 0x0004 (0x0004 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed final
{
public:
	float                                         Intended_Cloud_Speed;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed) == 0x000004, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed) == 0x000004, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed, Intended_Cloud_Speed) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Speed::Intended_Cloud_Speed' has a wrong offset!");

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Get Intended Cloud Direction
// 0x0004 (0x0004 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction final
{
public:
	float                                         Intended_Cloud_Direction;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction) == 0x000004, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction) == 0x000004, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction, Intended_Cloud_Direction) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Get_Intended_Cloud_Direction::Intended_Cloud_Direction' has a wrong offset!");

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Get State for Saving
// 0x00D8 (0x00D8 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving final
{
public:
	struct FUDS_and_UDW_State                     UDW_State;                                         // 0x0000(0x00D8)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving) == 0x000008, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving) == 0x0000D8, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving, UDW_State) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Get_State_for_Saving::UDW_State' has a wrong offset!");

// Function Ultra_Dynamic_Weather_Interface.Ultra_Dynamic_Weather_Interface_C.Apply State
// 0x00D8 (0x00D8 - 0x0000)
struct Ultra_Dynamic_Weather_Interface_C_Apply_State final
{
public:
	struct FUDS_and_UDW_State                     State;                                             // 0x0000(0x00D8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Ultra_Dynamic_Weather_Interface_C_Apply_State) == 0x000008, "Wrong alignment on Ultra_Dynamic_Weather_Interface_C_Apply_State");
static_assert(sizeof(Ultra_Dynamic_Weather_Interface_C_Apply_State) == 0x0000D8, "Wrong size on Ultra_Dynamic_Weather_Interface_C_Apply_State");
static_assert(offsetof(Ultra_Dynamic_Weather_Interface_C_Apply_State, State) == 0x000000, "Member 'Ultra_Dynamic_Weather_Interface_C_Apply_State::State' has a wrong offset!");

}

