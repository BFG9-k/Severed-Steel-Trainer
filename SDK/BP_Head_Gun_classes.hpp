#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Head_Gun

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HeadStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Head_Gun.BP_Head_Gun_C
// 0x01A0 (0x03F0 - 0x0250)
class ABP_Head_Gun_C final : public ATurretHead
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               GunSmoke;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Shells;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        GunMotor;                                          // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Barrel;                                            // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSound;                                         // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserLight;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   WarningLight;                                      // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Laser;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   LaserSource;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserHit;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MuzzleFlash;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FHeadStruct                            HeadSettings;                                      // 0x02C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 Projectile;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaserLength;                                    // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRate;                                          // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ProjectileAcor;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        MuzzleEffect;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargerFoundSound;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargetLostSound;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Deactivate;                                        // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaserLocation;                                     // 0x035C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackWidth;                                        // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugLines;                                        // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TraceBlockers;                                     // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EObjectTypeQuery                              ObjectColl_To_Trace;                               // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_Laser_on_Hit;                                 // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HideLaserBeam;                                     // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A3[0x5];                                      // 0x03A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FLinearColor                           LaserColor;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelRoll;                                        // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Barrel_Heat;                                       // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_0;                                          // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_1;                                          // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Turret_BaseBP_C*                    MyBase;                                            // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Head_Gun(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void HeadReceiveDamage();
	void Set_LaserHidden();
	void StarFiring();
	void Stop_Gun();
	void Start_Gun();
	void OpenGate();
	void StartTicks();
	void ReceiveBeginPlay();
	void ActivateHead();
	void DeactivateHead();
	void SetSettings();
	void ResetFire();
	void ResetTraceActorHit();
	void ObjectHit();
	void SetLaser();
	void BlockerObjectHit();
	void TraceSetup();
	void fire();
	void OnRep_HideLaserBeam();
	void OnRep_HeadSettings();
	bool OnHit(EImpactType ImpactType, const struct FHitResult& HitResult, float Dmg);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Head_Gun_C">();
	}
	static class ABP_Head_Gun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Head_Gun_C>();
	}
};
static_assert(alignof(ABP_Head_Gun_C) == 0x000008, "Wrong alignment on ABP_Head_Gun_C");
static_assert(sizeof(ABP_Head_Gun_C) == 0x0003F0, "Wrong size on ABP_Head_Gun_C");
static_assert(offsetof(ABP_Head_Gun_C, UberGraphFrame) == 0x000250, "Member 'ABP_Head_Gun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, GunSmoke) == 0x000258, "Member 'ABP_Head_Gun_C::GunSmoke' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Shells) == 0x000260, "Member 'ABP_Head_Gun_C::Shells' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, GunMotor) == 0x000268, "Member 'ABP_Head_Gun_C::GunMotor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Barrel) == 0x000270, "Member 'ABP_Head_Gun_C::Barrel' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, FireSound) == 0x000278, "Member 'ABP_Head_Gun_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Root) == 0x000280, "Member 'ABP_Head_Gun_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, LaserLight) == 0x000288, "Member 'ABP_Head_Gun_C::LaserLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, WarningLight) == 0x000290, "Member 'ABP_Head_Gun_C::WarningLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Laser) == 0x000298, "Member 'ABP_Head_Gun_C::Laser' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, LaserSource) == 0x0002A0, "Member 'ABP_Head_Gun_C::LaserSource' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, LaserHit) == 0x0002A8, "Member 'ABP_Head_Gun_C::LaserHit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, MuzzleFlash) == 0x0002B0, "Member 'ABP_Head_Gun_C::MuzzleFlash' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Head) == 0x0002B8, "Member 'ABP_Head_Gun_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, HeadSettings) == 0x0002C0, "Member 'ABP_Head_Gun_C::HeadSettings' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Projectile) == 0x000320, "Member 'ABP_Head_Gun_C::Projectile' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, MaxLaserLength) == 0x000328, "Member 'ABP_Head_Gun_C::MaxLaserLength' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, FireRate) == 0x00032C, "Member 'ABP_Head_Gun_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, InRange) == 0x000330, "Member 'ABP_Head_Gun_C::InRange' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, ProjectileAcor) == 0x000338, "Member 'ABP_Head_Gun_C::ProjectileAcor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, MuzzleEffect) == 0x000340, "Member 'ABP_Head_Gun_C::MuzzleEffect' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, TargerFoundSound) == 0x000348, "Member 'ABP_Head_Gun_C::TargerFoundSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, TargetLostSound) == 0x000350, "Member 'ABP_Head_Gun_C::TargetLostSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Deactivate) == 0x000358, "Member 'ABP_Head_Gun_C::Deactivate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, LaserLocation) == 0x00035C, "Member 'ABP_Head_Gun_C::LaserLocation' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Start) == 0x000368, "Member 'ABP_Head_Gun_C::Start' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, End) == 0x000374, "Member 'ABP_Head_Gun_C::End' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, HitActor) == 0x000380, "Member 'ABP_Head_Gun_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, TrackWidth) == 0x000388, "Member 'ABP_Head_Gun_C::TrackWidth' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, DebugLines) == 0x00038C, "Member 'ABP_Head_Gun_C::DebugLines' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, TraceBlockers) == 0x000390, "Member 'ABP_Head_Gun_C::TraceBlockers' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, ObjectColl_To_Trace) == 0x0003A0, "Member 'ABP_Head_Gun_C::ObjectColl_To_Trace' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Hide_Laser_on_Hit) == 0x0003A1, "Member 'ABP_Head_Gun_C::Hide_Laser_on_Hit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, HideLaserBeam) == 0x0003A2, "Member 'ABP_Head_Gun_C::HideLaserBeam' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, IgnoreActors) == 0x0003A8, "Member 'ABP_Head_Gun_C::IgnoreActors' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, LaserColor) == 0x0003B8, "Member 'ABP_Head_Gun_C::LaserColor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, BarrelRoll) == 0x0003C8, "Member 'ABP_Head_Gun_C::BarrelRoll' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Barrel_Heat) == 0x0003CC, "Member 'ABP_Head_Gun_C::Barrel_Heat' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, Health) == 0x0003D0, "Member 'ABP_Head_Gun_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, HitComponent) == 0x0003D8, "Member 'ABP_Head_Gun_C::HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, NewVar_0) == 0x0003E0, "Member 'ABP_Head_Gun_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, NewVar_1) == 0x0003E4, "Member 'ABP_Head_Gun_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(ABP_Head_Gun_C, MyBase) == 0x0003E8, "Member 'ABP_Head_Gun_C::MyBase' has a wrong offset!");

}

