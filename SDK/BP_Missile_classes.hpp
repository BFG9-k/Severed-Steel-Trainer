#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Missile

#include "Basic.hpp"

#include "ThankYouVeryCool_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Missile.BP_Missile_C
// 0x0098 (0x02D8 - 0x0240)
class ABP_Missile_C final : public ARechargeStation
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystemSimpleFX;                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           Projectile;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetCarpet;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayToTarget;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayToTargetTimer;                                // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RocketRotSpeed;                                    // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RocketTargetRotSpeed;                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedInterp;                                       // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedMax;                                          // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Acceleration;                                      // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceDisableRotation;                           // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Missile_Start;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Missile_Loop;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MissileAudioComp;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Missile_Ex;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticleSet;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleScale;                                     // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDamage;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageRadius;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Missile(int32 EntryPoint);
	void OnSteelStuntSwap_Event_0(bool bIsController);
	void ReceiveDestroyed();
	void E_Settings(class AActor* TargetActor_0, float BaseDamage_0, float DamageRadius_0, float TargetCarpet_0, float DelayToTarget_0, float RocketTargetRotSpeed_0, float SpeedMax_0, float Acceleration_0, float DistanceDisableRotation_0, class UParticleSystem* ParticleSet_0, float ParticleScale_0);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void UserConstructionScript();
	bool GetShouldSave();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Missile_C">();
	}
	static class ABP_Missile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Missile_C>();
	}
};
static_assert(alignof(ABP_Missile_C) == 0x000008, "Wrong alignment on ABP_Missile_C");
static_assert(sizeof(ABP_Missile_C) == 0x0002D8, "Wrong size on ABP_Missile_C");
static_assert(offsetof(ABP_Missile_C, UberGraphFrame) == 0x000240, "Member 'ABP_Missile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, ParticleSystemSimpleFX) == 0x000248, "Member 'ABP_Missile_C::ParticleSystemSimpleFX' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, ParticleSystem) == 0x000250, "Member 'ABP_Missile_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, StaticMesh) == 0x000258, "Member 'ABP_Missile_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Sphere1) == 0x000260, "Member 'ABP_Missile_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Projectile) == 0x000268, "Member 'ABP_Missile_C::Projectile' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, TargetActor) == 0x000270, "Member 'ABP_Missile_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, TargetCarpet) == 0x000278, "Member 'ABP_Missile_C::TargetCarpet' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, DelayToTarget) == 0x00027C, "Member 'ABP_Missile_C::DelayToTarget' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, DelayToTargetTimer) == 0x000280, "Member 'ABP_Missile_C::DelayToTargetTimer' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, RocketRotSpeed) == 0x000284, "Member 'ABP_Missile_C::RocketRotSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, RocketTargetRotSpeed) == 0x000288, "Member 'ABP_Missile_C::RocketTargetRotSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, SpeedInterp) == 0x00028C, "Member 'ABP_Missile_C::SpeedInterp' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, SpeedMax) == 0x000290, "Member 'ABP_Missile_C::SpeedMax' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Acceleration) == 0x000294, "Member 'ABP_Missile_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, DistanceDisableRotation) == 0x000298, "Member 'ABP_Missile_C::DistanceDisableRotation' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Missile_Start) == 0x0002A0, "Member 'ABP_Missile_C::Missile_Start' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Missile_Loop) == 0x0002A8, "Member 'ABP_Missile_C::Missile_Loop' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, MissileAudioComp) == 0x0002B0, "Member 'ABP_Missile_C::MissileAudioComp' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, Missile_Ex) == 0x0002B8, "Member 'ABP_Missile_C::Missile_Ex' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, ParticleSet) == 0x0002C0, "Member 'ABP_Missile_C::ParticleSet' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, ParticleScale) == 0x0002C8, "Member 'ABP_Missile_C::ParticleScale' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, BaseDamage) == 0x0002CC, "Member 'ABP_Missile_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Missile_C, DamageRadius) == 0x0002D0, "Member 'ABP_Missile_C::DamageRadius' has a wrong offset!");

}

