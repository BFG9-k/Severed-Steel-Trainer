#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioAnalysisTools

#include "Basic.hpp"

#include "AudioAnalysisTools_classes.hpp"
#include "AudioAnalysisTools_parameters.hpp"


namespace SDK
{

// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.CreateAudioAnalysisTools
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnalysisWindowType                     WindowType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioAnalysisToolsLibrary*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioAnalysisToolsLibrary* UAudioAnalysisToolsLibrary::CreateAudioAnalysisTools(int64 FrameSize, EAnalysisWindowType WindowType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AudioAnalysisToolsLibrary", "CreateAudioAnalysisTools");

	Params::AudioAnalysisToolsLibrary_CreateAudioAnalysisTools Parms{};

	Parms.FrameSize = FrameSize;
	Parms.WindowType = WindowType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByCurrentTime
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           AudioFrames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::GetAudioByCurrentTime(class UImportedSoundWave* ImportedSoundWave, TArray<float>* AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetAudioByCurrentTime");

	Params::AudioAnalysisToolsLibrary_GetAudioByCurrentTime Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioFrames != nullptr)
		*AudioFrames = std::move(Parms.AudioFrames);

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByFrameRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           AudioFrames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::GetAudioByFrameRange(class UImportedSoundWave* ImportedSoundWave, int64 StartFrame, int64 EndFrame, TArray<float>* AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetAudioByFrameRange");

	Params::AudioAnalysisToolsLibrary_GetAudioByFrameRange Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioFrames != nullptr)
		*AudioFrames = std::move(Parms.AudioFrames);

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByFrameSize
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           AudioFrames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::GetAudioByFrameSize(class UImportedSoundWave* ImportedSoundWave, int64 FrameSize, TArray<float>* AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetAudioByFrameSize");

	Params::AudioAnalysisToolsLibrary_GetAudioByFrameSize Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioFrames != nullptr)
		*AudioFrames = std::move(Parms.AudioFrames);

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByTimeLength
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           AudioFrames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::GetAudioByTimeLength(class UImportedSoundWave* ImportedSoundWave, float TimeLength, TArray<float>* AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetAudioByTimeLength");

	Params::AudioAnalysisToolsLibrary_GetAudioByTimeLength Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.TimeLength = TimeLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioFrames != nullptr)
		*AudioFrames = std::move(Parms.AudioFrames);

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetAudioByTimeRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           AudioFrames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::GetAudioByTimeRange(class UImportedSoundWave* ImportedSoundWave, float StartTime, float EndTime, TArray<float>* AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetAudioByTimeRange");

	Params::AudioAnalysisToolsLibrary_GetAudioByTimeRange Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AudioFrames != nullptr)
		*AudioFrames = std::move(Parms.AudioFrames);

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetComplexSpectralDifference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetComplexSpectralDifference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetComplexSpectralDifference");

	Params::AudioAnalysisToolsLibrary_GetComplexSpectralDifference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetEnergyDifference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetEnergyDifference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetEnergyDifference");

	Params::AudioAnalysisToolsLibrary_GetEnergyDifference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetHighFrequencyContent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetHighFrequencyContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetHighFrequencyContent");

	Params::AudioAnalysisToolsLibrary_GetHighFrequencyContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetPeakEnergy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetPeakEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetPeakEnergy");

	Params::AudioAnalysisToolsLibrary_GetPeakEnergy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetRootMeanSquare
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetRootMeanSquare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetRootMeanSquare");

	Params::AudioAnalysisToolsLibrary_GetRootMeanSquare Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralCentroid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralCentroid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralCentroid");

	Params::AudioAnalysisToolsLibrary_GetSpectralCentroid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralCrest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralCrest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralCrest");

	Params::AudioAnalysisToolsLibrary_GetSpectralCrest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralDifference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralDifference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralDifference");

	Params::AudioAnalysisToolsLibrary_GetSpectralDifference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralDifferenceHWR
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralDifferenceHWR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralDifferenceHWR");

	Params::AudioAnalysisToolsLibrary_GetSpectralDifferenceHWR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralFlatness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralFlatness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralFlatness");

	Params::AudioAnalysisToolsLibrary_GetSpectralFlatness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralKurtosis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralKurtosis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralKurtosis");

	Params::AudioAnalysisToolsLibrary_GetSpectralKurtosis Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetSpectralRolloff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetSpectralRolloff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetSpectralRolloff");

	Params::AudioAnalysisToolsLibrary_GetSpectralRolloff Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetZeroCrossingRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetZeroCrossingRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetZeroCrossingRate");

	Params::AudioAnalysisToolsLibrary_GetZeroCrossingRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.ProcessAudioFrames
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bProcessToBeatDetection                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioAnalysisToolsLibrary::ProcessAudioFrames(const TArray<float>& AudioFrames, bool bProcessToBeatDetection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "ProcessAudioFrames");

	Params::AudioAnalysisToolsLibrary_ProcessAudioFrames Parms{};

	Parms.AudioFrames = std::move(AudioFrames);
	Parms.bProcessToBeatDetection = bProcessToBeatDetection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.UpdateFrameSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAudioAnalysisToolsLibrary::UpdateFrameSize(int64 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "UpdateFrameSize");

	Params::AudioAnalysisToolsLibrary_UpdateFrameSize Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetBand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Subband                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAudioAnalysisToolsLibrary::GetBand(int64 Subband) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetBand");

	Params::AudioAnalysisToolsLibrary_GetBand Parms{};

	Parms.Subband = Subband;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetFFTImaginary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UAudioAnalysisToolsLibrary::GetFFTImaginary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetFFTImaginary");

	Params::AudioAnalysisToolsLibrary_GetFFTImaginary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetFFTReal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UAudioAnalysisToolsLibrary::GetFFTReal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetFFTReal");

	Params::AudioAnalysisToolsLibrary_GetFFTReal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.GetMagnitudeSpectrum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UAudioAnalysisToolsLibrary::GetMagnitudeSpectrum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "GetMagnitudeSpectrum");

	Params::AudioAnalysisToolsLibrary_GetMagnitudeSpectrum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Subband                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::IsBeat(int64 Subband) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "IsBeat");

	Params::AudioAnalysisToolsLibrary_IsBeat Parms{};

	Parms.Subband = Subband;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsBeatRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Low                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   High                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::IsBeatRange(int64 Low, int64 High, int64 Threshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "IsBeatRange");

	Params::AudioAnalysisToolsLibrary_IsBeatRange Parms{};

	Parms.Low = Low;
	Parms.High = High;
	Parms.Threshold = Threshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsHiHat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::IsHiHat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "IsHiHat");

	Params::AudioAnalysisToolsLibrary_IsHiHat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsKick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::IsKick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "IsKick");

	Params::AudioAnalysisToolsLibrary_IsKick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.AudioAnalysisToolsLibrary.IsSnare
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAudioAnalysisToolsLibrary::IsSnare() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioAnalysisToolsLibrary", "IsSnare");

	Params::AudioAnalysisToolsLibrary_IsSnare Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.CreateBeatDetection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   FFTSubbandSize                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   EnergyHistorySize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBeatDetection*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBeatDetection* UBeatDetection::CreateBeatDetection(int64 FFTSubbandSize, int64 EnergyHistorySize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BeatDetection", "CreateBeatDetection");

	Params::BeatDetection_CreateBeatDetection Parms{};

	Parms.FFTSubbandSize = FFTSubbandSize;
	Parms.EnergyHistorySize = EnergyHistorySize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.ProcessMagnitude
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBeatDetection::ProcessMagnitude(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "ProcessMagnitude");

	Params::BeatDetection_ProcessMagnitude Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.BeatDetection.UpdateEnergyHistorySize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   EnergyHistorySize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeatDetection::UpdateEnergyHistorySize(int64 EnergyHistorySize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "UpdateEnergyHistorySize");

	Params::BeatDetection_UpdateEnergyHistorySize Parms{};

	Parms.EnergyHistorySize = EnergyHistorySize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.BeatDetection.UpdateFFTSubbandSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   FFTSubbandSize                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeatDetection::UpdateFFTSubbandSize(int64 FFTSubbandSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "UpdateFFTSubbandSize");

	Params::BeatDetection_UpdateFFTSubbandSize Parms{};

	Parms.FFTSubbandSize = FFTSubbandSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.BeatDetection.GetBand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Subband                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBeatDetection::GetBand(int64 Subband) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "GetBand");

	Params::BeatDetection_GetBand Parms{};

	Parms.Subband = Subband;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.IsBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Subband                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBeatDetection::IsBeat(int64 Subband) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "IsBeat");

	Params::BeatDetection_IsBeat Parms{};

	Parms.Subband = Subband;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.IsBeatRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   Low                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   High                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Threshold                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBeatDetection::IsBeatRange(int64 Low, int64 High, int64 Threshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "IsBeatRange");

	Params::BeatDetection_IsBeatRange Parms{};

	Parms.Low = Low;
	Parms.High = High;
	Parms.Threshold = Threshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.IsHiHat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBeatDetection::IsHiHat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "IsHiHat");

	Params::BeatDetection_IsHiHat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.IsKick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBeatDetection::IsKick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "IsKick");

	Params::BeatDetection_IsKick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.BeatDetection.IsSnare
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBeatDetection::IsSnare() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeatDetection", "IsSnare");

	Params::BeatDetection_IsSnare Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralCentroid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreFrequencyDomainFeatures::GetSpectralCentroid(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreFrequencyDomainFeatures", "GetSpectralCentroid");

	Params::CoreFrequencyDomainFeatures_GetSpectralCentroid Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralCrest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreFrequencyDomainFeatures::GetSpectralCrest(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreFrequencyDomainFeatures", "GetSpectralCrest");

	Params::CoreFrequencyDomainFeatures_GetSpectralCrest Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralFlatness
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreFrequencyDomainFeatures::GetSpectralFlatness(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreFrequencyDomainFeatures", "GetSpectralFlatness");

	Params::CoreFrequencyDomainFeatures_GetSpectralFlatness Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralKurtosis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreFrequencyDomainFeatures::GetSpectralKurtosis(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreFrequencyDomainFeatures", "GetSpectralKurtosis");

	Params::CoreFrequencyDomainFeatures_GetSpectralKurtosis Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreFrequencyDomainFeatures.GetSpectralRolloff
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Percentile                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreFrequencyDomainFeatures::GetSpectralRolloff(const TArray<float>& MagnitudeSpectrum, const float Percentile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreFrequencyDomainFeatures", "GetSpectralRolloff");

	Params::CoreFrequencyDomainFeatures_GetSpectralRolloff Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);
	Parms.Percentile = Percentile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetPeakEnergy
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreTimeDomainFeatures::GetPeakEnergy(const TArray<float>& AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreTimeDomainFeatures", "GetPeakEnergy");

	Params::CoreTimeDomainFeatures_GetPeakEnergy Parms{};

	Parms.AudioFrames = std::move(AudioFrames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetRootMeanSquare
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreTimeDomainFeatures::GetRootMeanSquare(const TArray<float>& AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreTimeDomainFeatures", "GetRootMeanSquare");

	Params::CoreTimeDomainFeatures_GetRootMeanSquare Parms{};

	Parms.AudioFrames = std::move(AudioFrames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.CoreTimeDomainFeatures.GetZeroCrossingRate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreTimeDomainFeatures::GetZeroCrossingRate(const TArray<float>& AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreTimeDomainFeatures", "GetZeroCrossingRate");

	Params::CoreTimeDomainFeatures_GetZeroCrossingRate Parms{};

	Parms.AudioFrames = std::move(AudioFrames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.CreateOnsetDetection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOnsetDetection*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOnsetDetection* UOnsetDetection::CreateOnsetDetection(int64 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnsetDetection", "CreateOnsetDetection");

	Params::OnsetDetection_CreateOnsetDetection Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetHighFrequencyContent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetHighFrequencyContent(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OnsetDetection", "GetHighFrequencyContent");

	Params::OnsetDetection_GetHighFrequencyContent Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetComplexSpectralDifference
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           FFTReal                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<float>                           FFTImaginary                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetComplexSpectralDifference(const TArray<float>& FFTReal, const TArray<float>& FFTImaginary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "GetComplexSpectralDifference");

	Params::OnsetDetection_GetComplexSpectralDifference Parms{};

	Parms.FFTReal = std::move(FFTReal);
	Parms.FFTImaginary = std::move(FFTImaginary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetEnergyDifference
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetEnergyDifference(const TArray<float>& AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "GetEnergyDifference");

	Params::OnsetDetection_GetEnergyDifference Parms{};

	Parms.AudioFrames = std::move(AudioFrames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetEnergyEnvelope
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           AudioFrames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetEnergyEnvelope(const TArray<float>& AudioFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "GetEnergyEnvelope");

	Params::OnsetDetection_GetEnergyEnvelope Parms{};

	Parms.AudioFrames = std::move(AudioFrames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetSpectralDifference
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetSpectralDifference(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "GetSpectralDifference");

	Params::OnsetDetection_GetSpectralDifference Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.GetSpectralDifferenceHWR
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           MagnitudeSpectrum                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOnsetDetection::GetSpectralDifferenceHWR(const TArray<float>& MagnitudeSpectrum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "GetSpectralDifferenceHWR");

	Params::OnsetDetection_GetSpectralDifferenceHWR Parms{};

	Parms.MagnitudeSpectrum = std::move(MagnitudeSpectrum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.OnsetDetection.UpdateFrameSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnsetDetection::UpdateFrameSize(int32 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnsetDetection", "UpdateFrameSize");

	Params::OnsetDetection_UpdateFrameSize Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateBlackmanWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateBlackmanWindow(int32 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateBlackmanWindow");

	Params::WindowsLibrary_CreateBlackmanWindow Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateHammingWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateHammingWindow(int32 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateHammingWindow");

	Params::WindowsLibrary_CreateHammingWindow Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateHanningWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateHanningWindow(int32 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateHanningWindow");

	Params::WindowsLibrary_CreateHanningWindow Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateRectangularWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateRectangularWindow(int32 FrameSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateRectangularWindow");

	Params::WindowsLibrary_CreateRectangularWindow Parms{};

	Parms.FrameSize = FrameSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateTukeyWindow
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CosineFraction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateTukeyWindow(int32 FrameSize, float CosineFraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateTukeyWindow");

	Params::WindowsLibrary_CreateTukeyWindow Parms{};

	Parms.FrameSize = FrameSize;
	Parms.CosineFraction = CosineFraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AudioAnalysisTools.WindowsLibrary.CreateWindowByType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnalysisWindowType                     WindowType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UWindowsLibrary::CreateWindowByType(int32 FrameSize, EAnalysisWindowType WindowType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WindowsLibrary", "CreateWindowByType");

	Params::WindowsLibrary_CreateWindowByType Parms{};

	Parms.FrameSize = FrameSize;
	Parms.WindowType = WindowType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

