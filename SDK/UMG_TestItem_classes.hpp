#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_TestItem

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "Engine_structs.hpp"
#include "ToolData_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UMG_TestItem.UMG_TestItem_C
// 0x0048 (0x02A8 - 0x0260)
class UUMG_TestItem_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ShowAnim;                                          // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FToolData                              ToolData;                                          // 0x0278(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Highlighted;                                       // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECannonMode                                   CannonMode;                                        // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UMG_TestItem(int32 EntryPoint);
	void OnUnhighlight();
	void OnHighlight();
	struct FLinearColor GetColorAndOpacity_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UMG_TestItem_C">();
	}
	static class UUMG_TestItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMG_TestItem_C>();
	}
};
static_assert(alignof(UUMG_TestItem_C) == 0x000008, "Wrong alignment on UUMG_TestItem_C");
static_assert(sizeof(UUMG_TestItem_C) == 0x0002A8, "Wrong size on UUMG_TestItem_C");
static_assert(offsetof(UUMG_TestItem_C, UberGraphFrame) == 0x000260, "Member 'UUMG_TestItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUMG_TestItem_C, ShowAnim) == 0x000268, "Member 'UUMG_TestItem_C::ShowAnim' has a wrong offset!");
static_assert(offsetof(UUMG_TestItem_C, Image_0) == 0x000270, "Member 'UUMG_TestItem_C::Image_0' has a wrong offset!");
static_assert(offsetof(UUMG_TestItem_C, ToolData) == 0x000278, "Member 'UUMG_TestItem_C::ToolData' has a wrong offset!");
static_assert(offsetof(UUMG_TestItem_C, Highlighted) == 0x0002A0, "Member 'UUMG_TestItem_C::Highlighted' has a wrong offset!");
static_assert(offsetof(UUMG_TestItem_C, CannonMode) == 0x0002A1, "Member 'UUMG_TestItem_C::CannonMode' has a wrong offset!");

}

