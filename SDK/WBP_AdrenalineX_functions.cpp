#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AdrenalineX

#include "Basic.hpp"

#include "WBP_AdrenalineX_classes.hpp"
#include "WBP_AdrenalineX_parameters.hpp"


namespace SDK
{

// Function WBP_AdrenalineX.WBP_AdrenalineX_C.ExecuteUbergraph_WBP_AdrenalineX
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AdrenalineX_C::ExecuteUbergraph_WBP_AdrenalineX(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "ExecuteUbergraph_WBP_AdrenalineX");

	Params::WBP_AdrenalineX_C_ExecuteUbergraph_WBP_AdrenalineX Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AdrenalineX.WBP_AdrenalineX_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_AdrenalineX_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_AdrenalineX.WBP_AdrenalineX_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AdrenalineX_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "Tick");

	Params::WBP_AdrenalineX_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AdrenalineX.WBP_AdrenalineX_C.SLoMochange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewStatus                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWBP_AdrenalineX_C::SLoMochange(bool bNewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "SLoMochange");

	Params::WBP_AdrenalineX_C_SLoMochange Parms{};

	Parms.bNewStatus = bNewStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AdrenalineX.WBP_AdrenalineX_C.SetOverclockPercent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   InPercent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_AdrenalineX_C::SetOverclockPercent(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "SetOverclockPercent");

	Params::WBP_AdrenalineX_C_SetOverclockPercent Parms{};

	Parms.InPercent = InPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_AdrenalineX.WBP_AdrenalineX_C.GetColorAndOpacity_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor UWBP_AdrenalineX_C::GetColorAndOpacity_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_AdrenalineX_C", "GetColorAndOpacity_0");

	Params::WBP_AdrenalineX_C_GetColorAndOpacity_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

