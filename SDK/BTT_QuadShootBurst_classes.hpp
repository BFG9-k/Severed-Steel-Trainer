#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_QuadShootBurst

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_QuadShootBurst.BTT_QuadShootBurst_C
// 0x0028 (0x00D0 - 0x00A8)
class UBTT_QuadShootBurst_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         TimeBetweenShots;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ShootingHandle;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalShots;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotsTaken;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeShooting;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_QuadShootBurst(int32 EntryPoint);
	void CustomEvent_1();
	void CustomEvent_0();
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_QuadShootBurst_C">();
	}
	static class UBTT_QuadShootBurst_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_QuadShootBurst_C>();
	}
};
static_assert(alignof(UBTT_QuadShootBurst_C) == 0x000008, "Wrong alignment on UBTT_QuadShootBurst_C");
static_assert(sizeof(UBTT_QuadShootBurst_C) == 0x0000D0, "Wrong size on UBTT_QuadShootBurst_C");
static_assert(offsetof(UBTT_QuadShootBurst_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_QuadShootBurst_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_QuadShootBurst_C, TimeBetweenShots) == 0x0000B0, "Member 'UBTT_QuadShootBurst_C::TimeBetweenShots' has a wrong offset!");
static_assert(offsetof(UBTT_QuadShootBurst_C, ShootingHandle) == 0x0000B8, "Member 'UBTT_QuadShootBurst_C::ShootingHandle' has a wrong offset!");
static_assert(offsetof(UBTT_QuadShootBurst_C, TotalShots) == 0x0000C0, "Member 'UBTT_QuadShootBurst_C::TotalShots' has a wrong offset!");
static_assert(offsetof(UBTT_QuadShootBurst_C, ShotsTaken) == 0x0000C4, "Member 'UBTT_QuadShootBurst_C::ShotsTaken' has a wrong offset!");
static_assert(offsetof(UBTT_QuadShootBurst_C, DelayBeforeShooting) == 0x0000C8, "Member 'UBTT_QuadShootBurst_C::DelayBeforeShooting' has a wrong offset!");

}

