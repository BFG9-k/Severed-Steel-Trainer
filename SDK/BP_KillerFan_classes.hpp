#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KillerFan

#include "Basic.hpp"

#include "ThankYouVeryCool_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_PropVoxelWorld_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KillerFan.BP_KillerFan_C
// 0x00B0 (0x0B60 - 0x0AB0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_KillerFan_C : public ABP_PropVoxelWorld_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_KillerFan_C;                     // 0x0AB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   KillCylinder;                                      // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_0_NewTrack_0_51E2421E4B2AEC7FABA40CBB0236B6F5; // 0x0AD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0_0__Direction_51E2421E4B2AEC7FABA40CBB0236B6F5; // 0x0ADC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ADD[0x3];                                      // 0x0ADD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0_0;                                      // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSpinning;                                       // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE9[0x3];                                      // 0x0AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               StartRot_0;                                        // 0x0AEC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasBeenDestroyed;                                 // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AF9[0x3];                                      // 0x0AF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FanHeight;                                         // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartEnabled;                                     // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B01[0x3];                                      // 0x0B01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WindBase;                                          // 0x0B04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FanRadius;                                         // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotCache;                                          // 0x0B14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TCache;                                            // 0x0B20(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               MyDynMat;                                          // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_KillerFan(int32 EntryPoint);
	void DoActions(EActionType ToDo, bool bSimulated);
	void BndEvt__BP_KillerFan_KillCylinder_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_KillerFan_KillCylinder_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void NotifyMoved();
	void SetInEditor(bool bInEditor);
	void ReceiveBeginPlay();
	void BndEvt__BP_KillerFan_Cylinder_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void PostDataLoaded();
	void SetSelected(bool bIsSelected);
	void CustomEvent_0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetSpinning(bool bSpin);
	void BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void LevelReady();
	void HitByWidePulse();
	void Timeline_0_0__UpdateFunc();
	void Timeline_0_0__FinishedFunc();
	void SetHeight(float InHeight);
	void SetRadius(float InRadius);
	TArray<EActionType> GetActions();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KillerFan_C">();
	}
	static class ABP_KillerFan_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KillerFan_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_KillerFan_C) == 0x000010, "Wrong alignment on ABP_KillerFan_C");
static_assert(sizeof(ABP_KillerFan_C) == 0x000B60, "Wrong size on ABP_KillerFan_C");
static_assert(offsetof(ABP_KillerFan_C, UberGraphFrame_BP_KillerFan_C) == 0x000AB0, "Member 'ABP_KillerFan_C::UberGraphFrame_BP_KillerFan_C' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, Audio) == 0x000AB8, "Member 'ABP_KillerFan_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, KillCylinder) == 0x000AC0, "Member 'ABP_KillerFan_C::KillCylinder' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, ParticleSystem) == 0x000AC8, "Member 'ABP_KillerFan_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, Cylinder) == 0x000AD0, "Member 'ABP_KillerFan_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, Timeline_0_0_NewTrack_0_51E2421E4B2AEC7FABA40CBB0236B6F5) == 0x000AD8, "Member 'ABP_KillerFan_C::Timeline_0_0_NewTrack_0_51E2421E4B2AEC7FABA40CBB0236B6F5' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, Timeline_0_0__Direction_51E2421E4B2AEC7FABA40CBB0236B6F5) == 0x000ADC, "Member 'ABP_KillerFan_C::Timeline_0_0__Direction_51E2421E4B2AEC7FABA40CBB0236B6F5' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, Timeline_0_0) == 0x000AE0, "Member 'ABP_KillerFan_C::Timeline_0_0' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, bIsSpinning) == 0x000AE8, "Member 'ABP_KillerFan_C::bIsSpinning' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, StartRot_0) == 0x000AEC, "Member 'ABP_KillerFan_C::StartRot_0' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, bHasBeenDestroyed) == 0x000AF8, "Member 'ABP_KillerFan_C::bHasBeenDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, FanHeight) == 0x000AFC, "Member 'ABP_KillerFan_C::FanHeight' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, bStartEnabled) == 0x000B00, "Member 'ABP_KillerFan_C::bStartEnabled' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, WindBase) == 0x000B04, "Member 'ABP_KillerFan_C::WindBase' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, FanRadius) == 0x000B10, "Member 'ABP_KillerFan_C::FanRadius' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, RotCache) == 0x000B14, "Member 'ABP_KillerFan_C::RotCache' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, TCache) == 0x000B20, "Member 'ABP_KillerFan_C::TCache' has a wrong offset!");
static_assert(offsetof(ABP_KillerFan_C, MyDynMat) == 0x000B50, "Member 'ABP_KillerFan_C::MyDynMat' has a wrong offset!");

}

