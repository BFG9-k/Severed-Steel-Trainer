#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RMAMirrorAnimation

#include "Basic.hpp"

#include "RMAMirrorAnimation_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RMAMirrorAnimation.RMAMirrorAnimationMirrorTable
// 0x0048 (0x0070 - 0x0028)
class URMAMirrorAnimationMirrorTable final : public UObject
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRMAMirrorAnimationBoneKeyword> BoneKeyword;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRMAMirrorAnimationSingleBoneConfig> SingleBoneConfig;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRMAMirrorAnimationDoubleBoneConfig> DoubleBoneConfig;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ERMAMirrorAnimationAxis                       ComponentRightAxis;                                // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERMAMirrorAnimationAxisWithNull               LocationMirrorAxis;                                // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERMAMirrorAnimationAxisWithNull               RotationMirrorAxis;                                // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MirrorLocationData;                                // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FileVersion;                                       // 0x0064(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GenerateBoneConfig();
	TArray<class UAnimSequence*> GetAnimSelection();
	class FName GetFileVersion();
	bool MirrorAnimations();
	struct FVector MirrorLocation(const struct FVector& Location, const struct FVector& RefLocation, const struct FQuat& RefRotation, const struct FRMAMirrorAnimationSingleBoneConfig& BoneConfig);
	struct FVector MirrorLocationToOtherPose(const struct FVector& SourceLocation, const struct FVector& SourceRefLocation, const struct FQuat& SourceRefRotation, const struct FVector& TargetRefLocation, const struct FQuat& TargetRefRotation, const struct FRMAMirrorAnimationDoubleBoneConfig& BoneConfig);
	struct FQuat MirrorRotation(const struct FQuat& Rotation, const struct FQuat& RefRotation, const struct FRMAMirrorAnimationSingleBoneConfig& BoneConfig);
	struct FQuat MirrorRotationToOtherPose(const struct FQuat& SourceRotation, const struct FQuat& SourceRefRotation, const struct FQuat& TargetRefRotation, const struct FRMAMirrorAnimationDoubleBoneConfig& BoneConfig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RMAMirrorAnimationMirrorTable">();
	}
	static class URMAMirrorAnimationMirrorTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<URMAMirrorAnimationMirrorTable>();
	}
};
static_assert(alignof(URMAMirrorAnimationMirrorTable) == 0x000008, "Wrong alignment on URMAMirrorAnimationMirrorTable");
static_assert(sizeof(URMAMirrorAnimationMirrorTable) == 0x000070, "Wrong size on URMAMirrorAnimationMirrorTable");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, Skeleton) == 0x000028, "Member 'URMAMirrorAnimationMirrorTable::Skeleton' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, BoneKeyword) == 0x000030, "Member 'URMAMirrorAnimationMirrorTable::BoneKeyword' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, SingleBoneConfig) == 0x000040, "Member 'URMAMirrorAnimationMirrorTable::SingleBoneConfig' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, DoubleBoneConfig) == 0x000050, "Member 'URMAMirrorAnimationMirrorTable::DoubleBoneConfig' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, ComponentRightAxis) == 0x000060, "Member 'URMAMirrorAnimationMirrorTable::ComponentRightAxis' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, LocationMirrorAxis) == 0x000061, "Member 'URMAMirrorAnimationMirrorTable::LocationMirrorAxis' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, RotationMirrorAxis) == 0x000062, "Member 'URMAMirrorAnimationMirrorTable::RotationMirrorAxis' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, MirrorLocationData) == 0x000063, "Member 'URMAMirrorAnimationMirrorTable::MirrorLocationData' has a wrong offset!");
static_assert(offsetof(URMAMirrorAnimationMirrorTable, FileVersion) == 0x000064, "Member 'URMAMirrorAnimationMirrorTable::FileVersion' has a wrong offset!");

// Class RMAMirrorAnimation.RMAMirrorAnimationFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class URMAMirrorAnimationFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetPathNameForLoadedAsset(class UObject* LoadedAsset);
	static class FString GetUserPreference(const class FString& Key, bool* Successful);
	static class FName GetVersion();
	static bool SaveLoadedAsset(class UObject* AssetToSave);
	static bool SetUserPreference(const class FString& Key, const class FString& NewValue);
	static void SyncBrowserToObjects(const TArray<class FString>& AssetPaths);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RMAMirrorAnimationFunctionLibrary">();
	}
	static class URMAMirrorAnimationFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URMAMirrorAnimationFunctionLibrary>();
	}
};
static_assert(alignof(URMAMirrorAnimationFunctionLibrary) == 0x000008, "Wrong alignment on URMAMirrorAnimationFunctionLibrary");
static_assert(sizeof(URMAMirrorAnimationFunctionLibrary) == 0x000028, "Wrong size on URMAMirrorAnimationFunctionLibrary");

}

