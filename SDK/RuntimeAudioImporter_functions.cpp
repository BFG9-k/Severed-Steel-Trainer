#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeAudioImporter

#include "Basic.hpp"

#include "RuntimeAudioImporter_classes.hpp"
#include "RuntimeAudioImporter_parameters.hpp"


namespace SDK
{

// Function RuntimeAudioImporter.ImportedSoundWave.GetPCMBufferCopy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UImportedSoundWave::GetPCMBufferCopy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetPCMBufferCopy");

	Params::ImportedSoundWave_GetPCMBufferCopy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.MixSoundWaveChannels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewNumOfChannels                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImportedSoundWave::MixSoundWaveChannels(int32 NewNumOfChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "MixSoundWaveChannels");

	Params::ImportedSoundWave_MixSoundWaveChannels Parms{};

	Parms.NewNumOfChannels = NewNumOfChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.PrepareSoundWaveForMetaSounds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UImportedSoundWave::PrepareSoundWaveForMetaSounds(const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "PrepareSoundWaveForMetaSounds");

	Params::ImportedSoundWave_PrepareSoundWaveForMetaSounds Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.ReleaseMemory
// (Native, Public, BlueprintCallable)

void UImportedSoundWave::ReleaseMemory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "ReleaseMemory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.ReleasePlayedAudioData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UImportedSoundWave::ReleasePlayedAudioData(const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "ReleasePlayedAudioData");

	Params::ImportedSoundWave_ReleasePlayedAudioData Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.ResampleSoundWave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSampleRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImportedSoundWave::ResampleSoundWave(int32 NewSampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "ResampleSoundWave");

	Params::ImportedSoundWave_ResampleSoundWave Parms{};

	Parms.NewSampleRate = NewSampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.RewindPlaybackTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PlaybackTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImportedSoundWave::RewindPlaybackTime(float PlaybackTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "RewindPlaybackTime");

	Params::ImportedSoundWave_RewindPlaybackTime Parms{};

	Parms.PlaybackTime = PlaybackTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImportedSoundWave::SetLooping(bool bLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "SetLooping");

	Params::ImportedSoundWave_SetLooping Parms{};

	Parms.bLoop = bLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.SetPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPitch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImportedSoundWave::SetPitch(float InPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "SetPitch");

	Params::ImportedSoundWave_SetPitch Parms{};

	Parms.InPitch = InPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.SetSubtitles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FEditableSubtitleCue>     InSubtitles                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UImportedSoundWave::SetSubtitles(const TArray<struct FEditableSubtitleCue>& InSubtitles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "SetSubtitles");

	Params::ImportedSoundWave_SetSubtitles Parms{};

	Parms.InSubtitles = std::move(InSubtitles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.SetVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImportedSoundWave::SetVolume(float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "SetVolume");

	Params::ImportedSoundWave_SetVolume Parms{};

	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetAudioFormat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERuntimeAudioFormat                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERuntimeAudioFormat UImportedSoundWave::GetAudioFormat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetAudioFormat");

	Params::ImportedSoundWave_GetAudioFormat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetAudioHeaderInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRuntimeAudioHeaderInfo          HeaderInfo                                             (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImportedSoundWave::GetAudioHeaderInfo(struct FRuntimeAudioHeaderInfo* HeaderInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetAudioHeaderInfo");

	Params::ImportedSoundWave_GetAudioHeaderInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HeaderInfo != nullptr)
		*HeaderInfo = std::move(Parms.HeaderInfo);

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetDurationConst
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImportedSoundWave::GetDurationConst() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetDurationConst");

	Params::ImportedSoundWave_GetDurationConst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetDurationOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImportedSoundWave::GetDurationOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetDurationOffset");

	Params::ImportedSoundWave_GetDurationOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetNumOfChannels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UImportedSoundWave::GetNumOfChannels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetNumOfChannels");

	Params::ImportedSoundWave_GetNumOfChannels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetPlaybackPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImportedSoundWave::GetPlaybackPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetPlaybackPercentage");

	Params::ImportedSoundWave_GetPlaybackPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetPlaybackTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImportedSoundWave::GetPlaybackTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetPlaybackTime");

	Params::ImportedSoundWave_GetPlaybackTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.GetSampleRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UImportedSoundWave::GetSampleRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "GetSampleRate");

	Params::ImportedSoundWave_GetSampleRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.ImportedSoundWave.IsPlaybackFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UImportedSoundWave::IsPlaybackFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImportedSoundWave", "IsPlaybackFinished");

	Params::ImportedSoundWave_IsPlaybackFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.StreamingSoundWave.CreateStreamingSoundWave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStreamingSoundWave*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStreamingSoundWave* UStreamingSoundWave::CreateStreamingSoundWave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StreamingSoundWave", "CreateStreamingSoundWave");

	Params::StreamingSoundWave_CreateStreamingSoundWave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.StreamingSoundWave.AppendAudioDataFromEncoded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           AudioData                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     AudioFormat                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamingSoundWave::AppendAudioDataFromEncoded(const TArray<uint8>& AudioData, ERuntimeAudioFormat AudioFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingSoundWave", "AppendAudioDataFromEncoded");

	Params::StreamingSoundWave_AppendAudioDataFromEncoded Parms{};

	Parms.AudioData = std::move(AudioData);
	Parms.AudioFormat = AudioFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.StreamingSoundWave.AppendAudioDataFromRAW
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           RAWData                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSampleRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumOfChannels                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamingSoundWave::AppendAudioDataFromRAW(const TArray<uint8>& RAWData, ERuntimeRAWAudioFormat RAWFormat, int32 InSampleRate, int32 NumOfChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingSoundWave", "AppendAudioDataFromRAW");

	Params::StreamingSoundWave_AppendAudioDataFromRAW Parms{};

	Parms.RAWData = std::move(RAWData);
	Parms.RAWFormat = RAWFormat;
	Parms.InSampleRate = InSampleRate;
	Parms.NumOfChannels = NumOfChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.StreamingSoundWave.PreAllocateAudioData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   NumOfBytesToPreAllocate                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UStreamingSoundWave::PreAllocateAudioData(int64 NumOfBytesToPreAllocate, const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingSoundWave", "PreAllocateAudioData");

	Params::StreamingSoundWave_PreAllocateAudioData Parms{};

	Parms.NumOfBytesToPreAllocate = NumOfBytesToPreAllocate;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.StreamingSoundWave.SetStopSoundOnPlaybackFinish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bStop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreamingSoundWave::SetStopSoundOnPlaybackFinish(bool bStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingSoundWave", "SetStopSoundOnPlaybackFinish");

	Params::StreamingSoundWave_SetStopSoundOnPlaybackFinish Parms{};

	Parms.bStop = bStop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.CapturableSoundWave.CreateCapturableSoundWave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCapturableSoundWave*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapturableSoundWave* UCapturableSoundWave::CreateCapturableSoundWave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CapturableSoundWave", "CreateCapturableSoundWave");

	Params::CapturableSoundWave_CreateCapturableSoundWave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.CapturableSoundWave.GetAvailableAudioInputDevices
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(TArray<struct FRuntimeAudioInputDeviceInfo>& AvailableDevices)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCapturableSoundWave::GetAvailableAudioInputDevices(const TDelegate<void(TArray<struct FRuntimeAudioInputDeviceInfo>& AvailableDevices)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CapturableSoundWave", "GetAvailableAudioInputDevices");

	Params::CapturableSoundWave_GetAvailableAudioInputDevices Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.CapturableSoundWave.StartCapture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCapturableSoundWave::StartCapture(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturableSoundWave", "StartCapture");

	Params::CapturableSoundWave_StartCapture Parms{};

	Parms.DeviceID = DeviceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.CapturableSoundWave.StopCapture
// (Final, Native, Public, BlueprintCallable)

void UCapturableSoundWave::StopCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturableSoundWave", "StopCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.CapturableSoundWave.ToggleMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCapturableSoundWave::ToggleMute(bool bMute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturableSoundWave", "ToggleMute");

	Params::CapturableSoundWave_ToggleMute Parms{};

	Parms.bMute = bMute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.CapturableSoundWave.IsCapturing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCapturableSoundWave::IsCapturing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CapturableSoundWave", "IsCapturing");

	Params::CapturableSoundWave_IsCapturing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToBuffer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     AudioFormat                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioExporter::ExportSoundWaveToBuffer(class UImportedSoundWave* ImportedSoundWave, ERuntimeAudioFormat AudioFormat, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioExporter", "ExportSoundWaveToBuffer");

	Params::RuntimeAudioExporter_ExportSoundWaveToBuffer Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.AudioFormat = AudioFormat;
	Parms.Quality = Quality;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SavePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     AudioFormat                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioExporter::ExportSoundWaveToFile(class UImportedSoundWave* ImportedSoundWave, const class FString& SavePath, ERuntimeAudioFormat AudioFormat, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioExporter", "ExportSoundWaveToFile");

	Params::RuntimeAudioExporter_ExportSoundWaveToFile Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.SavePath = std::move(SavePath);
	Parms.AudioFormat = AudioFormat;
	Parms.Quality = Quality;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToRAWBuffer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioExporter::ExportSoundWaveToRAWBuffer(class UImportedSoundWave* ImportedSoundWave, ERuntimeRAWAudioFormat RAWFormat, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& AudioData)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioExporter", "ExportSoundWaveToRAWBuffer");

	Params::RuntimeAudioExporter_ExportSoundWaveToRAWBuffer Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.RAWFormat = RAWFormat;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioExporter.ExportSoundWaveToRAWFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UImportedSoundWave*               ImportedSoundWave                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SavePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioExporter::ExportSoundWaveToRAWFile(class UImportedSoundWave* ImportedSoundWave, const class FString& SavePath, ERuntimeRAWAudioFormat RAWFormat, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioExporter", "ExportSoundWaveToRAWFile");

	Params::RuntimeAudioExporter_ExportSoundWaveToRAWFile Parms{};

	Parms.ImportedSoundWave = ImportedSoundWave;
	Parms.SavePath = std::move(SavePath);
	Parms.RAWFormat = RAWFormat;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ConvertRegularToImportedSoundWave
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundWave*                       SoundWave                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UImportedSoundWave>   ImportedSoundWaveClass                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, class UImportedSoundWave* ImportedSoundWave)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ConvertRegularToImportedSoundWave(class USoundWave* SoundWave, TSubclassOf<class UImportedSoundWave> ImportedSoundWaveClass, const TDelegate<void(bool bSucceeded, class UImportedSoundWave* ImportedSoundWave)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioImporterLibrary", "ConvertRegularToImportedSoundWave");

	Params::RuntimeAudioImporterLibrary_ConvertRegularToImportedSoundWave Parms{};

	Parms.SoundWave = SoundWave;
	Parms.ImportedSoundWaveClass = ImportedSoundWaveClass;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.CreateRuntimeAudioImporter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URuntimeAudioImporterLibrary*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URuntimeAudioImporterLibrary* URuntimeAudioImporterLibrary::CreateRuntimeAudioImporter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioImporterLibrary", "CreateRuntimeAudioImporter");

	Params::RuntimeAudioImporterLibrary_CreateRuntimeAudioImporter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           AudioData                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     AudioFormat                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ImportAudioFromBuffer(const TArray<uint8>& AudioData, ERuntimeAudioFormat AudioFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeAudioImporterLibrary", "ImportAudioFromBuffer");

	Params::RuntimeAudioImporterLibrary_ImportAudioFromBuffer Parms{};

	Parms.AudioData = std::move(AudioData);
	Parms.AudioFormat = AudioFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     AudioFormat                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ImportAudioFromFile(const class FString& FilePath, ERuntimeAudioFormat AudioFormat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeAudioImporterLibrary", "ImportAudioFromFile");

	Params::RuntimeAudioImporterLibrary_ImportAudioFromFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.AudioFormat = AudioFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromPreImportedSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPreImportedSoundAsset*           PreImportedSoundAsset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ImportAudioFromPreImportedSound(class UPreImportedSoundAsset* PreImportedSoundAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeAudioImporterLibrary", "ImportAudioFromPreImportedSound");

	Params::RuntimeAudioImporterLibrary_ImportAudioFromPreImportedSound Parms{};

	Parms.PreImportedSoundAsset = PreImportedSoundAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromRAWBuffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           RAWBuffer                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumOfChannels                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ImportAudioFromRAWBuffer(const TArray<uint8>& RAWBuffer, ERuntimeRAWAudioFormat RAWFormat, int32 SampleRate, int32 NumOfChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeAudioImporterLibrary", "ImportAudioFromRAWBuffer");

	Params::RuntimeAudioImporterLibrary_ImportAudioFromRAWBuffer Parms{};

	Parms.RAWBuffer = std::move(RAWBuffer);
	Parms.RAWFormat = RAWFormat;
	Parms.SampleRate = SampleRate;
	Parms.NumOfChannels = NumOfChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioImporterLibrary.ImportAudioFromRAWFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumOfChannels                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URuntimeAudioImporterLibrary::ImportAudioFromRAWFile(const class FString& FilePath, ERuntimeRAWAudioFormat RAWFormat, int32 SampleRate, int32 NumOfChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RuntimeAudioImporterLibrary", "ImportAudioFromRAWFile");

	Params::RuntimeAudioImporterLibrary_ImportAudioFromRAWFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.RAWFormat = RAWFormat;
	Parms.SampleRate = SampleRate;
	Parms.NumOfChannels = NumOfChannels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeEncodedDataFromBuffer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           EncodedDataFrom                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     EncodedFormatFrom                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     EncodedFormatTo                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, TArray<uint8>& EncodedData)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioTranscoder::TranscodeEncodedDataFromBuffer(const TArray<uint8>& EncodedDataFrom, ERuntimeAudioFormat EncodedFormatFrom, ERuntimeAudioFormat EncodedFormatTo, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded, TArray<uint8>& EncodedData)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioTranscoder", "TranscodeEncodedDataFromBuffer");

	Params::RuntimeAudioTranscoder_TranscodeEncodedDataFromBuffer Parms{};

	Parms.EncodedDataFrom = std::move(EncodedDataFrom);
	Parms.EncodedFormatFrom = EncodedFormatFrom;
	Parms.EncodedFormatTo = EncodedFormatTo;
	Parms.Quality = Quality;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeEncodedDataFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           FilePathFrom                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     EncodedFormatFrom                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePathTo                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     EncodedFormatTo                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRuntimeAudioExportOverrideOptionsOverrideOptions                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioTranscoder::TranscodeEncodedDataFromFile(const class FString& FilePathFrom, ERuntimeAudioFormat EncodedFormatFrom, const class FString& FilePathTo, ERuntimeAudioFormat EncodedFormatTo, uint8 Quality, const struct FRuntimeAudioExportOverrideOptions& OverrideOptions, const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioTranscoder", "TranscodeEncodedDataFromFile");

	Params::RuntimeAudioTranscoder_TranscodeEncodedDataFromFile Parms{};

	Parms.FilePathFrom = std::move(FilePathFrom);
	Parms.EncodedFormatFrom = EncodedFormatFrom;
	Parms.FilePathTo = std::move(FilePathTo);
	Parms.EncodedFormatTo = EncodedFormatTo;
	Parms.Quality = Quality;
	Parms.OverrideOptions = std::move(OverrideOptions);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeRAWDataFromBuffer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           RAWDataFrom                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormatFrom                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormatTo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, TArray<uint8>& RAWData)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioTranscoder::TranscodeRAWDataFromBuffer(const TArray<uint8>& RAWDataFrom, ERuntimeRAWAudioFormat RAWFormatFrom, ERuntimeRAWAudioFormat RAWFormatTo, const TDelegate<void(bool bSucceeded, TArray<uint8>& RAWData)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioTranscoder", "TranscodeRAWDataFromBuffer");

	Params::RuntimeAudioTranscoder_TranscodeRAWDataFromBuffer Parms{};

	Parms.RAWDataFrom = std::move(RAWDataFrom);
	Parms.RAWFormatFrom = RAWFormatFrom;
	Parms.RAWFormatTo = RAWFormatTo;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioTranscoder.TranscodeRAWDataFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           FilePathFrom                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormatFrom                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePathTo                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeRAWAudioFormat                  RAWFormatTo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded)>        Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioTranscoder::TranscodeRAWDataFromFile(const class FString& FilePathFrom, ERuntimeRAWAudioFormat RAWFormatFrom, const class FString& FilePathTo, ERuntimeRAWAudioFormat RAWFormatTo, const TDelegate<void(bool bSucceeded)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioTranscoder", "TranscodeRAWDataFromFile");

	Params::RuntimeAudioTranscoder_TranscodeRAWDataFromFile Parms{};

	Parms.FilePathFrom = std::move(FilePathFrom);
	Parms.RAWFormatFrom = RAWFormatFrom;
	Parms.FilePathTo = std::move(FilePathTo);
	Parms.RAWFormatTo = RAWFormatTo;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.ConvertSecondsToString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URuntimeAudioUtilities::ConvertSecondsToString(int64 Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "ConvertSecondsToString");

	Params::RuntimeAudioUtilities_ConvertSecondsToString Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioFormat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERuntimeAudioFormat URuntimeAudioUtilities::GetAudioFormat(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "GetAudioFormat");

	Params::RuntimeAudioUtilities_GetAudioFormat Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioFormatAdvanced
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           AudioData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ERuntimeAudioFormat                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERuntimeAudioFormat URuntimeAudioUtilities::GetAudioFormatAdvanced(const TArray<uint8>& AudioData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "GetAudioFormatAdvanced");

	Params::RuntimeAudioUtilities_GetAudioFormatAdvanced Parms{};

	Parms.AudioData = std::move(AudioData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioHeaderInfoFromBuffer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           AudioData                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioUtilities::GetAudioHeaderInfoFromBuffer(const TArray<uint8>& AudioData, const TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "GetAudioHeaderInfoFromBuffer");

	Params::RuntimeAudioUtilities_GetAudioHeaderInfoFromBuffer Parms{};

	Parms.AudioData = std::move(AudioData);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.GetAudioHeaderInfoFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioUtilities::GetAudioHeaderInfoFromFile(const class FString& FilePath, const TDelegate<void(bool bSucceeded, struct FRuntimeAudioHeaderInfo& HeaderInfo)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "GetAudioHeaderInfoFromFile");

	Params::RuntimeAudioUtilities_GetAudioHeaderInfoFromFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RuntimeAudioImporter.RuntimeAudioUtilities.ScanDirectoryForAudioFiles
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecursive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceeded, TArray<class FString>& AudioFilePaths)>Result                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void URuntimeAudioUtilities::ScanDirectoryForAudioFiles(const class FString& Directory, bool bRecursive, const TDelegate<void(bool bSucceeded, TArray<class FString>& AudioFilePaths)>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RuntimeAudioUtilities", "ScanDirectoryForAudioFiles");

	Params::RuntimeAudioUtilities_ScanDirectoryForAudioFiles Parms{};

	Parms.Directory = std::move(Directory);
	Parms.bRecursive = bRecursive;
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

