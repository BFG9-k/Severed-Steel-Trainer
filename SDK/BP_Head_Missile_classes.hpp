#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Head_Missile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "MissileOrder_structs.hpp"
#include "HeadStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Head_Missile.BP_Head_Missile_C
// 0x0200 (0x0420 - 0x0220)
class ABP_Head_Missile_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Cap_6;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cap_5;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cap_4;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cap_3;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cap_2;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cap_1;                                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_1;                                     // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_6;                                     // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_5;                                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_3;                                     // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_4;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMissile_2;                                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_1;                                           // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_6;                                           // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_5;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_4;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_3;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Burst_2;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Reload;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSound;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserLight;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   WarningLight;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Laser;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   LaserSource;                                       // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   LaserHit;                                          // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Head;                                              // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FHeadStruct                            HeadSettings;                                      // 0x0300(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         MaxLaserLength;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRate;                                          // 0x0364(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x0368(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ProjectileAcor;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        MuzzleEffect;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargerFoundSound;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TargetLostSound;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Deactivate;                                        // 0x0390(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaserLocation;                                     // 0x0394(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x03A0(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x03AC(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackWidth;                                        // 0x03C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugLines;                                        // 0x03C4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TraceBlockers;                                     // 0x03C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	EObjectTypeQuery                              ObjectColl_To_Trace;                               // 0x03D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_Laser_on_Hit;                                 // 0x03D9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HideLaserBeam;                                     // 0x03DA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DB[0x5];                                      // 0x03DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	struct FLinearColor                           LaserColor;                                        // 0x03F0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMissileOrder                                 MissileOrder;                                      // 0x0400(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Health;                                            // 0x0404(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LaserAngle;                                        // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Head_Missile(int32 EntryPoint);
	void SetLaser();
	void ObjectHit();
	void ResetTraceActorHit();
	void BlockerObjectHit();
	void ResetFire();
	void SetSettings();
	void fire();
	void ReceiveTick(float DeltaSeconds);
	void HeadReceiveDamage();
	void Set_LaserHidden();
	void DeactivateHead();
	void ActivateHead();
	void TraceSetup();
	void OpenGate();
	void FireMissile();
	void OnRep_HideLaserBeam();
	void OnRep_HeadSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Head_Missile_C">();
	}
	static class ABP_Head_Missile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Head_Missile_C>();
	}
};
static_assert(alignof(ABP_Head_Missile_C) == 0x000008, "Wrong alignment on ABP_Head_Missile_C");
static_assert(sizeof(ABP_Head_Missile_C) == 0x000420, "Wrong size on ABP_Head_Missile_C");
static_assert(offsetof(ABP_Head_Missile_C, UberGraphFrame) == 0x000220, "Member 'ABP_Head_Missile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_6) == 0x000228, "Member 'ABP_Head_Missile_C::Cap_6' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_5) == 0x000230, "Member 'ABP_Head_Missile_C::Cap_5' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_4) == 0x000238, "Member 'ABP_Head_Missile_C::Cap_4' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_3) == 0x000240, "Member 'ABP_Head_Missile_C::Cap_3' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_2) == 0x000248, "Member 'ABP_Head_Missile_C::Cap_2' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Cap_1) == 0x000250, "Member 'ABP_Head_Missile_C::Cap_1' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_1) == 0x000258, "Member 'ABP_Head_Missile_C::TempMissile_1' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_6) == 0x000260, "Member 'ABP_Head_Missile_C::TempMissile_6' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_5) == 0x000268, "Member 'ABP_Head_Missile_C::TempMissile_5' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_3) == 0x000270, "Member 'ABP_Head_Missile_C::TempMissile_3' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_4) == 0x000278, "Member 'ABP_Head_Missile_C::TempMissile_4' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TempMissile_2) == 0x000280, "Member 'ABP_Head_Missile_C::TempMissile_2' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_1) == 0x000288, "Member 'ABP_Head_Missile_C::Burst_1' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_6) == 0x000290, "Member 'ABP_Head_Missile_C::Burst_6' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_5) == 0x000298, "Member 'ABP_Head_Missile_C::Burst_5' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_4) == 0x0002A0, "Member 'ABP_Head_Missile_C::Burst_4' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_3) == 0x0002A8, "Member 'ABP_Head_Missile_C::Burst_3' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Burst_2) == 0x0002B0, "Member 'ABP_Head_Missile_C::Burst_2' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Reload) == 0x0002B8, "Member 'ABP_Head_Missile_C::Reload' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, FireSound) == 0x0002C0, "Member 'ABP_Head_Missile_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Root) == 0x0002C8, "Member 'ABP_Head_Missile_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserLight) == 0x0002D0, "Member 'ABP_Head_Missile_C::LaserLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, WarningLight) == 0x0002D8, "Member 'ABP_Head_Missile_C::WarningLight' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Laser) == 0x0002E0, "Member 'ABP_Head_Missile_C::Laser' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserSource) == 0x0002E8, "Member 'ABP_Head_Missile_C::LaserSource' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserHit) == 0x0002F0, "Member 'ABP_Head_Missile_C::LaserHit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Head) == 0x0002F8, "Member 'ABP_Head_Missile_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, HeadSettings) == 0x000300, "Member 'ABP_Head_Missile_C::HeadSettings' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, MaxLaserLength) == 0x000360, "Member 'ABP_Head_Missile_C::MaxLaserLength' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, FireRate) == 0x000364, "Member 'ABP_Head_Missile_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, InRange) == 0x000368, "Member 'ABP_Head_Missile_C::InRange' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, ProjectileAcor) == 0x000370, "Member 'ABP_Head_Missile_C::ProjectileAcor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, MuzzleEffect) == 0x000378, "Member 'ABP_Head_Missile_C::MuzzleEffect' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TargerFoundSound) == 0x000380, "Member 'ABP_Head_Missile_C::TargerFoundSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TargetLostSound) == 0x000388, "Member 'ABP_Head_Missile_C::TargetLostSound' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Deactivate) == 0x000390, "Member 'ABP_Head_Missile_C::Deactivate' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserLocation) == 0x000394, "Member 'ABP_Head_Missile_C::LaserLocation' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Start) == 0x0003A0, "Member 'ABP_Head_Missile_C::Start' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, End) == 0x0003AC, "Member 'ABP_Head_Missile_C::End' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, HitActor) == 0x0003B8, "Member 'ABP_Head_Missile_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TrackWidth) == 0x0003C0, "Member 'ABP_Head_Missile_C::TrackWidth' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, DebugLines) == 0x0003C4, "Member 'ABP_Head_Missile_C::DebugLines' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, TraceBlockers) == 0x0003C8, "Member 'ABP_Head_Missile_C::TraceBlockers' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, ObjectColl_To_Trace) == 0x0003D8, "Member 'ABP_Head_Missile_C::ObjectColl_To_Trace' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Hide_Laser_on_Hit) == 0x0003D9, "Member 'ABP_Head_Missile_C::Hide_Laser_on_Hit' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, HideLaserBeam) == 0x0003DA, "Member 'ABP_Head_Missile_C::HideLaserBeam' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, IgnoreActors) == 0x0003E0, "Member 'ABP_Head_Missile_C::IgnoreActors' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserColor) == 0x0003F0, "Member 'ABP_Head_Missile_C::LaserColor' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, MissileOrder) == 0x000400, "Member 'ABP_Head_Missile_C::MissileOrder' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, Health) == 0x000404, "Member 'ABP_Head_Missile_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, HitComponent) == 0x000408, "Member 'ABP_Head_Missile_C::HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_Head_Missile_C, LaserAngle) == 0x000410, "Member 'ABP_Head_Missile_C::LaserAngle' has a wrong offset!");

}

