#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALSV4_CPP

#include "Basic.hpp"

#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALSV4_CPP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class ALSV4_CPP.ALSAnimNotifyGroundedEntryState
// 0x0008 (0x0040 - 0x0038)
class UALSAnimNotifyGroundedEntryState final : public UAnimNotify
{
public:
	EALSGroundedEntryState                        GroundedEntryState;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyGroundedEntryState">();
	}
	static class UALSAnimNotifyGroundedEntryState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyGroundedEntryState>();
	}
};
static_assert(alignof(UALSAnimNotifyGroundedEntryState) == 0x000008, "Wrong alignment on UALSAnimNotifyGroundedEntryState");
static_assert(sizeof(UALSAnimNotifyGroundedEntryState) == 0x000040, "Wrong size on UALSAnimNotifyGroundedEntryState");
static_assert(offsetof(UALSAnimNotifyGroundedEntryState, GroundedEntryState) == 0x000038, "Member 'UALSAnimNotifyGroundedEntryState::GroundedEntryState' has a wrong offset!");

// Class ALSV4_CPP.ALS_BTTask_GetRandomLocation
// 0x0010 (0x00A8 - 0x0098)
class UALS_BTTask_GetRandomLocation final : public UBTTask_BlackboardBase
{
public:
	float                                         MaxDistance;                                       // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     Filter;                                            // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALS_BTTask_GetRandomLocation">();
	}
	static class UALS_BTTask_GetRandomLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALS_BTTask_GetRandomLocation>();
	}
};
static_assert(alignof(UALS_BTTask_GetRandomLocation) == 0x000008, "Wrong alignment on UALS_BTTask_GetRandomLocation");
static_assert(sizeof(UALS_BTTask_GetRandomLocation) == 0x0000A8, "Wrong size on UALS_BTTask_GetRandomLocation");
static_assert(offsetof(UALS_BTTask_GetRandomLocation, MaxDistance) == 0x000098, "Member 'UALS_BTTask_GetRandomLocation::MaxDistance' has a wrong offset!");
static_assert(offsetof(UALS_BTTask_GetRandomLocation, Filter) == 0x0000A0, "Member 'UALS_BTTask_GetRandomLocation::Filter' has a wrong offset!");

// Class ALSV4_CPP.ALSAnimNotifyFootstep
// 0x0020 (0x0058 - 0x0038)
class UALSAnimNotifyFootstep final : public UAnimNotify
{
public:
	class USoundBase*                             Sound;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSFootstepType                              FootstepType;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMaskCurve;                                // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyFootstep">();
	}
	static class UALSAnimNotifyFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyFootstep>();
	}
};
static_assert(alignof(UALSAnimNotifyFootstep) == 0x000008, "Wrong alignment on UALSAnimNotifyFootstep");
static_assert(sizeof(UALSAnimNotifyFootstep) == 0x000058, "Wrong size on UALSAnimNotifyFootstep");
static_assert(offsetof(UALSAnimNotifyFootstep, Sound) == 0x000038, "Member 'UALSAnimNotifyFootstep::Sound' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, AttachPointName) == 0x000040, "Member 'UALSAnimNotifyFootstep::AttachPointName' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, FootstepType) == 0x000048, "Member 'UALSAnimNotifyFootstep::FootstepType' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, VolumeMultiplier) == 0x00004C, "Member 'UALSAnimNotifyFootstep::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, PitchMultiplier) == 0x000050, "Member 'UALSAnimNotifyFootstep::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyFootstep, bOverrideMaskCurve) == 0x000054, "Member 'UALSAnimNotifyFootstep::bOverrideMaskCurve' has a wrong offset!");

// Class ALSV4_CPP.ALS_BTTask_SetFocusToPlayer
// 0x0000 (0x0070 - 0x0070)
class UALS_BTTask_SetFocusToPlayer final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALS_BTTask_SetFocusToPlayer">();
	}
	static class UALS_BTTask_SetFocusToPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALS_BTTask_SetFocusToPlayer>();
	}
};
static_assert(alignof(UALS_BTTask_SetFocusToPlayer) == 0x000008, "Wrong alignment on UALS_BTTask_SetFocusToPlayer");
static_assert(sizeof(UALS_BTTask_SetFocusToPlayer) == 0x000070, "Wrong size on UALS_BTTask_SetFocusToPlayer");

// Class ALSV4_CPP.ALSPlayerController
// 0x0008 (0x0578 - 0x0570)
class AALSPlayerController final : public APlayerController
{
public:
	uint8                                         Pad_570[0x8];                                      // 0x0570(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerController">();
	}
	static class AALSPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSPlayerController>();
	}
};
static_assert(alignof(AALSPlayerController) == 0x000008, "Wrong alignment on AALSPlayerController");
static_assert(sizeof(AALSPlayerController) == 0x000578, "Wrong size on AALSPlayerController");

// Class ALSV4_CPP.ALSAIController
// 0x0008 (0x0330 - 0x0328)
class AALSAIController final : public AAIController
{
public:
	class UBehaviorTree*                          Behaviour;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAIController">();
	}
	static class AALSAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSAIController>();
	}
};
static_assert(alignof(AALSAIController) == 0x000008, "Wrong alignment on AALSAIController");
static_assert(sizeof(AALSAIController) == 0x000330, "Wrong size on AALSAIController");
static_assert(offsetof(AALSAIController, Behaviour) == 0x000328, "Member 'AALSAIController::Behaviour' has a wrong offset!");

// Class ALSV4_CPP.ALSAnimNotifyCameraShake
// 0x0010 (0x0048 - 0x0038)
class UALSAnimNotifyCameraShake final : public UAnimNotify
{
public:
	TSubclassOf<class UMatineeCameraShake>        ShakeClass;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSAnimNotifyCameraShake">();
	}
	static class UALSAnimNotifyCameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSAnimNotifyCameraShake>();
	}
};
static_assert(alignof(UALSAnimNotifyCameraShake) == 0x000008, "Wrong alignment on UALSAnimNotifyCameraShake");
static_assert(sizeof(UALSAnimNotifyCameraShake) == 0x000048, "Wrong size on UALSAnimNotifyCameraShake");
static_assert(offsetof(UALSAnimNotifyCameraShake, ShakeClass) == 0x000038, "Member 'UALSAnimNotifyCameraShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(UALSAnimNotifyCameraShake, Scale) == 0x000040, "Member 'UALSAnimNotifyCameraShake::Scale' has a wrong offset!");

// Class ALSV4_CPP.ALSBaseCharacter
// 0x0370 (0x0830 - 0x04C0)
#pragma pack(push, 0x1)
class alignas(0x10) AALSBaseCharacter : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x5];                                      // 0x04B8(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPlayer;                                         // 0x04BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BE[0x2];                                      // 0x04BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TYVCAimYawDelta;                                   // 0x04C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C4[0xC];                                      // 0x04C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EALSRotationMode                              DesiredRotationMode;                               // 0x04D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGait                                      DesiredGait;                                       // 0x04D1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSStance                                    DesiredStance;                                     // 0x04D2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D3[0x1];                                      // 0x04D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookUpDownRate;                                    // 0x04D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookLeftRightRate;                                 // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RollDoubleTapTimeout;                              // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ViewModeSwitchHoldTime;                            // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TimesPressedStance;                                // 0x04E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakFall;                                        // 0x04E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSprintHeld;                                       // 0x04E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThirdPersonFOV;                                    // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FirstPersonFOV;                                    // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRightShoulder;                                    // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSOverlayState                              OverlayState;                                      // 0x04F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F6[0x2];                                      // 0x04F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMovementSettings                   CurrentMovementSettings;                           // 0x04F8(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    MovementModel;                                     // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                GroundedTraceSettings;                             // 0x0528(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                AutomaticTraceSettings;                            // 0x053C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSMantleTraceSettings                FallingTraceSettings;                              // 0x0550(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MantleTimelineCurve;                               // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     MantleTimeline;                                    // 0x0570(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Acceleration;                                      // 0x0578(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x0584(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasMovementInput;                                 // 0x0585(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_586[0x2];                                      // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x0588(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               LastMovementInputRotation;                         // 0x0594(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         Speed;                                             // 0x05A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovementInputAmount;                               // 0x05A4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimYawRate;                                        // 0x05A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EasedMaxAcceleration;                              // 0x05AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ReplicatedCurrentAcceleration;                     // 0x05B0(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ReplicatedControlRotation;                         // 0x05BC(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EALSMovementState                             MovementState;                                     // 0x05C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementState                             PrevMovementState;                                 // 0x05C9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementAction                            MovementAction;                                    // 0x05CA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSRotationMode                              RotationMode;                                      // 0x05CB(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGait                                      Gait;                                              // 0x05CC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSStance                                    Stance;                                            // 0x05CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSViewMode                                  ViewMode;                                          // 0x05CE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5CF[0x1];                                      // 0x05CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMovementStateSettings              MovementData;                                      // 0x05D0(0x00C8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               TargetRotation;                                    // 0x0698(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               InAirRotation;                                     // 0x06A4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         YawOffset;                                         // 0x06B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSMantleParams                       MantleParams;                                      // 0x06B8(0x0028)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSComponentAndTransform              MantleLedgeLS;                                     // 0x06E0(0x0040)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             MantleTarget;                                      // 0x0720(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             MantleActualStartOffset;                           // 0x0750(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x0780(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bBreakfallOnLand;                                  // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakfallOnLandVelocity;                           // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollOnLand;                                    // 0x07B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B9[0x3];                                      // 0x07B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RagdollOnLandVelocity;                             // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollOnGround;                                  // 0x07C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRagdollFaceUp;                                    // 0x07C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C2[0x2];                                      // 0x07C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRagdollVelocity;                               // 0x07C4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetRagdollLocation;                             // 0x07D0(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7DC[0x1C];                                     // 0x07DC(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class UALSCharacterAnimInstance*              MainAnimInstance;                                  // 0x07F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_800[0x28];                                     // 0x0800(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawDebugSpheres();
	void EventOnJumped();
	void EventOnLanded();
	struct FVector GetFirstPersonCameraTarget();
	class UAnimMontage* GetGetUpAnimation(bool bRagdollFaceUpState);
	struct FALSMantleAsset GetMantleAsset(EALSMantleType MantleType);
	class UAnimMontage* GetRollAnimation();
	struct FTransform GetThirdPersonPivotTarget();
	ECollisionChannel GetThirdPersonTraceParams(struct FVector* TraceOrigin, float* TraceRadius);
	void GetUpComplete(class UAnimMontage* AnimMontage, bool bInterrupted);
	bool MantleCheckFalling();
	bool MantleCheckGrounded();
	void MantleEnd();
	void MantleUpdate(float BlendIn);
	void Multicast_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType);
	void Multicast_OnJumped();
	void Multicast_OnLanded();
	void Multicast_PlayMontage(class UAnimMontage* Montage, float track);
	void Multicast_RagdollEnd(const struct FVector& CharacterLocation);
	void Multicast_RagdollStart();
	void OnBreakfall();
	void OnRep_OverlayState(EALSOverlayState PrevOverlayState);
	void OnRep_RotationMode(EALSRotationMode PrevRotMode);
	void OnRep_ViewMode(EALSViewMode PrevViewMode);
	void RagdollEnd();
	void RagdollStart();
	void Replicated_PlayMontage(class UAnimMontage* Montage, float track);
	void ReplicatedRagdollEnd();
	void ReplicatedRagdollStart();
	void Server_MantleStart(float MantleHeight, const struct FALSComponentAndTransform& MantleLedgeWS, EALSMantleType MantleType);
	void Server_PlayMontage(class UAnimMontage* Montage, float track);
	void Server_RagdollEnd(const struct FVector& CharacterLocation);
	void Server_RagdollStart();
	void Server_SetDesiredGait(EALSGait NewGait);
	void Server_SetDesiredRotationMode(EALSRotationMode NewRotMode);
	void Server_SetDesiredStance(EALSStance NewStance);
	void Server_SetMeshLocationDuringRagdoll(const struct FVector& MeshLocation);
	void Server_SetOverlayState(EALSOverlayState NewState);
	void Server_SetRotationMode(EALSRotationMode NewRotationMode);
	void Server_SetViewMode(EALSViewMode NewViewMode);
	void SetAcceleration(const struct FVector& NewAcceleration);
	void SetActorLocationAndTargetRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetAimYawRate(float NewAimYawRate);
	void SetDesiredGait(EALSGait NewGait);
	void SetDesiredRotationMode(EALSRotationMode NewRotMode);
	void SetDesiredStance(EALSStance NewStance);
	void SetGait(EALSGait NewGait);
	void SetHasMovementInput(bool bNewHasMovementInput);
	void SetIsMoving(bool bNewIsMoving);
	void SetMovementAction(EALSMovementAction NewAction);
	void SetMovementInputAmount(float NewMovementInputAmount);
	void SetMovementState(EALSMovementState NewState);
	void SetOverlayState(EALSOverlayState NewState);
	void SetRightShoulder(bool bNewRightShoulder);
	void SetRotationMode(EALSRotationMode NewRotationMode);
	void SetSpeed(float NewSpeed);
	void SetStance(EALSStance NewStance);
	void SetViewMode(EALSViewMode NewViewMode);
	void TYVCMoveSmooth(const struct FVector& Move, float DeltaSeconds);

	bool CanSprint() const;
	struct FVector GetAcceleration() const;
	EALSGait GetActualGait(EALSGait AllowedGait) const;
	struct FRotator GetAimingRotation() const;
	float GetAimYawRate() const;
	EALSGait GetAllowedGait() const;
	float GetAnimCurveValue(class FName CurveName) const;
	void GetCameraParameters(float* TPFOVOut, float* FPFOVOut, bool* bRightShoulderOut) const;
	void GetControlForwardRightVector(struct FVector* Forward, struct FVector* Right) const;
	EALSGait GetDesiredGait() const;
	EALSRotationMode GetDesiredRotationMode() const;
	EALSStance GetDesiredStance() const;
	EALSGait GetGait() const;
	EALSMovementAction GetMovementAction() const;
	struct FVector GetMovementInput() const;
	float GetMovementInputAmount() const;
	EALSMovementState GetMovementState() const;
	class UALSCharacterMovementComponent* GetMyMovementComponent() const;
	EALSOverlayState GetOverlayState() const;
	struct FVector GetPlayerMovementInput() const;
	EALSMovementState GetPrevMovementState() const;
	EALSRotationMode GetRotationMode() const;
	float GetSpeed() const;
	EALSStance GetStance() const;
	struct FALSMovementSettings GetTargetMovementSettings() const;
	EALSViewMode GetViewMode() const;
	bool HasMovementInput() const;
	bool IsMoving() const;
	bool IsRightShoulder() const;
	EALSOverlayState SwitchRight() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSBaseCharacter">();
	}
	static class AALSBaseCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSBaseCharacter>();
	}
};
#pragma pack(pop)
static_assert(alignof(AALSBaseCharacter) == 0x000010, "Wrong alignment on AALSBaseCharacter");
static_assert(sizeof(AALSBaseCharacter) == 0x000830, "Wrong size on AALSBaseCharacter");
static_assert(offsetof(AALSBaseCharacter, bIsPlayer) == 0x0004BD, "Member 'AALSBaseCharacter::bIsPlayer' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TYVCAimYawDelta) == 0x0004C0, "Member 'AALSBaseCharacter::TYVCAimYawDelta' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredRotationMode) == 0x0004D0, "Member 'AALSBaseCharacter::DesiredRotationMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredGait) == 0x0004D1, "Member 'AALSBaseCharacter::DesiredGait' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, DesiredStance) == 0x0004D2, "Member 'AALSBaseCharacter::DesiredStance' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LookUpDownRate) == 0x0004D4, "Member 'AALSBaseCharacter::LookUpDownRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LookLeftRightRate) == 0x0004D8, "Member 'AALSBaseCharacter::LookLeftRightRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RollDoubleTapTimeout) == 0x0004DC, "Member 'AALSBaseCharacter::RollDoubleTapTimeout' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ViewModeSwitchHoldTime) == 0x0004E0, "Member 'AALSBaseCharacter::ViewModeSwitchHoldTime' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TimesPressedStance) == 0x0004E4, "Member 'AALSBaseCharacter::TimesPressedStance' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bBreakFall) == 0x0004E8, "Member 'AALSBaseCharacter::bBreakFall' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bSprintHeld) == 0x0004E9, "Member 'AALSBaseCharacter::bSprintHeld' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ThirdPersonFOV) == 0x0004EC, "Member 'AALSBaseCharacter::ThirdPersonFOV' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, FirstPersonFOV) == 0x0004F0, "Member 'AALSBaseCharacter::FirstPersonFOV' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRightShoulder) == 0x0004F4, "Member 'AALSBaseCharacter::bRightShoulder' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, OverlayState) == 0x0004F5, "Member 'AALSBaseCharacter::OverlayState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, CurrentMovementSettings) == 0x0004F8, "Member 'AALSBaseCharacter::CurrentMovementSettings' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementModel) == 0x000518, "Member 'AALSBaseCharacter::MovementModel' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, GroundedTraceSettings) == 0x000528, "Member 'AALSBaseCharacter::GroundedTraceSettings' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, AutomaticTraceSettings) == 0x00053C, "Member 'AALSBaseCharacter::AutomaticTraceSettings' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, FallingTraceSettings) == 0x000550, "Member 'AALSBaseCharacter::FallingTraceSettings' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleTimelineCurve) == 0x000568, "Member 'AALSBaseCharacter::MantleTimelineCurve' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleTimeline) == 0x000570, "Member 'AALSBaseCharacter::MantleTimeline' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Acceleration) == 0x000578, "Member 'AALSBaseCharacter::Acceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bIsMoving) == 0x000584, "Member 'AALSBaseCharacter::bIsMoving' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bHasMovementInput) == 0x000585, "Member 'AALSBaseCharacter::bHasMovementInput' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastVelocityRotation) == 0x000588, "Member 'AALSBaseCharacter::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastMovementInputRotation) == 0x000594, "Member 'AALSBaseCharacter::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Speed) == 0x0005A0, "Member 'AALSBaseCharacter::Speed' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementInputAmount) == 0x0005A4, "Member 'AALSBaseCharacter::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, AimYawRate) == 0x0005A8, "Member 'AALSBaseCharacter::AimYawRate' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, EasedMaxAcceleration) == 0x0005AC, "Member 'AALSBaseCharacter::EasedMaxAcceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ReplicatedCurrentAcceleration) == 0x0005B0, "Member 'AALSBaseCharacter::ReplicatedCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ReplicatedControlRotation) == 0x0005BC, "Member 'AALSBaseCharacter::ReplicatedControlRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementState) == 0x0005C8, "Member 'AALSBaseCharacter::MovementState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, PrevMovementState) == 0x0005C9, "Member 'AALSBaseCharacter::PrevMovementState' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementAction) == 0x0005CA, "Member 'AALSBaseCharacter::MovementAction' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RotationMode) == 0x0005CB, "Member 'AALSBaseCharacter::RotationMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Gait) == 0x0005CC, "Member 'AALSBaseCharacter::Gait' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, Stance) == 0x0005CD, "Member 'AALSBaseCharacter::Stance' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, ViewMode) == 0x0005CE, "Member 'AALSBaseCharacter::ViewMode' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MovementData) == 0x0005D0, "Member 'AALSBaseCharacter::MovementData' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TargetRotation) == 0x000698, "Member 'AALSBaseCharacter::TargetRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, InAirRotation) == 0x0006A4, "Member 'AALSBaseCharacter::InAirRotation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, YawOffset) == 0x0006B0, "Member 'AALSBaseCharacter::YawOffset' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleParams) == 0x0006B8, "Member 'AALSBaseCharacter::MantleParams' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleLedgeLS) == 0x0006E0, "Member 'AALSBaseCharacter::MantleLedgeLS' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleTarget) == 0x000720, "Member 'AALSBaseCharacter::MantleTarget' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleActualStartOffset) == 0x000750, "Member 'AALSBaseCharacter::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MantleAnimatedStartOffset) == 0x000780, "Member 'AALSBaseCharacter::MantleAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bBreakfallOnLand) == 0x0007B0, "Member 'AALSBaseCharacter::bBreakfallOnLand' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, BreakfallOnLandVelocity) == 0x0007B4, "Member 'AALSBaseCharacter::BreakfallOnLandVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollOnLand) == 0x0007B8, "Member 'AALSBaseCharacter::bRagdollOnLand' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, RagdollOnLandVelocity) == 0x0007BC, "Member 'AALSBaseCharacter::RagdollOnLandVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollOnGround) == 0x0007C0, "Member 'AALSBaseCharacter::bRagdollOnGround' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, bRagdollFaceUp) == 0x0007C1, "Member 'AALSBaseCharacter::bRagdollFaceUp' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, LastRagdollVelocity) == 0x0007C4, "Member 'AALSBaseCharacter::LastRagdollVelocity' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, TargetRagdollLocation) == 0x0007D0, "Member 'AALSBaseCharacter::TargetRagdollLocation' has a wrong offset!");
static_assert(offsetof(AALSBaseCharacter, MainAnimInstance) == 0x0007F8, "Member 'AALSBaseCharacter::MainAnimInstance' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacter
// 0x0010 (0x0840 - 0x0830)
class AALSCharacter final : public AALSBaseCharacter
{
public:
	class USceneComponent*                        HeldObjectRoot;                                    // 0x0828(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0830(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0838(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool bLeftHand, const struct FVector& Offset);
	void ClearHeldObject();
	void UpdateHeldObject();
	void UpdateHeldObjectAnimations();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacter">();
	}
	static class AALSCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSCharacter>();
	}
};
static_assert(alignof(AALSCharacter) == 0x000010, "Wrong alignment on AALSCharacter");
static_assert(sizeof(AALSCharacter) == 0x000840, "Wrong size on AALSCharacter");
static_assert(offsetof(AALSCharacter, HeldObjectRoot) == 0x000828, "Member 'AALSCharacter::HeldObjectRoot' has a wrong offset!");
static_assert(offsetof(AALSCharacter, SkeletalMesh) == 0x000830, "Member 'AALSCharacter::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AALSCharacter, StaticMesh) == 0x000838, "Member 'AALSCharacter::StaticMesh' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacterAnimInstance
// 0x03D0 (0x0690 - 0x02C0)
#pragma pack(push, 0x1)
class alignas(0x10) UALSCharacterAnimInstance : public UAnimInstance
{
public:
	bool                                          bIsPlayer;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerAnimModifier;                                // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AALSBaseCharacter*                      Character;                                         // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FALSAnimCharacterInformation           CharacterInformation;                              // 0x02C8(0x0064)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimGraphGrounded                  Grounded;                                          // 0x032C(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimGraphInAir                     InAir;                                             // 0x0384(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimGraphAimingValues              AimingValues;                                      // 0x0394(0x003C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FlailRate;                                         // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FALSAnimGraphLayerBlending             LayerBlendingValues;                               // 0x03D4(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimGraphFootIK                    FootIKValues;                                      // 0x0434(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSAnimTurnInPlace                    TurnInPlaceValues;                                 // 0x04B0(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimRotateInPlace                  RotateInPlace;                                     // 0x05C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FALSAnimConfiguration                  Config;                                            // 0x05E0(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DiagonalScaleAmountCurve;                          // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            StrideBlend_N_Walk;                                // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            StrideBlend_N_Run;                                 // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            StrideBlend_C_Walk;                                // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            LandPredictionCurve;                               // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            LeanInAirCurve;                                    // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           YawOffset_FB;                                      // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           YawOffset_LR;                                      // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequenceBase*                      TransitionAnim_R;                                  // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequenceBase*                      TransitionAnim_L;                                  // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x20];                                     // 0x0668(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnJumped();
	void OnPivot();
	void PlayDynamicTransition(float ReTriggerDelay, const struct FALSDynamicMontageParams& Parameters);
	void PlayTransition(const struct FALSDynamicMontageParams& Parameters);
	void PlayTransitionChecked(const struct FALSDynamicMontageParams& Parameters);
	void SetGroundedEntryState(EALSGroundedEntryState GroundedEntryState);
	void SetOverlayOverrideState(int32 OverlayOverrideState);
	void SetTrackedHipsDirection(EALSHipsDirection HipsDirection);

	bool CanDynamicTransition() const;
	bool CanRotateInPlace() const;
	bool CanTurnInPlace() const;
	bool ShouldMoveCheck() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacterAnimInstance">();
	}
	static class UALSCharacterAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSCharacterAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(UALSCharacterAnimInstance) == 0x000010, "Wrong alignment on UALSCharacterAnimInstance");
static_assert(sizeof(UALSCharacterAnimInstance) == 0x000690, "Wrong size on UALSCharacterAnimInstance");
static_assert(offsetof(UALSCharacterAnimInstance, bIsPlayer) == 0x0002B8, "Member 'UALSCharacterAnimInstance::bIsPlayer' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, PlayerAnimModifier) == 0x0002BC, "Member 'UALSCharacterAnimInstance::PlayerAnimModifier' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Character) == 0x0002C0, "Member 'UALSCharacterAnimInstance::Character' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, CharacterInformation) == 0x0002C8, "Member 'UALSCharacterAnimInstance::CharacterInformation' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Grounded) == 0x00032C, "Member 'UALSCharacterAnimInstance::Grounded' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, InAir) == 0x000384, "Member 'UALSCharacterAnimInstance::InAir' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, AimingValues) == 0x000394, "Member 'UALSCharacterAnimInstance::AimingValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, FlailRate) == 0x0003D0, "Member 'UALSCharacterAnimInstance::FlailRate' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LayerBlendingValues) == 0x0003D4, "Member 'UALSCharacterAnimInstance::LayerBlendingValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, FootIKValues) == 0x000434, "Member 'UALSCharacterAnimInstance::FootIKValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TurnInPlaceValues) == 0x0004B0, "Member 'UALSCharacterAnimInstance::TurnInPlaceValues' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, RotateInPlace) == 0x0005C8, "Member 'UALSCharacterAnimInstance::RotateInPlace' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, Config) == 0x0005E0, "Member 'UALSCharacterAnimInstance::Config' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, DiagonalScaleAmountCurve) == 0x000618, "Member 'UALSCharacterAnimInstance::DiagonalScaleAmountCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_N_Walk) == 0x000620, "Member 'UALSCharacterAnimInstance::StrideBlend_N_Walk' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_N_Run) == 0x000628, "Member 'UALSCharacterAnimInstance::StrideBlend_N_Run' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, StrideBlend_C_Walk) == 0x000630, "Member 'UALSCharacterAnimInstance::StrideBlend_C_Walk' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LandPredictionCurve) == 0x000638, "Member 'UALSCharacterAnimInstance::LandPredictionCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, LeanInAirCurve) == 0x000640, "Member 'UALSCharacterAnimInstance::LeanInAirCurve' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, YawOffset_FB) == 0x000648, "Member 'UALSCharacterAnimInstance::YawOffset_FB' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, YawOffset_LR) == 0x000650, "Member 'UALSCharacterAnimInstance::YawOffset_LR' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TransitionAnim_R) == 0x000658, "Member 'UALSCharacterAnimInstance::TransitionAnim_R' has a wrong offset!");
static_assert(offsetof(UALSCharacterAnimInstance, TransitionAnim_L) == 0x000660, "Member 'UALSCharacterAnimInstance::TransitionAnim_L' has a wrong offset!");

// Class ALSV4_CPP.ALSCharacterMovementComponent
// 0x0020 (0x0B10 - 0x0AF0)
class UALSCharacterMovementComponent final : public UCharacterMovementComponent
{
public:
	uint8                                         Pad_AF0[0x20];                                     // 0x0AF0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Server_SetMaxWalkSpeedAndMaxAcceleration(const float NewMaxWalkSpeed, const float NewMaxAcceleration);
	void SetBrakingAndGroundFriction(float NewBraking, float NewGroundFriction);
	void SetMaxWalkSpeedAndMaxAcceleration(float NewMaxWalkSpeed, float NewMaxAcceleration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSCharacterMovementComponent">();
	}
	static class UALSCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSCharacterMovementComponent>();
	}
};
static_assert(alignof(UALSCharacterMovementComponent) == 0x000010, "Wrong alignment on UALSCharacterMovementComponent");
static_assert(sizeof(UALSCharacterMovementComponent) == 0x000B10, "Wrong size on UALSCharacterMovementComponent");

// Class ALSV4_CPP.ALSMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UALSMathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AngleInRange(float Angle, float MinAngle, float MaxAngle, float Buffer, bool IncreaseBuffer);
	static EALSMovementDirection CalculateQuadrant(EALSMovementDirection Current, float FRThreshold, float FLThreshold, float BRThreshold, float BLThreshold, float Buffer, float Angle);
	static bool CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, float HeightOffset, float RadiusOffset);
	static struct FVector GetCapsuleBaseLocation(float ZOffset, class UCapsuleComponent* Capsule);
	static struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, float ZOffset, class UCapsuleComponent* Capsule);
	static struct FTransform MantleComponentLocalToWorld(const struct FALSComponentAndTransform& CompAndTransform);
	static struct FTransform TransfromAdd(const struct FTransform& T1, const struct FTransform& T2);
	static struct FTransform TransfromSub(const struct FTransform& T1, const struct FTransform& T2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSMathLibrary">();
	}
	static class UALSMathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSMathLibrary>();
	}
};
static_assert(alignof(UALSMathLibrary) == 0x000008, "Wrong alignment on UALSMathLibrary");
static_assert(sizeof(UALSMathLibrary) == 0x000028, "Wrong size on UALSMathLibrary");

// Class ALSV4_CPP.ALSNotifyStateEarlyBlendOut
// 0x0018 (0x0048 - 0x0030)
class UALSNotifyStateEarlyBlendOut final : public UAnimNotifyState
{
public:
	class UAnimMontage*                           ThisMontage;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMovementState;                               // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementState                             MovementStateEquals;                               // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckStance;                                      // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSStance                                    StanceEquals;                                      // 0x003F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMovementInput;                               // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateEarlyBlendOut">();
	}
	static class UALSNotifyStateEarlyBlendOut* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateEarlyBlendOut>();
	}
};
static_assert(alignof(UALSNotifyStateEarlyBlendOut) == 0x000008, "Wrong alignment on UALSNotifyStateEarlyBlendOut");
static_assert(sizeof(UALSNotifyStateEarlyBlendOut) == 0x000048, "Wrong size on UALSNotifyStateEarlyBlendOut");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, ThisMontage) == 0x000030, "Member 'UALSNotifyStateEarlyBlendOut::ThisMontage' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, BlendOutTime) == 0x000038, "Member 'UALSNotifyStateEarlyBlendOut::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckMovementState) == 0x00003C, "Member 'UALSNotifyStateEarlyBlendOut::bCheckMovementState' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, MovementStateEquals) == 0x00003D, "Member 'UALSNotifyStateEarlyBlendOut::MovementStateEquals' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckStance) == 0x00003E, "Member 'UALSNotifyStateEarlyBlendOut::bCheckStance' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, StanceEquals) == 0x00003F, "Member 'UALSNotifyStateEarlyBlendOut::StanceEquals' has a wrong offset!");
static_assert(offsetof(UALSNotifyStateEarlyBlendOut, bCheckMovementInput) == 0x000040, "Member 'UALSNotifyStateEarlyBlendOut::bCheckMovementInput' has a wrong offset!");

// Class ALSV4_CPP.ALSNotifyStateMovementAction
// 0x0008 (0x0038 - 0x0030)
class UALSNotifyStateMovementAction final : public UAnimNotifyState
{
public:
	EALSMovementAction                            MovementAction;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateMovementAction">();
	}
	static class UALSNotifyStateMovementAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateMovementAction>();
	}
};
static_assert(alignof(UALSNotifyStateMovementAction) == 0x000008, "Wrong alignment on UALSNotifyStateMovementAction");
static_assert(sizeof(UALSNotifyStateMovementAction) == 0x000038, "Wrong size on UALSNotifyStateMovementAction");
static_assert(offsetof(UALSNotifyStateMovementAction, MovementAction) == 0x000030, "Member 'UALSNotifyStateMovementAction::MovementAction' has a wrong offset!");

// Class ALSV4_CPP.ALSNotifyStateOverlayOverride
// 0x0008 (0x0038 - 0x0030)
class UALSNotifyStateOverlayOverride final : public UAnimNotifyState
{
public:
	int32                                         OverlayOverrideState;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSNotifyStateOverlayOverride">();
	}
	static class UALSNotifyStateOverlayOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSNotifyStateOverlayOverride>();
	}
};
static_assert(alignof(UALSNotifyStateOverlayOverride) == 0x000008, "Wrong alignment on UALSNotifyStateOverlayOverride");
static_assert(sizeof(UALSNotifyStateOverlayOverride) == 0x000038, "Wrong size on UALSNotifyStateOverlayOverride");
static_assert(offsetof(UALSNotifyStateOverlayOverride, OverlayOverrideState) == 0x000030, "Member 'UALSNotifyStateOverlayOverride::OverlayOverrideState' has a wrong offset!");

// Class ALSV4_CPP.ALSPlayerCameraBehavior
// 0x0010 (0x02D0 - 0x02C0)
class UALSPlayerCameraBehavior final : public UAnimInstance
{
public:
	class AALSBaseCharacter*                      ControlledPawn;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EALSMovementState                             MovementState;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSMovementAction                            MovementAction;                                    // 0x02C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSRotationMode                              RotationMode;                                      // 0x02CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSGait                                      Gait;                                              // 0x02CB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSStance                                    Stance;                                            // 0x02CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EALSViewMode                                  ViewMode;                                          // 0x02CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRightShoulder;                                    // 0x02CE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CF[0x1];                                      // 0x02CF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerCameraBehavior">();
	}
	static class UALSPlayerCameraBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALSPlayerCameraBehavior>();
	}
};
static_assert(alignof(UALSPlayerCameraBehavior) == 0x000010, "Wrong alignment on UALSPlayerCameraBehavior");
static_assert(sizeof(UALSPlayerCameraBehavior) == 0x0002D0, "Wrong size on UALSPlayerCameraBehavior");
static_assert(offsetof(UALSPlayerCameraBehavior, ControlledPawn) == 0x0002B8, "Member 'UALSPlayerCameraBehavior::ControlledPawn' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, PlayerController) == 0x0002C0, "Member 'UALSPlayerCameraBehavior::PlayerController' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, MovementState) == 0x0002C8, "Member 'UALSPlayerCameraBehavior::MovementState' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, MovementAction) == 0x0002C9, "Member 'UALSPlayerCameraBehavior::MovementAction' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, RotationMode) == 0x0002CA, "Member 'UALSPlayerCameraBehavior::RotationMode' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, Gait) == 0x0002CB, "Member 'UALSPlayerCameraBehavior::Gait' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, Stance) == 0x0002CC, "Member 'UALSPlayerCameraBehavior::Stance' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, ViewMode) == 0x0002CD, "Member 'UALSPlayerCameraBehavior::ViewMode' has a wrong offset!");
static_assert(offsetof(UALSPlayerCameraBehavior, bRightShoulder) == 0x0002CE, "Member 'UALSPlayerCameraBehavior::bRightShoulder' has a wrong offset!");

// Class ALSV4_CPP.ALSPlayerCameraManager
// 0x00A0 (0x28B0 - 0x2810)
class AALSPlayerCameraManager final : public APlayerCameraManager
{
public:
	class AALSBaseCharacter*                      ControlledCharacter;                               // 0x2810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 CameraBehavior;                                    // 0x2818(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomTag;                                         // 0x2820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RootLocation;                                      // 0x2828(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2834[0xC];                                     // 0x2834(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SmoothedPivotTarget;                               // 0x2840(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                PivotLocation;                                     // 0x2870(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetCameraLocation;                              // 0x287C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               TargetCameraRotation;                              // 0x2888(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               DebugViewRotation;                                 // 0x2894(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                DebugViewOffset;                                   // 0x28A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28AC[0x4];                                     // 0x28AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector CalculateAxisIndependentLag(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, const struct FRotator& CameraRotation, const struct FVector& LagSpeeds, float DeltaTime);
	bool CustomCameraBehavior(float DeltaTime, struct FVector* Location, struct FRotator* Rotation, float* FOV);
	void DrawDebugTargets(const struct FVector& PivotTargetLocation);
	void OnPossess(class AALSBaseCharacter* NewCharacter);

	float GetCameraBehaviorParam(class FName CurveName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALSPlayerCameraManager">();
	}
	static class AALSPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALSPlayerCameraManager>();
	}
};
static_assert(alignof(AALSPlayerCameraManager) == 0x000010, "Wrong alignment on AALSPlayerCameraManager");
static_assert(sizeof(AALSPlayerCameraManager) == 0x0028B0, "Wrong size on AALSPlayerCameraManager");
static_assert(offsetof(AALSPlayerCameraManager, ControlledCharacter) == 0x002810, "Member 'AALSPlayerCameraManager::ControlledCharacter' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, CameraBehavior) == 0x002818, "Member 'AALSPlayerCameraManager::CameraBehavior' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, CustomTag) == 0x002820, "Member 'AALSPlayerCameraManager::CustomTag' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, RootLocation) == 0x002828, "Member 'AALSPlayerCameraManager::RootLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, SmoothedPivotTarget) == 0x002840, "Member 'AALSPlayerCameraManager::SmoothedPivotTarget' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, PivotLocation) == 0x002870, "Member 'AALSPlayerCameraManager::PivotLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, TargetCameraLocation) == 0x00287C, "Member 'AALSPlayerCameraManager::TargetCameraLocation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, TargetCameraRotation) == 0x002888, "Member 'AALSPlayerCameraManager::TargetCameraRotation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, DebugViewRotation) == 0x002894, "Member 'AALSPlayerCameraManager::DebugViewRotation' has a wrong offset!");
static_assert(offsetof(AALSPlayerCameraManager, DebugViewOffset) == 0x0028A0, "Member 'AALSPlayerCameraManager::DebugViewOffset' has a wrong offset!");

}

