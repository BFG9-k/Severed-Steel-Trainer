#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_PPT_ProjectilePathTracer

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPF_PPT_ProjectilePathTracer.BPF_PPT_ProjectilePathTracer_C
// 0x0000 (0x0028 - 0x0028)
class UBPF_PPT_ProjectilePathTracer_C final : public UBlueprintFunctionLibrary
{
public:
	static void Spawn_Trajectory_Beam_with_Points(int32 Divisions, float Beam_Size, const struct FLinearColor& Color, class UTexture* Beam_Point_Texture, class UTexture* Marker_Texture, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* MID_Array_Reference, TArray<class UParticleSystemComponent*>* Trajectory_Beam_Reference, class UParticleSystemComponent** TrajectoryMarker_Reference);
	static void Set_Trajectory_Beam_Color(TArray<class UMaterialInstanceDynamic*>& MID_Array_Reference, const struct FLinearColor& Color, class UObject* __WorldContext);
	static void Place_Trajectory_Beam(TArray<struct FVector>& Trajectory_Points, TArray<class UParticleSystemComponent*>& Trajectory_Beam_Reference, class UParticleSystemComponent* Trajectory_Marker_Reference, const struct FHitResult& Out_Hit, class UObject* __WorldContext);
	static void Set_Trajectory_Beam_Textures(TArray<class UMaterialInstanceDynamic*>& MID_Array_Reference, class UTexture* Beam_Point_Texture, class UTexture* Marker_Texture, class UObject* __WorldContext);
	static void Calculate_Line_Trajectory(float Duration, int32 Divisions, const struct FVector& Location, const struct FVector& Velocity, int32 Max_bounces, float Restitution, float Friction, float Gravity_Scale, TArray<EObjectTypeQuery>& Object_Type, bool Trace_Complex, TArray<class AActor*>& Actors_to_ignore, EDrawDebugTrace Draw_Debug_Type, bool Projectile_Movement, class UObject* __WorldContext, TArray<struct FVector>* Trajectory_Points, struct FHitResult* Out_Hit);
	static void Calculate_Sphere_Trajectory(float Duration, int32 Divisions, const struct FVector& Location, const struct FVector& Velocity, int32 Max_bounces, float Restitution, float Friction, float Gravity_Scale, TArray<EObjectTypeQuery>& Object_Type, bool Trace_Complex, TArray<class AActor*>& Actors_to_ignore, EDrawDebugTrace Draw_Debug_Type, float Radius, bool Projectile_Movement, class UObject* __WorldContext, TArray<struct FVector>* Trajectory_Points, struct FHitResult* Out_Hit);
	static void Calculate_Capsule_Trajectory(float Duration, int32 Divisions, const struct FVector& Location, const struct FVector& Velocity, int32 Max_bounces, float Restitution, float Friction, float Gravity_Scale, TArray<EObjectTypeQuery>& Object_Type, bool Trace_Complex, TArray<class AActor*>& Actors_to_ignore, EDrawDebugTrace Draw_Debug_Type, float Radius, float Half_Height, bool Projectile_Movement, class UObject* __WorldContext, TArray<struct FVector>* Trajectory_Points, struct FHitResult* Out_Hit);
	static void Calculate_Box_Trajectory(float Duration, int32 Divisions, const struct FVector& Location, const struct FVector& Velocity, int32 Max_bounces, float Restitution, float Friction, float Gravity_Scale, TArray<EObjectTypeQuery>& Object_Type, bool Trace_Complex, TArray<class AActor*>& Actors_to_ignore, EDrawDebugTrace Draw_Debug_Type, const struct FVector& Half_Size, const struct FRotator& Orientation, bool Projectile_Movement, class UObject* __WorldContext, TArray<struct FVector>* Trajectory_Points, struct FHitResult* Out_Hit);
	static void Spawn_Trajectory_Beam_Only(int32 Divisions, float Beam_Size, const struct FLinearColor& Color, class UTexture* Marker_Texture, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* MID_Array_Reference, TArray<class UParticleSystemComponent*>* Trajectory_Beam_Reference, class UParticleSystemComponent** TrajectoryMarker_Reference);
	static void Spawn_Trajectory_Points_Only(int32 Divisions, float Point_Size, const struct FLinearColor& Color, class UTexture* Point_Texture, class UTexture* Marker_Texture, bool Points_face_up, class UObject* __WorldContext, TArray<class UMaterialInstanceDynamic*>* MID_Array_Reference, TArray<class UParticleSystemComponent*>* Trajectory_Beam_Reference, class UParticleSystemComponent** TrajectoryMarker_Reference);
	static void Place_Trajectory_Points_Only(TArray<struct FVector>& Trajectory_Points, TArray<class UParticleSystemComponent*>& Trajectory_Beam_Reference, class UParticleSystemComponent* Trajectory_Marker_Reference, const struct FHitResult& Out_Hit, bool Points_face_up, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPF_PPT_ProjectilePathTracer_C">();
	}
	static class UBPF_PPT_ProjectilePathTracer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPF_PPT_ProjectilePathTracer_C>();
	}
};
static_assert(alignof(UBPF_PPT_ProjectilePathTracer_C) == 0x000008, "Wrong alignment on UBPF_PPT_ProjectilePathTracer_C");
static_assert(sizeof(UBPF_PPT_ProjectilePathTracer_C) == 0x000028, "Wrong size on UBPF_PPT_ProjectilePathTracer_C");

}

