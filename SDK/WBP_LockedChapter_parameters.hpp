#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LockedChapter

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_LockedChapter.WBP_LockedChapter_C.ExecuteUbergraph_WBP_LockedChapter
// 0x0020 (0x0020 - 0x0000)
struct WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0004(0x0008)(NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATYVCGameMode_BP_C*                     CallFunc_GetTYVCGameMode_NewParam;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter) == 0x000008, "Wrong alignment on WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter");
static_assert(sizeof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter) == 0x000020, "Wrong size on WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, EntryPoint) == 0x000000, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, K2Node_Event_InFocusEvent) == 0x000004, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, CallFunc_GetTYVCGameMode_NewParam) == 0x000010, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::CallFunc_GetTYVCGameMode_NewParam' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000019, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'WBP_LockedChapter_C_ExecuteUbergraph_WBP_LockedChapter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_LockedChapter.WBP_LockedChapter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_LockedChapter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LockedChapter_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_LockedChapter_C_PreConstruct");
static_assert(sizeof(WBP_LockedChapter_C_PreConstruct) == 0x000001, "Wrong size on WBP_LockedChapter_C_PreConstruct");
static_assert(offsetof(WBP_LockedChapter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_LockedChapter_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_LockedChapter.WBP_LockedChapter_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_LockedChapter_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_LockedChapter_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on WBP_LockedChapter_C_OnRemovedFromFocusPath");
static_assert(sizeof(WBP_LockedChapter_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on WBP_LockedChapter_C_OnRemovedFromFocusPath");
static_assert(offsetof(WBP_LockedChapter_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_LockedChapter_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_LockedChapter.WBP_LockedChapter_C.GetMyPicture
// 0x0018 (0x0018 - 0x0000)
struct WBP_LockedChapter_C_GetMyPicture final
{
public:
	class UTexture2D*                             NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_LockedChapter_C_GetMyPicture) == 0x000008, "Wrong alignment on WBP_LockedChapter_C_GetMyPicture");
static_assert(sizeof(WBP_LockedChapter_C_GetMyPicture) == 0x000018, "Wrong size on WBP_LockedChapter_C_GetMyPicture");
static_assert(offsetof(WBP_LockedChapter_C_GetMyPicture, NewParam) == 0x000000, "Member 'WBP_LockedChapter_C_GetMyPicture::NewParam' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_GetMyPicture, K2Node_DynamicCast_AsTexture_2D) == 0x000008, "Member 'WBP_LockedChapter_C_GetMyPicture::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_LockedChapter_C_GetMyPicture, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_LockedChapter_C_GetMyPicture::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

