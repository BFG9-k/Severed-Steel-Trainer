#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImpactManager_BP

#include "Basic.hpp"

#include "ImpactManager_BP_classes.hpp"
#include "ImpactManager_BP_parameters.hpp"


namespace SDK
{

// Function ImpactManager_BP.ImpactManager_BP_C.ExecuteUbergraph_ImpactManager_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AImpactManager_BP_C::ExecuteUbergraph_ImpactManager_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactManager_BP_C", "ExecuteUbergraph_ImpactManager_BP");

	Params::ImpactManager_BP_C_ExecuteUbergraph_ImpactManager_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ImpactManager_BP.ImpactManager_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AImpactManager_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactManager_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ImpactManager_BP.ImpactManager_BP_C.DoExplosionGraph
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AVoxelWorld*                      OnWorld                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    bPlayerMade                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   EditRadius                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AImpactManager_BP_C::DoExplosionGraph(class AVoxelWorld* OnWorld, const struct FVector& WorldLocation, const struct FRotator& Rotation, bool bPlayerMade, float EditRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactManager_BP_C", "DoExplosionGraph");

	Params::ImpactManager_BP_C_DoExplosionGraph Parms{};

	Parms.OnWorld = OnWorld;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Rotation = std::move(Rotation);
	Parms.bPlayerMade = bPlayerMade;
	Parms.EditRadius = EditRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ImpactManager_BP.ImpactManager_BP_C.AsyncExplosion
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FVector                          WorldPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AImpactManager_BP_C::AsyncExplosion(const struct FVector& WorldPosition, float Radius, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactManager_BP_C", "AsyncExplosion");

	Params::ImpactManager_BP_C_AsyncExplosion Parms{};

	Parms.WorldPosition = std::move(WorldPosition);
	Parms.Radius = Radius;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ImpactManager_BP.ImpactManager_BP_C.CalculateVoxelPhysics
// (Event, Public, BlueprintEvent)
// Parameters:
// class AVoxelWorld*                      VoxelWorld                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVoxelIntBox                     Box                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   MinWorlds                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCanShatter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AImpactManager_BP_C::CalculateVoxelPhysics(class AVoxelWorld* VoxelWorld, const struct FVoxelIntBox& Box, int32 MinWorlds, bool bCanShatter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpactManager_BP_C", "CalculateVoxelPhysics");

	Params::ImpactManager_BP_C_CalculateVoxelPhysics Parms{};

	Parms.VoxelWorld = VoxelWorld;
	Parms.Box = std::move(Box);
	Parms.MinWorlds = MinWorlds;
	Parms.bCanShatter = bCanShatter;

	UObject::ProcessEvent(Func, &Parms);
}

}

